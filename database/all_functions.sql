--pg_get_functiondef

CREATE OR REPLACE FUNCTION public.to_char(param integer)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
begin
	return to_char(param,'9999999999999');
end;
$function$;

CREATE OR REPLACE FUNCTION public.to_number(param integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
begin
	return param;
end;
$function$;

CREATE OR REPLACE FUNCTION public.to_number(param character varying)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
begin
	return to_number(param, '999999999');
end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_doc_factura_compra_get_cuenta_deudor(p_fc_id integer, OUT p_cue_id integer, OUT p_mon_id integer, OUT p_pago_automatico integer)
 RETURNS record
 LANGUAGE plpgsql
AS $function$
declare
   v_cue_deudoresXcpra integer;
begin

   v_cue_deudoresXcpra := 8;

   select c.cue_id, c.mon_id, case when FacturaCompra.opg_id is not null then 1 else 0 end
     into p_cue_id, p_mon_id, p_pago_automatico
   from AsientoItem
   join FacturaCompra
    on AsientoItem.as_id = FacturaCompra.as_id
   join Cuenta c
    on AsientoItem.cue_id = c.cue_id
   where asi_haber <> 0
     and c.cuec_id = v_cue_deudoresXcpra
     and fc_id = p_fc_id
   group by fc_id,c.cue_id,c.mon_id,FacturaCompra.opg_id;

end;
$function$;


CREATE OR REPLACE FUNCTION public.isnumeric(param integer)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
begin
	return -1;
end;
$function$;

CREATE OR REPLACE FUNCTION public.add_months(p_date timestamp with time zone, p_interval_val integer)
 RETURNS timestamp with time zone
 LANGUAGE plpgsql
AS $function$
BEGIN
    return (p_date + (p_interval_val * '1 month'::INTERVAL));
END;
$function$;

CREATE OR REPLACE FUNCTION public.charindex(text, text, integer)
 RETURNS integer
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ 
        SELECT CASE WHEN strpos(substr($2, $3+1), $1) = 0 THEN 0 ELSE strpos(substr($2, $3+1), $1) + $3
END;
$function$;

CREATE OR REPLACE FUNCTION public.dateadd(p_interval character varying, p_interval_val integer, p_date timestamp with time zone)
 RETURNS timestamp with time zone
 LANGUAGE plpgsql
AS $function$
DECLARE
    v_ucase_interval varchar(10);
    v_date timestamp with time zone;
BEGIN
    v_date := p_date;
    v_ucase_interval := UPPER(p_interval);
      
    IF v_ucase_interval IN ('YEAR', 'YY', 'YYYY') 
    THEN
      RETURN add_months(v_date, p_interval_val * 12);
      
    ELSIF v_ucase_interval IN ('QUARTER', 'QQ', 'Q') 
    THEN
      RETURN add_months(v_date, p_interval_val * 3);
      
    ELSIF v_ucase_interval IN ('MONTH', 'MM', 'M') 
    THEN
      RETURN add_months(v_date, p_interval_val);
      
    ElSIF v_ucase_interval IN ('DAYOFYEAR', 'DY', 'Y', 'DAY', 'DD', 'D', 'WEEKDAY', 'DW', 'W') 
    THEN
      RETURN v_date + (p_interval_val * '1 day'::interval);
      
    ElSIF v_ucase_interval IN ('WEEK', 'WK', 'WW') 
    THEN
      RETURN v_date + (p_interval_val * 7 * '1 day'::interval);
      
    ElSIF v_ucase_interval IN ('HOUR', 'HH') 
    THEN
      RETURN v_date + (p_interval_val * '1 hour'::interval);
      
    ElSIF v_ucase_interval IN ('MINUTE', 'MI', 'N') 
    THEN
      RETURN v_date + (p_interval_val * '1 minute'::interval);
      
    ElSIF v_ucase_interval IN ('SECOND', 'SS', 'S') 
    THEN
      RETURN v_date + (p_interval_val * '1 second'::interval);
      
    ElSIF v_ucase_interval IN ('MILLISECOND', 'MS') 
    THEN
      RETURN v_date + (p_interval_val * '1 millisecond'::interval);
      
    ELSE
      RETURN NULL;
    END IF;
END;
$function$;

CREATE OR REPLACE FUNCTION public.dc_csc_aud_0010(p_us_id integer, OUT rtn refcursor)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
declare
begin

   rtn := 'rtn';

   open rtn for
      select as_id comp_id,
             doct_id doct_id,
             as_fecha Fecha,
             as_nrodoc Comprobante
        from Asiento
         where as_fecha > CURRENT_TIMESTAMP
      union all
      select os_id comp_id,
             doct_id doct_id,
             os_fecha Fecha,
             os_nrodoc Comprobante
        from OrdenServicio
         where os_fecha > CURRENT_TIMESTAMP
                 and est_id <> 7
      union all
      select rv_id comp_id,
             doct_id doct_id,
             rv_fecha Fecha,
             rv_nrodoc Comprobante
        from RemitoVenta
         where rv_fecha > CURRENT_TIMESTAMP
                 and est_id <> 7
      union all
      select fv_id comp_id,
             doct_id doct_id,
             fv_fecha Fecha,
             fv_nrodoc Comprobante
        from FacturaVenta
         where fv_fecha > CURRENT_TIMESTAMP
                 and est_id <> 7
      union all
      select pv_id comp_id,
             doct_id doct_id,
             pv_fecha Fecha,
             pv_nrodoc Comprobante
        from PedidoVenta
         where pv_fecha > CURRENT_TIMESTAMP
                 and est_id <> 7
      union all
      select cobz_id comp_id,
             doct_id doct_id,
             cobz_fecha Fecha,
             cobz_nrodoc Comprobante
        from Cobranza
         where cobz_fecha > CURRENT_TIMESTAMP
                 and est_id <> 7
      union all
      select opg_id comp_id,
             doct_id doct_id,
             opg_fecha Fecha,
             opg_nrodoc Comprobante
        from OrdenPago
         where opg_fecha > CURRENT_TIMESTAMP
                 and est_id <> 7
      union all
      select rc_id comp_id,
             doct_id doct_id,
             rc_fecha Fecha,
             rc_nrodoc Comprobante
        from RemitoCompra
         where rc_fecha > CURRENT_TIMESTAMP
                 and est_id <> 7
      union all
      select fc_id comp_id,
             doct_id doct_id,
             fc_fecha Fecha,
             fc_nrodoc Comprobante
        from FacturaCompra
         where fc_fecha > CURRENT_TIMESTAMP
                 and est_id <> 7
      union all
      select pc_id comp_id,
             doct_id doct_id,
             pc_fecha Fecha,
             pc_nrodoc Comprobante
        from PedidoCompra
         where pc_fecha > CURRENT_TIMESTAMP
                 and est_id <> 7
      union all
      select oc_id comp_id,
             doct_id doct_id,
             oc_fecha Fecha,
             oc_nrodoc Comprobante
        from OrdenCompra
         where oc_fecha > CURRENT_TIMESTAMP
                 and est_id <> 7
      union all
      select mf_id comp_id,
             doct_id doct_id,
             mf_fecha Fecha,
             mf_nrodoc Comprobante
        from MovimientoFondo
         where mf_fecha > CURRENT_TIMESTAMP
                 and est_id <> 7
      union all
      select dbco_id comp_id,
             doct_id doct_id,
             dbco_fecha Fecha,
             dbco_nrodoc Comprobante
        from DepositoBanco
         where dbco_fecha > CURRENT_TIMESTAMP
                 and est_id <> 7
      union all
      select rs_id comp_id,
             doct_id doct_id,
             rs_fecha Fecha,
             rs_nrodoc Comprobante
        from RecuentoStock
         where rs_fecha > CURRENT_TIMESTAMP
      union all
      select ppk_id comp_id,
             doct_id doct_id,
             ppk_fecha Fecha,
             ppk_nrodoc Comprobante
        from ParteProdKit
         where ppk_fecha > CURRENT_TIMESTAMP
      union all
      select st_id comp_id,
             doct_id doct_id,
             st_fecha Fecha,
             st_nrodoc Comprobante
        from Stock
         where st_fecha > CURRENT_TIMESTAMP
      union all
      select dcup_id comp_id,
             doct_id doct_id,
             dcup_fecha Fecha,
             dcup_nrodoc Comprobante
        from DepositoCupon
         where dcup_fecha > CURRENT_TIMESTAMP
                 and est_id <> 7
      union all
      select rcup_id comp_id,
             doct_id doct_id,
             rcup_fecha Fecha,
             rcup_nrodoc Comprobante
        from ResolucionCupon
         where rcup_fecha > CURRENT_TIMESTAMP
                 and est_id <> 7
      union all
      select stcli_id comp_id,
             doct_id doct_id,
             stcli_fecha Fecha,
             stcli_nrodoc Comprobante
        from StockCliente
         where stcli_fecha > CURRENT_TIMESTAMP
      union all
      select stprov_id comp_id,
             doct_id doct_id,
             stprov_fecha Fecha,
             stprov_nrodoc Comprobante
        from StockProveedor
         where stprov_fecha > CURRENT_TIMESTAMP;

end;
$function$;

CREATE OR REPLACE FUNCTION public.dc_csc_com_0010(p_us_id integer, p_fini date, p_ffin date, p_prov_id character varying, p_suc_id character varying, p_cue_id character varying, p_cico_id character varying, p_solodeudores smallint, p_emp_id character varying, p_ntipo smallint, p_conremito smallint, p_saldominimo smallint, OUT rtn refcursor)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
declare
   v_prov_id integer;
   v_suc_id integer;
   v_cue_id integer;
   v_cico_id integer;
   v_emp_id integer;
   v_ram_id_proveedor integer;
   v_ram_id_sucursal integer;
   v_ram_id_cuenta integer;
   v_ram_id_circuitoContable integer;
   v_ram_id_empresa integer;
   v_clienteID integer;
   v_IsRaiz smallint;
   v_cta_acreedor numeric(3,0);
   v_cta_acreedoropg numeric(3,0);
begin

   rtn = 'rtn';
   
        create temporary table tt_dc_csc_com_0010
        (
          prov_id integer  not null,
          cue_id integer  ,
          emp_id integer  not null,
          suc_id integer  not null,
          neto decimal(18,6) 
           default (0) not null ,
          descuento decimal(18,6) 
           default (0) not null ,
          subtotal decimal(18,6) 
           default (0) not null ,
          iva decimal(18,6) 
           default (0) not null ,
          total decimal(18,6) 
           default (0) not null ,
          pago decimal(18,6) 
           default (0) not null ,
          pendiente decimal(18,6)  not null
        ) on commit drop;

   select sp_ArbConvertId(p_prov_id) into v_prov_id, v_ram_id_proveedor;
/*
   select sp_ArbConvertId(p_suc_id) into v_suc_id, v_ram_id_sucursal;

   select sp_ArbConvertId(p_cue_id) into v_cue_id, v_ram_id_cuenta;

   select sp_ArbConvertId(p_cico_id) into v_cico_id, v_ram_id_circuitoContable;

   select sp_ArbConvertId(p_emp_id) into v_emp_id, v_ram_id_empresa;

   select sp_GetRptId(v_clienteID);

   if v_ram_id_proveedor <> 0 then
   begin
      --	exec sp_ArbGetGroups @ram_id_Proveedor, @clienteID, @@us_id
      select sp_ArbIsRaiz(v_ram_id_proveedor) into v_IsRaiz;

      if v_IsRaiz = 0 then
      begin
         select sp_ArbGetAllHojas(v_ram_id_proveedor,
                           v_clienteID);

      end;
      else
         v_ram_id_proveedor := 0;

      end if;

   end;
   end if;

   if v_ram_id_sucursal <> 0 then
   begin
      --	exec sp_ArbGetGroups @ram_id_Sucursal, @clienteID, @@us_id
      select sp_ArbIsRaiz(v_ram_id_sucursal) into v_IsRaiz;

      if v_IsRaiz = 0 then
      begin
         select sp_ArbGetAllHojas(v_ram_id_sucursal,
                           v_clienteID);

      end;
      else
         v_ram_id_sucursal := 0;

      end if;

   end;
   end if;

   if v_ram_id_cuenta <> 0 then
   begin
      --	exec sp_ArbGetGroups @ram_id_Cuenta, @clienteID, @@us_id
      select sp_ArbIsRaiz(v_ram_id_cuenta) into v_IsRaiz;

      if v_IsRaiz = 0 then
      begin
         select sp_ArbGetAllHojas(v_ram_id_cuenta,
                           v_clienteID);

      end;
      else
         v_ram_id_cuenta := 0;

      end if;

   end;
   end if;

   if v_ram_id_circuitoContable <> 0 then
   begin
      --	exec sp_ArbGetGroups @ram_id_circuitocontable, @clienteID, @@us_id
      select sp_ArbIsRaiz(v_ram_id_circuitoContable) into v_IsRaiz;

      if v_IsRaiz = 0 then
      begin
         select sp_ArbGetAllHojas(v_ram_id_circuitoContable,
                           v_clienteID);

      end;
      else
         v_ram_id_circuitoContable := 0;

      end if;

   end;
   end if;

   if v_ram_id_empresa <> 0 then
   begin
      --	exec sp_ArbGetGroups @ram_id_Empresa, @clienteID, @@us_id
      select sp_ArbIsRaiz(v_ram_id_empresa) into v_IsRaiz;

      if v_IsRaiz = 0 then
      begin
         select sp_ArbGetAllHojas(v_ram_id_empresa,
                           v_clienteID);

      end;
      else
         v_ram_id_empresa := 0;

      end if;

   end;
   end if;

   v_cta_acreedor := 2;

   v_cta_acreedoropg := 5;

   --/////////////////////////////////////////////////////////////////////////
   --
   --	Saldos Iniciales
   --
   --/////////////////////////////////////////////////////////////////////////
   

   --//////////////////////////////////////////
   -- Ordenes de Pago
   --//////////////////////////////////////////
   insert into tt_dc_csc_com_0010
     ( prov_id, cue_id, emp_id, suc_id, pago, pendiente )
     ( select opg.prov_id,
              ( select min(cue_id)
                from OrdenPagoItem
                   where opg_id = opg.opg_id
                           and opgi_tipo = 5 ),
              doc.emp_id,
              opg.suc_id,
              opg.opg_total,
              case
                   when p_nTipo = 0 then -opg.opg_pendiente
              else -opg.opg_total - coalesce(( select SUM(fcopg.fcopg_importe)
                                          from FacturaCompraOrdenPago fcopg
                                                 join FacturaCompra fc
                                                  on fcopg.fc_id = fc.fc_id
                                                 join Documento doc
                                                  on fc.doc_id = doc.doc_id
                                             where fcopg.opg_id = opg.opg_id
                                                     and fc.est_id <> 7
                                                     and ( doc.cico_id = v_cico_id
                                                     or v_cico_id = 0 )
                                                     and ( doc.emp_id = v_emp_id
                                                     or v_emp_id = 0 )
                                                     and ( ( fc.fc_fecha <= p_Fini
                                                     and p_nTipo <> 3 )
                                                     or ( fc.fc_fecha <= p_Ffin
                                                     and p_nTipo = 3 ) ) ), 0)
                 end col
       from OrdenPago opg
              join Documento doc
               on opg.doc_id = doc.doc_id
          where ( ( opg.opg_fecha < p_Fini
                  and p_nTipo = 0 )
                  or ( opg.opg_fecha <= p_Fini
                  and p_nTipo in ( 1,2 ) )
                  or ( opg.opg_fecha >= p_Fini
                  and opg.opg_fecha <= p_Ffin
                  and p_nTipo = 3 ) )
                  and opg.est_id <> 7
                  and ( exists ( select *
                                      from EmpresaUsuario
                                         where emp_id = doc.emp_id
                                                 and us_id = p_us_id )
                  or ( p_us_id = 1 ) )
/ * -///////////////////////////////////////////////////////////////////////
		
		INICIO SEGUNDA PARTE DE ARBOLES
		
/////////////////////////////////////////////////////////////////////// * /
                  and ( opg.prov_id = v_prov_id
                  or v_prov_id = 0 )
                  and ( opg.suc_id = v_suc_id
                  or v_suc_id = 0 )
                  and ( doc.cico_id = v_cico_id
                  or v_cico_id = 0 )
                  and ( exists ( select *
                                 from OrdenPagoItem
                                    where opg_id = opg.opg_id
                                            and opgi_tipo = v_cta_acreedoropg
                                            and cue_id = v_cue_id )
                  or v_cue_id = 0 )
                  and ( doc.emp_id = v_emp_id
                  or v_emp_id = 0 )
                  -- Arboles
                  and ( ( exists ( select rptarb_hojaid
                                   from rptArbolRamaHoja
                                      where rptarb_cliente = v_clienteID
                                              and tbl_id = 29
                                              and rptarb_hojaid = opg.prov_id ) )
                  or ( v_ram_id_proveedor = 0 ) )
                  and ( ( exists ( select rptarb_hojaid
                                   from rptArbolRamaHoja
                                      where rptarb_cliente = v_clienteID
                                              and tbl_id = 1007
                                              and rptarb_hojaid = opg.suc_id ) )
                  or ( v_ram_id_sucursal = 0 ) )
                  and ( ( exists ( select rptarb_hojaid
                                   from rptArbolRamaHoja
                                      where rptarb_cliente = v_clienteID
                                              and tbl_id = 17
                                              and ( exists ( select *
                                                             from OrdenPagoItem
                                                                where opg_id = opg.opg_id
                                                                        and opgi_tipo = v_cta_acreedoropg
                                                                        and cue_id = rptarb_hojaid ) ) ) )
                  or ( v_ram_id_cuenta = 0 ) )
                  and ( ( exists ( select rptarb_hojaid
                                   from rptArbolRamaHoja
                                      where rptarb_cliente = v_clienteID
                                              and tbl_id = 1016
                                              and rptarb_hojaid = doc.cico_id ) )
                  or ( v_ram_id_circuitoContable = 0 ) )
                  and ( ( exists ( select rptarb_hojaid
                                   from rptArbolRamaHoja
                                      where rptarb_cliente = v_clienteID
                                              and tbl_id = 1018
                                              and rptarb_hojaid = doc.emp_id ) )
                  or ( v_ram_id_empresa = 0 ) ) );

   --//////////////////////////////////////////
   -- Facturas y Notas de Credito
   --//////////////////////////////////////////
   insert into tt_dc_csc_com_0010
     ( prov_id, cue_id, emp_id, suc_id, neto, descuento, subtotal, iva, total, pago, pendiente )
     ( select fc.prov_id,
              ai.cue_id,
              doc.emp_id,
              fc.suc_id,
              case fc.doct_id
                             when 8 then -fc.fc_neto
              else fc.fc_neto
                 end Neto,
              case fc.doct_id
                             when 8 then -coalesce(fc.fc_importedesc1, 0) + coalesce(fc.fc_importedesc2, 0)
              else coalesce(fc.fc_importedesc1, 0) + coalesce(fc.fc_importedesc2, 0)
                 end Descuento,
              case fc.doct_id
                             when 8 then -fc.fc_subtotal
              else fc.fc_subtotal
                 end Sub_Total,
              case fc.doct_id
                             when 8 then -coalesce(fc.fc_ivari, 0) + coalesce(fc.fc_ivarni, 0)
              else coalesce(fc.fc_ivari, 0) + coalesce(fc.fc_ivarni, 0)
                 end Iva,
              case fc.doct_id
                             when 8 then -fc.fc_total
              else fc.fc_total
                 end Total,
              case
                   when fc.fc_totalcomercial = 0
                     and fc.fc_fechavto < CURRENT_TIMESTAMP
                     and fc.fc_fechavto < p_Ffin
                     and fc.doct_id = 8 then -fc.fc_total
                   when fc.fc_totalcomercial = 0
                     and fc.fc_fechavto < CURRENT_TIMESTAMP
                     and fc.fc_fechavto < p_Ffin
                     and fc.doct_id <> 8 then fc.fc_total
              else 0
                 end Pagos,
              case
                   when p_nTipo = 0
                     and fc.doct_id = 8 then -fc.fc_pendiente
                   when p_nTipo = 0 then fc.fc_pendiente
                   when fc.doct_id = 8 then -fc.fc_total - coalesce(( select SUM(fcnc.fcnc_importe)
                                                                 from FacturaCompraNotaCredito fcnc
                                                                        join FacturaCompra fc2
                                                                         on fcnc.fc_id_factura = fc2.fc_id
                                                                        join Documento doc
                                                                         on fc2.doc_id = doc.doc_id
                                                                    where fcnc.fc_id_notacredito = fc.fc_id
                                                                            and fc2.est_id <> 7
                                                                            and ( doc.cico_id = v_cico_id
                                                                            or v_cico_id = 0 )
                                                                            and ( doc.emp_id = v_emp_id
                                                                            or v_emp_id = 0 )
                                                                            and ( ( fc2.fc_fecha <= p_Fini
                                                                            and p_nTipo <> 3 )
                                                                            or ( fc2.fc_fecha <= p_Ffin
                                                                            and p_nTipo = 3 ) ) ), 0)
              else (fc.fc_total - coalesce(( select SUM(fcnc.fcnc_importe)
                                        from FacturaCompraNotaCredito fcnc
                                               join FacturaCompra nc
                                                on fcnc.fc_id_notacredito = nc.fc_id
                                               join Documento doc
                                                on nc.doc_id = doc.doc_id
                                           where fcnc.fc_id_factura = fc.fc_id
                                                   and nc.est_id <> 7
                                                   and ( doc.cico_id = v_cico_id
                                                   or v_cico_id = 0 )
                                                   and ( doc.emp_id = v_emp_id
                                                   or v_emp_id = 0 )
                                                   and ( ( nc.fc_fecha <= p_Fini
                                                   and p_nTipo <> 3 )
                                                   or ( nc.fc_fecha <= p_Ffin
                                                   and p_nTipo = 3 ) ) ), 0) - coalesce(( select SUM(fcopg.fcopg_importe)
                                                                                      from FacturaCompraOrdenPago fcopg
                                                                                             join OrdenPago opg
                                                                                              on fcopg.opg_id = opg.opg_id
                                                                                             join Documento doc
                                                                                              on opg.doc_id = doc.doc_id
                                                                                         where fcopg.fc_id = fc.fc_id
                                                                                                 and opg.est_id <> 7
                                                                                                 and ( doc.cico_id = v_cico_id
                                                                                                 or v_cico_id = 0 )
                                                                                                 and ( opg.emp_id = v_emp_id
                                                                                                 or v_emp_id = 0 )
                                                                                                 and ( ( opg.opg_fecha <= p_Fini
                                                                                                 and p_nTipo <> 3 )
                                                                                                 or ( opg.opg_fecha <= p_Ffin
                                                                                                 and p_nTipo = 3 ) ) ), 0))
                 end Pendiente
       from FacturaCompra fc
              join Documento doc
               on fc.doc_id = doc.doc_id
              left join AsientoItem ai
               on fc.as_id = ai.as_id
              and ai.asi_tipo = v_cta_acreedor
          where ( ( fc.fc_fecha < p_Fini
                  and p_nTipo = 0 )
                  or ( fc.fc_fecha <= p_Fini
                  and p_nTipo in ( 1,2 ) )
                  or ( fc.fc_fecha >= p_Fini
                  and fc.fc_fecha <= p_Ffin
                  and p_nTipo = 3 ) )
                  and fc.est_id <> 7
                  and fc.fc_totalcomercial <> 0
                  and ( exists ( select *
                                      from EmpresaUsuario
                                         where emp_id = doc.emp_id
                                                 and us_id = p_us_id )
                  or ( p_us_id = 1 ) )
/ * -///////////////////////////////////////////////////////////////////////
		
		INICIO SEGUNDA PARTE DE ARBOLES
		
/////////////////////////////////////////////////////////////////////// * /
                  and ( fc.prov_id = v_prov_id
                  or v_prov_id = 0 )
                  and ( fc.suc_id = v_suc_id
                  or v_suc_id = 0 )
                  and ( ai.cue_id = v_cue_id
                  or v_cue_id = 0 )
                  and ( doc.cico_id = v_cico_id
                  or v_cico_id = 0 )
                  and ( doc.emp_id = v_emp_id
                  or v_emp_id = 0 )
                  -- Arboles
                  and ( ( exists ( select rptarb_hojaid
                                   from rptArbolRamaHoja
                                      where rptarb_cliente = v_clienteID
                                              and tbl_id = 29
                                              and rptarb_hojaid = fc.prov_id ) )
                  or ( v_ram_id_proveedor = 0 ) )
                  and ( ( exists ( select rptarb_hojaid
                                   from rptArbolRamaHoja
                                      where rptarb_cliente = v_clienteID
                                              and tbl_id = 1007
                                              and rptarb_hojaid = fc.suc_id ) )
                  or ( v_ram_id_sucursal = 0 ) )
                  and ( ( exists ( select rptarb_hojaid
                                   from rptArbolRamaHoja
                                      where rptarb_cliente = v_clienteID
                                              and tbl_id = 17
                                              and rptarb_hojaid = ai.cue_id ) )
                  or ( v_ram_id_cuenta = 0 ) )
                  and ( ( exists ( select rptarb_hojaid
                                   from rptArbolRamaHoja
                                      where rptarb_cliente = v_clienteID
                                              and tbl_id = 1016
                                              and rptarb_hojaid = doc.cico_id ) )
                  or ( v_ram_id_circuitoContable = 0 ) )
                  and ( ( exists ( select rptarb_hojaid
                                   from rptArbolRamaHoja
                                      where rptarb_cliente = v_clienteID
                                              and tbl_id = 1018
                                              and rptarb_hojaid = doc.emp_id ) )
                  or ( v_ram_id_empresa = 0 ) ) );

   insert into tt_dc_csc_com_0010
     ( prov_id, cue_id, emp_id, suc_id, neto, descuento, subtotal, iva, total, pago, pendiente )
     ( select fc.prov_id,
              ai.cue_id,
              doc.emp_id,
              fc.suc_id,
              case fc.doct_id
                             when 8 then -fc.fc_neto
              else fc.fc_neto
                 end Neto,
              case fc.doct_id
                             when 8 then -coalesce(fc.fc_importedesc1, 0) + coalesce(fc.fc_importedesc2, 0)
              else coalesce(fc.fc_importedesc1, 0) + coalesce(fc.fc_importedesc2, 0)
                 end Descuento,
              case fc.doct_id
                             when 8 then -fc.fc_subtotal
              else fc.fc_subtotal
                 end Sub_Total,
              case fc.doct_id
                             when 8 then -coalesce(fc.fc_ivari, 0) + coalesce(fc.fc_ivarni, 0)
              else coalesce(fc.fc_ivari, 0) + coalesce(fc.fc_ivarni, 0)
                 end Iva,
              case fc.doct_id
                             when 8 then -fc.fc_total
              else fc.fc_total
                 end Total,
              case
                   when fc.fc_totalcomercial = 0
                     and fc.fc_fechavto < CURRENT_TIMESTAMP
                     and fc.fc_fechavto < p_Ffin
                     and fc.doct_id = 8 then -fc.fc_total
                   when fc.fc_totalcomercial = 0
                     and fc.fc_fechavto < CURRENT_TIMESTAMP
                     and fc.fc_fechavto < p_Ffin
                     and fc.doct_id <> 8 then fc.fc_total
              else 0
                 end Pagos,
              case
                   when fc.fc_totalcomercial = 0
                     and fc.fc_fechavto < CURRENT_TIMESTAMP
                     and fc.fc_fechavto < p_Ffin then 0
                   when fc.fc_totalcomercial = 0
                     and ( fc.fc_fechavto >= CURRENT_TIMESTAMP
                     or fc.fc_fechavto >= p_Ffin )
                     and fc.doct_id = 8 then -fc.fc_total
                   when fc.fc_totalcomercial = 0
                     and ( fc.fc_fechavto >= CURRENT_TIMESTAMP
                     or fc.fc_fechavto >= p_Ffin )
                     and fc.doct_id <> 8 then fc.fc_total   end Pendiente
       from FacturaCompra fc
              join Documento doc
               on fc.doc_id = doc.doc_id
              left join AsientoItem ai
               on fc.as_id = ai.as_id
              and ai.asi_tipo = v_cta_acreedor
          where ( ( fc.fc_fecha < p_Fini
                  and p_nTipo = 0 )
                  or ( fc.fc_fecha <= p_Fini
                  and p_nTipo in ( 1,2 ) )
                  or ( fc.fc_fecha >= p_Fini
                  and fc.fc_fecha <= p_Ffin
                  and p_nTipo = 3 ) )
                  and fc.est_id <> 7
                  and fc.fc_totalcomercial = 0
                  and (CASE
                                 when fc.fc_totalcomercial = 0
                                   and fc.fc_fechavto < CURRENT_TIMESTAMP
                                   and fc.fc_fechavto < p_Ffin then 0
                                 / * aca no importa si es fc o nc, sino que sea <> 0 * /
                                 when fc.fc_totalcomercial = 0
                                   and ( fc.fc_fechavto >= CURRENT_TIMESTAMP
                                   or fc.fc_fechavto >= p_Ffin ) then -fc.fc_total   end) <> 0
                  and ( exists ( select *
                                      from EmpresaUsuario
                                         where emp_id = doc.emp_id
                                                 and us_id = p_us_id )
                  or ( p_us_id = 1 ) )
/ * -///////////////////////////////////////////////////////////////////////
		
		INICIO SEGUNDA PARTE DE ARBOLES
		
/////////////////////////////////////////////////////////////////////// * /
                  and ( fc.prov_id = v_prov_id
                  or v_prov_id = 0 )
                  and ( fc.suc_id = v_suc_id
                  or v_suc_id = 0 )
                  and ( ai.cue_id = v_cue_id
                  or v_cue_id = 0 )
                  and ( doc.cico_id = v_cico_id
                  or v_cico_id = 0 )
                  and ( doc.emp_id = v_emp_id
                  or v_emp_id = 0 )
                  -- Arboles
                  and ( ( exists ( select rptarb_hojaid
                                   from rptArbolRamaHoja
                                      where rptarb_cliente = v_clienteID
                                              and tbl_id = 29
                                              and rptarb_hojaid = fc.prov_id ) )
                  or ( v_ram_id_proveedor = 0 ) )
                  and ( ( exists ( select rptarb_hojaid
                                   from rptArbolRamaHoja
                                      where rptarb_cliente = v_clienteID
                                              and tbl_id = 1007
                                              and rptarb_hojaid = fc.suc_id ) )
                  or ( v_ram_id_sucursal = 0 ) )
                  and ( ( exists ( select rptarb_hojaid
                                   from rptArbolRamaHoja
                                      where rptarb_cliente = v_clienteID
                                              and tbl_id = 17
                                              and rptarb_hojaid = ai.cue_id ) )
                  or ( v_ram_id_cuenta = 0 ) )
                  and ( ( exists ( select rptarb_hojaid
                                   from rptArbolRamaHoja
                                      where rptarb_cliente = v_clienteID
                                              and tbl_id = 1016
                                              and rptarb_hojaid = doc.cico_id ) )
                  or ( v_ram_id_circuitoContable = 0 ) )
                  and ( ( exists ( select rptarb_hojaid
                                   from rptArbolRamaHoja
                                      where rptarb_cliente = v_clienteID
                                              and tbl_id = 1018
                                              and rptarb_hojaid = doc.emp_id ) )
                  or ( v_ram_id_empresa = 0 ) ) );

   if p_conRemito <> 0 then
   begin
      -- Remitos
      --
      insert into tt_dc_csc_com_0010
        ( prov_id, cue_id, emp_id, suc_id, neto, descuento, subtotal, iva, total, pago, pendiente )
        ( select rc.prov_id,
                 null,
                 doc.emp_id,
                 rc.suc_id,
                 case rc.doct_id
                                when 25 then -rc.rc_neto
                 else rc.rc_neto
                    end Neto,
                 case rc.doct_id
                                when 25 then -coalesce(rc.rc_importedesc1, 0) + coalesce(rc.rc_importedesc2, 0)
                 else coalesce(rc.rc_importedesc1, 0) + coalesce(rc.rc_importedesc2, 0)
                    end Descuento,
                 case rc.doct_id
                                when 25 then -rc.rc_subtotal
                 else rc.rc_subtotal
                    end Sub_Total,
                 case rc.doct_id
                                when 25 then -coalesce(rc.rc_ivari, 0) + coalesce(rc.rc_ivarni, 0)
                 else coalesce(rc.rc_ivari, 0) + coalesce(rc.rc_ivarni, 0)
                    end Iva,
                 case rc.doct_id
                                when 25 then -rc.rc_total
                 else rc.rc_total
                    end Total,
                 0 Pagos,
                 case rc.doct_id
                                when 25 then -rc.rc_pendiente
                 else rc.rc_pendiente
                    end Pendiente
          from RemitoCompra rc
                 join Documento doc
                  on rc.doc_id = doc.doc_id
                 and p_conRemito <> 0
             where ( ( rc.rc_fecha < p_Fini
                     and p_nTipo = 0 )
                     or ( rc.rc_fecha <= p_Fini
                     and p_nTipo in ( 1,2 ) )
                     or ( rc.rc_fecha >= p_Fini
                     and rc.rc_fecha <= p_Ffin
                     and p_nTipo = 3 ) )
                     and rc.est_id <> 7
                     and p_conRemito <> 0
                     and ( exists ( select *
                                         from EmpresaUsuario
                                            where emp_id = doc.emp_id
                                                    and us_id = p_us_id )
                     or ( p_us_id = 1 ) )
/ * -///////////////////////////////////////////////////////////////////////
			
			INICIO SEGUNDA PARTE DE ARBOLES
			
/////////////////////////////////////////////////////////////////////// * /
                     and ( rc.prov_id = v_prov_id
                     or v_prov_id = 0 )
                     and ( rc.suc_id = v_suc_id
                     or v_suc_id = 0 )
                     and ( doc.cico_id = v_cico_id
                     or v_cico_id = 0 )
                     and ( doc.emp_id = v_emp_id
                     or v_emp_id = 0 )
                     -- Arboles
                     and ( ( exists ( select rptarb_hojaid
                                      from rptArbolRamaHoja
                                         where rptarb_cliente = v_clienteID
                                                 and tbl_id = 29
                                                 and rptarb_hojaid = rc.prov_id ) )
                     or ( v_ram_id_proveedor = 0 ) )
                     and ( ( exists ( select rptarb_hojaid
                                      from rptArbolRamaHoja
                                         where rptarb_cliente = v_clienteID
                                                 and tbl_id = 1007
                                                 and rptarb_hojaid = rc.suc_id ) )
                     or ( v_ram_id_sucursal = 0 ) )
                     and ( ( exists ( select rptarb_hojaid
                                      from rptArbolRamaHoja
                                         where rptarb_cliente = v_clienteID
                                                 and tbl_id = 1016
                                                 and rptarb_hojaid = doc.cico_id ) )
                     or ( v_ram_id_circuitoContable = 0 ) )
                     and ( ( exists ( select rptarb_hojaid
                                      from rptArbolRamaHoja
                                         where rptarb_cliente = v_clienteID
                                                 and tbl_id = 1018
                                                 and rptarb_hojaid = doc.emp_id ) )
                     or ( v_ram_id_empresa = 0 ) ) );

   end;
   end if;

   --/////////////////////////////////////////////////////////////////////////
   -- Solo Saldos
   --/////////////////////////////////////////////////////////////////////////
   if p_nTipo <> 0 then
   begin
      if p_nTipo = 1 then
      begin
         open rtn for
            --/////////////////////////////////////
            -- Saldos iniciales
            --/////////////////////////////////////
            select 1 grp_total,
                         p_Fini Fecha,
                         emp.emp_nombre Empresa,
                         prov.prov_nombre || ' -RZ: ' || prov.prov_razonsocial || ' -CUIT: ' || prov.prov_cuit || ' -TE: ' || prov.prov_tel Proveedor,
                         cue.cue_nombre Cuenta,
                         suc.suc_nombre Sucursal,
                         SUM(neto) Neto,
                         SUM(descuento) Descuento,
                         SUM(subtotal) Sub_Total,
                         SUM(iva) Iva,
                         SUM(total) Total,
                         SUM(pago) Pagos,
                         SUM(pendiente) Pendiente,
                         SUM(pendiente) Vto_Pendiente
              from tt_dc_csc_com_0010 fc
                     join Proveedor prov
                      on fc.prov_id = prov.prov_id
                     join Empresa emp
                      on fc.emp_id = emp.emp_id
                     join Sucursal suc
                      on fc.suc_id = suc.suc_id
                     left join Cuenta cue
                      on fc.cue_id = cue.cue_id
              GROUP by fc.prov_id,prov.prov_nombre || ' -RZ: ' || prov.prov_razonsocial || ' -CUIT: ' || prov.prov_cuit || ' -TE: ' || prov.prov_tel,emp.emp_nombre,cue.cue_nombre,suc.suc_nombre

               HAVING ( ABS(SUM(sqlserver_utilities.round_(pendiente, 2))) >= p_saldominimo
              or p_soloDeudores = 0 )
              order by Proveedor,
                       emp.emp_nombre,
                       cue.cue_nombre,
                       suc.suc_nombre;

      end;
      else
      begin
         open rtn for
            --/////////////////////////////////////
            -- Saldos iniciales
            --/////////////////////////////////////
            select 1 grp_total,
                         p_Fini Fecha,
                         prov.prov_nombre || ' -RZ: ' || prov.prov_razonsocial || ' -CUIT: ' || prov.prov_cuit || ' -TE: ' || prov.prov_tel Proveedor,
                         SUM(neto) Neto,
                         SUM(descuento) Descuento,
                         SUM(subtotal) Sub_Total,
                         SUM(iva) Iva,
                         SUM(total) Total,
                         SUM(pago) Pagos,
                         SUM(pendiente) Pendiente,
                         SUM(pendiente) Vto_Pendiente
              from tt_dc_csc_com_0010 fc
                     join Proveedor prov
                      on fc.prov_id = prov.prov_id
              GROUP by fc.prov_id,prov.prov_nombre || ' -RZ: ' || prov.prov_razonsocial || ' -CUIT: ' || prov.prov_cuit || ' -TE: ' || prov.prov_tel

               HAVING ( ABS(SUM(sqlserver_utilities.round_(pendiente, 2))) >= p_saldominimo
              or p_soloDeudores = 0 )
              order by Proveedor;

      end;
      end if;

   end;
   --/////////////////////////////////////////////////////////////////////////
   -- Saldo y Periodo
   --/////////////////////////////////////////////////////////////////////////
   else
   begin
      open rtn for
         --/////////////////////////////////////////////////////////////////////////
         --
         --	Facturas, Notas de Credio/Debito y Ordenes de Pago en el Periodo
         --
         --/////////////////////////////////////////////////////////////////////////
         
         --/////////////////////////////////////
         -- Saldos iniciales
         --/////////////////////////////////////
         select 1 grp_total,
                      0 doct_id,
                      0 comp_id,
                      0 nOrden_id,
                      'Saldo Inicial' Documento,
                      p_Fini Fecha,
                      0 Numero,
                      'Saldo inicial' Comprobante,
                      prov_nombre || ' -RZ: ' || prov_razonsocial || ' -CUIT: ' || prov_cuit || ' -TE: ' || prov_tel Proveedor,
                      SUM(neto) Neto,
                      SUM(descuento) Descuento,
                      SUM(subtotal) Sub_Total,
                      SUM(iva) Iva,
                      SUM(total) Total,
                      SUM(pago) Pagos,
                      SUM(pendiente) Pendiente,
                      '' Moneda,
                      '' Estado,
                      cue_nombre Cuenta,
                      '' Documento,
                      emp_nombre Empresa,
                      suc_nombre Sucursal,
                      '' Cond_Pago,
                      '' Legajo,
                      '' Centro_de_Costo,
                      null Vto,
                      0 Vto_Importe,
                      SUM(pendiente) Vto_Pendiente,
                      null Observaciones
           from tt_dc_csc_com_0010 fc
                  join Proveedor prov
                   on fc.prov_id = prov.prov_id
                  join Empresa emp
                   on fc.emp_id = emp.emp_id
                  join Sucursal suc
                   on fc.suc_id = suc.suc_id
                  left join Cuenta cue
                   on fc.cue_id = cue.cue_id
           GROUP by fc.prov_id,prov_nombre || ' -RZ: ' || prov_razonsocial || ' -CUIT: ' || prov_cuit || ' -TE: ' || prov_tel,cue_nombre,suc_nombre,emp_nombre

            HAVING ( ABS(SUM(sqlserver_utilities.round_(pendiente, 2))) >= p_saldominimo
           or p_soloDeudores = 0 )
         union all
         --/////////////////////////////////////
         --	Facturas, Notas de Credio/Debito
         --/////////////////////////////////////
         select 1 grp_total,
                      fc.doct_id doct_id,
                      fc.fc_id comp_id,
                      1 nOrden_id,
                      doc_nombre Documento,
                      fc_fecha Fecha,
                      fc_numero Numero,
                      fc_nrodoc Comprobante,
                      prov_nombre || ' -RZ: ' || prov_razonsocial || ' -CUIT: ' || prov_cuit || ' -TE: ' || prov_tel Proveedor,
                      case fc.doct_id
                                     when 8 then -fc_neto
                      else fc_neto
                         end Neto,
                      case fc.doct_id
                                     when 8 then -fc_importedesc1 + fc_importedesc2
                      else fc_importedesc1 + fc_importedesc2
                         end Descuento,
                      case fc.doct_id
                                     when 8 then -fc_subtotal
                      else fc_subtotal
                         end Sub_Total,
                      case fc.doct_id
                                     when 8 then -fc_ivari + fc_ivarni
                      else fc_ivari + fc_ivarni
                         end Iva,
                      case fc.doct_id
                                     when 8 then -fc_total
                      else fc_total
                         end Total,
                      case
                           when fc_totalcomercial = 0
                             and fc_fechavto < CURRENT_TIMESTAMP
                             and fc_fechavto < p_Ffin
                             and fc.doct_id = 8 then -fc_total
                           when fc_totalcomercial = 0
                             and fc_fechavto < CURRENT_TIMESTAMP
                             and fc_fechavto < p_Ffin
                             and fc.doct_id <> 8 then fc_total
                      else 0
                         end Pagos,
                      case fc.doct_id
                                     when 8 then -fc_pendiente
                      else fc_pendiente
                         end Pendiente,
                      mon_nombre Moneda,
                      est_nombre Estado,
                      cue_nombre Cuenta,
                      doc_nombre Documento,
                      emp_nombre Empresa,
                      suc_nombre Sucursal,
                      cpg_nombre Cond_Pago,
                      case
                           when lgj_titulo <> '' then lgj_titulo
                      else lgj_codigo
                         end Legajo,
                      ccos_nombre Centro_de_Costo,
                      case
                           when fcd_fecha is not null then fcd_fecha
                      else fcp_fecha
                         end Vto,
                      case fc.doct_id
                                     when 8 then -coalesce(fcd_importe, fcp_importe)
                      else coalesce(fcd_importe, fcp_importe)
                         end Vto_Importe,
                      case
                           when fc_totalcomercial = 0
                             and fc_fechavto < CURRENT_TIMESTAMP
                             and fc_fechavto < p_Ffin then 0
                           when fc_totalcomercial = 0
                             and ( fc_fechavto >= CURRENT_TIMESTAMP
                             or fc_fechavto >= p_Ffin )
                             and fc.doct_id = 8 then -fc_total
                           when fc_totalcomercial = 0
                             and ( fc_fechavto >= CURRENT_TIMESTAMP
                             or fc_fechavto >= p_Ffin )
                             and fc.doct_id <> 8 then fc_total
                           when fc.doct_id = 8 then -coalesce(fcd_pendiente, 0)
                      else coalesce(fcd_pendiente, 0)
                         end Vto_Pendiente,
                      fc_descrip Observaciones
           from FacturaCompra fc
                  join Proveedor prov
                   on fc.prov_id = prov.prov_id
                  left join FacturaCompraDeuda fcd
                   on fc.fc_id = fcd.fc_id
                  left join FacturaCompraPago fcp
                   on fc.fc_id = fcp.fc_id
                  left join AsientoItem ai
                   on fc.as_id = ai.as_id
                  and asi_tipo = v_cta_acreedor
                  left join Cuenta cue
                   on ai.cue_id = cue.cue_id
                  join Moneda mon
                   on fc.mon_id = mon.mon_id
                  join Estado est
                   on fc.est_id = est.est_id
                  join Documento doc
                   on fc.doc_id = doc.doc_id
                  join Empresa emp
                   on doc.emp_id = emp.emp_id
                  join Sucursal suc
                   on fc.suc_id = suc.suc_id
                  left join Legajo lgj
                   on fc.lgj_id = lgj.lgj_id
                  join CondicionPago cpg
                   on fc.cpg_id = cpg.cpg_id
                  left join CentroCosto ccos
                   on fc.ccos_id = ccos.ccos_id
            where fc_fecha >= p_Fini
                    and fc_fecha <= p_Ffin
                    and fc.est_id <> 7
                    and ( ABS(sqlserver_utilities.round_(fc_pendiente, 2)) >= p_saldominimo
                    or p_soloDeudores = 0 )
                    and ( exists ( select *
                                         from EmpresaUsuario
                                            where emp_id = doc.emp_id
                                                    and us_id = p_us_id )
                    or ( p_us_id = 1 ) )
/ * -///////////////////////////////////////////////////////////////////////
		
		INICIO SEGUNDA PARTE DE ARBOLES
		
/////////////////////////////////////////////////////////////////////// * /
                    and ( fc.prov_id = v_prov_id
                    or v_prov_id = 0 )
                    and ( fc.suc_id = v_suc_id
                    or v_suc_id = 0 )
                    and ( ai.cue_id = v_cue_id
                    or v_cue_id = 0 )
                    and ( doc.cico_id = v_cico_id
                    or v_cico_id = 0 )
                    and ( doc.emp_id = v_emp_id
                    or v_emp_id = 0 )
                    -- Arboles
                    and ( ( exists ( select rptarb_hojaid
                                     from rptArbolRamaHoja
                                        where rptarb_cliente = v_clienteID
                                                and tbl_id = 29
                                                and rptarb_hojaid = fc.prov_id ) )
                    or ( v_ram_id_proveedor = 0 ) )
                    and ( ( exists ( select rptarb_hojaid
                                     from rptArbolRamaHoja
                                        where rptarb_cliente = v_clienteID
                                                and tbl_id = 1007
                                                and rptarb_hojaid = fc.suc_id ) )
                    or ( v_ram_id_sucursal = 0 ) )
                    and ( ( exists ( select rptarb_hojaid
                                     from rptArbolRamaHoja
                                        where rptarb_cliente = v_clienteID
                                                and tbl_id = 17
                                                and rptarb_hojaid = ai.cue_id ) )
                    or ( v_ram_id_cuenta = 0 ) )
                    and ( ( exists ( select rptarb_hojaid
                                     from rptArbolRamaHoja
                                        where rptarb_cliente = v_clienteID
                                                and tbl_id = 1016
                                                and rptarb_hojaid = doc.cico_id ) )
                    or ( v_ram_id_circuitoContable = 0 ) )
                    and ( ( exists ( select rptarb_hojaid
                                     from rptArbolRamaHoja
                                        where rptarb_cliente = v_clienteID
                                                and tbl_id = 1018
                                                and rptarb_hojaid = doc.emp_id ) )
                    or ( v_ram_id_empresa = 0 ) )
         union all
         --/////////////////////////////////////
         --	Remitos, Notas de Credio/Debito
         --/////////////////////////////////////
         select 1 grp_total,
                            rc.doct_id doct_id,
                            rc.rc_id comp_id,
                            1 nOrden_id,
                            doc_nombre Documento,
                            rc_fecha Fecha,
                            rc_numero Numero,
                            rc_nrodoc Comprobante,
                            prov_nombre || ' -RZ: ' || prov_razonsocial || ' -CUIT: ' || prov_cuit || ' -TE: ' || prov_tel Proveedor,
                            case rc.doct_id
                                           when 25 then -rc_neto
                            else rc_neto
                               end Neto,
                            case rc.doct_id
                                           when 25 then -rc_importedesc1 + rc_importedesc2
                            else rc_importedesc1 + rc_importedesc2
                               end Descuento,
                            case rc.doct_id
                                           when 25 then -rc_subtotal
                            else rc_subtotal
                               end Sub_Total,
                            case rc.doct_id
                                           when 25 then -rc_ivari + rc_ivarni
                            else rc_ivari + rc_ivarni
                               end Iva,
                            case rc.doct_id
                                           when 25 then -rc_total
                            else rc_total
                               end Total,
                            0 Pagos,
                            case rc.doct_id
                                           when 25 then -rc_pendiente
                            else rc_pendiente
                               end Pendiente,
                            mon_nombre Moneda,
                            est_nombre Estado,
                            '' Cuenta,
                            doc_nombre Documento,
                            emp_nombre Empresa,
                            suc_nombre Sucursal,
                            cpg_nombre Cond_Pago,
                            case
                                 when lgj_titulo <> '' then lgj_titulo
                            else lgj_codigo
                               end Legajo,
                            ccos_nombre Centro_de_Costo,
                            rc_fecha Vto,
                            case rc.doct_id
                                           when 25 then -rc_pendiente
                            else rc_pendiente
                               end Vto_Importe,
                            case rc.doct_id
                                           when 25 then -rc_pendiente
                            else rc_pendiente
                               end Vto_Pendiente,
                            rc_descrip Observaciones
           from RemitoCompra rc
                  join Proveedor prov
                   on rc.prov_id = prov.prov_id
                  and p_conRemito <> 0
                  left join Documento doc
                   on rc.doc_id = doc.doc_id
                  left join Moneda mon
                   on doc.mon_id = mon.mon_id
                  left join Estado est
                   on rc.est_id = est.est_id
                  left join Empresa emp
                   on doc.emp_id = emp.emp_id
                  left join Sucursal suc
                   on rc.suc_id = suc.suc_id
                  left join Legajo lgj
                   on rc.lgj_id = lgj.lgj_id
                  left join CondicionPago cpg
                   on rc.cpg_id = cpg.cpg_id
                  left join CentroCosto ccos
                   on rc.ccos_id = ccos.ccos_id
            where rc_fecha >= p_Fini
                    and rc_fecha <= p_Ffin
                    and rc.est_id <> 7
                    and p_conRemito <> 0
                    and ( ABS(sqlserver_utilities.round_(rc_pendiente, 2)) >= p_saldominimo
                    or p_soloDeudores = 0 )
                    and ( exists ( select *
                                         from EmpresaUsuario
                                            where emp_id = doc.emp_id
                                                    and us_id = p_us_id )
                    or ( p_us_id = 1 ) )
/ * -///////////////////////////////////////////////////////////////////////
		
		INICIO SEGUNDA PARTE DE ARBOLES
		
/////////////////////////////////////////////////////////////////////// * /
                    and ( rc.prov_id = v_prov_id
                    or v_prov_id = 0 )
                    and ( rc.suc_id = v_suc_id
                    or v_suc_id = 0 )
                    and ( doc.cico_id = v_cico_id
                    or v_cico_id = 0 )
                    and ( doc.emp_id = v_emp_id
                    or v_emp_id = 0 )
                    -- Arboles
                    and ( ( exists ( select rptarb_hojaid
                                     from rptArbolRamaHoja
                                        where rptarb_cliente = v_clienteID
                                                and tbl_id = 29
                                                and rptarb_hojaid = rc.prov_id ) )
                    or ( v_ram_id_proveedor = 0 ) )
                    and ( ( exists ( select rptarb_hojaid
                                     from rptArbolRamaHoja
                                        where rptarb_cliente = v_clienteID
                                                and tbl_id = 1007
                                                and rptarb_hojaid = rc.suc_id ) )
                    or ( v_ram_id_sucursal = 0 ) )
                    and ( ( exists ( select rptarb_hojaid
                                     from rptArbolRamaHoja
                                        where rptarb_cliente = v_clienteID
                                                and tbl_id = 1016
                                                and rptarb_hojaid = doc.cico_id ) )
                    or ( v_ram_id_circuitoContable = 0 ) )
                    and ( ( exists ( select rptarb_hojaid
                                     from rptArbolRamaHoja
                                        where rptarb_cliente = v_clienteID
                                                and tbl_id = 1018
                                                and rptarb_hojaid = doc.emp_id ) )
                    or ( v_ram_id_empresa = 0 ) )
         --/////////////////////////////////////
         --	Ordenes de Pago
         --/////////////////////////////////////
         union all
         select 1 grp_total,
                opg.doct_id doct_id,
                opg.opg_id comp_id,
                1 nOrden_id,
                doc_nombre Documento,
                opg_fecha Fecha,
                opg_numero Numero,
                opg_nrodoc Comprobante,
                prov_nombre || ' -RZ: ' || prov_razonsocial || ' -CUIT: ' || prov_cuit || ' -TE: ' || prov_tel Proveedor,
                0 Neto,
                0 Descuento,
                0 Sub_Total,
                0 Iva,
                0 Total,
                opg_total Pagos,
                -opg_pendiente Pendiente,
                '' Moneda,
                est_nombre Estado,
                ( select min(cue_nombre)
                  from OrdenPagoItem opgi
                         join Cuenta cue
                          on opgi.cue_id = cue.cue_id
                     where opg_id = opg.opg_id
                             and opgi_tipo = 5 ) Cuenta,
                doc_nombre Documento,
                emp_nombre Empresa,
                suc_nombre Sucursal,
                '' Cond_Pago,
                case
                     when lgj_titulo <> '' then lgj_titulo
                else lgj_codigo
                   end Legajo,
                ccos_nombre Centro_de_Costo,
                opg_fecha Vto,
                0 Vto,
                -opg_pendiente Vto_Pendiente,
                opg_descrip Observaciones
           from OrdenPago opg
                  join Proveedor prov
                   on opg.prov_id = prov.prov_id
                  join Estado est
                   on opg.est_id = est.est_id
                  join Documento doc
                   on opg.doc_id = doc.doc_id
                  join Empresa emp
                   on doc.emp_id = emp.emp_id
                  join Sucursal suc
                   on opg.suc_id = suc.suc_id
                  left join Legajo lgj
                   on opg.lgj_id = lgj.lgj_id
                  left join CentroCosto ccos
                   on opg.ccos_id = ccos.ccos_id
            where opg_fecha >= p_Fini
                    and opg_fecha <= p_Ffin
                    and opg.est_id <> 7
                    and ( ABS(sqlserver_utilities.round_(opg_pendiente, 2)) >= p_saldominimo
                    or p_soloDeudores = 0 )
                    and ( exists ( select *
                                         from EmpresaUsuario
                                            where emp_id = doc.emp_id
                                                    and us_id = p_us_id )
                    or ( p_us_id = 1 ) )
/ * -///////////////////////////////////////////////////////////////////////
		
		INICIO SEGUNDA PARTE DE ARBOLES
		
/////////////////////////////////////////////////////////////////////// * /
                    and ( opg.prov_id = v_prov_id
                    or v_prov_id = 0 )
                    and ( opg.suc_id = v_suc_id
                    or v_suc_id = 0 )
                    and ( exists ( select *
                                   from OrdenPagoItem
                                      where opg_id = opg.opg_id
                                              and opgi_tipo = v_cta_acreedoropg
                                              and cue_id = v_cue_id )
                    or v_cue_id = 0 )
                    and ( doc.cico_id = v_cico_id
                    or v_cico_id = 0 )
                    and ( doc.emp_id = v_emp_id
                    or v_emp_id = 0 )
                    -- Arboles
                    and ( ( exists ( select rptarb_hojaid
                                     from rptArbolRamaHoja
                                        where rptarb_cliente = v_clienteID
                                                and tbl_id = 29
                                                and rptarb_hojaid = opg.prov_id ) )
                    or ( v_ram_id_proveedor = 0 ) )
                    and ( ( exists ( select rptarb_hojaid
                                     from rptArbolRamaHoja
                                        where rptarb_cliente = v_clienteID
                                                and tbl_id = 1007
                                                and rptarb_hojaid = opg.suc_id ) )
                    or ( v_ram_id_sucursal = 0 ) )
                    and ( ( exists ( select rptarb_hojaid
                                     from rptArbolRamaHoja
                                        where rptarb_cliente = v_clienteID
                                                and tbl_id = 17
                                                and ( exists ( select *
                                                               from OrdenPagoItem
                                                                  where opg_id = opg.opg_id
                                                                          and opgi_tipo = v_cta_acreedoropg
                                                                          and cue_id = rptarb_hojaid ) ) ) )
                    or ( v_ram_id_cuenta = 0 ) )
                    and ( ( exists ( select rptarb_hojaid
                                     from rptArbolRamaHoja
                                        where rptarb_cliente = v_clienteID
                                                and tbl_id = 1016
                                                and rptarb_hojaid = doc.cico_id ) )
                    or ( v_ram_id_circuitoContable = 0 ) )
                    and ( ( exists ( select rptarb_hojaid
                                     from rptArbolRamaHoja
                                        where rptarb_cliente = v_clienteID
                                                and tbl_id = 1018
                                                and rptarb_hojaid = doc.emp_id ) )
                    or ( v_ram_id_empresa = 0 ) )
           order by Proveedor,
                    Cuenta,
                    Fecha,
                    nOrden_id;

   end;
   end if;
*/

end;
$function$;

CREATE OR REPLACE FUNCTION public.dc_csc_com_0040(p_us_id integer, p_fini date, p_ffin date, p_cico_id character varying, p_pr_id character varying, p_prov_id character varying, p_emp_id character varying, OUT rtn refcursor)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
declare

   v_pr_id      integer;
   v_prov_id    integer;
   v_emp_id     integer;
   v_cico_id    integer;

   v_ram_id_producto         integer;
   v_ram_id_proveedor        integer;
   v_ram_id_empresa          integer;
   v_ram_id_circuitoContable integer;

   v_clienteID integer;
   v_isRaiz    smallint;

   v_arb_id      integer;
   v_arb_nombre  varchar;  
   v_n           integer := 2;
   v_raiz        integer;

begin

   create temporary table t_dc_csc_com_0040_productos (
      nodo_id integer,
      nodo_2 integer,
      nodo_3 integer,
      nodo_4 integer,
      nodo_5 integer,
      nodo_6 integer,
      nodo_7 integer,
      nodo_8 integer,
      nodo_9 integer
   ) on commit drop;

   select * from sp_ArbConvertId(p_pr_id)   into v_pr_id,    v_ram_id_producto; 
   select * from sp_ArbConvertId(p_prov_id) into v_prov_id,  v_ram_id_proveedor; 
   select * from sp_ArbConvertId(p_emp_id)  into v_emp_id,   v_ram_id_empresa;
   select * from sp_ArbConvertId(p_cico_id) into v_cico_id,  v_ram_id_circuitoContable; 

   select * from sp_GetRptId() into v_clienteID;

   if v_ram_id_producto <> 0 then
      select arb_id into v_arb_id from Rama where ram_id = v_ram_id_producto;
   else
      v_arb_id := 0;
   end if;

   if v_arb_id = 0 then

     select min(arb_id) into v_arb_id from arbol where tbl_id = 30; -- producto

   end if;

   select arb_nombre into v_arb_nombre from arbol where arb_id = v_arb_id;

   while exists(select * from rama r
       where  arb_id = v_arb_id
        and not exists (select * from t_dc_csc_com_0040_productos where nodo_2 = r.ram_id)
        and not exists (select * from t_dc_csc_com_0040_productos where nodo_3 = r.ram_id)
        and not exists (select * from t_dc_csc_com_0040_productos where nodo_4 = r.ram_id)
        and not exists (select * from t_dc_csc_com_0040_productos where nodo_5 = r.ram_id)
        and not exists (select * from t_dc_csc_com_0040_productos where nodo_6 = r.ram_id)
        and not exists (select * from t_dc_csc_com_0040_productos where nodo_7 = r.ram_id)
        and not exists (select * from t_dc_csc_com_0040_productos where nodo_8 = r.ram_id)
        and not exists (select * from t_dc_csc_com_0040_productos where nodo_9 = r.ram_id)

        and v_n <= 9
      )
   loop

      if v_n = 2 then

         select ram_id into v_raiz from rama where arb_id = v_arb_id and ram_id_padre = 0;
         insert into t_dc_csc_com_0040_productos (nodo_id, nodo_2)
         select ram_id, ram_id from rama where ram_id_padre = v_raiz;

      else

         if v_n = 3 then

            insert into t_dc_csc_com_0040_productos (nodo_id, nodo_2, nodo_3)
            select ram_id, nodo_2, ram_id
            from rama r inner join t_dc_csc_com_0040_productos n on r.ram_id_padre = n.nodo_2;

         else

            if v_n = 4 then

               insert into t_dc_csc_com_0040_productos (nodo_id, nodo_2, nodo_3, nodo_4)
               select ram_id, nodo_2, nodo_3, ram_id
               from rama r inner join t_dc_csc_com_0040_productos n on r.ram_id_padre = n.nodo_3;

            else

               if v_n = 5 then

                  insert into t_dc_csc_com_0040_productos (nodo_id, nodo_2, nodo_3, nodo_4, nodo_5)
                  select ram_id, nodo_2, nodo_3, nodo_4, ram_id
                  from rama r inner join t_dc_csc_com_0040_productos n on r.ram_id_padre = n.nodo_4;

               else

                  if v_n = 6 then

                     insert into t_dc_csc_com_0040_productos (nodo_id, nodo_2, nodo_3, nodo_4, nodo_5, nodo_6)
                     select ram_id, nodo_2, nodo_3, nodo_4, nodo_5, ram_id
                     from rama r inner join t_dc_csc_com_0040_productos n on r.ram_id_padre = n.nodo_5;

                  else

                     if v_n = 7 then

                        insert into t_dc_csc_com_0040_productos (nodo_id, nodo_2, nodo_3, nodo_4, nodo_5, nodo_6, nodo_7)
                        select ram_id, nodo_2, nodo_3, nodo_4, nodo_5, nodo_6, ram_id
                        from rama r inner join t_dc_csc_com_0040_productos n on r.ram_id_padre = n.nodo_6;

                     else

                        if v_n = 8 then

                           insert into t_dc_csc_com_0040_productos (nodo_id, nodo_2, nodo_3, nodo_4, nodo_5, nodo_6, nodo_7, nodo_8)
                           select ram_id, nodo_2, nodo_3, nodo_4, nodo_5, nodo_6, nodo_7, ram_id
                           from rama r inner join t_dc_csc_com_0040_productos n on r.ram_id_padre = n.nodo_7;

                        else

                           if v_n = 9 then

                              insert into t_dc_csc_com_0040_productos (nodo_id, nodo_2, nodo_3, nodo_4, nodo_5, nodo_6, nodo_7, nodo_8, nodo_9)
                              select ram_id, nodo_2, nodo_3, nodo_4, nodo_5, nodo_6, nodo_7, nodo_8, ram_id
                              from rama r inner join t_dc_csc_com_0040_productos n on r.ram_id_padre = n.nodo_8;

                           end if;
                        end if;
                     end if;
                  end if;
               end if;
            end if;
         end if;
      end if;

      v_n := v_n + 1;

   end loop;

   if v_ram_id_producto <> 0 then
      -- exec sp_ArbGetGroups v_ram_id_producto, v_clienteID, p_us_id
      select sp_ArbIsRaiz(v_ram_id_producto) into v_isRaiz;
      if v_IsRaiz = 0 then
         perform sp_ArbGetAllHojas(v_ram_id_producto, v_clienteID);
      else
         v_ram_id_producto := 0;
      end if;
   end if;

   if v_ram_id_proveedor <> 0 then
      -- exec sp_ArbGetGroups v_ram_id_proveedor, v_clienteID, p_us_id
      select sp_ArbIsRaiz(v_ram_id_proveedor) into v_isRaiz;
      if v_IsRaiz = 0 then
         perform sp_ArbGetAllHojas(v_ram_id_proveedor, v_clienteID);
      else
         v_ram_id_proveedor := 0;
      end if;
   end if;

   if v_ram_id_empresa <> 0 then
      -- exec sp_ArbGetGroups v_ram_id_empresa, v_clienteID, p_us_id
      select sp_ArbIsRaiz(v_ram_id_empresa) into v_isRaiz;
      if v_IsRaiz = 0 then
         perform sp_ArbGetAllHojas(v_ram_id_empresa, v_clienteID);
      else
         v_ram_id_empresa := 0;
      end if;
   end if;

   if v_ram_id_circuitoContable <> 0 then
      -- exec sp_ArbGetGroups v_ram_id_circuitoContable, v_clienteID, p_us_id
      select sp_ArbIsRaiz(v_ram_id_circuitoContable) into v_isRaiz;
      if v_IsRaiz = 0 then
         perform sp_ArbGetAllHojas(v_ram_id_circuitoContable, v_clienteID);
      else
         v_ram_id_circuitoContable := 0;
      end if;
   end if;

   rtn := 'rtn';

   open rtn for

   select
      1                as Orden,

      v_arb_nombre     as Nivel_1,

      nodo_2.ram_nombre  as Nivel_2,
      nodo_3.ram_nombre  as Nivel_3,
      nodo_4.ram_nombre  as Nivel_4,
      nodo_5.ram_nombre  as Nivel_5,
      nodo_6.ram_nombre  as Nivel_6,
      nodo_7.ram_nombre  as Nivel_7,
      nodo_8.ram_nombre  as Nivel_8,
      nodo_9.ram_nombre  as Nivel_9,

      pr_nombrecompra    as Articulo,
      pr_codigo          as Codigo,

      sum(case doc.doct_id
           when 8  then -(fci_neto
                 - (fci_neto * fc_descuento1 / 100)
                 - (
                   (
                    fci_neto - (fci_neto * fc_descuento1 / 100)
                   ) * fc_descuento2 / 100
                  )
                )
           else          (fci_neto
                 - (fci_neto * fc_descuento1 / 100)
                 - (
                   (
                    fci_neto - (fci_neto * fc_descuento1 / 100)
                   ) * fc_descuento2 / 100
                  )
                )
         end
        )                as "compras neto",

      sum(case doc.doct_id
           when 8  then -((fci_ivari+fci_ivarni)
                 - ((fci_ivari+fci_ivarni) * fc_descuento1 / 100)
                 - (
                   (
                    (fci_ivari+fci_ivarni) - ((fci_ivari+fci_ivarni) * fc_descuento1 / 100)
                   ) * fc_descuento2 / 100
                  )
                )
           else         ((fci_ivari+fci_ivarni)
                 - ((fci_ivari+fci_ivarni) * fc_descuento1 / 100)
                 - (
                   (
                    (fci_ivari+fci_ivarni) - ((fci_ivari+fci_ivarni) * fc_descuento1 / 100)
                   ) * fc_descuento2 / 100
                  )
               )
      end
        )                as ivacompras,

      sum(case doc.doct_id
           when 8  then -(fci_importe
                 - (fci_importe * fc_descuento1 / 100)
                 - (
                   (
                    fci_importe - (fci_importe * fc_descuento1 / 100)
                   ) * fc_descuento2 / 100
                  )
                )
           else          (fci_importe
                 - (fci_importe * fc_descuento1 / 100)
                 - (
                   (
                    fci_importe - (fci_importe * fc_descuento1 / 100)
                   ) * fc_descuento2 / 100
                  )
                )
         end
        )                as compras,

       sum(case doc.doct_id
             when 8  then -(fci_cantidad)
             else          fci_cantidad
           end
        )                as "cant. compras"

   from

      Producto pr inner join FacturaCompraItem fci  on pr.pr_id   = fci.pr_id
                  inner join FacturaCompra fc       on fci.fc_id  = fc.fc_id
                  inner join Documento doc          on fc.doc_id  = doc.doc_id
                  inner join Empresa emp            on doc.emp_id = emp.emp_id

                  left  join hoja h                 on     pr.pr_id = h.id
                                                    and h.arb_id = v_arb_id

                                                    -- Esto descarta la raiz
                                                    --
                                                    and not exists(select * from rama
                                                                   where ram_id = ram_id_padre
                                                                     and arb_id = v_arb_id
                                                                     and ram_id = h.ram_id)

                                                    -- Esto descarta hojas secundarias
                                                    --
                                                    and not exists(select * from hoja h2 inner join rama r on h2.ram_id = r.ram_id
                                                                   where h2.arb_id = v_arb_id
                                                                    and h2.ram_id < h.ram_id
                                                                    and h2.ram_id <> r.ram_id_padre
                                                                    and h2.id = h.id)

                  left  join t_dc_csc_com_0040_productos nodo on h.ram_id = nodo.nodo_id

                  left  join rama nodo_2  on nodo.nodo_2 = nodo_2.ram_id
                  left  join rama nodo_3  on nodo.nodo_3 = nodo_3.ram_id
                  left  join rama nodo_4  on nodo.nodo_4 = nodo_4.ram_id
                  left  join rama nodo_5  on nodo.nodo_5 = nodo_5.ram_id
                  left  join rama nodo_6  on nodo.nodo_6 = nodo_6.ram_id
                  left  join rama nodo_7  on nodo.nodo_7 = nodo_7.ram_id
                  left  join rama nodo_8  on nodo.nodo_8 = nodo_8.ram_id
                  left  join rama nodo_9  on nodo.nodo_9 = nodo_9.ram_id

   where

          fc_fecha >= p_Fini
      and fc_fecha <= p_Ffin

      and fc.est_id <> 7 -- Todas menos anuladas

      and (
         exists(select * from EmpresaUsuario where emp_id = doc.emp_id and us_id = p_us_id) or (p_us_id = 1)
        )
   /* -///////////////////////////////////////////////////////////////////////

   INICIO SEGUNDA PARTE DE ARBOLES

   /////////////////////////////////////////////////////////////////////// */

   and   (pr.pr_id    = v_pr_id    or v_pr_id   =0)
   and   (doc.cico_id = v_cico_id  or v_cico_id =0)
   and   (emp.emp_id  = v_emp_id   or v_emp_id  =0)
   and   (fc.prov_id  = v_prov_id  or v_prov_id =0)

   -- Arboles
   and   (
           (exists(select rptarb_hojaid
                   from rptArbolRamaHoja
                   where rptarb_cliente = v_clienteID
                     and tbl_id = 30
                     and rptarb_hojaid = fci.pr_id
                )
           )
            or (v_ram_id_producto = 0)
         )

   and   (
           (exists(select rptarb_hojaid
                   from rptArbolRamaHoja
                   where rptarb_cliente = v_clienteID
                     and tbl_id = 29
                     and rptarb_hojaid = fc.prov_id
                )
           )
            or (v_ram_id_proveedor = 0)
         )

   and   (
           (exists(select rptarb_hojaid
                   from rptArbolRamaHoja
                   where rptarb_cliente = v_clienteID
                     and tbl_id = 1016
                     and rptarb_hojaid = doc.cico_id
                )
           )
            or (v_ram_id_circuitoContable = 0)
         )

   and   (
           (exists(select rptarb_hojaid
                   from rptArbolRamaHoja
                   where rptarb_cliente = v_clienteID
                     and tbl_id = 1018
                     and rptarb_hojaid = doc.emp_id
                )
           )
            or (v_ram_id_empresa = 0)
         )

   group by
        pr_nombrecompra,
        pr_codigo,
        nodo_2.ram_nombre,
        nodo_3.ram_nombre,
        nodo_4.ram_nombre,
        nodo_5.ram_nombre,
        nodo_6.ram_nombre,
        nodo_7.ram_nombre,
        nodo_8.ram_nombre,
        nodo_9.ram_nombre

   order by pr_nombrecompra, Nivel_1, Nivel_2, Nivel_3, Nivel_4, Nivel_5, Nivel_6, Nivel_7, Nivel_8, Nivel_9;

end;
$function$;

CREATE OR REPLACE FUNCTION public.f_unaccent(text)
 RETURNS text
 LANGUAGE sql
 IMMUTABLE
 SET search_path TO public, pg_temp
AS $function$
SELECT unaccent('unaccent', $1)
$function$;

CREATE OR REPLACE FUNCTION public.getdate()
 RETURNS timestamp with time zone
 LANGUAGE sql
 STABLE
AS $function$select now()$function$;

CREATE OR REPLACE FUNCTION public.if_table_exists(character varying)
 RETURNS boolean
 LANGUAGE plpgsql
AS $function$
DECLARE

 BEGIN

     /* check the table exist in database and is visible*/
     perform n.nspname ,c.relname
     FROM pg_catalog.pg_class c
     LEFT JOIN pg_catalog.pg_namespace n
     ON n.oid = c.relnamespace
     WHERE n.nspname LIKE 'pg_temp_%' AND pg_catalog.pg_table_is_visible(c.oid)
       AND Upper(relname) = Upper($1);

     IF FOUND THEN
        RETURN TRUE;
     ELSE
        RETURN FALSE;
     END IF;

 END;
$function$;

CREATE OR REPLACE FUNCTION public.instr(text, text, integer DEFAULT 0)
 RETURNS integer
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ 
        select case when strpos(substr($1, $3+1), $2) = 0 then 0 else strpos(substr($1, $3+1), $2) + $3
end;
$function$;

CREATE OR REPLACE FUNCTION public.is_error(p_error_code character varying)
 RETURNS boolean
 LANGUAGE plpgsql
AS $function$
declare
v_error varchar;
begin

          v_error := substring(p_error_code, 1, 2);

          return v_error not in ('00','01','02');

end;
$function$;

CREATE OR REPLACE FUNCTION public.isnumeric(param character varying)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
begin
	if (param ~ E'^[-+]?\\d*\\.?\\d+(?:[eE][-+]?\\d+)?$') then
		return -1;
	else
		return 0;
	end if;
end;
$function$;

CREATE OR REPLACE FUNCTION public.number_to_char(val numeric, format character varying DEFAULT '999G999G999G990D00'::character varying)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
begin

  return trim(to_char(val, format));

end;
$function$;

CREATE OR REPLACE FUNCTION public.pldbg_get_target_info(signature text, targettype "char")
 RETURNS targetinfo
 LANGUAGE sql
AS $function$
  SELECT p.oid AS target,
         pronamespace AS schema,
         pronargs::int4 AS nargs,
         -- The returned argtypes column is of type oidvector, but unlike
         -- proargtypes, it's supposed to include OUT params. So we
         -- essentially have to return proallargtypes, converted to an
         -- oidvector. There is no oid[] -> oidvector cast, so we have to
         -- do it via text.
         CASE WHEN proallargtypes IS NOT NULL THEN
           translate(proallargtypes::text, ',{}', ' ')::oidvector
         ELSE
           proargtypes
         END AS argtypes,
         proname AS targetname,
         proargmodes AS argmodes,
         proargnames AS proargnames,
         prolang AS targetlang,
         quote_ident(nspname) || '.' || quote_ident(proname) AS fqname,
         proretset AS returnsset,
         prorettype AS returntype,

         't'::bool AS isfunc,
         0::oid AS pkg,
	 NULL::text[] AS argdefvals

  FROM pg_proc p, pg_namespace n
  WHERE p.pronamespace = n.oid
  AND p.oid = $1::oid
  -- We used to support querying by function name or trigger name/oid as well,
  -- but that was never used in the client, so the support for that has been
  -- removed. The targeType argument remains as a legacy of that. You're
  -- expected to pass 'o' as target type, but it doesn't do anything.
  AND $2 = 'o'
$function$;

CREATE OR REPLACE FUNCTION public.pldbg_oid_debug(functionoid oid)
 RETURNS integer
 LANGUAGE sql
 STRICT
AS $function$ SELECT plpgsql_oid_debug($1) $function$;

CREATE OR REPLACE FUNCTION public.result_error(message character varying)
 RETURNS row_result
 LANGUAGE plpgsql
AS $function$
declare
  rtn row_result;
begin

    rtn.type := 'ERROR';
    rtn.message := message;
    return rtn;

end;
$function$;

CREATE OR REPLACE FUNCTION public.result_failed()
 RETURNS row_result
 LANGUAGE plpgsql
AS $function$
declare
  rtn row_result;
begin

    rtn.type := 'success';
    rtn.id := 0;
    return rtn;

end;
$function$;

CREATE OR REPLACE FUNCTION public.result_get_id_or_error(rslt row_result, p_id_name character varying, OUT p_id integer, OUT p_success integer, OUT p_error_msg character varying)
 RETURNS record
 LANGUAGE plpgsql
AS $function$
begin

   if rslt.type = 'ERROR' then
      p_error_msg := '@@ERROR_SP:' || rslt.message;
      p_success := 0
      exit;
   else
      if rslt.type = p_id_name then
         p_id = rslt.id;
         p_success := 1;
         exit;
      end if;
   end if;

end;
$function$;

CREATE OR REPLACE FUNCTION public.result_info(message character varying)
 RETURNS row_result
 LANGUAGE plpgsql
AS $function$
declare
  rtn row_result;
begin

    rtn.type := 'INFO';
    rtn.message := message;
    return rtn;

end;
$function$;

CREATE OR REPLACE FUNCTION public.result_success()
 RETURNS row_result
 LANGUAGE plpgsql
AS $function$
declare
  rtn row_result;
begin

    rtn.type := 'success';
    rtn.id := 1;
    return rtn;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_arb_arbol_create(p_us_id integer, p_tbl_id integer, p_nombre character varying, OUT rtn refcursor)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
declare
        v_arb_id integer;
        v_raiz_id integer;
begin

        select SP_DBGetNewId('arbol',
                              'arb_id') into v_arb_id;

        insert into arbol (arb_id, arb_nombre, tbl_id, modifico)
        values (v_arb_id, p_nombre, p_tbl_id, p_us_id);

        select SP_DBGetNewId('rama',
                             'ram_id') into v_raiz_id;

        insert into rama (ram_id, ram_nombre, ram_id_padre, ram_orden, arb_id, modifico)
        values (v_raiz_id, p_nombre, 0, 0, v_arb_id, p_us_id);

        rtn := 'rtn';

        open rtn for select arb_id, arb_nombre, v_raiz_id as ram_id from arbol where arb_id = v_arb_id;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_arb_arbol_sort(p_us_id integer, p_arb_id integer, p_desc integer, OUT rtn refcursor)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
DECLARE
   c_arbol refcursor;
   v_row record;
   v_ram_id integer;
   v_ram_id_padre integer;
   v_last_ram_id_padre integer;
   v_orden integer;
   v_sqlstmt varchar(1000);
BEGIN

   v_last_ram_id_padre := -1;

   v_sqlstmt := 'SELECT ram_id, ram_id_padre FROM Rama WHERE arb_id = ' || p_arb_id::varchar || ' ORDER BY ram_id_padre, ram_nombre';

   IF p_desc <> 0 THEN
     v_sqlstmt := v_sqlstmt || ' desc';
   END IF;

   OPEN c_arbol FOR EXECUTE v_sqlstmt;

   LOOP
      FETCH c_arbol INTO v_row;
      EXIT WHEN NOT FOUND;

      v_ram_id := v_row.ram_id;
      v_ram_id_padre := v_row.ram_id_padre;

      IF v_ram_id_padre <> v_last_ram_id_padre THEN
        v_last_ram_id_padre := v_ram_id_padre;

        v_orden := 0;

      END IF;

      v_orden := v_orden + 1;

      UPDATE rama SET ram_orden = v_orden WHERE ram_id = v_ram_id;

   END LOOP;

   CLOSE c_arbol;

   rtn := 'rtn';

   OPEN rtn FOR SELECT * FROM rama WHERE ram_id = (SELECT ram_id FROM rama WHERE arb_id = p_arb_id AND ram_id_padre = 0);

END;
$function$;

CREATE OR REPLACE FUNCTION public.sp_arb_hoja_paste_copy(p_us_id integer, p_ids character varying, p_ram_id_copy_to integer, OUT rtn refcursor)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
declare
   v_new_hoja_id integer;
   v_arb_id integer;

   c_leaves_to_copy refcursor;
   v_leave_row record;

   v_ids   varchar[];
   v_id    varchar;
   v_index integer;
begin

    if p_ids = '' then RETURN; end if;

    if p_ram_id_copy_to = 0 then RETURN; end if;

    if not exists(select 1 from rama where ram_id = p_ram_id_copy_to) then RETURN; end if;

    select arb_id into v_arb_id from rama where ram_id = p_ram_id_copy_to;


    -- Creo un cursor para recorrer cada una de las hojas e insertarlas
    open c_leaves_to_copy for EXECUTE 'select hoja_id, id, modifico from Hoja where hoja_id in (' || p_ids ||')';

    loop
        fetch c_leaves_to_copy into v_leave_row;
        exit when not found;
        begin

           if not exists(select 1 from hoja where ram_id = p_ram_id_copy_to and id = v_leave_row.id) then

               -- Por cada hoja obtengo un id nuevo
               select SP_DBGetNewId('hoja',
                                    'hoja_id') into v_new_hoja_id;

               insert into hoja ( hoja_id, id, modifico, ram_id, arb_id )
               values ( v_new_hoja_id, v_leave_row.id, v_leave_row.modifico, p_ram_id_copy_to, v_arb_id );

           end if;
        end;
    end loop;

    close c_leaves_to_copy;

    v_ids := regexp_split_to_array(p_ids, ',');

    for v_index in 1 .. array_upper(v_ids, 1)
    loop

        v_id := v_ids[v_index];

        if v_id::integer < 0 then

            -- Por cada hoja obtengo un id nuevo
            select SP_DBGetNewId('hoja',
                                 'hoja_id') into v_new_hoja_id;

            insert into hoja ( hoja_id, id, modifico, ram_id, arb_id )
            values ( v_new_hoja_id, v_id::integer * -1, p_us_id, p_ram_id_copy_to, v_arb_id );

        end if;
    end loop;

    rtn := 'rtn';

    open rtn for select * from rama where ram_id = p_ram_id_copy_to;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_cliente_get_contactos(p_cli_id integer, OUT rtn refcursor)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$

begin   

   rtn := 'rtn';

   open rtn for

      select *
      from Contacto
      where cli_id = p_cli_id;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_arb_hoja_paste_cut(p_us_id integer, p_ids character varying, p_ram_id_to_paste_in integer, OUT rtn refcursor)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
declare
   v_new_hoja_id integer;
   v_arb_id integer;

   c_leaves_to_copy refcursor;
   v_leave_row record;

   v_ids   varchar[];
   v_id    varchar;
   v_index integer;
begin

    if p_ids = '' then RETURN; end if;

    if p_ram_id_to_paste_in = 0 then RETURN; end if;

    if not exists(select 1 from rama where ram_id = p_ram_id_to_paste_in) then RETURN; end if;

    select arb_id into v_arb_id from rama where ram_id = p_ram_id_to_paste_in;


    -- Creo un cursor para recorrer cada una de las hojas e insertarlas
    open c_leaves_to_copy for EXECUTE 'select hoja_id, id, modifico from Hoja where hoja_id in (' || p_ids ||')';

    loop
        fetch c_leaves_to_copy into v_leave_row;
        exit when not found;
        begin

           if not exists(select 1 from hoja where ram_id = p_ram_id_to_paste_in and id = v_leave_row.id) then

               update hoja set ram_id = p_ram_id_to_paste_in, arb_id = v_arb_id where hoja_id = v_leave_row.hoja_id;

           else

               delete from hoja where hoja_id = v_leave_row.hoja_id;

           end if;
        end;
    end loop;

    close c_leaves_to_copy;

    v_ids := regexp_split_to_array(p_ids, ',');

    for v_index in 1 .. array_upper(v_ids, 1)
    loop

        v_id := v_ids[v_index];

        if v_id::integer < 0 then

            -- Por cada hoja obtengo un id nuevo
            select SP_DBGetNewId('hoja',
                                 'hoja_id') into v_new_hoja_id;

            insert into hoja ( hoja_id, id, modifico, ram_id, arb_id )
            values ( v_new_hoja_id, v_id::integer * -1, p_us_id, p_ram_id_to_paste_in, v_arb_id );

        end if;
    end loop;

    rtn := 'rtn';

    open rtn for select * from rama where ram_id = p_ram_id_to_paste_in;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_arb_rama_create(p_us_id integer, p_arb_id integer, p_ram_id_padre integer, p_nombre character varying, OUT rtn refcursor)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
declare
        v_ram_id integer;
        v_is_temp boolean;
        v_max integer;
        v_orden integer;
        v_arb_id integer;
begin

        select SP_DBGetNewId('rama',
                              'ram_id') into v_ram_id;

        v_is_temp := p_ram_id_padre = -1000;
    
        /*
        ' - Si es una rama temporal le asigno como padre
        '   su propio ID para que quede huerfana
        */
        if v_is_temp then
                p_ram_id_padre = v_ram_id;
                v_orden := 0;
        /*
        ' - Si no obtengo el numero de orden que le corresponde
        '   dentro del padre
        '
        */
        else
                select max(ram_orden) into v_max from rama where ram_id_padre = p_ram_id_padre;
                if v_max is null then
                        v_orden := 1;                        
                else
                        v_orden := v_max + 1;                        
                end if;

                select arb_id into p_arb_id from rama where ram_id = p_ram_id_padre;
        end if;

        insert into rama (ram_id, ram_nombre, ram_id_padre, ram_orden, arb_id, modifico)
        values (v_ram_id, p_nombre, p_ram_id_padre, v_orden, p_arb_id, p_us_id);

        rtn := 'rtn';

        open rtn for select * from rama where ram_id = v_ram_id;
   
end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_arb_rama_get_rama(p_arb_id integer, p_client_id integer, OUT rtn refcursor)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
BEGIN

        rtn := 'rtn';

        open rtn for 
        SELECT rama.ram_id, ram_nombre, ram_id_padre 
        FROM rama INNER JOIN hoja ON rama.ram_id = hoja.ram_id 
        WHERE hoja.arb_id = p_arb_id 
          AND hoja.id = p_client_id 
          AND rama.ram_id <> rama.ram_id_padre; /* filter temp branches */

END;
$function$;

CREATE OR REPLACE FUNCTION public.sp_arb_rama_get_ramas(p_ram_id integer, OUT rtn refcursor)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
BEGIN

        rtn := 'rtn';

        select INTO rtn t.rtn from SP_ArbGetDecendencia(p_ram_id,1,1,1,0) t;

END;
$function$;

CREATE OR REPLACE FUNCTION public.sp_arb_rama_move_bottom(p_us_id integer, p_ram_id integer, OUT rtn refcursor)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
DECLARE
   v_last integer;
   v_ram_orden integer;
BEGIN

   IF NOT EXISTS(SELECT 1 FROM rama WHERE ram_id = p_ram_id) THEN RETURN; END IF;

   SELECT MAX(ram_orden) INTO v_last FROM rama WHERE ram_id_padre = (SELECT ram_id_padre FROM rama WHERE ram_id = p_ram_id);

   SET TRANSACTION READ WRITE;

   IF p_ram_id = 0 THEN RETURN; END IF;

   SELECT ram_orden INTO v_ram_orden FROM rama WHERE ram_id = p_ram_id;

   IF v_ram_orden = v_last THEN RETURN; END IF;

   UPDATE rama
    SET ram_orden = ram_orden - 1
   WHERE ram_id_padre = (SELECT ram_id_padre FROM rama WHERE ram_id = p_ram_id)
    AND ram_orden > v_ram_orden;

   UPDATE rama SET ram_orden = v_last WHERE ram_id = p_ram_id;

   rtn := 'rtn';

   OPEN rtn FOR SELECT * FROM rama WHERE ram_id = p_ram_id;

END;
$function$;

CREATE OR REPLACE FUNCTION public.sp_arb_rama_move_down(p_us_id integer, p_ram_id integer, OUT rtn refcursor)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
DECLARE
   v_last integer;
   v_ram_orden integer;
BEGIN

   IF NOT EXISTS(SELECT 1 FROM rama WHERE ram_id = p_ram_id) THEN RETURN; END IF;

   SELECT MAX(ram_orden) INTO v_last FROM rama WHERE ram_id_padre = (SELECT ram_id_padre FROM rama WHERE ram_id = p_ram_id);

   SET TRANSACTION READ WRITE;

   IF p_ram_id = 0 THEN RETURN; END IF;

   SELECT ram_orden INTO v_ram_orden FROM rama WHERE ram_id = p_ram_id;

   IF v_ram_orden = v_last THEN RETURN; END IF;

   UPDATE rama
    SET ram_orden = ram_orden - 1
   WHERE ram_id_padre = (SELECT ram_id_padre FROM rama WHERE ram_id = p_ram_id)
    AND ram_orden = v_ram_orden + 1;

   UPDATE rama SET ram_orden = ram_orden +1 WHERE ram_id = p_ram_id;

   rtn := 'rtn';

   OPEN rtn FOR SELECT * FROM rama WHERE ram_id = p_ram_id;

END;
$function$;

CREATE OR REPLACE FUNCTION public.sp_arb_rama_move_top(p_us_id integer, p_ram_id integer, OUT rtn refcursor)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
DECLARE
   v_ram_orden integer;
   v_first integer;
BEGIN

   IF NOT EXISTS(SELECT 1 FROM rama WHERE ram_id = p_ram_id) THEN RETURN; END IF;

   SELECT MIN(ram_orden) INTO v_first FROM rama WHERE ram_id_padre = (SELECT ram_id_padre FROM rama WHERE ram_id = p_ram_id);

   SET TRANSACTION READ WRITE;

   IF p_ram_id = 0 THEN RETURN; END IF;

   SELECT ram_orden INTO v_ram_orden FROM rama WHERE ram_id = p_ram_id;

   IF v_ram_orden = v_first THEN RETURN; END IF;

   UPDATE rama
    SET ram_orden = ram_orden + 1
   WHERE ram_id_padre = (SELECT ram_id_padre FROM rama WHERE ram_id = p_ram_id)
    AND ram_orden < v_ram_orden;

   UPDATE rama SET ram_orden = v_first WHERE ram_id = p_ram_id;

   rtn := 'rtn';

   OPEN rtn FOR SELECT * FROM rama WHERE ram_id = p_ram_id;

END;
$function$;

CREATE OR REPLACE FUNCTION public.sp_arb_rama_move_up(p_us_id integer, p_ram_id integer, OUT rtn refcursor)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
DECLARE
   v_ram_orden integer;
BEGIN

   IF NOT EXISTS(SELECT 1 FROM rama WHERE ram_id = p_ram_id) THEN RETURN; END IF;

   SET TRANSACTION READ WRITE;

   IF p_ram_id = 0 THEN RETURN; END IF;

   SELECT ram_orden INTO v_ram_orden FROM rama WHERE ram_id = p_ram_id;

   IF v_ram_orden = 0 THEN RETURN; END IF;

   UPDATE rama
    SET ram_orden = ram_orden + 1
   WHERE ram_id_padre = (SELECT ram_id_padre FROM rama WHERE ram_id = p_ram_id)
    AND ram_orden = v_ram_orden - 1;

   UPDATE rama SET ram_orden = ram_orden -1 WHERE ram_id = p_ram_id;

   rtn := 'rtn';

   OPEN rtn FOR SELECT * FROM rama WHERE ram_id = p_ram_id;

END;
$function$;

CREATE OR REPLACE FUNCTION public.sp_arb_rama_orden_validate(p_us_id integer)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
DECLARE
   v_orden integer;
   c1 refcursor;
   c2 refcursor;
   v_row record;
   v_row2 record;
BEGIN

   SET TRANSACTION READ WRITE;

   OPEN c1 FOR SELECT ram_id FROM rama WHERE ram_id <> 0;
   LOOP
          FETCH c1 INTO v_row;
          EXIT WHEN NOT FOUND;

          v_orden := 0;

          OPEN c2 FOR SELECT ram_id FROM rama WHERE ram_id_padre = v_row.ram_id ORDER BY ram_orden;
          LOOP

                FETCH c2 INTO v_row2;
                EXIT WHEN NOT FOUND;

                UPDATE rama SET ram_orden = v_orden WHERE ram_id = v_row2.ram_id;
                v_orden := v_orden +1;

          END LOOP;
          CLOSE c2;

   END LOOP;
   CLOSE c1;

END;
$function$;

CREATE OR REPLACE FUNCTION public.sp_arb_rama_rename(p_us_id integer, p_ram_id integer, p_nombre character varying, OUT rtn refcursor)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
BEGIN

        UPDATE rama set ram_nombre = p_nombre WHERE ram_id = p_ram_id;


        IF EXISTS(SELECT 1 FROM rama WHERE ram_id = p_ram_id AND ram_id_padre = 0)
        THEN

            UPDATE arbol set arb_nombre = p_nombre
            WHERE arb_id = (SELECT arb_id FROM rama WHERE ram_id = p_ram_id);

        END IF;

        rtn := 'rtn';

        open rtn for SELECT * FROM rama WHERE ram_id = p_ram_id;

END;
$function$;

CREATE OR REPLACE FUNCTION public.sp_arbborrarrama(p_us_id integer, p_ram_id integer)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
declare
   v_error_code varchar := '00';
   v_error_msg varchar := '';
   -- si la rama es raiz tengo que borrar el arbol
   v_arb_id integer;
   -- para actulizar el orden
   v_ram_orden integer;
   v_ram_id_padre integer;
   rtn refcursor;
   v_row record;
   v_tran_id integer;
begin

          if not exists(select 1 from rama where ram_id = p_ram_id) then RETURN; end if;

   --------------------------------------------------------------------

        create TEMP table tt_t_ramas_a_borrar
        (
          ram_id integer  not null,
          tran_id integer  not null
        ) on commit drop;
        
        v_tran_id := nextval('t_ramas_a_borrar_seq');
        
   --------------------------------------------------------------------
   
   set TRANSACTION READ WRITE;

   if p_ram_id = 0 then RETURN; end if;

   select arb_id,
          ram_orden,
          ram_id_padre
     into v_arb_id,
          v_ram_orden,
          v_ram_id_padre
     from Rama
     where ram_id = p_ram_id
       and ram_id_padre = 0;

   select into rtn t.rtn from SP_ArbGetDecendencia(p_ram_id,1,0,0,0) t;

   loop
          fetch rtn into v_row;
          exit when not found;
          insert into tt_t_ramas_a_borrar(ram_id, tran_id) values (v_row.ram_id, v_tran_id);
   end loop;
   close rtn;

   begin
      -- primero las hojas
      delete from Hoja where exists(select 1 from tt_t_ramas_a_borrar where Hoja.ram_id = tt_t_ramas_a_borrar.ram_id);

   exception
      when others then
         v_error_code := SQLSTATE;
         v_error_msg := SQLERRM;
   end;

   if not is_error(v_error_code) then

             begin
                -- ahora las ramas
                delete from Rama where exists (select 1 from tt_t_ramas_a_borrar where Rama.ram_id = tt_t_ramas_a_borrar.ram_id);
             exception
                when others then
                   v_error_code := SQLSTATE;
                   v_error_msg := SQLERRM;
             end;

             if not is_error(v_error_code) then
             begin
                       -- si era una raiz borro el arbol
                       if v_arb_id is not null then

                          delete from Arbol where arb_id = v_arb_id;

                       else
                          -- sino, tengo que actualizar el orden de los que estaban bajo esta rama
                          update rama
                             set ram_orden = ram_orden - 1
                          where ram_id_padre = v_ram_id_padre
                            and ram_orden < v_ram_orden;

                       end if;

                       RETURN;

             exception
                when others then
                   v_error_code := SQLSTATE;
                   v_error_msg := SQLERRM;
             end;
             end if;
   end if;
   
   if is_error(v_error_code) then

          raise exception 'No se pude borrar la rama. % %', v_error_code, v_error_msg;
          
   end if;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_arbconvertid(p_id character varying, OUT p_hoja_id integer, OUT p_ram_id integer)
 RETURNS record
 LANGUAGE plpgsql
AS $function$
declare
begin

   p_hoja_id := 0;

   p_ram_id := 0;

   if lower(SUBSTR(p_id, 1, 1)) = 'n' then-- esto significa que es un nodo
   
      p_ram_id := to_number(SUBSTR(p_id, 2, LENGTH(p_id) - 1));

   else
      p_hoja_id := to_number(p_id);

   end if;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_arbcopiarrama(p_us_id integer, p_ram_id_copy_from integer, p_ram_id_copy_to integer, p_solo_los_hijos smallint, OUT rtn refcursor)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
declare
   v_ram_id integer;
   v_new_ram_id integer;
   v_new_hoja_id integer;
   v_ram_id_padre integer;
   v_orden integer;
   v_arb_id integer;
   v_incluir_ram_id_to_copy integer;

   c_branches_to_copy refcursor;
   c_leaves_to_copy refcursor;
   v_branch_row record;
   v_leave_row record;
   v_tran_id integer;
begin

   if p_ram_id_copy_from = 0 then RETURN; end if;

   if p_ram_id_copy_to = 0 then RETURN; end if;

   if not exists(select 1 from rama where ram_id = p_ram_id_copy_from) then RETURN; end if;

   if not exists(select 1 from rama where ram_id = p_ram_id_copy_to) then RETURN; end if;

   --------------------------------------------------------------------

        create TEMP table t_rama_new
        (
          ram_id integer  not null,
          ram_id_new integer  not null,
          tran_id integer  not null
        ) on commit drop;

        v_tran_id := nextval('t_rama_new_seq');

   --------------------------------------------------------------------

   select arb_id into v_arb_id from rama where ram_id = p_ram_id_copy_to;

   if p_solo_los_hijos <> 0 then
      v_incluir_ram_id_to_copy := 0;

   else
      v_incluir_ram_id_to_copy := 1;

   end if;

   select into c_branches_to_copy t.rtn from SP_ArbGetDecendencia(p_ram_id_copy_from,v_incluir_ram_id_to_copy,0,0,0) t;

   loop
      fetch c_branches_to_copy into v_branch_row;
      exit when not found;
      
      begin

         v_ram_id := v_branch_row.ram_id;

         -- si esta es la rama principal de la copia, su padre tiene que ser la rama en la que estoy pegando
         if v_ram_id = p_ram_id_copy_from then
            v_ram_id_padre := p_ram_id_copy_to;
            select max(ram_orden) into v_orden from rama where ram_id_padre = v_ram_id_padre;
            v_orden := coalesce(v_orden + 1, 0); 

         else
         begin
            -- Obtengo el padre de la rama que estoy copiando
            select ram_id_padre into v_ram_id_padre from rama where ram_id = v_ram_id;

            -- Si pedi copiar solo los hijos y la rama que estoy copiando es hija directa, 
            -- entonces su padre es la rama en la que estoy pegando
            if p_solo_los_hijos <> 0 and v_ram_id_padre = p_ram_id_copy_from then
            begin
               v_ram_id_padre := p_ram_id_copy_to;
               select max(ram_orden) into v_orden from rama where ram_id_padre = v_ram_id_padre;
               v_orden := coalesce(v_orden + 1, 0); 

            end;
            else
            begin
               -- Obtengo el nuevo padre
               select ram_id_new into v_ram_id_padre
               from rama
               inner join t_rama_new
                    on rama.ram_id = t_rama_new.ram_id
                        and rama.ram_id = v_ram_id_padre
               where tran_id = v_tran_id;

               v_orden := null;
               
            end;
            end if;

         end;
         end if;

         select SP_DBGetNewId('rama',
                              'ram_id') into v_new_ram_id;

         insert into rama
           ( ram_id, ram_nombre, arb_id, modifico, ram_id_padre, ram_orden )
           ( select v_new_ram_id,
                    ram_nombre,
                    v_arb_id,
                    p_us_id,
                    v_ram_id_padre,
                    coalesce(v_orden, ram_orden)
             from rama
                where ram_id = v_ram_id );

         insert into t_rama_new ( ram_id, ram_id_new, tran_id ) values ( v_ram_id, v_new_ram_id, v_tran_id );

         -- Creo un cursor para recorrer cada una de las hojas e insertarlas
         open c_leaves_to_copy for select hoja_id from Hoja where ram_id = v_ram_id;

         loop
            fetch c_leaves_to_copy into v_leave_row;
            exit when not found;
            begin
               -- Por cada hoja obtengo un id nuevo
               select SP_DBGetNewId('hoja',
                                    'hoja_id') into v_new_hoja_id;

               insert into hoja
                 ( hoja_id, id, modifico, ram_id, arb_id )
                 ( select v_new_hoja_id,
                          id,
                          modifico,
                          v_new_ram_id,
                          v_arb_id
                   from Hoja
                      where hoja_id = v_leave_row.hoja_id );

            end;
         end loop;

         close c_leaves_to_copy;

      end;
   end loop;

   close c_branches_to_copy;

   rtn := 'rtn';

   open rtn for select * from rama where ram_id = p_ram_id_copy_to;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_arbcortarrama(p_us_id integer, p_ram_id_cut_from integer, p_ram_id_to_paste_in integer, p_solo_los_hijos smallint, OUT rtn refcursor)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
declare
   v_arb_id integer;
   v_incluir_ram_id_to_copy integer;
   v_orden integer;

   c_branches_to_copy refcursor;
   v_branch_row record;
begin

   if p_ram_id_cut_from = 0 then RETURN; end if;

   if p_ram_id_to_paste_in = 0 then RETURN; end if;

   if not exists(select 1 from rama where ram_id = p_ram_id_cut_from) then RETURN; end if;

   if not exists(select 1 from rama where ram_id = p_ram_id_to_paste_in) then RETURN; end if;

   select arb_id into v_arb_id from rama where ram_id = p_ram_id_to_paste_in;

   select max(ram_orden) into v_orden from rama where ram_id_padre = p_ram_id_to_paste_in;

   v_orden := coalesce(v_orden+1,0);
      
   if p_solo_los_hijos <> 0 then
      v_incluir_ram_id_to_copy := 0;

      update rama
                  set ram_id_padre = p_ram_id_to_paste_in, modifico = p_us_id, ram_orden = ram_orden + v_orden
                  where ram_id_padre = p_ram_id_cut_from;

   else
      v_incluir_ram_id_to_copy := 1;

      update rama
                  set ram_id_padre = p_ram_id_to_paste_in, modifico = p_us_id, ram_orden = ram_orden + v_orden
                  where ram_id = p_ram_id_cut_from;

   end if;

   if exists(select 1 from rama where ram_id = p_ram_id_cut_from and arb_id <> v_arb_id) then

       select into c_branches_to_copy t.rtn from SP_ArbGetDecendencia(p_ram_id_cut_from,v_incluir_ram_id_to_copy,0,0,0) t;

       loop
          fetch c_branches_to_copy into v_branch_row;
          exit when not found;

          update rama set arb_id = v_arb_id, modifico = p_us_id where rama.ram_id = v_branch_row.ram_id;
          update hoja set arb_id = v_arb_id, modifico = p_us_id where hoja.ram_id = v_branch_row.ram_id;

       end loop;

       close c_branches_to_copy;

   end if;

   rtn := 'rtn';

   open rtn for select * from rama where ram_id = p_ram_id_to_paste_in;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_arbgetallhojas(p_ram_id integer, p_clienteid integer DEFAULT 0, p_tblidalias integer DEFAULT 0)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
declare
   v_tot2 integer;
   v_tot1 integer;
   v_n integer;
begin

   drop table if exists tt_t_rama;

   create temporary table tt_t_rama
   (
     ram_id integer  not null,
     N integer  not null
   ) on commit drop;

   if p_ram_id = 0 then
      RETURN;
   end if;

   if p_clienteId = 0 then
      raise exception '@@ERROR_SP:El procedimiento almacenado sp_ArbGetAllHojas no puede ser llamado para obtener un cursor. Se debe usar sp_ArbGetAllHojasRs.';
      RETURN;
   end if;
	 
   v_tot1 := -1;

   v_tot2 := 0;

   v_n := 1;

   insert into tt_t_rama ( ram_id, N )
                  values ( p_ram_id, 0 );

   while v_tot1 < v_tot2
   loop
      begin
         v_tot1 := v_tot2;

         insert into tt_t_rama
           ( ram_id, N )
           ( select r.ram_id,
                    v_n
             from Rama r,
                  tt_t_rama t
                where r.ram_id_padre = t.ram_id
                        and t.N = v_n - 1
                        and r.ram_id <> t.ram_id );

         select COUNT(*)
         into v_tot2
         from tt_t_rama;

         v_n := v_n + 1;

      end;
   end loop;

   if p_clienteId <> 0 then
   declare
      v_tbl_id integer;
   begin
      select tbl_id
        into v_tbl_id
      from Arbol inner join Rama on Arbol.arb_id = Rama.arb_id
      where Rama.ram_id = p_ram_id;

      if p_tblIdAlias <> 0 then
         v_tbl_id := p_tblIdAlias;
      end if;

      insert into rptArbolRamaHoja
        ( rptarb_cliente, rptarb_hojaid, tbl_id, ram_id )
        ( select DISTINCT p_clienteId,
                          h.id,
                          v_tbl_id,
                          t.ram_id
          from Hoja h inner join tt_t_rama t on h.ram_id = t.ram_id );

   end;
   end if;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_doc_factura_venta_save_cliente(p_fv_id integer, p_fvtmp_id integer, OUT p_success integer, OUT p_error_msg character varying)
 RETURNS record
 LANGUAGE plpgsql
AS $function$
begin

   p_success := 1;
   p_error_msg := '';

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_arbgetarboles(p_tbl_id integer, OUT rtn refcursor)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
DECLARE
BEGIN

        rtn := 'rtn';

        OPEN rtn FOR
        SELECT  Arbol.arb_id,
                arb_Nombre,
                ram_id
        FROM Arbol,
             Rama
         WHERE Rama.ram_id_padre = 0
                 AND Arbol.arb_id = Rama.arb_id
                 AND tbl_id = p_tbl_id
                 AND Rama.ram_id <> 0;

END;
$function$;

CREATE OR REPLACE FUNCTION public.sp_arbgetdecendencia(p_ram_id integer DEFAULT NULL::integer, p_incluir_ram_id integer DEFAULT 1, p_incluir_ram_id_padre integer DEFAULT 0, p_incluir_nombre integer DEFAULT 0, p_incluir_arb_id integer DEFAULT 0, OUT rtn refcursor)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
DECLARE
   v_tot2 integer;
   v_tot1 integer;
   v_n integer;
   v_arb_id integer;
   v_sqlstmt varchar(512);
   v_where varchar(255);
   v_sqlArbId varchar(50);
   v_tran_id integer;
BEGIN

        IF p_ram_id = 0 THEN
                RETURN;
        END IF;

        CREATE TEMP TABLE tt_t_rama2
        (
          tran_id integer NOT NULL,
          ram_id integer  NOT NULL,
          N integer  NOT NULL,
          ram_id_padre integer  NOT NULL,
          arb_id integer  NOT NULL,
          orden integer  NOT NULL
        ) on commit drop;

        v_tran_id := nextval('t_rama2_seq');

        v_tot1 := -1;

        v_tot2 := 0;

        v_n := 1;

        IF p_incluir_arb_id <> 0 THEN
                SELECT arb_id
                INTO v_arb_id
                FROM Rama
                WHERE ram_id = p_ram_id;
        ELSE
                v_arb_id := 0;
        END IF;

        INSERT INTO tt_t_rama2
        (tran_id, ram_id, N, ram_id_padre, arb_id, orden)
        (SELECT v_tran_id,
                p_ram_id,
                0,
                ram_id_padre,
                v_arb_id,
                ram_orden
        FROM Rama
        WHERE ram_id = p_ram_id );

   WHILE v_tot1 < v_tot2
   LOOP
      BEGIN
         v_tot1 := v_tot2;

         INSERT INTO tt_t_rama2
           ( tran_id, ram_id, N, ram_id_padre, arb_id, orden )
           SELECT v_tran_id,
                  r.ram_id,
                  v_n,
                  r.ram_id_padre,
                  v_arb_id,
                  r.ram_orden
             FROM Rama r,
                  tt_t_rama2 t
              WHERE r.ram_id_padre = t.ram_id
                      AND t.tran_id = v_tran_id
                      AND t.N = v_n - 1
                      -- esto chequea que no existan referencias circulares
                      AND NOT EXISTS ( SELECT *
                                       FROM tt_t_rama2
                                          WHERE tt_t_rama2.ram_id = r.ram_id and tt_t_rama2.tran_id = v_tran_id )
             ORDER BY r.ram_orden;

         SELECT COUNT(*) INTO v_tot2
         FROM tt_t_rama2 t WHERE t.tran_id = v_tran_id;

         v_n := v_n + 1;

      END;
   END LOOP;

   v_where := ' where t.tran_id = ' || v_tran_id::varchar;

   IF p_incluir_ram_id = 0 THEN
      v_where := v_where || ' and t.ram_id <> ' || to_char(p_ram_id);
   END IF;

   IF p_incluir_arb_id <> 0 THEN
      v_sqlArbId := ',t.arb_id';

   ELSE
      v_sqlArbId := '';

   END IF;

   IF p_incluir_ram_id_padre <> 0 THEN
   BEGIN
      IF p_incluir_nombre <> 0 THEN
         v_sqlstmt := 'select t.ram_id,t.ram_id_padre,r.ram_nombre' || v_sqlArbId || ' from tt_t_rama2 t inner join rama r on t.ram_id = r.ram_id';

      ELSE
         v_sqlstmt := 'select ram_id,ram_id_padre' || v_sqlArbId || ' from tt_t_rama2 t';

      END IF;

   END;
   ELSE
   BEGIN
      IF p_incluir_nombre <> 0 THEN
         v_sqlstmt := 'select t.ram_id,r.ram_nombre' || v_sqlArbId || ' from tt_t_rama2 t inner join rama r on t.ram_id = r.ram_id';

      ELSE
         v_sqlstmt := 'select ram_id' || v_sqlArbId || ' from tt_t_rama2 t';

      END IF;

   END;
   END IF;

   v_sqlstmt := v_sqlstmt || v_where || ' order by n,orden';

   rtn := 'rtn';

   OPEN rtn FOR EXECUTE v_sqlstmt;

END;
$function$;

CREATE OR REPLACE FUNCTION public.sp_arbgethojas(p_ram_id integer DEFAULT NULL::integer, p_solocolumnas integer DEFAULT 0, p_abuscar character varying DEFAULT ''::character varying, p_top integer DEFAULT 3000, OUT rtn refcursor)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
declare
   -- 1 Averiguo de que tabla se trata
   v_tabla varchar(5000);
   v_campoId varchar(5000);
   v_campoNombre varchar(255);
   v_campos varchar(5000);
   v_camposRama varchar(5000);
   v_tablasRama varchar(5000);
   v_where varchar(5000);
   v_prefix varchar(5000);
   v_sqlstmt varchar(5000);
   v_sqlstmt2 varchar(5000);
   v_sqlwhere varchar(5000);
   v_esRaiz integer;
   v_arb_id integer;
   v_tran_id integer;
begin

        create TEMP table tt_hojaid
        (
          tran_id integer not null,
          hoja_id integer not null,
          id integer not null
        ) on commit drop;

        v_tran_id := nextval('t_hojaid_seq');
        
   --------------------------------------------------------------------
   
   select ramc_valor
     into v_camposRama
     from RamaConfig
      where ram_id = p_ram_id
              and ramc_aspecto = 'Campos';

   select ramc_valor
     into v_tablasRama
     from RamaConfig
      where ram_id = p_ram_id
              and ramc_aspecto = 'Tablas';

   select ramc_valor
     into v_prefix
     from RamaConfig
      where ram_id = p_ram_id
              and ramc_aspecto = 'Prefix';

   select ramc_valor
     into v_where
     from RamaConfig
      where ram_id = p_ram_id
              and ramc_aspecto = 'where';

   if v_camposRama is null then
      v_camposRama := '';

   end if;

   if v_tablasRama is null then
      v_tablasRama := '';

   end if;

   if v_prefix is null then
      v_prefix := '';

   end if;

   if v_where is null then
      v_where := '';

   end if;

   --------------------------------------------------------------------
   select tbl_nombreFisico,
          tbl_camposInView,
          tbl_campoId,
          tbl_campoNombre
     into v_tabla,
          v_campos,
          v_campoId,
          v_campoNombre
     from arbol inner join rama on arbol.arb_id = rama.arb_id
                inner join tabla on tabla.tbl_id = arbol.tbl_id
     where rama.ram_id = p_ram_id;

   --------------------------------------------------------------------
   if LTRIM(v_camposRama) <> '' then
      v_campos := v_camposRama;

   end if;

   if LTRIM(v_prefix) = '' then
      v_prefix := v_tabla;

   end if;

   --------------------------------------------------------------------
   -- armo la sentencia sql
   v_sqlstmt := 'select hoja_id,';

   v_sqlstmt := v_sqlstmt || v_prefix || '.' || v_campoId || ' as ID,';

   if INSTR(v_campoNombre, 'codigo', 1) <> 0 then
      v_sqlstmt := v_sqlstmt || v_prefix || '.' || v_campoNombre || ' as Codigo';

   else
      if INSTR(v_campoNombre, 'apellido', 1) <> 0 then
         v_sqlstmt := v_sqlstmt || v_prefix || '.' || v_campoNombre || ' as Apellido' ;

      else
         v_sqlstmt := v_sqlstmt || v_prefix || '.' || v_campoNombre || ' as Nombre';

      end if;

   end if;

   v_campos := sp_strSetPrefix(v_prefix, v_campos);

   if LTRIM(v_campos) <> '' then
      v_sqlstmt := v_sqlstmt || ',' || v_campos;

   end if;

   v_sqlstmt := v_sqlstmt || ' from ' || v_tabla || ' ' || v_prefix;

   if LTRIM(v_tablasRama) <> '' then
      v_sqlstmt := v_sqlstmt || ',' || v_tablasRama;

   end if;

   v_sqlwhere := ' where Hoja.ram_id = ' || to_char(p_ram_id) || ' and Hoja.id = ' || v_prefix || '.' || v_campoId || v_where;

   -- si solo quieren las columnas
   if coalesce(p_soloColumnas, 0) <> 0 then
   begin
      v_sqlstmt := v_sqlstmt || ', Hoja ' || v_sqlwhere;

      v_sqlstmt := v_sqlstmt || ' and 1=2';

   end;
   else
   begin
      -- si se trata de la raiz tambien entran los que no estan asignados a ninguna rama
      select ram_id_padre,
             arb_id
        into v_esRaiz,
             v_arb_id
        from Rama
         where ram_id = p_ram_id;

      if v_esRaiz = 0 then
      begin
         -- Ids de la raiz
         v_sqlstmt2 := ' insert into tt_hojaid select ' || v_tran_id::varchar || ', hoja_id,id from Hoja where ram_id = ' || to_char(p_ram_id);

         EXECUTE v_sqlstmt2;--print (@sqlstmt2)--
         

         -- Ids sin asignar
         v_sqlstmt2 := 'insert into tt_hojaid select ' || v_tran_id::varchar || ', ' || v_campoId || '*-1,' || v_campoId || ' from ' || v_tabla || ' where not exists (select hoja_id from Hoja inner join Rama on Hoja.ram_id = Rama.ram_id where Hoja.id = ' || v_tabla || '.' || v_campoId || ' and Hoja.arb_id = ' || to_char(v_arb_id) || ' and (Rama.ram_id <> ram_id_padre or Rama.ram_id = 0))';

         EXECUTE v_sqlstmt2;--print (@sqlstmt2)--
         

         -- el filtro esta en tt_hojaid
         v_sqlstmt := v_sqlstmt || ', tt_hojaid where tt_hojaid.tran_id = ' || v_tran_id::varchar || ' and tt_hojaid.id = ' || v_prefix || '.' || v_campoId || v_where;

      end;
      else
         v_sqlstmt := v_sqlstmt || ', Hoja ' || v_sqlwhere;

      end if;

   end;
   end if;

   v_sqlstmt := v_sqlstmt || ' limit ' || p_top::varchar;

   rtn := 'rtn';

   open rtn for EXECUTE v_sqlstmt;
   --print (@sqlstmt)--
   
end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_arbgetramas(p_arb_id integer, OUT rtn refcursor)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
DECLARE
   -- para traer la raiz primero
   --select ram_id, ram_nombre, ram_id_padre from rama where arb_id = @@arb_id and ram_id <> 0 order by ram_id_padre
   v_raiz_id integer;
BEGIN
        SELECT ram_id
        INTO v_raiz_id
        FROM Rama
        WHERE arb_id = p_arb_id
        AND ram_id_padre = 0
        AND ram_id <> 0;

        rtn := 'rtn';

        select INTO rtn t.rtn from SP_ArbGetDecendencia(v_raiz_id,1,1,1,0) t;   

END;
$function$;

CREATE OR REPLACE FUNCTION public.sp_arbisraiz(p_ram_id integer, OUT p_israiz smallint)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
DECLARE
   v_temp integer := 0;
BEGIN

   BEGIN
      SELECT count(*) INTO v_temp
      FROM Rama
         WHERE ram_id = p_ram_id
                 AND ram_id_padre = 0;
   EXCEPTION
      WHEN OTHERS THEN
         NULL;
         raise info 'puto';
   END;

   -- Verifico que se trate de una raiz
   IF v_temp = 1 THEN
      p_IsRaiz := 1::smallint;

   ELSE
      p_IsRaiz := 0::smallint;

   END IF;

END;
$function$;

CREATE OR REPLACE FUNCTION public.sp_auditoria_credito_check_doc_cobz(p_cobz_id integer, OUT p_success integer, OUT p_error_msg character varying)
 RETURNS record
 LANGUAGE plpgsql
AS $function$
begin

   select * from sp_auditoria_credito_check_doc_cobz_cliente(p_cobz_id) into p_success, p_error_msg;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_auditoria_credito_check_doc_cobz_cliente(p_cobz_id integer, OUT p_success integer, OUT p_error_msg character varying)
 RETURNS record
 LANGUAGE plpgsql
AS $function$
declare
   v_error smallint;
   v_doct_id integer;
   v_cobz_nrodoc varchar(50);
   v_cobz_numero varchar(50);
   v_est_id integer;
   v_cobz_pendiente decimal(18,6);
   v_cobz_total decimal(18,6);
   v_aplicado decimal(18,6);
   v_cli_id integer;
   v_doct_cobranza integer := 13;
   v_emp_id integer;
   v_pendiente decimal(18,6);
   v_cache decimal(18,6);
begin

   v_error := 0;
   p_success := 0;
   p_error_msg := '@@ERROR_SP:';

   select doct_id,
          cobz_nrodoc,
          trim(to_char(cobz_numero)),
          est_id,
          cobz_pendiente,
          cobz_total,
          cli_id,
          emp_id
     into v_doct_id,
          v_cobz_nrodoc,
          v_cobz_numero,
          v_est_id,
          v_cobz_pendiente,
          v_cobz_total,
          v_cli_id,
          v_emp_id
   from Cobranza
   where cobz_id = p_cobz_id;

   if exists ( select cli_id
               from ClienteCacheCredito
               where cli_id <> v_cli_id
                 and doct_id = v_doct_cobranza
                 and id = p_cobz_id ) then
   
      v_error := 1;
      p_error_msg := p_error_msg 
                     || 'Esta cobranza esta afectando el cache de credito de otro cliente ' 
                     || CHR(10);

   end if;

   v_pendiente := round(v_cobz_pendiente, 2);

   if abs(v_pendiente) >= 0.01 then

      if not exists ( select id
                      from ClienteCacheCredito
                      where cli_id = v_cli_id
                        and doct_id = v_doct_cobranza
                        and id = p_cobz_id ) then
      
         v_error := 1;
         p_error_msg := p_error_msg 
                        || 'Esta cobranza tiene pendiente y no hay registro en el cache de credito' 
                        || CHR(10);

      else
         
         select sum(clicc_importe)
           into v_cache
         from ClienteCacheCredito
         where cli_id = v_cli_id
           and doct_id = v_doct_cobranza
           and id = p_cobz_id
           and emp_id = v_emp_id;

         v_cache := coalesce(v_cache, 0);

         if abs(v_pendiente - v_cache) > 0.01 then
         
            v_error := 1;
            p_error_msg := p_error_msg 
                           || 'Esta cobranza tiene un pendiente distinto al que figura en el cache de credito' 
                           || CHR(10);

         end if;

      end if;

   else

      if exists ( select id
                  from ClienteCacheCredito
                  where cli_id = v_cli_id
                    and doct_id = v_doct_cobranza
                    and id = p_cobz_id ) then

         v_error := 1;
         p_error_msg := p_error_msg 
                        || 'Esta cobranza no tiene pendiente y tiene registro en el cache de credito' 
                        || CHR(10);

      end if;

   end if;

   -- no hubo errores asi que todo bien
   --
   if v_error = 0 then
      p_success := 1;
   end if;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_cliente_get_cuentas_grupo(p_cli_id integer, OUT rtn refcursor)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$

begin   

   rtn := 'rtn';

   open rtn for
      ----------------------------------------------------------------------------------------------
      select
             clicueg_id,
             clicueg.cueg_id,
             clicueg.cue_id,
             cueg_nombre,
             cue_nombre
      from ClienteCuentaGrupo clicueg
      inner join CuentaGrupo cueg on clicueg.cueg_id = cueg.cueg_id
      inner join Cuenta cue on clicueg.cue_id = cue.cue_id
      where clicueg.cli_id = p_cli_id;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_auditoria_credito_check_doc_fc(p_fc_id integer, OUT p_success integer, OUT p_error_msg character varying)
 RETURNS record
 LANGUAGE plpgsql
AS $function$
declare
   v_error smallint;

   v_fc_nrodoc varchar(50);
   v_fc_numero varchar(50);
   v_fc_pendiente decimal(18,6);
   v_fc_total decimal(18,6);

   v_doct_id integer;
   v_doct_facturaCpra integer := 2;
   v_emp_id integer;
   v_est_id integer;
   v_prov_id integer;

   v_aplicado decimal(18,6);
   v_pendiente decimal(18,6);
   v_cache decimal(18,6);
begin

   v_error := 0;
   p_success := 0;
   p_error_msg := '@@ERROR_SP:';

   select fc.doct_id,
          fc.fc_nrodoc,
          trim(to_char(fc.fc_numero)),
          fc.est_id,
          fc.fc_pendiente,
          fc.fc_total,
          fc.prov_id,
          doc.emp_id
     into v_doct_id,
          v_fc_nrodoc,
          v_fc_numero,
          v_est_id,
          v_fc_pendiente,
          v_fc_total,
          v_prov_id,
          v_emp_id
   from FacturaCompra fc
   join Documento doc
     on fc.doc_id = doc.doc_id
   where fc.fc_id = p_fc_id;

   if exists ( select prov_id
               from ProveedorCacheCredito
               where prov_id <> v_prov_id
                 and doct_id = v_doct_facturaCpra
                 and id = p_fc_id ) then

      v_error := 1;
      p_error_msg := p_error_msg || 'Esta factura esta afectando el cache de credito de otro Proveedor' || CHR(10);

   end if;

   select sum(fcd_pendiente)
     into v_pendiente
   from FacturaCompraDeuda
   where fc_id = p_fc_id;

   v_pendiente := coalesce(v_pendiente, 0);

   if v_doct_id = 8 /* nota de credito */ then
      v_pendiente := -v_pendiente;
   end if;

   if v_pendiente <> 0 then

      if not exists ( select id
                      from ProveedorCacheCredito
                      where prov_id = v_prov_id
                        and doct_id = v_doct_facturaCpra
                        and id = p_fc_id ) then

         v_error := 1;
         p_error_msg := p_error_msg
                        || 'Esta factura tiene pendiente y no hay registro en el cache de credito'
                        || CHR(10);

      else

         select sum(provcc_importe)
           into v_cache
         from ProveedorCacheCredito
         where prov_id = v_prov_id
           and doct_id = v_doct_facturaCpra
           and id = p_fc_id
           and emp_id = v_emp_id;

         v_cache := coalesce(v_cache, 0);

         if abs(v_pendiente - v_cache) >= 0.01 then

            v_error := 1;
            p_error_msg := p_error_msg
                           || 'Esta factura tiene un pendiente distinto al que figura en el cache de credito'
                           || CHR(10);

         end if;

      end if;

   else

      if exists ( select id
                  from ProveedorCacheCredito
                  where prov_id = v_prov_id
                    and doct_id = v_doct_facturaCpra
                    and id = p_fc_id ) then

         v_error := 1;
         p_error_msg := p_error_msg
                        || 'Esta factura no tiene pendiente y tiene registro en el cache de credito'
                        || CHR(10);

      end if;

   end if;

   -- no hubo errores asi que todo bien
   --
   if v_error = 0 then
      p_success := 1;
   end if;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_auditoria_credito_check_doc_fv(p_fv_id integer, OUT p_success integer, OUT p_error_msg character varying)
 RETURNS record
 LANGUAGE plpgsql
AS $function$
begin

   select * from sp_auditoria_credito_check_doc_fv_cliente(p_fv_id) into p_success, p_error_msg;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_auditoria_credito_check_doc_fv_cliente(p_fv_id integer, OUT p_success integer, OUT p_error_msg character varying)
 RETURNS record
 LANGUAGE plpgsql
AS $function$
declare
   v_error smallint;
   v_doct_id integer;
   v_fv_nrodoc varchar(50);
   v_fv_numero varchar(50);
   v_est_id integer;
   v_fv_pendiente decimal(18,6);
   v_fv_total decimal(18,6);
   v_aplicado decimal(18,6);
   v_cli_id integer;
   v_doct_facturaVta integer;
   v_emp_id integer;
   v_pendiente decimal(18,6);
   v_cache decimal(18,6);
begin

   v_error := 0;
   p_success := 0;
   p_error_msg := '@@ERROR_SP:';

   v_doct_facturaVta := 1;

   select doct_id,
          fv_nrodoc,
          trim(to_char(fv_numero)),
          est_id,
          fv_pendiente,
          fv_total,
          cli_id,
          emp_id
     into v_doct_id,
          v_fv_nrodoc,
          v_fv_numero,
          v_est_id,
          v_fv_pendiente,
          v_fv_total,
          v_cli_id,
          v_emp_id
   from FacturaVenta
   where fv_id = p_fv_id;

   if exists ( select cli_id
               from ClienteCacheCredito
               where cli_id <> v_cli_id
                 and doct_id = v_doct_facturaVta
                 and id = p_fv_id ) then

      v_error := 1;
      p_error_msg := p_error_msg || 'Esta factura esta afectando el cache de credito de otro cliente' || CHR(10);

   end if;

   select sum(fvd_pendiente)
     into v_pendiente
   from FacturaVentaDeuda
   where fv_id = p_fv_id;

   v_pendiente := coalesce(v_pendiente, 0);

   if v_doct_id = 7 then /* nota de credito */
      v_pendiente := -v_pendiente;
   end if;

   if abs(v_pendiente) >= 0.01 then

      if not exists ( select id
                      from ClienteCacheCredito
                      where cli_id = v_cli_id
                        and doct_id = v_doct_facturaVta
                        and id = p_fv_id ) then

         v_error := 1;
         p_error_msg := p_error_msg
                        || 'Esta factura tiene pendiente y no hay registro en el cache de credito'
                        || CHR(10);

      else

         select sum(clicc_importe)
           into v_cache
         from ClienteCacheCredito
         where cli_id = v_cli_id
           and doct_id = v_doct_facturaVta
           and id = p_fv_id
           and emp_id = v_emp_id;

         v_cache := coalesce(v_cache, 0);

         if abs(v_pendiente - v_cache) >= 0.02 then

            v_error := 1;
            p_error_msg := p_error_msg
                          || 'Esta factura tiene un pendiente distinto al que figura en el cache de credito'
                          || CHR(10)
                          || 'Pendiente: ' || to_char(v_pendiente) || CHR(10)
                          || 'Cache: ' || to_char(v_cache) || CHR(10)
                          || 'Dif: ' || to_char(abs(v_pendiente - v_cache));

         end if;

      end if;

   else

      if exists ( select id
                  from ClienteCacheCredito
                  where cli_id = v_cli_id
                    and doct_id = v_doct_facturaVta
                    and id = p_fv_id ) then

         v_error := 1;
         p_error_msg := p_error_msg
                        || 'Esta factura no tiene pendiente y tiene registro en el cache de credito'
                        || CHR(10);

      end if;

   end if;

   -- no hubo errores asi que todo bien
   --
   if v_error = 0 then
      p_success := 1;
   end if;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_auditoria_credito_check_doc_opg(p_opg_id integer, OUT p_success integer, OUT p_error_msg character varying)
 RETURNS record
 LANGUAGE plpgsql
AS $function$
declare
   v_error smallint;
   v_doct_id integer;
   v_opg_nrodoc varchar(50);
   v_opg_numero varchar(50);
   v_est_id integer;
   v_opg_pendiente decimal(18,6);
   v_opg_total decimal(18,6);
   v_aplicado decimal(18,6);
   v_prov_id integer;
   v_doct_ordenPago integer := 16;
   v_emp_id integer;
   v_pendiente decimal(18,6);
   v_cache decimal(18,6);
begin

   v_error := 0;
   p_success := 0;
   p_error_msg := '@@ERROR_SP:';

   select doct_id,
          opg_nrodoc,
          trim(to_char(opg_numero)),
          est_id,
          opg_pendiente,
          opg_total,
          prov_id,
          emp_id
     into v_doct_id,
          v_opg_nrodoc,
          v_opg_numero,
          v_est_id,
          v_opg_pendiente,
          v_opg_total,
          v_prov_id,
          v_emp_id
   from OrdenPago
   where opg_id = p_opg_id;

   if exists ( select prov_id
               from ProveedorCacheCredito
               where prov_id <> v_prov_id
                 and doct_id = v_doct_ordenPago
                 and id = p_opg_id ) then

      v_error := 1;
      p_error_msg := p_error_msg
                     || 'Esta orden de pago esta afectando el cache de credito de otro proveedor'
                     || CHR(10);

   end if;

   v_pendiente := round(v_opg_pendiente, 2);

   if abs(v_pendiente) >= 0.01 then

      if not exists ( select id
                      from ProveedorCacheCredito
                      where prov_id = v_prov_id
                        and doct_id = v_doct_ordenPago
                        and id = p_opg_id ) then

         v_error := 1;
         p_error_msg := p_error_msg
                        || 'Esta orden de pago tiene pendiente y no hay registro en el cache de credito'
                        || CHR(10);


      else

         select sum(provcc_importe)
           into v_cache
         from ProveedorCacheCredito
         where prov_id = v_prov_id
           and doct_id = v_doct_ordenPago
           and id = p_opg_id
           and emp_id = v_emp_id;

         v_cache := coalesce(v_cache, 0);

         if abs(v_pendiente - v_cache) > 0.01 then

            v_error := 1;
            p_error_msg := p_error_msg
                           || 'Esta orden de pago tiene un pendiente distinto al que figura en el cache de credito'
                           || CHR(10);

         end if;

      end if;

   else

      if exists ( select id
                  from ProveedorCacheCredito
                  where prov_id = v_prov_id
                    and doct_id = v_doct_ordenPago
                    and id = p_opg_id ) then

         v_error := 1;
         p_error_msg := p_error_msg
                        || 'Esta orden de pago no tiene pendiente y tiene registro en el cache de credito'
                        || CHR(10);

      end if;

   end if;

   -- no hubo errores asi que todo bien
   --
   if v_error = 0 then
      p_success := 1;
   end if;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_auditoria_credito_check_doc_pv(p_pv_id integer, OUT p_success integer, OUT p_error_msg character varying)
 RETURNS record
 LANGUAGE plpgsql
AS $function$
begin

   select * from sp_auditoria_credito_check_doc_pv_cliente(p_pv_id) into p_success, p_error_msg;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_auditoria_credito_check_doc_pv_cliente(p_pv_id integer, OUT p_success integer, OUT p_error_msg character varying)
 RETURNS record
 LANGUAGE plpgsql
AS $function$
declare
   v_error smallint;
   v_doct_id integer;
   v_pv_nrodoc varchar(50);
   v_pv_numero varchar(50);
   v_est_id integer;
   v_pv_pendiente decimal(18,6);
   v_pv_total decimal(18,6);
   v_aplicado decimal(18,6);
   v_cli_id integer;
   v_doct_pedidoVta integer;
   v_emp_id integer;
   v_desc1 decimal(18,6);
   v_desc2 decimal(18,6);
   v_pendiente decimal(18,6);
   v_cache decimal(18,6);
   v_cotizacion decimal(18,6);
   v_mon_id integer;
   v_fecha date;
begin

   v_error := 0;
   p_success := 0;
   p_error_msg := '@@ERROR_SP:';

   v_doct_pedidoVta := 5;

   select doct_id,
          pv_nrodoc,
          trim(to_char(pv_numero)),
          est_id,
          pv_pendiente,
          pv_total,
          cli_id,
          emp_id
     into v_doct_id,
          v_pv_nrodoc,
          v_pv_numero,
          v_est_id,
          v_pv_pendiente,
          v_pv_total,
          v_cli_id,
          v_emp_id
   from PedidoVenta
   where pv_id = p_pv_id;

   if exists ( select cli_id
               from ClienteCacheCredito
               where cli_id <> v_cli_id
                 and doct_id = v_doct_pedidoVta
                 and id = p_pv_id ) then

      v_error := 1;
      p_error_msg := p_error_msg || 'Este pedido esta afectando el cache de credito de otro cliente' || CHR(10);

   end if;

   select pv.pv_descuento1,
          pv.pv_descuento2,
          doc.mon_id
     into v_desc1,
          v_desc2,
          v_mon_id
   from PedidoVenta pv
   join Documento doc
     on pv.doc_id = doc.doc_id
   where pv.pv_id = p_pv_id;

   select sum(pvi_pendiente * (pvi_importe / pvi_cantidad))
     into v_pendiente
   from PedidoVentaItem
   where pv_id = p_pv_id;

   v_pendiente := coalesce(v_pendiente, 0) - (coalesce(v_pendiente, 0) * v_desc1 / 100);
   v_pendiente := coalesce(v_pendiente, 0) - (coalesce(v_pendiente, 0) * v_desc2 / 100);
   v_fecha := CURRENT_TIMESTAMP;

   select sp_moneda_get_cotizacion(v_mon_id, v_fecha) into v_cotizacion;

   if not exists ( select *
                   from Moneda
                   where mon_id = v_mon_id
                     and mon_legal <> 0 ) then

      if v_cotizacion > 0 then
         v_pendiente := v_pendiente * v_cotizacion;
      end if;

   end if;

   if v_doct_id = 22 then /* devolucion */
      v_pendiente := -v_pendiente;
   end if;

   if abs(v_pendiente) >= 0.01 then

      if not exists ( select id
                      from ClienteCacheCredito
                      where cli_id = v_cli_id
                        and doct_id = v_doct_pedidoVta
                        and id = p_pv_id ) then

         v_error := 1;
         p_error_msg := p_error_msg || 'Este pedido tiene pendiente y no hay registro en el cache de credito' || CHR(10);

      else

         select sum(clicc_importe)
           into v_cache
         from ClienteCacheCredito
         where cli_id = v_cli_id
           and doct_id = v_doct_pedidoVta
           and id = p_pv_id
           and emp_id = v_emp_id;

         v_cache := coalesce(v_cache, 0);

         if abs(v_pendiente - v_cache) >= 0.015 then

            v_error := 1;
            p_error_msg := p_error_msg || 'Este pedido tiene un pendiente distinto al que figura en el cache de credito' || CHR(10) || 'Pendiente: ' || CAST(v_pendiente as varchar) || CHR(10) || 'Cache: ' || CAST(v_cache as varchar) || CHR(10) || 'Dif: ' || CAST(abs(v_pendiente - v_cache) as varchar);

         end if;

      end if;

   else

      if exists ( select id
                  from ClienteCacheCredito
                  where cli_id = v_cli_id
                    and doct_id = v_doct_pedidoVta
                    and id = p_pv_id ) then

         v_error := 1;
         p_error_msg := p_error_msg || 'Este pedido no tiene pendiente y tiene registro en el cache de credito' || CHR(10);

      end if;

   end if;

   -- no hubo errores asi que todo bien
   --
   if v_error = 0 then
      p_success := 1;
   end if;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_auditoria_estado_check_doc_cobz(p_cobz_id integer, OUT p_success integer, OUT p_error_msg character varying)
 RETURNS record
 LANGUAGE plpgsql
AS $function$
declare
   v_error smallint;
   v_doct_id integer;
   v_cobz_nrodoc varchar(50);
   v_cobz_numero varchar(50);
   v_est_id integer;
   v_cobz_pendiente decimal(18,6);
   v_cobz_total decimal(18,6);
   v_aplicado decimal(18,6);
begin

   v_error := 0;
   p_success := 0;
   p_error_msg := '@@ERROR_SP:';

   select doct_id,
          cobz_nrodoc,
          trim(to_char(cobz_numero)),
          est_id,
          cobz_pendiente,
          cobz_total
     into v_doct_id,
          v_cobz_nrodoc,
          v_cobz_numero,
          v_est_id,
          v_cobz_pendiente,
          v_cobz_total
   from Cobranza
   where cobz_id = p_cobz_id;

   select (coalesce(t.aplicado, 0)) into v_aplicado
   from ( select sum(fvcobz_importe) aplicado
          from FacturaVentaCobranza
          where cobz_id = p_cobz_id ) t;

   if abs(round(v_cobz_total, 2) - round(v_cobz_pendiente + v_aplicado, 2)) > 0.01 then

      v_error := 1;
      p_error_msg := p_error_msg
                     || 'El pendiente de la cobranza no coincide con la suma de sus aplicaciones'
                     || CHR(10);

   end if;

   if v_est_id <> 7 and v_est_id <> 5 and v_est_id <> 4 then

      if round(v_cobz_pendiente, 2) = 0 then

         v_error := 1;
         p_error_msg := p_error_msg
                        || 'La cobranza no tiene pendiente y su estado no es finalizado, o anulado, o pendiente de firma'
                        || CHR(10);
      end if;

   end if;

   if exists ( select 1
               from CobranzaItem
               where cue_id in ( select cue_id
                                 from RetencionTipo  )
                 and ret_id is null
                 and cobz_id = p_cobz_id
                 and cobzi_tipo = 4 ) then

      v_error := 1;
      p_error_msg := p_error_msg
                     || 'Debe indicar la retencion para los items de tipo otro de cuentas de retenciones'
                     || CHR(10);

   end if;

   -- no hubo errores asi que todo bien
   --
   if v_error = 0 then
      p_success := 1;
   end if;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_auditoria_estado_check_doc_fc(p_fc_id integer, OUT p_success integer, OUT p_error_msg character varying)
 RETURNS record
 LANGUAGE plpgsql
AS $function$
declare
   v_error smallint;
   v_doct_id integer;
   v_fc_nrodoc varchar(50);
   v_fc_numero varchar(50);
   v_fc_pendiente decimal(18,6);
   v_est_id integer;
begin

   v_error := 0;
   p_success := 0;
   p_error_msg := '@@ERROR_SP:';

   select doct_id,
          fc_nrodoc,
          trim(to_char(fc_numero)),
          est_id
     into v_doct_id,
          v_fc_nrodoc,
          v_fc_numero,
          v_est_id
   from FacturaCompra
   where fc_id = p_fc_id;

   if exists ( select *
               from FacturaCompraItem fci
               where (fci.fci_pendiente
                      + (coalesce(( select sum(rcfc_cantidad)
                                    from RemitoFacturaCompra
                                    where fci_id = fci.fci_id ), 0))
                      + (coalesce(( select sum(ocfc_cantidad)
                                    from OrdenFacturaCompra
                                    where fci_id = fci.fci_id ), 0))
                     ) <> fci.fci_cantidadaremitir
                 and fci.fc_id = p_fc_id ) then

      v_error := 1;
      p_error_msg := p_error_msg
                     || 'El pendiente de los items de esta factura no coincide con la suma de sus aplicaciones'
                     || CHR(10);

   end if;

   if v_est_id <> 7 and v_est_id <> 5 and v_est_id <> 4 then

      select fc_pendiente
        into v_fc_pendiente
      from FacturaCompra
      where fc_id = p_fc_id;

      if v_fc_pendiente = 0 then

         v_error := 1;
         p_error_msg := p_error_msg
                        || 'La factura no tiene vencimientos pendientes y su estado no es finalizado, o anulado, o pendiente de firma'
                        || CHR(10);

      end if;

   end if;

   -- no hubo errores asi que todo bien
   --
   if v_error = 0 then
      p_success := 1;
   end if;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_auditoria_estado_check_doc_fv(p_fv_id integer, OUT p_success integer, OUT p_error_msg character varying)
 RETURNS record
 LANGUAGE plpgsql
AS $function$
declare
   v_error smallint;
   v_doct_id integer;
   v_fv_nrodoc varchar(50);
   v_fv_numero varchar(50);
   v_fv_pendiente decimal(18,6);
   v_est_id integer;
begin

   v_error := 0;
   p_success := 0;
   p_error_msg := '@@ERROR_SP:';

   select doct_id,
          fv_nrodoc,
          trim(to_char(fv_numero)),
          est_id
     into v_doct_id,
          v_fv_nrodoc,
          v_fv_numero,
          v_est_id
   from FacturaVenta
   where fv_id = p_fv_id;

   if v_est_id <> 7 then

      if exists ( select *
                  from FacturaVentaItem fvi
                  where round((fvi.fvi_pendiente
                               + (coalesce(( select sum(rvfv_cantidad)
                                             from RemitoFacturaVenta
                                             where fvi_id = fvi.fvi_id ), 0))
                               + (coalesce(( select sum(pvfv_cantidad)
                                             from PedidoFacturaVenta
                                             where fvi_id = fvi.fvi_id ), 0))), 2)
                        <> round(fvi.fvi_cantidadaremitir, 2)
                    and fvi.fv_id = p_fv_id
                ) then

         v_error := 1;
         p_error_msg := p_error_msg
                        || 'El pendiente de los items de esta factura no coincide con la suma de sus aplicaciones'
                        || CHR(10);

      end if;

      if exists ( select *
                  from FacturaVentaItem fvi
                  where round((fvi_pendientepklst
                               + (coalesce(( select sum(pklstfv_cantidad)
                                             from PackingListFacturaVenta
                                             where fvi_id = fvi.fvi_id ), 0))), 2)
                        <> round(fvi_cantidadaremitir, 2)
                  and fv_id = p_fv_id ) then

         v_error := 1;
         p_error_msg := p_error_msg
                        || 'El pendiente de los items de esta factura no coincide con la suma de sus aplicaciones'
                        || CHR(10);

      end if;

   else

      if exists ( select *
                  from FacturaVentaItem fvi
                  where fvi_pendiente <> 0
                    and fv_id = p_fv_id ) then

         v_error := 1;
         p_error_msg := p_error_msg
                        || 'Esta factura esta anulada y tiene pendiente en sus items'
                        || CHR(10);

      end if;

      if exists ( select *
                  from FacturaVentaItem fvi
                  where fvi_pendientepklst <> 0
                    and fv_id = p_fv_id ) then

         v_error := 1;
         p_error_msg := p_error_msg
                        || 'Esta factura esta anulada y tiene pendiente packinglist en sus items'
                        || CHR(10);

      end if;

   end if;

   if v_est_id <> 7 and v_est_id <> 5 and v_est_id <> 4 then

      select round(fv_pendiente, 2)
        into v_fv_pendiente
      from FacturaVenta
      where fv_id = p_fv_id;

      if v_fv_pendiente = 0 then

         v_error := 1;
         p_error_msg := p_error_msg
                        || 'La factura no tiene vencimientos pendientes y su estado no es finalizado, o anulado, o pendiente de firma'
                        || CHR(10);

      end if;

   end if;

   -- no hubo errores asi que todo bien
   --
   if v_error = 0 then
      p_success := 1;
   end if;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_auditoria_estado_check_doc_oc(p_oc_id integer, OUT p_success integer, OUT p_error_msg character varying)
 RETURNS record
 LANGUAGE plpgsql
AS $function$
declare
   v_error smallint;
   v_doct_id integer;
   v_oc_nrodoc varchar(50);
   v_oc_numero varchar(50);
   v_oc_pendiente decimal(18,6);
   v_est_id integer;
begin

   v_error := 0;
   p_success := 0;
   p_error_msg := '@@ERROR_SP:';

   select doct_id,
          oc_nrodoc,
          trim(to_char(oc_numero)),
          est_id
     into v_doct_id,
          v_oc_nrodoc,
          v_oc_numero,
          v_est_id
   from OrdenCompra
   where oc_id = p_oc_id;

   if exists ( select *
               from OrdenCompraItem oci
               where (oci.oci_pendientefac
                      + (coalesce(( select sum(ocfc_cantidad)
                                    from OrdenFacturaCompra
                                    where oci_id = oci.oci_id ), 0)
                       + coalesce(( select sum(ocdc_cantidad)
                                    from OrdenDevolucionCompra
                                    where ( oci_id_Orden = oci.oci_id and v_doct_id = 35 )
                                       or ( oci_id_devolucion = oci.oci_id and v_doct_id = 36 ) ), 0)
                       + coalesce(( select sum(ocrc_cantidad)
                                    from OrdenRemitoCompra
                                    where oci_id = oci.oci_id ), 0)
                        )
                     ) <> oci.oci_cantidadaremitir
                 and oci.oc_id = p_oc_id ) then

      v_error := 1;
      p_error_msg := p_error_msg
                     || 'El pendiente de los items de esta orden de compra no coincide con la suma de sus aplicaciones'
                     || CHR(10);

   end if;


   if exists ( select *
               from OrdenCompraItem oci
               where (oci_pendiente
                      + (coalesce(( select sum(pcoc_cantidad)
                                    from PedidoOrdenCompra
                                    where oci_id = oci.oci_id ), 0))
                     ) <> oci_cantidadaremitir
                 and oc_id = p_oc_id ) then

      v_error := 1;
      p_error_msg := p_error_msg
                     || 'El pendiente de los items de esta orden de compra no coincide con la suma de sus aplicaciones'
                     || CHR(10);

   end if;

   if v_est_id <> 7 and v_est_id <> 5 and v_est_id <> 4 then

      select sum(oci_pendientefac)
        into v_oc_pendiente
      from OrdenCompraItem
      where oc_id = p_oc_id;

      if v_oc_pendiente = 0 then

         v_error := 1;
         p_error_msg := p_error_msg
                        || 'La orden de compra no tiene items pendientes y su estado no es finalizado, o anulado, o pendiente de firma'
                        || CHR(10);
      end if;

   end if;

   -- no hubo errores asi que todo bien
   --
   if v_error = 0 then
      p_success := 1;
   end if;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_auditoria_estado_check_doc_opg(p_opg_id integer, OUT p_success integer, OUT p_error_msg character varying)
 RETURNS record
 LANGUAGE plpgsql
AS $function$
declare
   v_error smallint;
   v_doct_id integer;
   v_opg_nrodoc varchar(50);
   v_opg_numero varchar(50);
   v_est_id integer;
   v_opg_pendiente decimal(18,6);
   v_opg_total decimal(18,6);
   v_aplicado decimal(18,6);
begin

   v_error := 0;
   p_success := 0;
   p_error_msg := '@@ERROR_SP:';

   select doct_id,
          opg_nrodoc,
          trim(to_char(opg_numero)),
          est_id,
          opg_pendiente,
          opg_total
     into v_doct_id,
          v_opg_nrodoc,
          v_opg_numero,
          v_est_id,
          v_opg_pendiente,
          v_opg_total
   from OrdenPago
   where opg_id = p_opg_id;

   select (coalesce(( select sum(fcopg_importe)
                      from FacturaCompraOrdenPago
                      where opg_id = p_opg_id ), 0))
   into v_aplicado;

   if abs(round(v_opg_total, 2) - round(v_opg_pendiente + v_aplicado, 2)) > 0.01 then

      v_error := 1;
      p_error_msg := p_error_msg
                     || 'El pendiente de la orden de pago no coincide con la suma de sus aplicaciones'
                     || CHR(10);

   end if;

   if v_est_id <> 7 and v_est_id <> 5 and v_est_id <> 4 then

      if round(v_opg_pendiente, 2) = 0 then

         v_error := 1;
         p_error_msg := p_error_msg
                        || 'La orden de pago no tiene pendiente y su estado no es finalizado, o anulado, o pendiente de firma'
                        || CHR(10);

      end if;

   end if;

   if exists ( select 1
               from OrdenPagoItem
               where cue_id in ( select cue_id from RetencionTipo )
                 and ret_id is null
                 and opg_id = p_opg_id
                 and opgi_tipo = 4 ) then

      v_error := 1;
      p_error_msg := p_error_msg
                     || 'Debe indicar la retencion para los items de tipo otro de cuentas de retenciones'
                     || CHR(10);

   end if;

   -- no hubo errores asi que todo bien
   --
   if v_error = 0 then
      p_success := 1;
   end if;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_auditoria_estado_check_doc_pv(p_pv_id integer, OUT p_success integer, OUT p_error_msg character varying)
 RETURNS record
 LANGUAGE plpgsql
AS $function$
declare
   v_error smallint;
   v_doct_id integer;
   v_pv_nrodoc varchar(50);
   v_pv_numero varchar(50);
   v_pv_pendiente decimal(18,6);
   v_est_id integer;
begin

   v_error := 0;
   p_success := 0;
   p_error_msg := '@@ERROR_SP:';

   select doct_id,
          pv_nrodoc,
          trim(to_char(pv_numero)),
          est_id
     into v_doct_id,
          v_pv_nrodoc,
          v_pv_numero,
          v_est_id
   from PedidoVenta
   where pv_id = p_pv_id;

   if exists ( select *
               from PedidoVentaItem pvi
               where (pvi.pvi_pendiente + (  coalesce(( select sum(pvfv_cantidad)
                                                        from PedidoFacturaVenta
                                                        where pvi_id = pvi.pvi_id ), 0)
                                           + coalesce(( select sum(pvdv_cantidad)
                                                        from PedidoDevolucionVenta
                                                        where  ( pvi_id_pedido = pvi.pvi_id and v_doct_id = 5 )
                                                            or ( pvi_id_devolucion = pvi.pvi_id and v_doct_id = 22 )
                                                       ), 0)
                                           + coalesce(( select sum(pvrv_cantidad)
                                                        from PedidoRemitoVenta
                                                        where pvi_id = pvi.pvi_id ), 0))
                     ) <> pvi.pvi_cantidadaremitir
                 and pvi.pv_id = p_pv_id
             ) then

      v_error := 1;
      p_error_msg := p_error_msg
                     || 'El pendiente de los items de este pedido no coincide con la suma de sus aplicaciones'
                     || CHR(10);

   end if;

   if exists ( select *
               from PedidoVentaItem pvi
               where (pvi_pendientepklst + (coalesce(( select sum(pvpklst_cantidad)
                                                       from PedidoPackingList
                                                       where pvi_id = pvi.pvi_id ), 0))
                     ) <> pvi_cantidadaremitir
                 and pv_id = p_pv_id ) then

      v_error := 1;
      p_error_msg := p_error_msg
                     || 'El pendiente de los items de este pedido no coincide con la suma de sus aplicaciones'
                     || CHR(10);

   end if;

   if v_est_id <> 7 and v_est_id <> 5 and v_est_id <> 4 then

      select sum(pvi_pendiente)
        into v_pv_pendiente
      from PedidoVentaItem
      where pv_id = p_pv_id;

      if v_pv_pendiente = 0 then

         v_error := 1;
         p_error_msg := p_error_msg
                        || 'El pedido no tiene items pendientes y su estado no es finalizado, o anulado, o pendiente de firma'
                        || CHR(10);

      end if;

   end if;

   -- no hubo errores asi que todo bien
   --
   if v_error = 0 then
      p_success := 1;
   end if;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_auditoria_estado_check_doc_rc(p_rc_id integer, OUT p_success integer, OUT p_error_msg character varying)
 RETURNS record
 LANGUAGE plpgsql
AS $function$
declare
   v_error smallint;
   v_doct_id integer;
   v_rc_nrodoc varchar(50);
   v_rc_numero varchar(50);
   v_rc_pendiente decimal(18,6);
   v_est_id integer;
begin

   v_error := 0;
   p_success := 0;
   p_error_msg := '@@ERROR_SP:';

   select doct_id,
          rc_nrodoc,
          trim(to_char(rc_numero)),
          est_id
     into v_doct_id,
          v_rc_nrodoc,
          v_rc_numero,
          v_est_id
   from RemitoCompra
   where rc_id = p_rc_id;

   if exists ( select *
               from RemitoCompraItem rci
               where (rci.rci_pendientefac
                      + (coalesce(( select sum(rcfc_cantidad)
                                    from RemitoFacturaCompra
                                    where rci_id = rci.rci_id ), 0)
                       + coalesce(( select sum(rcdc_cantidad)
                                    from RemitoDevolucionCompra
                                    where ( rci_id_remito = rci.rci_id and v_doct_id = 4 )
                                       or ( rci_id_devolucion = rci.rci_id and v_doct_id = 25 ) ), 0)
                        )
                     ) <> rci.rci_cantidadaremitir
                 and rci.rc_id = p_rc_id ) then

      v_error := 1;
      p_error_msg := p_error_msg
                     || 'El pendiente de los items de este remito no coincide con la suma de sus aplicaciones'
                     || CHR(10);

   end if;

   if exists ( select *
               from RemitoCompraItem rci
               where (rci_pendiente
                      + (coalesce(( select sum(ocrc_cantidad)
                                    from OrdenRemitoCompra
                                    where rci_id = rci.rci_id ), 0))
                     ) <> rci_cantidad
                 and rc_id = p_rc_id ) then

      v_error := 1;
      p_error_msg := p_error_msg
                     || 'El pendiente de los items de este remito no coincide con la suma de sus aplicaciones'
                     || CHR(10);

   end if;

   if v_est_id <> 7 and v_est_id <> 5 and v_est_id <> 4 then

      select sum(rci_pendientefac)
        into v_rc_pendiente
      from RemitoCompraItem
      where rc_id = p_rc_id;

      if v_rc_pendiente = 0 then

         v_error := 1;
         p_error_msg := p_error_msg
                        || 'El remito no tiene items pendientes y su estado no es finalizado, o anulado, o pendiente de firma'
                        || CHR(10);

      end if;

   end if;

   -- no hubo errores asi que todo bien
   --
   if v_error = 0 then
      p_success := 1;
   end if;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_cliente_delete(p_cli_id integer, p_delcontacto integer DEFAULT 0)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
begin

   if p_delContacto <> 0 then

      delete from Contacto where cli_id = p_cli_id;

   else

      update Contacto set cli_id = null where cli_id = p_cli_id;

   end if;

   delete from ClienteCacheCredito where cli_id = p_cli_id;
   delete from ClientePercepcion where cli_id = p_cli_id;
   delete from EmpresaCliente where cli_id = p_cli_id;
   delete from ClienteCuentaGrupo where cli_id = p_cli_id;
   delete from ClienteSucursal where cli_id = p_cli_id;
   delete from ListaDescuentoCliente where cli_id = p_cli_id;
   delete from ListaPrecioCliente where cli_id = p_cli_id;
   delete from EmpresaClienteDeuda where cli_id = p_cli_id;
   delete from Cliente where cli_id = p_cli_id;

   return;

exception
   when others then

     raise exception 'Ha ocurrido un error al borrar el cliente. sp_cliente_delete. %. %.',
                      sqlstate, sqlerrm;

end;

$function$;

CREATE OR REPLACE FUNCTION public.sp_auditoria_stock_check_doc_fc(p_fc_id integer, OUT p_success integer, OUT p_error_msg character varying)
 RETURNS record
 LANGUAGE plpgsql
AS $function$
declare
   v_error smallint;

   v_doct_id integer;

   v_fc_nrodoc varchar(50);
   v_fc_numero varchar(50);

   v_st_id integer;
   v_est_id integer;
   v_llevaStock smallint;

   v_fci_id integer;
   v_fci_cantidad decimal(18,6);

   v_pr_id integer;
   v_pr_id_item integer;
   v_pr_item varchar(255);
   v_pr_nombrecompra varchar(255);
   v_pr_llevastock smallint;
   v_pr_llevanroserie smallint;
   v_pr_stockcompra decimal(18,6);

   v_prns_cantidad integer;

   v_stl_id integer;
   v_sti_cantidad decimal(18,6);
begin

   v_error := 0;
   p_success := 0;
   p_error_msg := '@@ERROR_SP:';

   select fc.doct_id,
          fc.st_id,
          fc.fc_nrodoc,
          trim(to_char(fc.fc_numero)),
          fc.est_id,
          doc.doc_muevestock
     into v_doct_id,
          v_st_id,
          v_fc_nrodoc,
          v_fc_numero,
          v_est_id,
          v_llevaStock
   from FacturaCompra fc
   join Documento doc
     on fc.doc_id = doc.doc_id
   where fc.fc_id = p_fc_id;

   if v_llevaStock <> 0 then

      -- 1 si esta anulado no tiene que tener stock
      --
      if v_est_id = 7 then

         if v_st_id is not null then

            if exists ( select *
                        from Stock
                        where st_id = v_st_id ) then

               v_error := 1;
               p_error_msg := p_error_msg
                              || 'La factura esta anulada y posee un movimiento de stock'
                              || CHR(10);

            else

               v_error := 1;
               p_error_msg := p_error_msg
                              || 'La factura esta anulada y posee st_id distinto de null pero este st_id no existe en la tabla stock'
                              || CHR(10);

            end if;

         end if;

      -- 2 si no esta anulado tiene que tener stock
      --
      else

         -- sin numero de serie
         --
         for v_fci_cantidad,v_pr_id,v_pr_nombrecompra,v_pr_llevastock,v_pr_llevanroserie,v_pr_stockcompra,v_stl_id in
            select sum(fci.fci_cantidadaremitir),
                   fci.pr_id,
                   pr.pr_nombrecompra,
                   pr.pr_llevastock,
                   pr.pr_llevanroserie,
                   pr.pr_stockcompra,
                   fci.stl_id
            from FacturaCompraItem fci
            join Producto pr
              on fci.pr_id = pr.pr_id
            where fci.fc_id = p_fc_id
              and ( pr.pr_llevanroserie = 0 or pr.pr_eskit <> 0 )
            group by fci.pr_id,pr.pr_nombrecompra,pr.pr_llevastock,pr.pr_llevanroserie,pr.pr_stockcompra,fci.stl_id
         loop

            v_sti_cantidad := 0;

            if v_pr_llevastock <> 0 then

               v_pr_stockcompra := coalesce(v_pr_stockcompra, 0);

               select sum(sti_ingreso)
                 into v_sti_cantidad
               from StockItem
               where st_id = v_st_id
                 and pr_id = v_pr_id
                 and ( coalesce(stl_id, 0) = coalesce(v_stl_id, 0) or prns_id is not null )
                 and pr_id_kit is null;

               v_sti_cantidad := coalesce(v_sti_cantidad, 0);

               if abs(v_sti_cantidad
                      - (case
                            when v_pr_stockcompra <> 0 then v_fci_cantidad / v_pr_stockcompra
                            else 0
                         end)
                     ) > 0.01 then

                  v_error := 1;
                  p_error_msg := p_error_msg || 'La factura indica '
                                 || number_to_char(v_fci_cantidad)
                                 || ' "' || v_pr_nombrecompra
                                 || '" y el movimiento de stock indica '
                                 || number_to_char(v_sti_cantidad)
                                 || ' y la ralacion stock-compra es '
                                 || number_to_char(v_pr_stockcompra)
                                 || CHR(10);

               end if;

            else

               if exists ( select *
                           from StockItem
                           where st_id = v_st_id
                             and pr_id = v_pr_id ) then

                  v_error := 1;
                  p_error_msg := p_error_msg
                                 || 'La factura indica el producto "'
                                 || v_pr_nombrecompra
                                 || '" que no mueve stock pero esta incluido en el movimiento '
                                 || 'de stock asociado a esta factura '
                                 || CHR(10);

               end if;

            end if;

         end loop;

         -- con numero de serie
         --

         for v_fci_id,v_fci_cantidad,v_pr_id,v_pr_nombrecompra,v_pr_stockcompra,v_stl_id in
            select fci.fci_id,
                   fci.fci_cantidadaremitir,
                   fci.pr_id,
                   pr.pr_nombrecompra,
                   pr.pr_stockcompra,
                   fci.stl_id
            from FacturaCompraItem fci
            join Producto pr
              on fci.pr_id = pr.pr_id
            where fci.fc_id = p_fc_id
              and pr.pr_llevanroserie <> 0
         loop

            v_sti_cantidad := 0;

            v_pr_stockcompra := coalesce(v_pr_stockcompra, 0);

            select sum(sti_ingreso)
              into v_sti_cantidad
              from StockItem
               where st_id = v_st_id
                       and pr_id = v_pr_id
                       and ( coalesce(stl_id, 0) = coalesce(v_stl_id, 0)
                       or prns_id is not null )
                       and sti_grupo = v_fci_id;

            v_sti_cantidad := coalesce(v_sti_cantidad, 0);

            if abs(v_sti_cantidad
                   - (case
                         when v_pr_stockcompra <> 0 then v_fci_cantidad / v_pr_stockcompra
                         else 0
                      end)
                  ) > 0.01 then

               v_error := 1;
               p_error_msg := p_error_msg || 'La factura indica '
                             || number_to_char(v_fci_cantidad)
                             || ' "' || v_pr_nombrecompra
                             || '" y el movimiento de stock indica '
                             || number_to_char(v_sti_cantidad)
                             || ' y la ralacion stock-compra es '
                             || number_to_char(v_pr_stockcompra)
                             || CHR(10);

            end if;

         end loop;

      end if;

   end if;

   -- no hubo errores asi que todo bien
   --
   if v_error = 0 then
      p_success := 1;
   end if;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_auditoria_stock_check_doc_fv(p_fv_id integer, OUT p_success integer, OUT p_error_msg character varying)
 RETURNS record
 LANGUAGE plpgsql
AS $function$
declare
   v_error smallint;
   
   v_doct_id integer;
   
   v_fv_nrodoc varchar(50);
   v_fv_numero varchar(50);
   
   v_st_id integer;
   v_est_id integer;
   v_llevaStock smallint;

   v_fvi_id integer;
   v_fvi_cantidad decimal(18,6);

   v_pr_id integer;
   v_pr_id_item integer;
   v_pr_item varchar(255);
   v_pr_nombreventa varchar(255);
   v_pr_llevastock smallint;
   v_pr_llevanroserie smallint;
   v_pr_ventastock decimal(18,6);

   v_prns_cantidad integer;

   v_pr_eskit smallint;
   v_pr_kitItems decimal(18,6);
   v_pr_lotefifo smallint;

   v_stl_id integer;
   v_sti_cantidad decimal(18,6);

   v_cant_kits decimal(18,6);
begin

   v_error := 0;
   p_success := 0;
   p_error_msg := '@@ERROR_SP:';

   select fv.doct_id,
          fv.st_id,
          fv.fv_nrodoc,
          trim(to_char(fv.fv_numero)),
          fv.est_id,
          doc.doc_muevestock
     into v_doct_id,
          v_st_id,
          v_fv_nrodoc,
          v_fv_numero,
          v_est_id,
          v_llevaStock
   from FacturaVenta fv
   join Documento doc
     on fv.doc_id = doc.doc_id
   where fv.fv_id = p_fv_id;

   if v_llevaStock <> 0 then

      -- 1 si esta anulado no tiene que tener stock
      --
      if v_est_id = 7 then

         if v_st_id is not null then

            if exists ( select *
                        from Stock
                        where st_id = v_st_id ) then

               v_error := 1;
               p_error_msg := p_error_msg
                              || 'La factura esta anulada y posee un movimiento de stock'
                              || CHR(10);

            else

               v_error := 1;
               p_error_msg := p_error_msg
                              || 'La factura esta anulada y posee st_id distinto de null pero este st_id no existe en la tabla stock'
                              || CHR(10);

            end if;

         end if;

      -- 2 si no esta anulado tiene que tener stock
      --
      else

         -- sin numero de serie
         --

         for v_fvi_cantidad,v_pr_id,v_pr_nombreventa,v_pr_llevastock,v_pr_eskit,
             v_pr_kitItems,v_pr_llevanroserie,v_pr_lotefifo,v_pr_ventastock,v_stl_id in

            select sum(fvi.fvi_cantidadaremitir),
                   fvi.pr_id,
                   pr.pr_nombreventa,
                   pr.pr_llevastock,
                   pr.pr_eskit,
                   pr.pr_kitItems,
                   pr.pr_llevanroserie,
                   pr.pr_lotefifo,
                   pr.pr_ventastock,
                   fvi.stl_id
            from FacturaVentaItem fvi
            join Producto pr
              on fvi.pr_id = pr.pr_id
            where fvi.fv_id = p_fv_id
              and ( pr.pr_llevanroserie = 0 or pr.pr_eskit <> 0 )
            and fvi.fvi_nostock = 0
            group by fvi.pr_id,pr.pr_nombreventa,pr.pr_llevastock,pr.pr_eskit,pr.pr_kitItems,pr.pr_llevanroserie,
                     pr.pr_lotefifo,pr.pr_ventastock,fvi.stl_id
         loop

            v_sti_cantidad := 0;

            if v_pr_llevastock <> 0 then

               if v_pr_eskit <> 0 then

                  v_cant_kits := v_fvi_cantidad;

                  v_fvi_cantidad := v_fvi_cantidad * v_pr_kitItems;

                  select sum(sti_ingreso)
                    into v_sti_cantidad
                  from StockItem
                  where st_id = v_st_id
                    and pr_id_kit = v_pr_id
                    and ( coalesce(stl_id, 0) = coalesce(v_stl_id, 0) or prns_id is not null );

               else

                  v_fvi_cantidad := v_fvi_cantidad * v_pr_ventastock;

                  select sum(sti_ingreso)
                    into v_sti_cantidad
                  from StockItem
                  where st_id = v_st_id
                    and pr_id = v_pr_id
                    and ( coalesce(stl_id, 0) = coalesce(v_stl_id, 0) or prns_id is not null or v_pr_lotefifo <> 0 )
                    and pr_id_kit is null
                    and pr_id_kit is null;

               end if;

               v_sti_cantidad := coalesce(v_sti_cantidad, 0);

               if abs(v_sti_cantidad - v_fvi_cantidad) > 0.01 then

                  if v_pr_eskit <> 0 then

                     v_error := 1;
                     p_error_msg := p_error_msg || 'La factura indica '
                                   || to_char(v_cant_kits, '#,###,###,##0.00')
                                   || ' Kit "' || v_pr_nombreventa || '" compuesto(s) en total por '
                                   || to_char(v_fvi_cantidad, '#,###,###,##0.00')
                                   || ' items' || ' y el movimiento de stock indica '
                                   || to_char(v_sti_cantidad, '#,###,###,##0.00')
                                   || CHR(10);

                  else

                     v_error := 1;
                     p_error_msg := p_error_msg || 'La factura indica '
                                   || to_char(v_fvi_cantidad, '#,###,###,##0.00')
                                   || ' "' || v_pr_nombreventa || '" y el movimiento de stock indica '
                                   || to_char(v_sti_cantidad, '#,###,###,##0.00')
                                   || CHR(10);

                  end if;

               end if;

               -- ahora los numeros de serie de los que son kit
               --
               if v_pr_llevanroserie <> 0 and v_pr_eskit <> 0 then

                  delete from tt_KitItems;

                  delete from tt_kit_item_serie;

                  perform sp_stock_producto_get_kit_info(v_pr_id, 0);

                  for v_pr_id_item,v_pr_item,v_prns_cantidad in
                       select k.pr_id,
                              p.pr_nombrecompra,
                              cantidad
                       from tt_kit_item_serie k
                       join Producto p
                         on k.pr_id = p.pr_id
                       where p.pr_llevanroserie <> 0
                  loop

                     v_prns_cantidad := v_prns_cantidad * v_cant_kits;
                     v_sti_cantidad := 0;

                     select sum(sti_ingreso)
                       into v_sti_cantidad
                     from StockItem
                     where st_id = v_st_id
                       and pr_id = v_pr_id_item
                       and ( coalesce(stl_id, 0) = coalesce(v_stl_id, 0) or prns_id is not null )
                       and pr_id_kit = v_pr_id;

                     v_sti_cantidad := coalesce(v_sti_cantidad, 0);

                     if v_sti_cantidad <> v_prns_cantidad then

                        v_error := 1;
                        p_error_msg := p_error_msg || 'La factura indica que el Kit "'
                                      || v_pr_nombreventa || +'" lleva '
                                      || to_char(v_prns_cantidad, '#,###,###,##0.00')
                                      || ' "' || v_pr_item || '" y el movimiento de stock indica '
                                      || to_char(v_sti_cantidad, '#,###,###,##0.00')
                                      || CHR(10);

                     end if;

                  end loop;

               end if;

            else

               if exists ( select *
                           from StockItem
                           where st_id = v_st_id
                             and pr_id = v_pr_id ) then

                  v_error := 1;
                  p_error_msg := p_error_msg
                                 || 'La factura indica el producto "' || v_pr_nombreventa
                                 || '" que no mueve stock pero esta incluido en el movimiento '
                                 || 'de stock asociado a esta factura '
                                 || CHR(10);

               end if;

            end if;

         end loop;

         -- con numero de serie
         --

         for v_fvi_id,v_fvi_cantidad,v_pr_id,v_pr_nombreventa,v_pr_eskit,v_pr_kitItems,v_pr_ventastock,v_stl_id in
              select fvi.fvi_id,
                     fvi.fvi_cantidadaremitir,
                     fvi.pr_id,
                     pr.pr_nombreventa,
                     pr.pr_eskit,
                     pr.pr_kitItems,
                     pr.pr_ventastock,
                     fvi.stl_id
              from FacturaVentaItem fvi
              join Producto pr
                on fvi.pr_id = pr.pr_id
              where fvi.fv_id = p_fv_id
                and pr.pr_llevanroserie <> 0
                and pr.pr_eskit = 0
                and fvi.fvi_nostock = 0
         loop

            v_sti_cantidad := 0;

            select sum(sti_ingreso)
              into v_sti_cantidad
            from StockItem
            where st_id = v_st_id
                       and pr_id = v_pr_id
                       and ( coalesce(stl_id, 0) = coalesce(v_stl_id, 0)
                       or prns_id is not null )
                       and sti_grupo = v_fvi_id
                       and pr_id_kit is null;

            v_sti_cantidad := coalesce(v_sti_cantidad, 0);

            if abs(v_sti_cantidad - (v_fvi_cantidad * v_pr_ventastock)) > 0.01 then

               v_error := 1;
               p_error_msg := p_error_msg || 'La factura indica '
                              || to_char(v_fvi_cantidad, '#,###,###,##0.00')
                              || ' "' || v_pr_nombreventa || '" y el movimiento de stock indica '
                              || to_char(v_sti_cantidad, '#,###,###,##0.00')
                              || ' y la ralacion venta-stock es '
                              || to_char(coalesce(v_pr_ventastock, 1), '#,###,###,##0.00')
                              || CHR(10);

            end if;

         end loop;

      end if;

   end if;

   -- no hubo errores asi que todo bien
   --
   if v_error = 0 then
      p_success := 1;
   end if;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_auditoria_totales_check_doc_cobz(p_cobz_id integer, OUT p_success integer, OUT p_error_msg character varying)
 RETURNS record
 LANGUAGE plpgsql
AS $function$
declare
   v_error smallint;
   v_doct_id integer;
   v_cobz_nrodoc varchar(50);
   v_cobz_numero varchar(50);
   v_cobz_total decimal(18,6);
   v_cobz_otros decimal(18,6);
   v_importe decimal(18,6);
begin

   v_error := 0;
   p_success := 0;
   p_error_msg := '@@ERROR_SP:';

   select doct_id,
          cobz_nrodoc,
          trim(to_char(cobz_numero)),
          cobz_total,
          cobz_otros
     into v_doct_id,
          v_cobz_nrodoc,
          v_cobz_numero,
          v_cobz_total,
          v_cobz_otros
   from Cobranza
   where cobz_id = p_cobz_id;

   select sum(case cobzi_otrotipo
                when 2 then -cobzi_importe
                else cobzi_importe
              end)
     into v_importe
   from CobranzaItem
   where cobz_id = p_cobz_id
     and cobzi_tipo <> 5 -- Cuenta corriente
   group by cobz_id;

   v_importe := coalesce(v_importe, 0);

   if abs(round(v_importe, 2) - round(v_cobz_total, 2)) > 0.01 then

      v_error := 1;
      p_error_msg := p_error_msg
                     || 'El total de esta cobranza no coincide con la suma de los totales de sus items'
                     || CHR(10);

   end if;

   v_importe := 0;

   select sum(case cobzi_otrotipo
                when 2 then -cobzi_importe
                else cobzi_importe
              end)
     into v_importe
   from CobranzaItem
   where cobz_id = p_cobz_id
     and cobzi_tipo = 4 -- Otros
   group by cobz_id;

   v_importe := coalesce(v_importe, 0);

   if abs(round(v_importe, 2) - round(v_cobz_otros, 2)) > 0.01 then

      v_error := 1;
      p_error_msg := p_error_msg
                     || 'El total de otros de esta cobranza no coincide con la suma de los totales de sus items de tipo otros'
                     || CHR(10);

   end if;

   if not exists ( select cobz_id
                   from CobranzaItem
                   where cobz_id = p_cobz_id ) then

      v_error := 1;
      p_error_msg := p_error_msg
                     || 'Esta cobranza no contiene items. Todas las cobranzas deben tener almenos dos items uno de cuenta corriente y otro de un medio de pago.'
                     || CHR(10);

   end if;

   -- no hubo errores asi que todo bien
   --
   if v_error = 0 then
      p_success := 1;
   end if;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_auditoria_totales_check_doc_fc(p_fc_id integer, OUT p_success integer, OUT p_error_msg character varying)
 RETURNS record
 LANGUAGE plpgsql
AS $function$
declare
   v_error smallint;

   v_doct_id integer;

   v_fc_nrodoc varchar(50);
   v_fc_numero varchar(50);
   v_fc_pendiente decimal(18,6);
   v_fc_total decimal(18,6);
   v_fc_otros decimal(18,6);
   v_fc_percepciones decimal(18,6);
   v_fc_neto decimal(18,6);
   v_fc_ivari decimal(18,6);
   v_fc_importedesc1 decimal(18,6);
   v_fc_importedesc2 decimal(18,6);
   v_fc_desc1 decimal(18,6);
   v_fc_desc2 decimal(18,6);
   v_fc_descivari decimal(18,6);

   v_fci_neto decimal(18,6);
   v_fci_ivari decimal(18,6);

   v_est_id integer;

   v_percepciones decimal(18,6);
   v_importe decimal(18,6);
   v_otros decimal(18,6);
begin

   v_error := 0;
   p_success := 0;
   p_error_msg := '@@ERROR_SP:';

   select doct_id,
          fc_nrodoc,
          trim(to_char(fc_numero)),
          est_id,
          fc_pendiente,
          fc_total,
          fc_neto,
          fc_ivari,
          fc_totalotros,
          fc_totalpercepciones,
          fc_descuento1,
          fc_descuento2,
          fc_importedesc1,
          fc_importedesc2
     into v_doct_id,
          v_fc_nrodoc,
          v_fc_numero,
          v_est_id,
          v_fc_pendiente,
          v_fc_total,
          v_fc_neto,
          v_fc_ivari,
          v_fc_otros,
          v_fc_percepciones,
          v_fc_desc1,
          v_fc_desc2,
          v_fc_importedesc1,
          v_fc_importedesc2
   from FacturaCompra
   where fc_id = p_fc_id;

   if exists ( select fc_id
               from FacturaCompraItem
               where abs(round(fci_neto, 2) - round(fci_precio * fci_cantidad, 2)) > 0.01
                 and fc_id = p_fc_id ) then

      v_error := 1;
      p_error_msg := p_error_msg
                     || 'Esta factura posee items cuyo neto no coincide con el precio por la cantidad'
                     || CHR(10);

   end if;

   -- como puede haber facturas que se cargan
   -- con diferencias entre la tasa y lo impreso
   -- en la factura, y hay que respetar el impreso,
   -- no puedo realizar este control, al grabar,
   -- aunque si lo dejamos activo en los procesos de auditoria
   -- que graban en el log para que el supervisor este
   -- alertado de que hay casos donde ocurre esta diferencia
   --
   -- 	if exists(select fc_id
   -- 						from FacturaCompraItem
   --          		where abs(round(fci_neto * (fci_ivariporc / 100),2) - round(fci_ivari,2))>0.01
   -- 							and fc_id = @@fc_id
   -- 						) begin
   --
   -- 			set @bError = 1
   -- 			set @@bErrorMsg = @@bErrorMsg + 'Esta factura posee items cuyo iva no coincide con el neto por el porcentaje de la tasa' + char(10)
   --
   -- 	end
   -------------------------------------------------------------------------------

   select sum(fci_neto)
     into v_fci_neto
   from FacturaCompraItem
   where fc_id = p_fc_id
   group by fc_id;

   v_fci_neto := coalesce(v_fci_neto, 0) - (v_fci_neto * v_fc_desc1 / 100);
   v_fci_neto := coalesce(v_fci_neto, 0) - (v_fci_neto * v_fc_desc2 / 100);

   if abs(round(v_fci_neto, 2) - round(v_fc_neto, 2)) > 0.01 then

      v_error := 1;
      p_error_msg := p_error_msg
                     || 'El neto de esta factura no coincide con la suma de los netos de sus items'
                     || CHR(10);

   end if;

   select sum(fci_ivari)
     into v_fci_ivari
   from FacturaCompraItem
   where fc_id = p_fc_id
   group by fc_id;

   v_fci_ivari := coalesce(v_fci_ivari, 0);
   v_fc_descivari := (v_fci_ivari * v_fc_desc1 / 100);
   v_fc_descivari := v_fc_descivari + ((v_fci_ivari - v_fc_descivari) * v_fc_desc2 / 100);
   v_fc_total := v_fc_total + v_fc_importedesc1 + v_fc_importedesc2 + v_fc_descivari;

   select sum(fci_importe)
     into v_importe
   from FacturaCompraItem
   where fc_id = p_fc_id;

   select sum(fcot_debe - fcot_haber)
     into v_otros
   from FacturaCompraOtro
   where fc_id = p_fc_id;

   select sum(fcperc_importe)
     into v_percepciones
   from FacturaCompraPercepcion
   where fc_id = p_fc_id;

   v_importe := coalesce(v_importe, 0);
   v_otros := coalesce(v_otros, 0);
   v_percepciones := coalesce(v_percepciones, 0);

   if abs(round(v_importe + v_otros + v_percepciones, 2) - round(v_fc_total, 2)) > 0.01 then

      v_error := 1;
      p_error_msg := p_error_msg
                     || 'El total de esta factura no coincide con la suma de los totales de sus items'
                     || CHR(10);

   end if;

   select sum(fci_ivari)
     into v_fci_ivari
   from FacturaCompraItem
   where fc_id = p_fc_id
   group by fc_id;

   v_fci_ivari := coalesce(v_fci_ivari, 0);
   v_fci_ivari := v_fci_ivari - (v_fci_ivari * v_fc_desc1 / 100);
   v_fci_ivari := v_fci_ivari - (v_fci_ivari * v_fc_desc2 / 100);

   if abs(round(v_fci_ivari, 2) - round(v_fc_ivari, 2)) > 0.01 then

      v_error := 1;
      p_error_msg := p_error_msg
                     || 'El IVA de esta factura no coincide con la suma de los IVA de sus items'
                     || CHR(10);

   end if;

   if abs(round(v_otros, 2) - round(v_fc_otros, 2)) > 0.01 then

      v_error := 1;
      p_error_msg := p_error_msg
                     || 'El total de otros de esta factura no coincide con la suma de los totales de sus items de tipo otro' || CHR(10)
                     || 'Dif: ' || (round(v_otros, 2) - round(v_fc_otros, 2))::varchar || CHR(10)
                     || 'Total: ' || (round(v_fc_otros, 2))::varchar || CHR(10)
                     || 'Deuda: ' || (round(v_otros, 2))::varchar || CHR(10);

   end if;

   if abs(round(v_percepciones, 2) - round(v_fc_percepciones, 2)) > 0.01 then

      v_error := 1;
      p_error_msg := p_error_msg
                     || 'El total de percepcioens de esta factura no coincide con la suma de los totales de sus items de tipo percepcion'
                     || CHR(10);

   end if;

   -- no hubo errores asi que todo bien
   --
   if v_error = 0 then
      p_success := 1;
   end if;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_auditoria_totales_check_doc_fv(p_fv_id integer, OUT p_success integer, OUT p_error_msg character varying)
 RETURNS record
 LANGUAGE plpgsql
AS $function$
declare
   v_error smallint;

   v_doct_id integer;

   v_fv_nrodoc varchar(50);
   v_fv_numero varchar(50);
   v_fv_pendiente decimal(18,6);
   v_fv_total decimal(18,6);
   v_fv_percepciones decimal(18,6);
   v_fv_neto decimal(18,6);
   v_fv_ivari decimal(18,6);
   v_fv_importedesc1 decimal(18,6);
   v_fv_importedesc2 decimal(18,6);
   v_fv_desc1 decimal(18,6);
   v_fv_desc2 decimal(18,6);
   v_fv_descivari decimal(18,6);

   v_fvi_neto decimal(18,6);
   v_fvi_ivari decimal(18,6);

   v_est_id integer;

   v_percepciones decimal(18,6);
   v_importe decimal(18,6);
begin

   v_error := 0;
   p_success := 0;
   p_error_msg := '@@ERROR_SP:';

   select doct_id,
          fv_nrodoc,
          trim(to_char(fv_numero)),
          est_id,
          fv_pendiente,
          fv_total,
          fv_neto,
          fv_ivari,
          fv_totalpercepciones,
          fv_descuento1,
          fv_descuento2,
          fv_importedesc1,
          fv_importedesc2
     into v_doct_id,
          v_fv_nrodoc,
          v_fv_numero,
          v_est_id,
          v_fv_pendiente,
          v_fv_total,
          v_fv_neto,
          v_fv_ivari,
          v_fv_percepciones,
          v_fv_desc1,
          v_fv_desc2,
          v_fv_importedesc1,
          v_fv_importedesc2
   from FacturaVenta
   where fv_id = p_fv_id;


   if exists ( select fv_id
               from FacturaVentaItem
               where abs(round(fvi_neto, 2) - round(fvi_precio * fvi_cantidad, 2)) > 0.01
                 and fv_id = p_fv_id ) then

      v_error := 1;
      p_error_msg := p_error_msg
                     || 'Esta factura posee items cuyo neto no coincide con el precio por la cantidad'
                     || CHR(10);

   end if;

   if exists ( select fv_id
               from FacturaVentaItem
               where abs(round(fvi_neto * (fvi_ivariporc / 100), 2) - round(fvi_ivari, 2)) > 0.01
                 and fv_id = p_fv_id ) then

      v_error := 1;
      p_error_msg := p_error_msg
                     || 'Esta factura posee items cuyo iva no coincide con el neto por el porcentaje de la tasa'
                     || CHR(10);

   end if;

   select sum(fvi_neto)
     into v_fvi_neto
   from FacturaVentaItem
   where fv_id = p_fv_id
   group by fv_id;

   v_fvi_neto := coalesce(v_fvi_neto, 0) - (v_fvi_neto * v_fv_desc1 / 100);
   v_fvi_neto := coalesce(v_fvi_neto, 0) - (v_fvi_neto * v_fv_desc2 / 100);

   if round(v_fvi_neto, 2) <> round(v_fv_neto, 2) then

      v_error := 1;
      p_error_msg := p_error_msg
                     || 'El neto de esta factura no coincide con la suma de los netos de sus items'
                     || CHR(10);

   end if;

   select sum(fvi_ivari)
     into v_fvi_ivari
   from FacturaVentaItem
   where fv_id = p_fv_id
   group by fv_id;

   v_fvi_ivari := coalesce(v_fvi_ivari, 0);
   v_fv_descivari := (v_fvi_ivari * v_fv_desc1 / 100);
   v_fv_descivari := v_fv_descivari + ((v_fvi_ivari - v_fv_descivari) * v_fv_desc2 / 100);
   v_fv_total := v_fv_total + v_fv_importedesc1 + v_fv_importedesc2 + v_fv_descivari;

   select sum(fvi_importe)
     into v_importe
   from FacturaVentaItem
   where fv_id = p_fv_id;

   select sum(fvperc_importe)
     into v_percepciones
   from FacturaVentaPercepcion
   where fv_id = p_fv_id;

   v_importe := coalesce(v_importe, 0);

   v_percepciones := coalesce(v_percepciones, 0);

   if round(v_importe + v_percepciones, 2) <> round(v_fv_total, 2) then

      v_error := 1;
      p_error_msg := p_error_msg
                     || 'El total de esta factura no coincide con la suma de los totales de sus items'
                     || CHR(10)
                     || 'Importe + Percepciones: '
                     || to_char(round(v_importe + v_percepciones, 2), '#,###,###,##0.00')
                     || CHR(10)
                     || 'Total : '
                     || to_char(round(v_fv_total, 2), '#,###,###,##0.00')
                     || CHR(10)
                     || 'Diferencia: '
                     || to_char(round(round(v_importe + v_percepciones, 2) - round(v_fv_total, 2), 2), '#,###,###,##0.00')
                     || CHR(10);

   end if;

   select sum(fvi_ivari)
     into v_fvi_ivari
   from FacturaVentaItem
   where fv_id = p_fv_id
   group by fv_id;

   v_fvi_ivari := coalesce(v_fvi_ivari, 0);
   v_fvi_ivari := v_fvi_ivari - (v_fvi_ivari * v_fv_desc1 / 100);
   v_fvi_ivari := v_fvi_ivari - (v_fvi_ivari * v_fv_desc2 / 100);

   if round(v_fvi_ivari, 2) <> round(v_fv_ivari, 2) then

      v_error := 1;
      p_error_msg := p_error_msg
                     || 'El IVA de esta factura no coincide con la suma de los IVA de sus items'
                     || CHR(10);

   end if;

   if abs(round(v_percepciones, 2) - round(v_fv_percepciones, 2)) > 0.01 then

      v_error := 1;
      p_error_msg := p_error_msg
                     || 'El total de percepcioens de esta factura no coincide con la suma de los totales de sus items de tipo percepcion'
                     || CHR(10)
                     || 'Suma de Items: ' || to_char(round(v_percepciones, 2), '#,###,###,##0.00')
                     || CHR(10)
                     || 'Total de Percepciones : ' || to_char(round(v_fv_percepciones, 2), '#,###,###,##0.00')
                     || CHR(10)
                     || 'Diferencia: ' || to_char(round(round(v_percepciones, 2) - round(v_fv_percepciones, 2), 2), '#,###,###,##0.00')
                     || CHR(10);

   end if;

   -- no hubo errores asi que todo bien
   --
   if v_error = 0 then
      p_success := 1;
   end if;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_auditoria_totales_check_doc_opg(p_opg_id integer, OUT p_success integer, OUT p_error_msg character varying)
 RETURNS record
 LANGUAGE plpgsql
AS $function$
declare
   v_error smallint;
   v_doct_id integer;
   v_opg_nrodoc varchar(50);
   v_opg_numero varchar(50);
   v_opg_total decimal(18,6);
   v_opg_otros decimal(18,6);
   v_importe decimal(18,6);
begin

   v_error := 0;
   p_success := 0;
   p_error_msg := '@@ERROR_SP:';

   select doct_id,
          opg_nrodoc,
          trim(to_char(opg_numero)),
          opg_total,
          opg_otros
     into v_doct_id,
          v_opg_nrodoc,
          v_opg_numero,
          v_opg_total,
          v_opg_otros
   from OrdenPago
   where opg_id = p_opg_id;

   select sum(case opgi_otrotipo
                 when 1 then -opgi_importe
                 else opgi_importe
              end)
     into v_importe
   from OrdenPagoItem
   where opg_id = p_opg_id
     and opgi_tipo <> 5 -- cuenta corriente
   group by opg_id;

   v_importe := coalesce(v_importe, 0);

   if abs(round(v_importe, 2) - round(v_opg_total, 2)) > 0.01 then

      v_error := 1;
      p_error_msg := p_error_msg
                     || 'El total de esta orden de pago no coincide con la suma de los totales de sus items'
                     || CHR(10);

   end if;

   v_importe := 0;

   select sum(case opgi_otrotipo
                 when 1 then -opgi_importe
                 else opgi_importe
              end)
     into v_importe
   from OrdenPagoItem
   where opg_id = p_opg_id and opgi_tipo = 4 -- otros
   group by opg_id;

   v_importe := coalesce(v_importe, 0);

   if abs(round(v_importe, 2) - round(v_opg_otros, 2)) > 0.01 then

      v_error := 1;
      p_error_msg := p_error_msg
                     || 'El total de otros de esta orden de pago no coincide con la suma de los totales de sus items de tipo otros'
                     || CHR(10) || 'Dif: ' || (round(v_importe, 2) - round(v_opg_otros, 2))::varchar
                     || CHR(10) || 'Total: ' || (round(v_opg_otros, 2))::varchar
                     || CHR(10) || 'Deuda: ' || (round(v_importe, 2))::varchar
                     || CHR(10);

   end if;

   if not exists ( select opg_id
                   from OrdenPagoItem
                   where opg_id = p_opg_id ) then

      v_error := 1;
      p_error_msg := p_error_msg
                     || 'Esta orden de pago no contiene items. Todas las ordens de pago deben tener almenos dos items uno de cuenta corriente y otro de un medio de pago.'
                     || CHR(10);

   end if;

   -- no hubo errores asi que todo bien
   --
   if v_error = 0 then
      p_success := 1;
   end if;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_auditoria_totales_check_doc_pv(p_pv_id integer, OUT p_success integer, OUT p_error_msg character varying)
 RETURNS record
 LANGUAGE plpgsql
AS $function$
declare
   v_error smallint;

   v_doct_id integer;

   v_pv_nrodoc varchar(50);
   v_pv_numero varchar(50);
   v_est_id integer;
   v_pv_pendiente decimal(18,6);
   v_pv_total decimal(18,6);
   v_pv_neto decimal(18,6);
   v_pv_ivari decimal(18,6);
   v_pv_importedesc1 decimal(18,6);
   v_pv_importedesc2 decimal(18,6);
   v_pv_desc1 decimal(18,6);
   v_pv_desc2 decimal(18,6);

   v_pv_descivari decimal(18,6);

   v_cli_catFiscal smallint;

   v_pvi_neto decimal(18,6);
   v_pvi_ivari decimal(18,6);

   v_importe decimal(18,6);
begin

   v_error := 0;
   p_success := 0;
   p_error_msg := '@@ERROR_SP:';

   select pv.doct_id,
          pv.pv_nrodoc,
          trim(to_char(pv.pv_numero)),
          pv.est_id,
          pv.pv_pendiente,
          pv.pv_total,
          pv.pv_neto,
          pv.pv_ivari,
          pv.pv_descuento1,
          pv.pv_descuento2,
          pv.pv_importedesc1,
          pv.pv_importedesc2,
          cli.cli_catfiscal
     into v_doct_id,
          v_pv_nrodoc,
          v_pv_numero,
          v_est_id,
          v_pv_pendiente,
          v_pv_total,
          v_pv_neto,
          v_pv_ivari,
          v_pv_desc1,
          v_pv_desc2,
          v_pv_importedesc1,
          v_pv_importedesc2,
          v_cli_catFiscal
   from PedidoVenta pv
   join Cliente cli
     on pv.cli_id = cli.cli_id
   where pv.pv_id = p_pv_id;

   if exists ( select pv_id
               from PedidoVentaItem
               where abs(round(pvi_neto, 2) - round(pvi_precio * pvi_cantidad, 2)) >= 0.01
                 and pv_id = p_pv_id ) then

      v_error := 1;
      p_error_msg := p_error_msg
                     || 'Este pedido posee items cuyo neto no coincide con el precio por la cantidad'
                     || CHR(10);

   end if;

   if exists ( select pv_id
               from PedidoVentaItem
               where abs(round(pvi_neto * (pvi_ivariporc / 100), 2) - round(pvi_ivari, 2)) >= 0.01
                 and pv_id = p_pv_id
                 and v_cli_catFiscal <> 5 ) then

      v_error := 1;
      p_error_msg := p_error_msg
                     || 'Este pedido posee items cuyo iva no coincide con el neto por el porcentaje de la tasa'
                     || CHR(10);

   end if;

   select sum(pvi_neto)
     into v_pvi_neto
   from PedidoVentaItem
   where pv_id = p_pv_id
   group by pv_id;

   v_pvi_neto := coalesce(v_pvi_neto, 0) - (v_pvi_neto * v_pv_desc1 / 100);
   v_pvi_neto := coalesce(v_pvi_neto, 0) - (v_pvi_neto * v_pv_desc2 / 100);

   if abs(round(v_pvi_neto, 2) - round(v_pv_neto, 2)) >= 0.01 then

      v_error := 1;
      p_error_msg := p_error_msg
                     || 'El neto de este pedido no coincide con la suma de los netos de sus items'
                     || CHR(10);

   end if;

   select sum(pvi_ivari)
     into v_pvi_ivari
   from PedidoVentaItem
   where pv_id = p_pv_id
   group by pv_id;

   v_pvi_ivari := coalesce(v_pvi_ivari, 0);
   v_pv_descivari := (v_pvi_ivari * v_pv_desc1 / 100);
   v_pv_descivari := v_pv_descivari + ((v_pvi_ivari - v_pv_descivari) * v_pv_desc2 / 100);

   v_pv_total := v_pv_total + v_pv_importedesc1 + v_pv_importedesc2 + v_pv_descivari;

   select sum(pvi_importe)
     into v_importe
   from PedidoVentaItem
   where pv_id = p_pv_id;

   v_importe := coalesce(v_importe, 0);

   if abs(round(v_importe, 2) - round(v_pv_total, 2)) >= 0.01 then

      v_error := 1;
      p_error_msg := p_error_msg
                     || 'El total de este pedido no coincide con la suma de los totales de sus items'
                     || CHR(10);

   end if;

   select sum(pvi_ivari)
     into v_pvi_ivari
   from PedidoVentaItem
   where pv_id = p_pv_id
   group by pv_id;

   v_pvi_ivari := coalesce(v_pvi_ivari, 0);
   v_pvi_ivari := v_pvi_ivari - (v_pvi_ivari * v_pv_desc1 / 100);
   v_pvi_ivari := v_pvi_ivari - (v_pvi_ivari * v_pv_desc2 / 100);

   if abs(round(v_pvi_ivari, 2) - round(v_pv_ivari, 2)) >= 0.01 then

      v_error := 1;
      p_error_msg := p_error_msg
                     || 'El IVA de este pedido no coincide con la suma de los IVA de sus items'
                     || CHR(10);

   end if;

   -- no hubo errores asi que todo bien
   --
   if v_error = 0 then
      p_success := 1;
   end if;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_auditoria_vto_check_doc_fc(p_fc_id integer, OUT p_success integer, OUT p_error_msg character varying)
 RETURNS record
 LANGUAGE plpgsql
AS $function$
declare
   v_error smallint;

   v_fc_nrodoc varchar(50);
   v_fc_numero varchar(50);

   v_fc_pendiente decimal(18,6);
   v_fc_descuento1 decimal(18,6);
   v_fc_descuento2 decimal(18,6);
   v_fc_totalotros decimal(18,6);
   v_fc_totalpercepciones decimal(18,6);
   v_fc_totaldeuda decimal(18,6);

   v_doct_id integer;
   v_est_id integer;

   v_vto decimal(18,6);
   v_deuda decimal(18,6);
   v_pagos decimal(18,6);
   v_total decimal(18,6);
begin

   v_error := 0;
   p_success := 0;
   p_error_msg := '@@ERROR_SP:';

   select doct_id,
          fc_nrodoc,
          trim(to_char(fc_numero)),
          est_id
     into v_doct_id,
          v_fc_nrodoc,
          v_fc_numero,
          v_est_id
   from FacturaCompra
   where fc_id = p_fc_id;

   -- 1 si esta anulado no tiene que tener deuda ni pendiente en items
   --
   if v_est_id = 7 then

      if exists ( select *
                  from FacturaCompraDeuda
                  where fc_id = p_fc_id ) then

         v_error := 1;
         p_error_msg := p_error_msg || 'La factura esta anulada y posee deuda' || CHR(10);

      end if;

      if exists ( select *
                  from FacturaCompraPago
                  where fc_id = p_fc_id ) then

         v_error := 1;
         p_error_msg := p_error_msg || 'La factura esta anulada y posee pagos' || CHR(10);

      end if;

      if exists ( select *
                  from FacturaCompraItem
                  where fc_id = p_fc_id
                    and fci_pendiente <> 0 ) then

         v_error := 1;
         p_error_msg := p_error_msg || 'La factura esta anulada y posee pendiente en sus items' || CHR(10);

      end if;

   else

      select sum(fcd_importe)
        into v_deuda
      from FacturaCompraDeuda
      where fc_id = p_fc_id;

      select sum(fcp_importe)
        into v_pagos
      from FacturaCompraPago
      where fc_id = p_fc_id;

      select fc_descuento1,
             fc_descuento2,
             fc_totalotros,
             fc_totalpercepciones,
             fc_pendiente
        into v_fc_descuento1,
             v_fc_descuento2,
             v_fc_totalotros,
             v_fc_totalpercepciones,
             v_fc_pendiente
      from FacturaCompra
      where fc_id = p_fc_id;

      select sum(fci.fci_importe)
        into v_fc_totaldeuda
      from FacturaCompraItem fci
      join TipoOperacion t
        on fci.to_id = t.to_id
      where fci.fc_id = p_fc_id
        and t.to_generadeuda <> 0;

      v_fc_totaldeuda := v_fc_totaldeuda - ((v_fc_totaldeuda * v_fc_descuento1) / 100);
      v_fc_totaldeuda := v_fc_totaldeuda - ((v_fc_totaldeuda * v_fc_descuento2) / 100);
      v_fc_totaldeuda := v_fc_totaldeuda + v_fc_totalotros + v_fc_totalpercepciones;
      v_total := coalesce(v_fc_totaldeuda, 0);
      v_vto := coalesce(v_deuda, 0) + coalesce(v_pagos, 0);

      if abs(round(v_vto - v_total, 2)) > 0.10 then

         v_error := 1;
         p_error_msg := p_error_msg
                        || 'El total de la factura no coincide con el total de su deuda' || CHR(10)
                        || 'Dif: ' || (round(v_vto - v_total, 2))::varchar || CHR(10)
                        || 'Total: ' || (round(v_total, 2))::varchar || CHR(10)
                        || 'Deuda: ' || (round(v_vto, 2))::varchar || CHR(10);

      end if;

      select sum(fcd_pendiente)
        into v_deuda
      from FacturaCompraDeuda
      where fc_id = p_fc_id;

      if abs(round(v_fc_pendiente - coalesce(v_deuda, 0), 2)) > 0.10 then

         v_error := 1;
         p_error_msg := p_error_msg || 'El pendiente de la factura no coincide con el total de su deuda' || CHR(10);

      end if;

      if exists ( select *
                  from FacturaCompraDeuda fcd
                  where abs(
                            round((fcd.fcd_pendiente
                                   + (coalesce(( select sum(fcopg_importe)
                                                 from FacturaCompraOrdenPago
                                                 where fcd_id = fcd.fcd_id ), 0)
                                   + coalesce(( select sum(fcnc_importe)
                                                from FacturaCompraNotaCredito
                                                where ( fcd_id_factura = fcd.fcd_id and v_doct_id in ( 2,10 ) )
                                                   or ( fcd_id_notacredito = fcd.fcd_id and v_doct_id = 8 )
                                              ), 0)
                                     )
                                  ) - fcd.fcd_importe, 2)) > 0.10
                    and fc_id = p_fc_id ) then

         v_error := 1;
         p_error_msg := p_error_msg
                        || 'El importe de la deuda de esta factura no coincide con la suma de sus aplicaciones'
                        || CHR(10);

      end if;

      if exists ( select *
                  from FacturaCompraPago fcp
                  where abs(
                            round(fcp.fcp_importe
                                  - (coalesce(( select sum(fcopg_importe)
                                                from FacturaCompraOrdenPago
                                                where fcp_id = fcp.fcp_id ), 0)
                                  + coalesce(( select sum(fcnc_importe)
                                               from FacturaCompraNotaCredito
                                               where ( fcp_id_factura = fcp.fcp_id and v_doct_id in ( 2,10 ) )
                                                  or ( fcp_id_notacredito = fcp.fcp_id
                                                 and v_doct_id = 8 ) ), 0)), 2)
                           ) > 0.10
                    and fc_id = p_fc_id ) then

         v_error := 1;
         p_error_msg := p_error_msg
                        || 'El importe del pago de esta factura no coincide con la suma de sus aplicaciones'
                        || CHR(10);

      end if;

   end if;

   -- no hubo errores asi que todo bien
   --
   if v_error = 0 then
      p_success := 1;
   end if;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_auditoria_vto_check_doc_fv(p_fv_id integer, OUT p_success integer, OUT p_error_msg character varying)
 RETURNS record
 LANGUAGE plpgsql
AS $function$
declare
   v_error smallint;

   v_fv_nrodoc varchar(50);
   v_fv_numero varchar(50);

   v_fv_pendiente decimal(18,6);
   v_fv_descuento1 decimal(18,6);
   v_fv_descuento2 decimal(18,6);
   v_fv_totalpercepciones decimal(18,6);
   v_fv_totaldeuda decimal(18,6);

   v_doct_id integer;
   v_est_id integer;

   v_vto decimal(18,6);
   v_deuda decimal(18,6);
   v_pagos decimal(18,6);
   v_total decimal(18,6);
begin

   v_error := 0;
   p_success := 0;
   p_error_msg := '@@ERROR_SP:';

   select doct_id,
          fv_nrodoc,
          trim(to_char(fv_numero)),
          est_id
     into v_doct_id,
          v_fv_nrodoc,
          v_fv_numero,
          v_est_id
   from FacturaVenta
   where fv_id = p_fv_id;

   -- 1 si esta anulado no tiene que tener deuda ni pendiente en items
   --
   if v_est_id = 7 then

      if exists ( select *
                  from FacturaVentaDeuda
                  where fv_id = p_fv_id ) then

         v_error := 1;
         p_error_msg := p_error_msg
                        || 'La factura esta anulada y posee deuda'
                        || CHR(10);

      end if;

      if exists ( select *
                  from FacturaVentaPago
                  where fv_id = p_fv_id ) then

         v_error := 1;
         p_error_msg := p_error_msg
                        || 'La factura esta anulada y posee pagos'
                        || CHR(10);

      end if;

      if exists ( select *
                  from FacturaVentaItem
                  where fv_id = p_fv_id
                    and fvi_pendiente <> 0 ) then

         v_error := 1;
         p_error_msg := p_error_msg
                        || 'La factura esta anulada y posee pendiente en sus items'
                        || CHR(10);

      end if;

   else

      select sum(fvd_importe)
        into v_deuda
      from FacturaVentaDeuda
      where fv_id = p_fv_id;

      select sum(fvp_importe)
        into v_pagos
      from FacturaVentaPago
      where fv_id = p_fv_id;

      select fv_descuento1,
             fv_descuento2,
             fv_totalpercepciones,
             fv_pendiente
        into v_fv_descuento1,
             v_fv_descuento2,
             v_fv_totalpercepciones,
             v_fv_pendiente
      from FacturaVenta
      where fv_id = p_fv_id;

      select sum(fvi.fvi_importe)
        into v_fv_totaldeuda
      from FacturaVentaItem fvi
      join TipoOperacion t
        on fvi.to_id = t.to_id
      where fvi.fv_id = p_fv_id
        and t.to_generadeuda <> 0;

      v_fv_totaldeuda := v_fv_totaldeuda - ((v_fv_totaldeuda * v_fv_descuento1) / 100);
      v_fv_totaldeuda := v_fv_totaldeuda - ((v_fv_totaldeuda * v_fv_descuento2) / 100);
      v_fv_totaldeuda := v_fv_totaldeuda + v_fv_totalpercepciones;
      v_total := coalesce(v_fv_totaldeuda, 0);
      v_vto := coalesce(v_deuda, 0) + coalesce(v_pagos, 0);

      if abs(round(v_vto - v_total, 2)) > 0.01 then

         v_error := 1;
         p_error_msg := p_error_msg
                        || 'El total de la factura no coincide con el total de su deuda'
                        || CHR(10);

      end if;

      select sum(fvd_pendiente)
        into v_deuda
      from FacturaVentaDeuda
      where fv_id = p_fv_id;

      if abs(round(v_fv_pendiente - coalesce(v_deuda, 0), 2)) > 0.01 then

         v_error := 1;
         p_error_msg := p_error_msg
                        || 'El pendiente de la factura no coincide con el total de su deuda'
                        || CHR(10);

      end if;

      if exists ( select *
                  from FacturaVentaDeuda fvd
                  where abs(
                            round((fvd.fvd_pendiente
                                   + (coalesce(( select sum(fvcobz_importe)
                                                 from FacturaVentaCobranza
                                                 where fvd_id = fvd.fvd_id ), 0)
                                   + coalesce(( select sum(fvnc_importe)
                                                from FacturaVentaNotaCredito
                                                where ( fvd_id_factura = fvd.fvd_id and v_doct_id in ( 1,9 ) )
                                                   or ( fvd_id_notacredito = fvd.fvd_id and v_doct_id = 7 )
                                              ), 0)
                                     )
                                  ) - fvd.fvd_importe, 2)) > 0.01
                    and fvd.fv_id = p_fv_id ) then

         v_error := 1;
         p_error_msg := p_error_msg
                        || 'El importe de la deuda de esta factura no coincide con la suma de sus aplicaciones'
                        || CHR(10);

      end if;

      if exists ( select *
                  from FacturaVentaPago fvp
                  where abs(round(fvp.fvp_importe, 2)
                          - round((coalesce(( select sum(fvcobz_importe)
                                              from FacturaVentaCobranza
                                              where fvp_id = fvp.fvp_id ), 0)
                                 + coalesce(( select sum(fvnc_importe)
                                              from FacturaVentaNotaCredito
                                              where ( fvp_id_factura = fvp.fvp_id and v_doct_id in ( 1,9 ) )
                                                 or ( fvp_id_notacredito = fvp.fvp_id and v_doct_id = 7 )
                                             ), 0)
                                  ), 2)) > 0.01
                    and fvp.fv_id = p_fv_id ) then

         v_error := 1;
         p_error_msg := p_error_msg
                        || 'El importe del pago de esta factura no coincide con la suma de sus aplicaciones'
                        || CHR(10);

      end if;

   end if;

   -- no hubo errores asi que todo bien
   --
   if v_error = 0 then
      p_success := 1;
   end if;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_cfg_getvalor(p_cfg_grupo character varying, p_cfg_aspecto character varying, p_emp_id integer DEFAULT NULL::integer, OUT p_cfg_valor character varying)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
begin

   p_cfg_valor := null;
   
   select cfg_valor
     into p_cfg_valor
   from Configuracion
   where cfg_grupo = p_cfg_grupo
     and cfg_aspecto = p_cfg_aspecto
     and ( emp_id = p_emp_id or ( emp_id is null and p_emp_id is null ) );
end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_cfg_getvalorrs(p_cfg_grupo character varying, p_cfg_aspecto character varying, OUT p_cfg_valor character varying, p_bshow smallint, p_emp_id integer, OUT rtn refcursor)
 RETURNS record
 LANGUAGE plpgsql
AS $function$
BEGIN

   SELECT cfg_valor
     INTO p_cfg_valor
     FROM Configuracion
      WHERE cfg_grupo = p_cfg_grupo
              AND cfg_aspecto = p_cfg_aspecto
              AND ( emp_id = p_emp_id
              OR ( emp_id IS NULL
              AND p_emp_id IS NULL ) );

   IF p_bShow <> 0 THEN
      OPEN rtn FOR
         SELECT p_cfg_valor
           FROM DUAL ;

   END IF;

END;
$function$;

CREATE OR REPLACE FUNCTION public.sp_chequera_set(p_chq_id integer, p_chq_numero character varying)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
declare
   v_numero integer;
   v_c varchar(1);
   v_n smallint;
   v_ultimoNumero integer;
begin

   v_n := length(p_chq_numero);
   v_c := substr(p_chq_numero, v_n, 1);

   while instr('1234567890', v_c) <> 0
   loop

      v_n := v_n - 1;

      exit when v_n <= 0;

      v_c := substr(p_chq_numero, v_n, 1);

   end loop;

   v_n := v_n + 1;

   v_numero := to_number(substr(p_chq_numero, v_n, length(p_chq_numero)));

   select chq_ultimoNumero
     into v_ultimoNumero
   from Chequera
   where chq_id = p_chq_id;

   if v_ultimoNumero < v_numero then

      update Chequera
         set chq_ultimoNumero = v_numero
      where chq_id = p_chq_id;

   end if;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_cliente_get(p_cli_id integer, OUT rtn refcursor)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
begin

   rtn := 'rtn';

   open rtn for
      select Cliente.*,
             pro_nombre,
             zon_nombre,
             cpg_nombre,
             lp_nombre,
             ld_nombre,
             ven_nombre,
             trans_nombre,
             clict.clict_nombre,
             proy.proy_nombre,
             cli2.cli_nombre cli_nombrePadre,
             cli3.cli_nombre referido,
             cpa.cpa_codigo,
             fp.fp_nombre,
             us.us_nombre,
             us.activo us_activo
        from Cliente
               left join Provincia
                on Cliente.pro_id = Provincia.pro_id
               left join Zona
                on Cliente.zon_id = Zona.zon_id
               left join CondicionPago
                on Cliente.cpg_id = CondicionPago.cpg_id
               left join ListaPrecio
                on Cliente.lp_id = ListaPrecio.lp_id
               left join ListaDescuento
                on Cliente.ld_id = ListaDescuento.ld_id
               left join Vendedor
                on Cliente.ven_id = Vendedor.ven_id
               left join Transporte
                on Cliente.trans_id = Transporte.trans_id
               left join Cliente cli2
                on Cliente.cli_id_padre = cli2.cli_id
               left join Usuario us
                on Cliente.us_id = us.us_id
               left join ClienteContactoTipo clict
                on Cliente.clict_id = clict.clict_id
               left join Cliente cli3
                on Cliente.cli_id_referido = cli3.cli_id
               left join Proyecto proy
                on Cliente.proy_id = proy.proy_id
               left join CodigoPostal cpa
                on Cliente.cpa_id = cpa.cpa_id
               left join FormaPago fp
                on Cliente.fp_id = fp.fp_id
         where Cliente.cli_id = p_cli_id;

end;

$function$;

CREATE OR REPLACE FUNCTION public.sp_cliente_get_cuit_info(p_cuit character varying, OUT p_cli_id integer, OUT p_cli_code character varying, OUT p_cli_razonsocial character varying)
 RETURNS record
 LANGUAGE plpgsql
AS $function$
begin

   if   substr(p_cuit, 1, 2) = '55'
     or substr(p_cuit, 1, 2) = '50'
     or p_cuit = '00-00000000-0'
     or p_cuit = 'cuit' then

      select cli_razonsocial,
             cli_code,
             cli_id
        into p_cli_id,
             p_cli_code,
             p_cli_razonsocial                
      from Cliente
      where 1 = 2;


   else
      select cli_razonsocial,
             cli_code,
             cli_id
        into p_cli_id,
             p_cli_code,
             p_cli_razonsocial                
      from Cliente
      where cli_cuit = p_Cuit;

   end if;
   
   p_cli_id := coalesce(p_cli_id, 0);
   p_cli_code := coalesce(p_cli_code, '');
   p_cli_razonsocial := coalesce(p_cli_razonsocial, '');   

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_cliente_get_dptos(p_cli_id integer, OUT rtn refcursor)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$

begin   

   rtn := 'rtn';

   open rtn for
      ----------------------------------------------------------------------------------------------
      select
             dptocli_id,
             dptocli.dpto_id,
             dpto_nombre
      from DepartamentoCliente dptocli
      inner join Departamento dpto on dptocli.dpto_id = dpto.dpto_id
      where dptocli.cli_id = p_cli_id;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_cliente_get_empresas(p_cli_id integer, OUT rtn refcursor)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$

begin   

   rtn := 'rtn';

   open rtn for
      ----------------------------------------------------------------------------------------------
      select coalesce(empcli.empcli_id, 0) as empcli_id,
             emp.emp_id,
             emp.emp_nombre
      from Empresa emp
      left join EmpresaCliente empcli on emp.emp_id = empcli.emp_id and empcli.cli_id = p_cli_id
      order by emp.emp_nombre;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_cliente_get_info(p_cli_id integer, p_doc_id integer, OUT p_cpg_id integer, OUT p_cpg_name character varying, OUT p_cpg_eslibre smallint, OUT p_lp_id integer, OUT p_lp_name character varying, OUT p_ld_id integer, OUT p_ld_name character varying, OUT p_bivari smallint, OUT p_bivarni smallint, OUT p_ven_id integer, OUT p_ven_name character varying, OUT p_trans_id integer, OUT p_trans_name character varying, OUT p_pro_id integer, OUT p_pro_name character varying)
 RETURNS record
 LANGUAGE plpgsql
AS $function$
declare
      v_cpg_id integer;
      v_cpg_name varchar;
      v_cpg_eslibre integer;
      v_lp_id integer;
      v_lp_name varchar;
      v_ld_id integer;
      v_ld_name varchar;
      v_mon_id integer;
      v_ven_id integer;
      v_ven_name varchar;
      v_trans_id integer;
      v_trans_name varchar;
      v_pro_id integer;
      v_pro_name varchar;
begin


      select lp_id,
             ld_id,
             cpg_id,
             ven_id,
             trans_id,
             pro_id
        into v_lp_id,
             v_ld_id,
             v_cpg_id,
             v_ven_id,
             v_trans_id,
             v_pro_id
      from cliente
      where cli_id = p_cli_id;

      select mon_id into v_mon_id from Documento where doc_id = p_doc_id;

      if v_lp_id is not null then

         if not exists ( select *
                         from ListaPrecio
                         where lp_id = v_lp_id
                           and mon_id = v_mon_id
                           and lp_tipo = 1 ) then
            v_lp_id := null;
         end if;

      end if;

      if v_lp_id is null then

         select min(lp_id)
           into v_lp_id
         from ListaPrecio
         where mon_id = v_mon_id
           and lp_tipo = 1
           and lp_default <> 0;

      end if;

      if v_ld_id is not null then

         if not exists ( select *
                         from ListaDescuento
                         where ld_id = v_ld_id
                           and mon_id = v_mon_id
                           and ld_tipo = 1 ) then

            v_ld_id := null;

         end if;

      end if;

      if v_lp_id is not null then
        select lp_nombre into v_lp_name from listaprecio where lp_id = v_lp_id;
      end if;

      if v_ld_id is not null then
        select ld_nombre into v_ld_name from listadescuento where ld_id = v_ld_id;
      end if;

      if v_cpg_id is not null then
        select cpg_nombre, cpg_eslibre into v_cpg_name, v_cpg_eslibre from condicionpago where cpg_id = v_cpg_id;
      end if;

      if v_ven_id is not null then
        select ven_nombre into v_ven_name from vendedor where ven_id = v_ven_id;
      end if;

      if v_trans_id is not null then
        select trans_nombre into v_trans_name from transporte where trans_id = v_trans_id;
      end if;

      if v_pro_id is not null then
        select pro_nombre into v_pro_name from provincia where pro_id = v_pro_id;
      end if;

      select * from sp_cliente_get_iva(p_cli_id) into p_bIvari, p_bIvarni;

      p_lp_id := coalesce(v_lp_id, 0);
      p_lp_name := coalesce(v_lp_name, '');
      p_ld_id := coalesce(v_ld_id, 0);
      p_ld_name := coalesce(v_ld_name, '');
      p_cpg_id := coalesce(v_cpg_id, 0);
      p_cpg_name := coalesce(v_cpg_name, '');
      p_cpg_eslibre := coalesce(v_cpg_eslibre, 0);
      p_ven_id := coalesce(v_ven_id, 0);
      p_ven_name := coalesce(v_ven_name, '');
      p_trans_id := coalesce(v_trans_id, 0);
      p_trans_name := coalesce(v_trans_name, '');
      p_pro_id := coalesce(v_pro_id, 0);
      p_pro_name := coalesce(v_pro_name, '');

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_cliente_get_informes(p_cli_id integer, OUT rtn refcursor)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
declare
   v_us_id integer;
begin

   rtn := 'rtn';

   select us_id
     into v_us_id
     from Cliente
      where cli_id = p_cli_id;

   open rtn for
      select per.per_id,
             inf.inf_id,
             inf.inf_nombre,
             inf.inf_codigo,
             inf.pre_id
      from Informe inf
      join Permiso per
        on inf.pre_id = per.pre_id
      where per.us_id = v_us_id;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_cliente_get_iva(p_cli_id integer, OUT p_bivari smallint, OUT p_bivarni smallint)
 RETURNS record
 LANGUAGE plpgsql
AS $function$
declare
   v_tipoIva smallint;
   v_cli_catfiscal integer;
   v_bIva smallint;
   v_bIvaRni smallint;
   v_bSinIva smallint;
begin

   v_bIva := -1;
   v_bIvaRni := -2;
   v_bSinIva := -3;

   select case cli_catfiscal
            when 1 then v_bIva       --'Inscripto'
            when 2 then v_bIva       -- FALTA VERIFICAR QUE SEA ASI --'Exento'
            when 3 then v_bIvaRni    --'No inscripto'
            when 4 then v_bIva       --'Consumidor Final'
            when 5 then v_bSinIva    --'Extranjero'
            when 6 then v_bIva       --'Mono Tributo'
            when 7 then v_bIva       --'Extranjero Iva'
            when 8 then v_bIva       --'No responsable'
            when 9 then v_bIva       -- FALTA VERIFICAR QUE SEA ASI --'No Responsable exento'
            when 10 then v_bIvaRni   --'No categorizado'
            when 11 then v_bIva      --'InscriptoM'
            else 0                   --'Sin categorizar'
          end,
          cli_catfiscal
     into v_tipoIva,
          v_cli_catfiscal
   from Cliente
   where cli_id = p_cli_id;

   v_tipoIva := coalesce(v_tipoIva, v_bSinIva);

   if v_tipoIva = v_bIva then

      v_bIva := 1;
      v_bIvaRni := 0;

   else

      if v_tipoIva = v_bIvaRni then

         v_bIva := 1;
         v_bIvaRni := 1;

      else

         if v_tipoIva = v_bSinIva then

            v_bIva := 0;
            v_bIvaRni := 0;

         end if;

      end if;

   end if;

   p_bIvaRi := v_bIva;
   p_bIvaRni := v_bIvaRni;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_cliente_get_next_number(p_cli_id integer, p_doc_id integer DEFAULT NULL::integer, OUT p_number integer, OUT p_mask character varying, OUT p_enabled integer)
 RETURNS record
 LANGUAGE plpgsql
AS $function$
declare
    v_ta_id integer;
begin

    select sp_cliente_get_talonario(p_cli_id, p_doc_id) into v_ta_id;

    if v_ta_id is not null then

        select ta_ultimonro, ta_mascara, ta_tipo
          into p_number, p_mask, p_enabled
        from talonario
        where ta_id = v_ta_id;

    end if;

    p_number := coalesce(p_number, 0) + 1;
    p_mask := coalesce(p_mask, '');
    p_enabled := coalesce(p_enabled, 0);

    if(p_enabled != 1 /* suggested */) then

        p_enabled := 0;

    end if;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_cliente_get_percepciones(p_cli_id integer, OUT rtn refcursor)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$

begin

   rtn := 'rtn';

   open rtn for
      ----------------------------------------------------------------------------------------------
      select
             cliperc_id,
             cliperc.perc_id,
             cliperc_desde,
             cliperc_hasta,
             perc_nombre
      from ClientePercepcion cliperc
      inner join Percepcion perc on cliperc.perc_id = perc.perc_id
      where cliperc.cli_id = p_cli_id;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_cliente_get_percepciones(p_cli_id integer, p_emp_id integer, p_fecha date, OUT rtn refcursor)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
declare
 v_catf_id  integer;
 v_pro_id   integer;
begin

   select cli_catFiscal,
          pro_id
     into v_catf_id,
          v_pro_id
   from Cliente
   where cli_id = p_cli_id;

   rtn := 'rtn';

   open rtn for

   select perc.*,
          perci.*,
          perccatf_base
   from Percepcion perc
   inner join PercepcionItem perci
      on perc.perc_id = perci.perc_id
   inner join PercepcionCategoriaFiscal catf
      on perc.perc_id = catf.perc_id and catf_id = v_catf_id
   where (
          (    exists(select * from PercepcionProvincia where pro_id = v_pro_id and perc_id = perc.perc_id)
           and exists(select * from Configuracion
                      where cfg_grupo = 'Ventas-General'
                       and cfg_aspecto = 'Percepcion'
                       and cfg_valor::integer = perc.perc_id
                     )
           and not exists(select * from ClientePercepcion where cli_id = p_cli_id and perc_id = perc.perc_id)
          )
          or exists(select * from ClientePercepcion
                    where cli_id = p_cli_id
                     and perc_id = perc.perc_id
                     and p_fecha between cliperc_desde and cliperc_hasta
                   )
         )
    and exists(select * from PercepcionEmpresa where emp_id = p_emp_id and perc_id = perc.perc_id);

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_cliente_get_sucursales(p_cli_id integer, OUT rtn refcursor)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
begin

   rtn := 'rtn';

   open rtn for
      select clis.*,
             zon.zon_nombre,
             pro.pro_nombre,
             pa.pa_nombre
        from ClienteSucursal clis
               left join Zona zon
                on clis.zon_id = zon.zon_id
               left join Provincia pro
                on clis.pro_id = pro.pro_id
               left join Pais pa
                on clis.pa_id = pa.pa_id
         where clis.cli_id = p_cli_id;

end;

$function$;

CREATE OR REPLACE FUNCTION public.sp_cliente_get_talonario(p_cli_id integer, p_doc_id integer DEFAULT NULL::integer, OUT p_ta_id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
declare
   v_cli_catfiscal smallint;
   v_doct_id integer;
   v_doct_id_facturavta integer;
   v_doct_id_facturacpra integer;
   v_doct_id_notadebitovta integer;
   v_doct_id_notacreditovta integer;
   v_doct_id_notadebitocpra integer;
   v_doct_id_notacreditocpra integer;
begin

   v_doct_id_facturavta := 1;
   v_doct_id_facturacpra := 2;
   v_doct_id_notadebitovta := 9;
   v_doct_id_notacreditovta := 7;
   v_doct_id_notadebitocpra := 10;
   v_doct_id_notacreditocpra := 8;

   select doct_id
     into v_doct_id
   from Documento
   where doc_id = p_doc_id;

   if v_doct_id in (
                        v_doct_id_facturavta, v_doct_id_facturacpra, v_doct_id_notadebitovta,
                        v_doct_id_notacreditovta, v_doct_id_notadebitocpra, v_doct_id_notacreditocpra ) then

        select cli_catfiscal
          into v_cli_catfiscal
        from Cliente
        where cli_id = p_cli_id;


        select
            case v_cli_catfiscal
                when 1  then ta_id_inscripto--'Inscripto'
                when 2  then ta_id_final--'Exento'
                when 3  then ta_id_final--'No inscripto'
                when 4  then ta_id_final--'Consumidor Final'
                when 5  then ta_id_externo--'Extranjero'
                when 6  then ta_id_final--'Mono Tributo'
                when 7  then ta_id_externo--'Extranjero Iva'
                when 8  then ta_id_final--'No responsable'
                when 9  then ta_id_final--'No Responsable exento'
                when 10 then ta_id_final--'No categorizado'
                when 11 then ta_id_inscriptom--'Inscripto M'
                else -1--'Sin categorizar'
            end ta_id
          into p_ta_id
        from Documento
        where doc_id = p_doc_id;

   else

        select ta_id
          into p_ta_id
        from Documento
        where doc_id = p_doc_id;

   end if;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_cliente_update_credito(p_cli_id integer, p_emp_id integer)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
declare
   v_deudaCtaCteAnterior decimal(18,6);
   v_deudaCtaCte decimal(18,6);
   v_creditoCtaCte decimal(18,6);
   v_deudaDocAnterior decimal(18,6);
   v_deudaDoc decimal(18,6);
   v_emp_clid_id integer;

   v_doct_factura_vta integer := 1;
   v_doct_cobranza integer := 13;
   v_doct_cobranza_chq integer := 1013;
begin

   -- Deuda en el cache
   --
   select sum(clicc_importe)
     into v_deudaCtaCte
   from ClienteCacheCredito
   where doct_id = v_doct_factura_vta
     and cli_id = p_cli_id;

   -- Credito en el cache
   --
   select sum(clicc_importe)
     into v_creditoCtaCte
   from ClienteCacheCredito
   where doct_id = v_doct_cobranza
     and cli_id = p_cli_id;

   -- Deuda en el cliente
   --
   select cli_deudaCtaCte
     into v_deudaCtaCteAnterior
   from Cliente
   where cli_id = p_cli_id;

   update Cliente
      set cli_deudaCtaCte = coalesce(v_deudaCtaCte, 0) - coalesce(v_creditoCtaCte, 0),
          cli_deudaTotal = cli_deudaTotal - coalesce(v_deudaCtaCteAnterior, 0) 
                           + (coalesce(v_deudaCtaCte, 0) - coalesce(v_creditoCtaCte, 0))
   where cli_id = p_cli_id;

   -- Actualizo la deuda en la tabla EmpresaClienteDeuda
   --
   v_deudaCtaCte := 0;
   v_deudaCtaCteAnterior := 0;
   v_creditoCtaCte := 0;

   -- Deuda en el cache para la empresa del documento modificado
   --
   select sum(clicc_importe)
     into v_deudaCtaCte
   from ClienteCacheCredito
   where doct_id = v_doct_factura_vta
     and cli_id = p_cli_id
     and emp_id = p_emp_id;

   -- Credito en el cache para la empresa del documento modificado
   --
   select sum(clicc_importe)
     into v_creditoCtaCte
   from ClienteCacheCredito
   where doct_id = v_doct_cobranza
     and cli_id = p_cli_id
     and emp_id = p_emp_id;

   select empclid_id
     into v_emp_clid_id
   from EmpresaClienteDeuda
   where cli_id = p_cli_id
     and emp_id = p_emp_id;

   if coalesce(v_emp_clid_id, 0) <> 0 then

      select empclid_DeudaCtaCte
        into v_deudaCtaCteAnterior
      from EmpresaClienteDeuda
      where empclid_id = v_emp_clid_id;

      update EmpresaClienteDeuda
         set empclid_DeudaCtaCte = coalesce(v_deudaCtaCte, 0) - coalesce(v_creditoCtaCte, 0),
             empclid_deudaTotal = empclid_deudaTotal - coalesce(v_deudaCtaCteAnterior, 0)
                                  + (coalesce(v_deudaCtaCte, 0) - coalesce(v_creditoCtaCte, 0))
      where empclid_id = v_emp_clid_id;

   else

      select sp_dbGetNewId('EmpresaClienteDeuda', 'empclid_id') into v_emp_clid_id;

      insert into EmpresaClienteDeuda( empclid_id, cli_id, emp_id, empclid_deudaCtaCte, empclid_deudaTotal )
        values ( v_emp_clid_id, p_cli_id, p_emp_id, coalesce(v_deudaCtaCte, 0),
                 coalesce(v_deudaCtaCte, 0) - coalesce(v_creditoCtaCte, 0) );

   end if;

   --///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
   -- Deuda Documentada desde el cache
   --///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
   -- Deuda en el cache
   --
   select sum(clicc_importe)
     into v_deudaDoc
   from ClienteCacheCredito
   where doct_id = v_doct_cobranza_chq
     and cli_id = p_cli_id;

   -- Deuda en el cliente
   --
   select cli_deudaDoc
     into v_deudaDocAnterior
   from Cliente
   where cli_id = p_cli_id;

   update Cliente
      set cli_deudaDoc = coalesce(v_deudaDoc, 0),
          cli_deudaTotal = cli_deudaTotal - coalesce(v_deudaDocAnterior, 0) + coalesce(v_deudaDoc, 0)
   where cli_id = p_cli_id;

   -- Actualizo la deuda en la tabla EmpresaClienteDeuda
   --
   v_deudaDoc := 0;
   v_deudaDocAnterior := 0;

   -- Deuda en el cache para la empresa del documento modificado
   --
   select sum(clicc_importe)
     into v_deudaDoc
   from ClienteCacheCredito
   where doct_id = v_doct_cobranza_chq
     and cli_id = p_cli_id
     and emp_id = p_emp_id;

   v_emp_clid_id := null;

   select empclid_id
     into v_emp_clid_id
   from EmpresaClienteDeuda
   where cli_id = p_cli_id
     and emp_id = p_emp_id;

   if coalesce(v_emp_clid_id, 0) <> 0 then

      select empclid_DeudaDoc
        into v_deudaDocAnterior
      from EmpresaClienteDeuda
      where empclid_id = v_emp_clid_id;

      update EmpresaClienteDeuda
         set empclid_DeudaDoc = coalesce(v_deudaDoc, 0),
             empclid_deudaTotal = empclid_deudaTotal - coalesce(v_deudaDocAnterior, 0) + coalesce(v_deudaDoc, 0)
      where empclid_id = v_emp_clid_id;

   else

      select sp_dbGetNewId('EmpresaClienteDeuda', 'empclid_id') into v_emp_clid_id;

      insert into EmpresaClienteDeuda( empclid_id, cli_id, emp_id, empclid_deudaDoc, empclid_deudaTotal )
      values ( v_emp_clid_id, p_cli_id, p_emp_id, coalesce(v_deudaDoc, 0), coalesce(v_deudaDoc, 0) );

   end if;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_cliente_update_pedido_credito(p_cli_id integer, p_emp_id integer)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
declare
   v_doct_PedidoVenta integer;
   v_deudaPedidoAnterior decimal(18,6);
   v_deudaPedido decimal(18,6);
   v_empclid_id integer;
begin

   v_doct_PedidoVenta := 5;

   -- deuda desde el cache
   --

   -- deuda en el cache
   --
   select sum(clicc_importe)
     into v_deudaPedido
   from ClienteCacheCredito
   where doct_id = v_doct_PedidoVenta
     and cli_id = p_cli_id;

   -- deuda en el cliente
   --
   select cli_deudaPedido
     into v_deudaPedidoAnterior
   from Cliente
   where cli_id = p_cli_id;

   update Cliente
      set cli_deudaPedido = coalesce(v_deudaPedido, 0),
          cli_deudaTotal = cli_deudaTotal - coalesce(v_deudaPedidoAnterior, 0) + coalesce(v_deudaPedido, 0)
   where cli_id = p_cli_id;

   -- actualizo la deuda en la tabla empresaclientedeuda
   --
   v_deudaPedido := 0;
   v_deudaPedidoAnterior := 0;

   -- deuda en el cache para la empresa del documento modificado
   --
   select sum(clicc_importe)
     into v_deudaPedido
   from ClienteCacheCredito
   where doct_id = v_doct_PedidoVenta
     and cli_id = p_cli_id
     and emp_id = p_emp_id;

   select empclid_id
     into v_empclid_id
   from EmpresaClienteDeuda
   where cli_id = p_cli_id
     and emp_id = p_emp_id;

   if coalesce(v_empclid_id, 0) <> 0 then

      select empclid_deudaPedido
        into v_deudaPedidoAnterior
      from EmpresaClienteDeuda
      where empclid_id = v_empclid_id;

      update EmpresaClienteDeuda
         set empclid_deudaPedido = coalesce(v_deudaPedido, 0),
             empclid_deudaTotal = empclid_deudaTotal - coalesce(v_deudaPedidoAnterior, 0) + coalesce(v_deudaPedido, 0)
      where empclid_id = v_empclid_id;

   else

      select * from sp_dbGetNewId('EmpresaClienteDeuda', 'empclid_id') into v_empclid_id;

      insert into EmpresaClienteDeuda( empclid_id, cli_id, emp_id, empclid_deudaPedido, empclid_deudaTotal )
                              values ( v_empclid_id, p_cli_id, p_emp_id, coalesce(v_deudaPedido, 0), coalesce(v_deudaPedido, 0) );

   end if;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_cliente_validate_cuit(p_cli_id integer, OUT p_is_valid integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
declare
   v_cli_catfiscal integer;
   v_cli_cuit varchar;

   v_cfg_valor varchar(255);
   
   csCatFInscripto integer := 1;
   csCatFExento integer := 2;
   csCatFNoInscripto integer := 3;
   csCatFConsumidorFinal integer := 4;
   csCatFExtranjero integer := 5;
   csCatFMonoTributo integer := 6;
   csCatFExtranjeroIva integer := 7;
   csCatFNoResponsable integer := 8;
   csCatFNoResponsableExento integer := 9;
   csCatFNoCategorizado integer := 10;
   csCatFInscriptoM integer := 11;
begin

   select cli_catfiscal, cli_cuit
     into v_cli_catfiscal, v_cli_cuit
   from cliente 
   where cli_id = p_cli_id;

   p_is_valid := 1;

   if v_cli_catfiscal not in (csCatFConsumidorFinal, csCatFExento, csCatFExtranjero, csCatFNoCategorizado) then

      if v_cli_cuit = '' then

         p_is_valid := 0;

      else

         select sp_cfg_getValor('Contabilidad-General', 'Clave Fiscal') into v_cfg_valor;

         v_cfg_valor := coalesce(v_cfg_valor, '0');

         if to_number(v_cfg_valor) = 1 /* CUIT */ then

             select sp_cuit_validate(v_cli_cuit) into p_is_valid;

         else

             select sp_rut_validate(v_cli_cuit) into p_is_valid;

         end if;

      end if;

   end if;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_clientehelp2(p_emp_id integer, p_us_id integer, p_bforabm integer, p_bfiltertype integer, p_filter character varying DEFAULT ''::character varying, p_check integer DEFAULT 0, p_cli_id integer DEFAULT 0, p_filter2 character varying DEFAULT ''::character varying, OUT rtn refcursor)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
declare
   v_us_EmpresaEx smallint;
   v_us_EmpXDpto smallint;
   v_filter varchar(255);
begin

   select us_empresaex,
          us_empxdpto
     into v_us_EmpresaEx,
          v_us_EmpXDpto
   from Usuario
   where us_id = p_us_id;

   v_filter := lower(f_unaccent(p_filter));

   v_filter := sp_HelpGetFilter(p_bFilterType, v_filter);

   --/////////////////////////////////////////////////////////////////////////////////////

   if v_us_EmpresaEx <> 0 then

      if p_check <> 0 then

         rtn := 'rtn';
         open rtn for
            select cli_id,
                   cli_nombre Nombre,
                   cli_codigo Codigo
            from Cliente cli
            where ( lower(f_unaccent(cli_nombre = p_filter)) or lower(f_unaccent(cli_codigo)) = p_filter )
               and ( cli_id = p_cli_id or p_cli_id = 0 )
               and ( p_bForAbm <> 0
                     or ( cli.activo <> 0
                          and ( exists ( select *
                                         from EmpresaCliente
                                         where cli_id = cli.cli_id
                                           and emp_id = p_emp_id ) )
                          and ( exists ( select *
                                         from UsuarioEmpresa
                                         where cli_id = cli.cli_id
                                          and us_id = p_us_id )
                                or p_us_id = 1 ) ) );

      else

         rtn := 'rtn';
         open rtn for
            select cli.cli_id,
                   cli.cli_nombre Nombre,
                   cli.cli_codigo Codigo,
                   cli.cli_calle || ' ' || cli.cli_callenumero || ' '
                    || cli.cli_piso || ' ' || cli.cli_depto
                    || ' - ' || cli.cli_localidad || ' - ' || cli.cli_codpostal Direccion,
                   --cli.cli_contacto Contacto,
                   --ven.ven_nombre Vendedor,
                   cli.cli_tel Telefono,
                   --cpg.cpg_nombre Cond_Pago,
                   cli.cli_razonsocial Razon_social/*,
                   cli.cli_cuit CUIT,
                   case cli.cli_catfiscal
                        when 1 then 'Inscripto'
                        when 2 then 'Exento'
                        when 3 then 'No inscripto'
                        when 4 then 'Consumidor Final'
                        when 5 then 'Extranjero'
                        when 6 then 'Mono Tributo'
                        when 7 then 'Extranjero Iva'
                        when 8 then 'No responsable'
                        when 9 then 'No Responsable exento'
                        when 10 then 'No categorizado'
                        else 'Sin categorizar'
                   end Categoria_Fiscal*/
            from Cliente cli
            left join CondicionPago cpg
              on cli.cpg_id = cpg.cpg_id
            left join Vendedor ven
              on cli.ven_id = ven.ven_id
            where ( lower(f_unaccent(cli.cli_codigo)) like v_filter
                    or lower(f_unaccent(cli.cli_nombre)) like v_filter
                    or lower(f_unaccent(cli.cli_razonsocial)) like v_filter
                    or cli.cli_cuit like v_filter
                    or p_filter is null
                    or lower(f_unaccent(
                          (cli.cli_calle || ' ' || cli.cli_callenumero || ' ' || cli.cli_piso || ' ' || cli.cli_depto
                          || ' - ' || cli.cli_localidad || ' - ' || cli.cli_codpostal
                          ))) like v_filter
                    or lower(f_unaccent(cli.cli_contacto)) like v_filter
                    or lower(f_unaccent(cli.cli_tel)) like v_filter
                    or lower(f_unaccent(ven.ven_nombre)) like v_filter
                  )
              and ( p_bForAbm <> 0
                    or ( ( exists ( select *
                                    from EmpresaCliente
                                    where cli_id = cli.cli_id
                                      and emp_id = p_emp_id ) )
                     and ( exists ( select *
                                    from UsuarioEmpresa
                                    where cli_id = cli.cli_id
                                      and us_id = p_us_id )
                           or p_us_id = 1 )
                     and cli.activo <> 0 ) 
                  )
              limit 150;

      end if;

   else

      if v_us_EmpXDpto <> 0 then

         if p_check <> 0 then

            rtn := 'rtn';
            open rtn for
               select cli_id,
                      cli_nombre Nombre,
                      cli_codigo Codigo
               from Cliente cli
               where ( lower(f_unaccent(cli_nombre)) = p_filter or lower(f_unaccent(cli_codigo)) = p_filter )
                 and ( cli_id = p_cli_id or p_cli_id = 0 )
                 and ( p_bForAbm <> 0
                      or ( cli.activo <> 0
                          and ( exists ( select *
                                         from EmpresaCliente
                                         where cli_id = cli.cli_id
                                           and emp_id = p_emp_id ) )
                          and ( exists ( select *
                                         from DepartamentoCliente dc
                                         join UsuarioDepartamento ud
                                           on dc.dpto_id = ud.dpto_id
                                         where dc.cli_id = cli.cli_id
                                           and ud.us_id = p_us_id )
                          or p_us_id = 1 ) )
                      );

         else

            rtn := 'rtn';
            open rtn for
               select cli.cli_id,
                      cli.cli_nombre Nombre,
                      cli.cli_codigo Codigo,
                      cli.cli_calle || ' ' || cli.cli_callenumero || ' ' || cli.cli_piso
                        || ' ' || cli.cli_depto || ' - ' || cli.cli_localidad
                        || ' - ' || cli.cli_codpostal Direccion,
                      --cli.cli_contacto Contacto,
                      --ven.ven_nombre Vendedor,
                      cli.cli_tel Telefono,
                      --cpg.cpg_nombre Cond_Pago,
                      cli.cli_razonsocial Razon_social/*,
                      cli.cli_cuit CUIT,
                      case cli.cli_catfiscal
                           when 1 then 'Inscripto'
                           when 2 then 'Exento'
                           when 3 then 'No inscripto'
                           when 4 then 'Consumidor Final'
                           when 5 then 'Extranjero'
                           when 6 then 'Mono Tributo'
                           when 7 then 'Extranjero Iva'
                           when 8 then 'No responsable'
                           when 9 then 'No Responsable exento'
                           when 10 then 'No categorizado'
                           else 'Sin categorizar'
                      end Categoria_Fiscal*/
               from Cliente cli
               left join CondicionPago cpg
                      on cli.cpg_id = cpg.cpg_id
               left join Vendedor ven
                      on cli.ven_id = ven.ven_id
               where ( lower(f_unaccent(cli.cli_codigo)) like v_filter
                       or lower(f_unaccent(cli.cli_nombre)) like v_filter
                       or lower(f_unaccent(cli.cli_razonsocial)) like v_filter
                       or cli.cli_cuit like v_filter
                       or p_filter is null
                       or lower(f_unaccent(
                             (cli.cli_calle || ' ' || cli.cli_callenumero || ' '
                             || cli.cli_piso || ' ' || cli.cli_depto || ' - ' || cli.cli_localidad
                             || ' - ' || cli.cli_codpostal))) like v_filter
                       or lower(f_unaccent(cli.cli_contacto)) like v_filter
                       or lower(f_unaccent(cli.cli_tel)) like v_filter
                       or lower(f_unaccent(ven.ven_nombre)) like v_filter )
                 and ( p_bForAbm <> 0
                       or ( ( exists ( select *
                                       from EmpresaCliente
                                       where cli_id = cli.cli_id
                                         and emp_id = p_emp_id ) )
                        and ( exists ( select *
                                       from DepartamentoCliente dc
                                       join UsuarioDepartamento ud
                                         on dc.dpto_id = ud.dpto_id
                                       where dc.cli_id = cli.cli_id
                                         and ud.us_id = p_us_id )
                              or p_us_id = 1 )
                       and cli.activo <> 0 )
                     )
                 limit 50;

         end if;

      else

         if p_check <> 0 then

            rtn := 'rtn';
            open rtn for
               select cli_id,
                      cli_nombre Nombre,
                      cli_codigo Codigo
               from Cliente cli
               where ( lower(f_unaccent(cli_nombre)) = p_filter or lower(f_unaccent(cli_codigo)) = p_filter )
                 and ( cli_id = p_cli_id or p_cli_id = 0 )
                 and ( p_bForAbm <> 0 or ( cli.activo <> 0
                 and exists ( select *
                              from EmpresaCliente
                              where cli_id = cli.cli_id
                                and emp_id = p_emp_id ) ) );

         else

            rtn := 'rtn';
            open rtn for
               select cli.cli_id,
                      cli.cli_nombre Nombre,
                      cli.cli_codigo Codigo,
                      cli.cli_calle || ' ' || cli.cli_callenumero || ' ' || cli.cli_piso || ' '
                        || cli.cli_depto || ' - ' || cli.cli_localidad
                        || ' - ' || cli.cli_codpostal Direccion,
                      --cli.cli_contacto Contacto,
                      --ven.ven_nombre Vendedor,
                      cli.cli_tel Telefono,
                      --cpg.cpg_nombre Cond_Pago,
                      cli.cli_razonsocial Razon_social/*,
                      cli.cli_cuit CUIT,
                      case cli.cli_catfiscal
                           when 1 then 'Inscripto'
                           when 2 then 'Exento'
                           when 3 then 'No inscripto'
                           when 4 then 'Consumidor Final'
                           when 5 then 'Extranjero'
                           when 6 then 'Mono Tributo'
                           when 7 then 'Extranjero Iva'
                           when 8 then 'No responsable'
                           when 9 then 'No Responsable exento'
                           when 10 then 'No categorizado'
                           else 'Sin categorizar'
                      end Categoria_Fiscal*/
                 from Cliente cli
                 left join CondicionPago cpg
                        on cli.cpg_id = cpg.cpg_id
                 left join Vendedor ven
                        on cli.ven_id = ven.ven_id
                 where ( lower(f_unaccent(cli.cli_codigo)) like v_filter
                         or lower(f_unaccent(cli.cli_nombre)) like v_filter
                         or lower(f_unaccent(cli.cli_razonsocial)) like v_filter
                         or cli.cli_cuit like v_filter
                         or p_filter is null
                         or lower(f_unaccent(
                              (cli.cli_calle || ' ' || cli.cli_callenumero || ' ' || cli.cli_piso
                               || ' ' || cli.cli_depto || ' - ' || cli.cli_localidad
                               || ' - ' || cli.cli_codpostal))) like v_filter
                         or lower(f_unaccent(cli.cli_contacto)) like v_filter
                         or lower(f_unaccent(cli.cli_tel)) like v_filter
                         or lower(f_unaccent(ven.ven_nombre)) like v_filter )
                   and ( p_bForAbm <> 0
                          or ( exists ( select *
                                        from EmpresaCliente
                                        where cli_id = cli.cli_id
                                          and emp_id = p_emp_id )
                            and cli.activo <> 0 )
                       )
                   limit 50;

         end if;

      end if;

   end if;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_codigopostalhelp(p_emp_id integer, p_us_id integer, p_bforabm integer, p_bfiltertype integer, p_filter character varying DEFAULT ''::character varying, p_check integer DEFAULT 0, p_cpa_id integer DEFAULT 0, p_filter2 character varying DEFAULT ''::character varying, OUT rtn refcursor)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
declare
   v_altura integer;
   v_n integer;
   v_s varchar(50);
   v_filter varchar(255);
   v_p_filter varchar(2000);
begin

   v_p_filter := p_filter;
   v_altura := 0;

   v_n := LENGTH(v_p_filter);

   while v_n > 0
   loop
      begin
         if SUBSTR(v_p_filter, v_n, 1) = ' ' then
         begin
            v_s := SUBSTR(v_p_filter, v_n, 50);

            if isnumeric(v_s) <> 0 then
            begin
               v_altura := to_number(v_s);

               v_p_filter := SUBSTR(v_p_filter, 1, v_n - 1);

            end;
            end if;

            v_n := 0;

         end;
         end if;

         v_n := v_n - 1;

      end;
   end loop;

   v_filter := lower(f_unaccent(v_p_filter));

   v_filter := sp_HelpGetFilter(p_bFilterType, v_filter);

   --/////////////////////////////////////////////////////////////////////////////////////

   if p_check <> 0 then

      if p_cpa_id < 0 then

         select cpa_id
           into p_cpa_id
           from CodigoPostalItem
            where cpai_id = p_cpa_id * -1;

      end if;

      rtn := 'rtn';
      open rtn for
         select cpa_id,
                cpa_codigo Nombre,
                cpa_codigo Codigo
           from CodigoPostal cpa
            where ( cpa_codigo = v_p_filter )
                    and ( cpa_id = p_cpa_id
                    or p_cpa_id = 0 )
                    and ( p_bForAbm <> 0
                    or cpa.activo <> 0 );

   else

      rtn := 'rtn';        
      open rtn for

         select -cpai.cpai_id cpa_id,
                cpa.cpa_codigo Codigo_Postal,
                case cpai.cpai_tipo
                    when 1 then cpai.cpai_calle
                    else cpai.cpai_localidad
                end Calle_Localidad,
                cpai.cpai_desde Desde,
                cpai.cpai_hasta Hasta,
                pro.pro_nombre Provincia
           from CodigoPostal cpa
                  join CodigoPostalItem cpai
                   on cpa.cpa_id = cpai.cpa_id
                  join Provincia pro
                   on cpa.pro_id = pro.pro_id
            where ( cpa.cpa_codigo LIKE v_filter
                    or ( lower(f_unaccent(cpai.cpai_calle)) LIKE v_filter
                    and cpai.cpai_tipo = 1 )
                    or ( lower(f_unaccent(cpai.cpai_localidad)) LIKE v_filter
                    and cpai.cpai_tipo = 2 )
                    or v_p_filter is null )
                    and ( ( cpai.cpai_desde <= v_altura
                    and cpai.cpai_hasta >= v_altura )
                    or v_altura = 0 )
                    and ( p_bForAbm <> 0
                    or cpa.activo <> 0 )
           limit 50;

   end if;
        
end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_cols(tablename character varying, OUT rtn refcursor)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
declare
v_leng_id integer;
begin
        rtn := 'rtn';
        open rtn for
        select *
        from information_schema.columns
        where table_name = lower(tableName);

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_cuenta_get_currency_info(p_cue_id integer, OUT p_mon_id integer, OUT p_mon_name character varying, OUT p_mon_precio numeric)
 RETURNS record
 LANGUAGE plpgsql
AS $function$
declare
      v_mon_id integer;
      v_mon_name varchar;
      v_mon_precio decimal(18,6);
begin


      select c.mon_id,
             mon_nombre,
             case when mon_legal = 0 then sp_moneda_get_cotizacion(c.mon_id, CURRENT_TIMESTAMP::date) 
             else 1
             end as mon_precio
        into v_mon_id,
             v_mon_name,
             v_mon_precio
      from Cuenta c inner join Moneda m on c.mon_id = m.mon_id
      where cue_id = p_cue_id;

      p_mon_id := coalesce(v_mon_id, 0);
      p_mon_name := coalesce(v_mon_name, '');
      p_mon_precio := coalesce(v_mon_precio, 0);

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_cuenta_get_info(p_cue_id integer, OUT p_mon_id integer, OUT p_emp_id integer)
 RETURNS record
 LANGUAGE plpgsql
AS $function$
declare
      v_mon_id integer;
      v_emp_id integer;
begin


      select mon_id,
             emp_id
        into v_mon_id,
             v_emp_id
      from Cuenta
      where cue_id = p_cue_id;

      p_mon_id := coalesce(v_mon_id, 0);
      p_emp_id := coalesce(v_emp_id, 0);

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_cuentahelp(p_emp_id integer, p_us_id integer, p_bforabm integer, p_filter character varying DEFAULT ''::character varying, p_check integer DEFAULT 0, p_cue_id integer DEFAULT 0, p_filter2 character varying DEFAULT ''::character varying, OUT rtn refcursor)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
BEGIN
   
      rtn := sp_cuentaHelpCliente(p_emp_id,
                       p_us_id,
                       p_bForAbm,
                       p_filter,
                       p_check,
                       p_cue_id,
                       p_filter2);        
END;
$function$;

CREATE OR REPLACE FUNCTION public.sp_cuentahelpcairo(p_emp_id integer, p_us_id integer, p_bforabm integer, p_filter character varying DEFAULT ''::character varying, p_check integer DEFAULT 0, p_cue_id integer DEFAULT 0, p_filter2 character varying DEFAULT ''::character varying, OUT rtn refcursor)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
declare
   v_sqlstmt varchar(8000);
begin

   p_filter := lower(f_unaccent(p_filter));

   if p_check <> 0 then
   begin
      v_sqlstmt := 'select  cue_id,
                            cue_nombre as Nombre,
                            cue_codigo as Codigo
                    from Cuenta
                    where (     lower(f_unaccent(cue_nombre)) = ''' || p_filter || ''' or lower(f_unaccent(cue_codigo)) = ''' || p_filter || '''
                            or (lower(f_unaccent(cue_identificacionexterna)) = ''' || p_filter || '''
                                and cue_identificacionexterna <> '''')
                          )
                      and activo <> 0
                      and (cue_id = ' || to_char(p_cue_id) || ' or ' || to_char(p_cue_id) || '=0)';
   end;
   else
   begin
      v_sqlstmt := 'select
                           cue_id,
      		      cue_nombre as Nombre,
      		      cue_codigo as Codigo,
      		      cue_identificacionexterna as Codigo2,
      		      cue_descrip as Descripcion
                    from Cuenta
                    where (lower(f_unaccent(cue_codigo)) like ''%' || p_filter || '%'' or lower(f_unaccent(cue_nombre)) like ''%' || p_filter || '%''
                           or (lower(f_unaccent(cue_identificacionexterna)) like ''%' || p_filter || '%'' and cue_identificacionexterna <> '''')
                           or (lower(f_unaccent(cue_descrip)) like ''%' || p_filter || '%'' and cue_descrip <> ''''))
                      and (' || to_char(p_bForAbm) || ' <> 0 or activo <> 0)';
   end;
   end if;

   if p_filter2 <> '' then
      v_sqlstmt := v_sqlstmt || ' and (' || p_filter2 || ')';
   end if;

   v_sqlstmt := v_sqlstmt || ' limit 50;';
   
   rtn := 'rtn';        
   open rtn for execute v_sqlstmt;

        
end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_cuentahelpcliente(p_emp_id integer, p_us_id integer, p_bforabm integer, p_filter character varying DEFAULT ''::character varying, p_check integer DEFAULT 0, p_cue_id integer DEFAULT 0, p_filter2 character varying DEFAULT ''::character varying, OUT rtn refcursor)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
BEGIN
   
  

         rtn := sp_cuentaHelpCairo(p_emp_id,
                                          p_us_id,
                                          p_bForAbm,
                                          p_filter,
                                          p_check,
                                          p_cue_id,
                                          p_filter2);        
END;
$function$;

CREATE OR REPLACE FUNCTION public.sp_cuit_validate(p_cuit character varying, OUT p_is_valid integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
declare
   sum integer;
   rest integer;
   digit integer;
begin
      -- the word cuit is allowed as valid cuit
      --
      if p_cuit = 'cuit' then

         p_is_valid := 1;

      else

         if p_cuit = '' then

            p_is_valid := 0;

         else

            p_cuit := replace(p_cuit, '-', '');
            p_cuit := replace(p_cuit, '.', '');

            if length(trim(p_cuit)) <> 11 then

               p_is_valid := 0;

            else
               
               sum := to_number(substring(p_cuit, 1, 1)) * 5;
               sum := sum + to_number(substring(p_cuit, 2, 1)) * 4;
               sum := sum + to_number(substring(p_cuit, 3, 1)) * 3;
               sum := sum + to_number(substring(p_cuit, 4, 1)) * 2;
               sum := sum + to_number(substring(p_cuit, 5, 1)) * 7;
               sum := sum + to_number(substring(p_cuit, 6, 1)) * 6;
               sum := sum + to_number(substring(p_cuit, 7, 1)) * 5;
               sum := sum + to_number(substring(p_cuit, 8, 1)) * 4;
               sum := sum + to_number(substring(p_cuit, 9, 1)) * 3;
               sum := sum + to_number(substring(p_cuit, 10, 1)) * 2;
               rest := sum % 11;

               digit := 11 - rest;
               if digit = 11 then
                  digit := 0;
               end if;
               if digit = 10 then
                  digit := 1;
               end if;

               if digit <> to_number(substring(p_cuit, 11, 1)) then

                  p_is_valid := 0;

               else

                  p_is_valid := 1;

               end if;

            end if;

         end if;

      end if;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_dbgetnewid(p_tabla character varying, p_pk character varying, OUT p_id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
declare
  v_sqlstmt varchar(255);
begin

   if lower(p_tabla) = 'stock' or lower(p_tabla) = 'stockitem' then

      select max(id_nextId)
        into p_id
      from IdStock
      where id_tabla = p_tabla
        and id_campoId = p_pk
        and id_rango = 0;

      -- si no existe en la tabla
      if p_id is null then

         v_sqlstmt := 'insert into IdStock (id_tabla, id_nextId, id_campoId) select ''' || p_tabla
                      || ''',coalesce(max(' || p_pk || '),0)+1, ''' || p_pk
                      || ''' from ' || p_tabla
                      || ' where isnumeric(' || p_pk || ')<>0';

         execute v_sqlstmt;

         select max(id_nextId)
           into p_id
         from IdStock
         where id_tabla = p_tabla
           and id_campoId = p_pk;

      end if;

      update idStock
         set id_nextId = p_id + 1
      where id_tabla = p_tabla
        and id_campoId = p_pk;

   else

      if lower(p_tabla) = 'asiento' or lower(p_tabla) = 'asientoitem' then

         select max(id_nextId)
           into p_id
         from IdAsiento
         where id_tabla = p_tabla
           and id_campoId = p_pk
           and id_rango = 0;

         -- si no existe en la tabla
         if p_id is null then

            v_sqlstmt := 'insert into IdAsiento (id_tabla, id_nextId, id_campoId) select ''' || p_tabla
                         || ''',coalesce(max(' || p_pk || '),0)+1, ''' || p_pk
                         || ''' from ' || p_tabla
                         || ' where isnumeric(' || p_pk || ')<>0';

            execute v_sqlstmt;

            select max(id_nextId)
              into p_id
            from IdAsiento
            where id_tabla = p_tabla
              and id_campoId = p_pk;

         end if;

         update idAsiento
            set id_nextId = p_id + 1
         where id_tabla = p_tabla
           and id_campoId = p_pk;

      else

         select max(id_nextId)
           into p_id
         from Id
         where id_tabla = p_tabla
           and id_campoId = p_pk
           and id_rango = 0;

         -- si no existe en la tabla
         if p_id is null then

            v_sqlstmt := 'insert into Id (id_tabla, id_nextId, id_campoId) select ''' || p_tabla
                         || ''',coalesce(max(' || p_pk || '),0)+1, ''' || p_pk
                         || ''' from ' || p_tabla
                         || ' where isnumeric(' || p_pk || ')<>0';

            execute v_sqlstmt;

            select max(id_nextId)
              into p_id
            from Id
            where id_tabla = p_tabla
              and id_campoId = p_pk;

         end if;

         update id
            set id_nextId = p_id + 1
         where id_tabla = p_tabla
           and id_campoId = p_pk;

      end if;

   end if;
   
end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_dbgetnewid2(p_tabla character varying, p_pk character varying, p_min integer, p_max integer, OUT p_id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
declare
  v_sqlstmt varchar(5000);
begin

   select max(id_nextId)
     into p_id
   from id
   where id_tabla = p_tabla
     and id_campoId = p_pk
     and id_rango = p_min;

   -- si no existe en la tabla
   if coalesce(p_id, 0) = 0 then
      v_sqlstmt := 'insert into id (id_tabla, id_nextId, id_campoId, id_rango) select '''
                    || p_tabla || 
                    ''',coalesce(max(to_number(' || p_pk || ')),0)+1, ''' 
                    || p_pk || ''',' 
                    || to_char(p_min) || 
                    ' from ' || p_tabla ||
                    ' where isnumeric(' || p_pk || ')<>0 and (to_number(' || p_pk || ') >= '
                    || to_char(p_min) 
                    || ' and ' || ' to_number(' || p_pk || ') <= ' || to_char(p_max) || ')';

      execute v_sqlstmt;

      select max(id_nextId)
        into p_id
      from id
      where id_tabla = p_tabla
        and id_campoId = p_pk
        and id_rango = p_min;

   end if;

   p_id := coalesce(p_id, 0);

   if p_id = 0 then
      p_id := p_min;
   end if;

   if p_id < p_min then
      p_id := p_min;
   end if;

   if p_id > p_max then
      p_id := p_max;
   end if;

   update id
      set id_nextId = p_id + 1
   where id_tabla = p_tabla
     and id_campoId = p_pk
     and id_rango = p_min;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_depositologicohelp(p_emp_id integer, p_us_id integer, p_bforabm integer, p_filter character varying DEFAULT ''::character varying, p_check integer DEFAULT 0, p_depl_id integer DEFAULT 0, p_filter2 character varying DEFAULT ''::character varying, OUT rtn refcursor)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
declare
   v_sqlstmt varchar(5000);
   v_bFilterXEmpresa smallint;
   v_strUsId varchar(10);
   v_permisos varchar(500);
   v_filter varchar(2000);
   v_filter2 varchar(2000);
begin

   p_filter := lower(f_unaccent(p_filter));

   v_filter := p_filter;
   v_filter2 := p_filter2;

   v_filter := replace(v_filter, '''', '''''');

   if instr(v_filter2, '{emp_id=0}') <> 0 then

      v_filter2 := replace(v_filter2, '{emp_id=0}', '');
      v_bFilterXEmpresa := 0;

   else

      v_bFilterXEmpresa := 1;

   end if;

   if instr(v_filter2, 'emp_id = ') <> 0 then

      v_bFilterXEmpresa := 0;

   end if;

   v_strUsId := trim(to_char(p_us_id));

   -- Si el usuario no tiene acceso irestricto sobre los depositos
   --
   if not exists ( select *
                   from Usuario
                   where us_deposito <> 0
                     and us_id = p_us_id ) then

      v_permisos := ' and exists(select * from UsuarioDepositoLogico '
                    || 'where depl_id = depl.depl_id and us_id = '
                    || v_strUsId || ')';

   else

      v_permisos := '';

   end if;

   if p_check <> 0 then

      v_sqlstmt :=              'select depl_id, ';
      v_sqlstmt := v_sqlstmt || '    depl_nombre    as Nombre, ';
      v_sqlstmt := v_sqlstmt || '    depl_codigo    as Codigo ';
      v_sqlstmt := v_sqlstmt || 'from DepositoLogico depl ';
      v_sqlstmt := v_sqlstmt || 'where (depl_id > 0) and (lower(f_unaccent(depl_nombre)) = ''' || v_filter
                             || ''' or lower(f_unaccent(depl_codigo)) = ''' || v_filter || ''') ';

      if p_depl_id <> 0 then

         v_sqlstmt := v_sqlstmt || '  and (depl_id = ' || to_char(p_depl_id) || ') ';

      end if;

      if p_emp_id <> 0 and v_bFilterXEmpresa <> 0 and p_bForAbm = 0 then

         v_sqlstmt := v_sqlstmt || '  and (emp_id = ' || to_char(p_emp_id) || ' or emp_id is null) ';

      end if;

      if p_bForAbm = 0 then

         v_sqlstmt := v_sqlstmt || '  and activo <> 0 ';

      end if;

      if v_filter2 <> '' then

         v_sqlstmt := v_sqlstmt || '  and (' || v_filter2 || ')';

      end if;

   else

      v_sqlstmt :=              'select depl_id, ';
      v_sqlstmt := v_sqlstmt || '       depl_nombre   as Nombre, ';
      v_sqlstmt := v_sqlstmt || '       depl_codigo   as Codigo ';
      v_sqlstmt := v_sqlstmt || 'from DepositoLogico depl ';
      v_sqlstmt := v_sqlstmt || 'where (depl_id > 0 ) and (lower(f_unaccent(depl_codigo)) like ''%' || v_filter
                                || '%'' or lower(f_unaccent(depl_nombre)) like ''%' || v_filter
                                || '%'' or ''' || v_filter || ''' = '''') ';

      if p_emp_id <> 0 and v_bFilterXEmpresa <> 0 and p_bForAbm = 0 then

         v_sqlstmt := v_sqlstmt || '  and (emp_id = ' || to_char(p_emp_id) || ' or emp_id is null) ';

      end if;

      if p_bForAbm = 0 then

         v_sqlstmt := v_sqlstmt || '  and activo <> 0 ';

      end if;

      if v_filter2 <> '' then

         v_sqlstmt := v_sqlstmt || '  and (' || v_filter2 || ')';

      end if;

   end if;

   if p_bForAbm = 0 then

      v_sqlstmt := v_sqlstmt || v_permisos;

   end if;

   rtn := 'rtn';
   open rtn for execute v_sqlstmt;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_desktop_get_reportes(p_us_id integer, p_inf_tipo integer DEFAULT 1, OUT rtn refcursor)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
begin

   rtn := 'rtn';

   open rtn for

   select distinct
             r.rpt_id,
             r.rpt_nombre,
             i.inf_modulo,
             r.rpt_descrip

   from Reporte r
   join Informe i
     on r.inf_id = i.inf_id
   join (select * from sp_security_get_permisos_x_usuario(p_us_id)) as i2
     on i.pre_id = i2.pre_id

   where ( r.us_id = p_us_id or p_us_id = 0 )
     and i.activo <> 0
     and i.inf_tipo = p_inf_tipo

   order by i.inf_modulo, r.rpt_nombre;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_doc_factura_compra_get_percepciones(p_fc_id integer, OUT rtn refcursor)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
BEGIN

   OPEN rtn FOR
      SELECT FacturaCompraPercepcion.*,
             perc_nombre,
             ccos.ccos_nombre
      FROM FacturaCompraPercepcion
        JOIN Percepcion
                ON FacturaCompraPercepcion.perc_id = Percepcion.perc_id
        LEFT JOIN CentroCosto ccos
                ON FacturaCompraPercepcion.ccos_id = ccos.ccos_id
      WHERE fc_id = p_fc_id
      ORDER BY fcperc_orden;

END;
$function$;

CREATE OR REPLACE FUNCTION public.sp_doc_asiento_delete(p_as_id integer, p_emp_id integer, p_us_id integer, p_no_check_access integer DEFAULT 0)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
declare
   v_editable integer;
   v_edit_msg varchar(255);
begin


  if coalesce(p_as_id, 0) = 0 then
     return;
  end if;

  if p_no_check_access = 0 then

     select * from sp_doc_asiento_editable_get(p_emp_id, p_as_id, p_us_id, 0, 1) into v_editable, v_edit_msg;

     if v_editable = 0 then

        raise exception '@@ERROR_SP: %', v_edit_msg;

     end if;

  end if;

  SET TRANSACTION READ WRITE;

  begin

     delete from AsientoItem where as_id = p_as_id;
     delete from Asiento where as_id = p_as_id;

  exception
     when others then
        raise exception 'Ha ocurrido un error al borrar el Asiento. sp_doc_asiento_delete.',
                         sqlstate, sqlerrm;
  end;

  return;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_doc_asiento_editable_get(p_emp_id integer, p_as_id integer, p_us_id integer, p_no_anulado integer DEFAULT 0, p_delete integer DEFAULT 0, OUT p_editable integer, OUT p_edit_msg character varying)
 RETURNS record
 LANGUAGE plpgsql
AS $function$
declare
   v_doc_id integer;
   v_as_fecha date;
   v_doct_id_cliente integer;
   v_firmado integer;
   v_emp_id integer;
   v_emp_nombre varchar(255);
   v_impreso smallint;

   v_anulado integer := 7;
   v_csPreConEditAsiento integer := 19002;
   v_csPreConDeleteAsiento integer := 19003;

   v_pre_id integer;
   v_doc_nombre varchar(255);
   v_fca_id integer;

   v_fca_fechaDesde date;
   v_fca_fechaHasta date;

   v_edit_AST_MF smallint;

   v_cfg_valor varchar(5000);

   v_doc_editarimpresos smallint;
begin

   if p_as_id <> 0 then

      select d.doc_id,
             d.emp_id,
             c.as_fecha,
             c.doct_id_cliente,
             c.impreso
        into v_doc_id,
             v_emp_id,
             v_as_fecha,
             v_doct_id_cliente,
             v_impreso
      from Asiento c
      join Documento d
        on c.doc_id = d.doc_id
      where c.as_id = p_as_id;

      if p_emp_id <> v_emp_id then

         select emp_nombre
           into v_emp_nombre
         from Empresa
         where emp_id = v_emp_id;

         p_editable := 0;

         if p_delete = 0 then
            p_edit_msg := 'El comprobante pertenece a la empresa ' || v_emp_nombre || ', para editarlo debe ingresar al sistema indicando dicha empresa.';
         else
            p_edit_msg := 'El comprobante pertenece a la empresa ' || v_emp_nombre || ', para borrarlo debe ingresar al sistema indicando dicha empresa.';
         end if;

         return;

      end if;

      if p_delete = 0 then
         v_pre_id := v_csPreConEditAsiento;
      else
         v_pre_id := v_csPreConDeleteAsiento;
      end if;

      -- Tiene permiso para editar asientos contables
      --
      if not exists ( select per_id
                      from Permiso
                      where pre_id = v_pre_id
                        and ( ( us_id = p_us_id )
                             or exists ( select us_id
                                         from UsuarioRol
                                         where us_id = p_us_id
                                           and rol_id = Permiso.rol_id ) ) ) then
         p_editable := 0;

         if p_delete = 0 then
            p_edit_msg := 'Usted no tiene permiso para editar asientos contables';
         else
            p_edit_msg := 'Usted no tiene permiso para borrar asientos contables';
         end if;

         return;

      end if;

      v_pre_id := null;

      select case
                 when p_delete = 0 then pre_id_edit
                 else pre_id_delete
             end,
             doc_nombre
        into v_pre_id,
             v_doc_nombre
      from Documento
      where doc_id = v_doc_id;

      if not exists ( select per_id
                      from Permiso
                      where pre_id = v_pre_id
                        and ( ( us_id = p_us_id )
                             or exists ( select us_id
                                         from UsuarioRol
                                         where us_id = p_us_id
                                           and rol_id = Permiso.rol_id ) ) ) then
         p_editable := 0;

         if p_delete = 0 then
            p_edit_msg := 'Usted no tiene permiso para editar ' || v_doc_nombre;
         else
            p_edit_msg := 'Usted no tiene permiso para borrar ' || v_doc_nombre;
         end if;

         return;

      end if;

      -- Fechas de control de Acceso
      select fca_id
        into v_fca_id
      from Documento
      where doc_id = v_doc_id;

      if not v_fca_id is null then

         if not exists ( select fca_id
                         from FechaControlAcceso
                         where fca_id = v_fca_id
                           and v_as_fecha between fca_fechaDesde and fca_fechaHasta ) then

            select fca_fechaDesde,
                   fca_fechaHasta
              into v_fca_fechaDesde,
                   v_fca_fechaHasta
            from FechaControlAcceso
            where fca_id = v_fca_id;

            p_editable := 0;
            p_edit_msg := 'La fecha del asiento esta fuera del intervalo definido por las fechas de control de acceso ('
                          || to_char(coalesce(v_fca_fechaDesde, ''), 'dd-mm-yyyy')
                          || ' - '
                          || to_char(coalesce(v_fca_fechaHasta, ''), 'dd-mm-yyyy')
                          || ')';
            return;

         end if;

      end if;

      if coalesce(v_doct_id_cliente, 0) <> 0 then

         v_edit_AST_MF := 0;

         if v_doct_id_cliente = 26 then
            -- Veo si se permite editar asientos de movimientos de fondos
            --
            select sp_cfg_getValor('Tesoreria-General', 'Modificar Asientos MF') into v_cfg_valor;

            if isnumeric(v_cfg_valor) = 0 then
               v_edit_AST_MF := 0;
            else
               v_edit_AST_MF := to_number(v_cfg_valor);
            end if;

         end if;

         if v_edit_AST_MF = 0 then

            p_editable := 0;
            p_edit_msg := 'Este documento se ha generado automaticamente por otro documento. No puede editarse directamente.';

            return;

         end if;

      end if;

      if v_impreso <> 0 and p_no_anulado = 0 then

         select doc_editarimpresos
           into v_doc_editarimpresos
         from Documento
         where doc_id = v_doc_id;

         if v_doc_editarimpresos = 0 then

            p_editable := 0;
            if p_delete = 0 then
               p_edit_msg := 'El comprobante esta impreso y la definición de su documento no permite la edición de comprobantes impresos.';
            else
               p_edit_msg := 'El comprobante esta impreso y la definición de su documento no permite eliminar comprobantes impresos.';
            end if;

            return;

         end if;

      end if;

   end if;

   p_editable := 1;
   p_edit_msg := '';

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_doc_asiento_get(p_emp_id integer, p_as_id integer, p_us_id integer, OUT rtn refcursor)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
declare
   v_editable integer;
   v_edit_msg varchar(255);
   v_doc_id integer;
   v_ta_mascara varchar(100);
   v_ta_propuesto smallint;
begin

   rtn := 'rtn';

/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                             TALONARIO Y ESTADO DE EDICION                                                          //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/
   select doc_id into v_doc_id from Asiento where as_id = p_as_id;

   select * from sp_talonario_get_propuesto(v_doc_id) into v_ta_mascara, v_ta_propuesto;

   select * from sp_doc_asiento_editable_get(p_emp_id, p_as_id, p_us_id) into v_editable, v_edit_msg;

/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                             select                                                                                 //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/

   open rtn for

      select ast.*,
             doct.doct_nombre || ' ' || ast.as_doc_cliente doc_cliente,
             doc.doc_nombre,
             v_editable editable,
             v_edit_msg editMsg,
             v_ta_mascara ta_mascara,
             v_ta_propuesto ta_propuesto
      from Asiento ast
      join Documento doc
        on ast.doc_id = doc.doc_id
      left join DocumentoTipo doct
        on ast.doct_id_cliente = doct.doct_id
      where ast.as_id = p_as_id;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_doc_asiento_get_items(p_as_id integer, OUT rtn refcursor)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
begin

   rtn := 'rtn';

   open rtn for
      select AsientoItem.*,
          cue_nombre,
          ccos.ccos_nombre
      from AsientoItem
      join Cuenta
        on AsientoItem.cue_id = Cuenta.cue_id
      left join CentroCosto ccos
        on AsientoItem.ccos_id = ccos.ccos_id
      where as_id = p_as_id
      order by asi_orden;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_doc_asiento_save(p_us_id integer, p_astmp_id integer)
 RETURNS SETOF row_result
 LANGUAGE plpgsql
AS $function$
declare
   rtn row_result;

   v_error_msg varchar(255);
   v_error smallint;
   v_cfg_valor varchar(5000);

   v_is_new integer;
   v_orden smallint;

   v_as_id integer;
   v_as_numero integer;
   v_as_nrodoc varchar(50);
   v_as_descrip varchar(5000);
   v_as_fecha date;

   v_asi_id integer;
   v_asi_orden smallint;
   v_asi_descrip varchar(5000);
   v_asi_debe decimal(18,6);
   v_asi_haber decimal(18,6);
   v_asi_origen decimal(18,6);

   v_doc_id integer;
   v_doct_id integer;
   v_ta_id integer;
   v_ccos_id integer;
   v_cue_id integer;
   v_mon_id integer;

   v_creado date;
   v_modificado date;
   v_modifico integer;
   
   v_cue_nombre varchar(255);
   v_cuentas varchar(5000);
   v_error_msg_aux varchar(5000);

   v_ta_propuesto smallint;
   v_ta_tipo smallint;
   v_ta_nrodoc varchar(100);
   dummyChar varchar;
begin

   -- si no existe chau
   --
   if not exists ( select asTMP_id
                   from AsientoTMP
                   where asTMP_id = p_asTMP_id ) then

      return query select * from result_failed();
      return;

   end if;
   
   select sp_cfg_getValor('Compras-General', 'Exigir Centro Costo') into v_cfg_valor;

   v_cfg_valor := coalesce(v_cfg_valor, '0');

   if to_number(v_cfg_valor) <> 0 then

      if exists ( select asi.ccos_id
                  from AsientoItemTMP asi
                  join Cuenta cue
                    on asi.cue_id = cue.cue_id
                  where asi.ccos_id is null
                    and asi.asTMP_id = p_asTMP_id
                    and cue.cue_llevacentrocosto <> 0 ) then

         v_cuentas := '';

         for v_cue_nombre in 
             select distinct cue.cue_nombre
             from AsientoItemTMP asi
             join Cuenta cue
               on asi.cue_id = cue.cue_id
             where asi.ccos_id is null
               and asi.asTMP_id = p_asTMP_id
               and cue.cue_llevacentrocosto <> 0
         loop

               v_cuentas := v_cuentas || v_cue_nombre || ', ';

         end loop;

         if length(v_cuentas) > 0 then
            
            v_cuentas := substr(v_cuentas, 1, length(v_cuentas) - 1);

         end if;

         v_error_msg_aux := 'Debe indicar un centro de costo en cada las cuentas que exigen centro de costo.'
                            || CHR(10) || CHR(10) || 'Cuentas:' || CHR(10) || v_cuentas;

         raise exception '@@ERROR_SP: %', v_error_msg_aux;

      end if;

   end if;

   select as_id,
          as_nrodoc,
          doc_id
     into v_as_id,
          v_as_nrodoc,
          v_doc_id
   from AsientoTMP
   where asTMP_id = p_asTMP_id;

   v_as_id := coalesce(v_as_id, 0);

   set TRANSACTION READ WRITE;

/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                                        insert                                                                      //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/

   if v_as_id = 0 then

      v_is_new := -1;

      select sp_dbGetNewId('Asiento', 'as_id') into v_as_id;
      select sp_dbGetNewId('Asiento', 'as_numero') into v_as_numero;

      select * from sp_talonario_get_propuesto(v_doc_id) into dummyChar, v_ta_propuesto, v_ta_id, v_ta_tipo;

      if v_ta_propuesto = 0 then
         if v_ta_tipo = 3 then /*Auto Impresor*/

            select sp_talonario_get_next_number(v_ta_id) into v_ta_nrodoc;

            -- con esto evitamos que dos tomen el mismo Numero
            --
            perform sp_talonario_set(v_ta_id, v_ta_nrodoc);

            v_as_nrodoc := v_ta_nrodoc;

         end if;
      end if;

      insert into Asiento
        ( as_id, as_numero, as_nrodoc, as_descrip, as_fecha, doc_id, doct_id, modifico )
        ( select v_as_id,
                 v_as_numero,
                 v_as_nrodoc,
                 as_descrip,
                 as_fecha,
                 doc_id,
                 doct_id,
                 modifico
          from AsientoTMP
          where asTMP_id = p_asTMP_id );

      select doc_id,
             as_nrodoc
        into v_doc_id,
             v_as_nrodoc
      from Asiento
      where as_id = v_as_id;

/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                                        update                                                                      //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/
   else

      v_is_new := 0;

      select as_id,
             as_nrodoc,
             as_descrip,
             as_fecha,
             doc_id,
             doct_id,
             modifico,
             modificado
        into v_as_id,
             v_as_nrodoc,
             v_as_descrip,
             v_as_fecha,
             v_doc_id,
             v_doct_id,
             v_modifico,
             v_modificado
      from AsientoTMP
      where asTMP_id = p_asTMP_id;

      update Asiento
         set as_nrodoc = v_as_nrodoc,
             as_descrip = v_as_descrip,
             as_fecha = v_as_fecha,
             doc_id = v_doc_id,
             doct_id = v_doct_id,
             modifico = v_modifico,
             modificado = v_modificado
      where as_id = v_as_id;

   end if;

/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                                        items                                                                       //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/
   v_orden := 1;

   while exists(select 1 from AsientoItemTMP where asTMP_id = p_asTMP_id and asi_orden = v_orden)
   loop

         select asi_id,
                asi_orden,
                asi_descrip,
                asi_debe,
                asi_haber,
                asi_origen,
                AsientoItemTMP.cue_id,
                ccos_id,
                mon_id
           into v_asi_id,
                v_asi_orden,
                v_asi_descrip,
                v_asi_debe,
                v_asi_haber,
                v_asi_origen,
                v_cue_id,
                v_ccos_id,
                v_mon_id
         from AsientoItemTMP
         join Cuenta
           on AsientoItemTMP.cue_id = Cuenta.cue_id
         where asTMP_id = p_asTMP_id
           and asi_orden = v_orden;

         if v_is_new <> 0 or v_asi_id = 0 then

            select sp_dbGetNewId('AsientoItem', 'asi_id') into v_asi_id;

            insert into AsientoItem
              ( as_id, asi_id, asi_orden, asi_descrip, asi_debe, asi_haber,
                asi_origen, cue_id, ccos_id, mon_id )
            values ( v_as_id, v_asi_id, v_asi_orden, v_asi_descrip, v_asi_debe, v_asi_haber,
                     v_asi_origen, v_cue_id, v_ccos_id, v_mon_id );

         else

               update AsientoItem
                  set as_id = v_as_id,
                      asi_orden = v_asi_orden,
                      asi_descrip = v_asi_descrip,
                      asi_debe = v_asi_debe,
                      asi_haber = v_asi_haber,
                      asi_origen = v_asi_origen,
                      cue_id = v_cue_id,
                      ccos_id = v_ccos_id,
                      mon_id = v_mon_id
               where as_id = v_as_id
                 and asi_id = v_asi_id;

         end if;

         v_orden := v_orden + 1;

   end loop;

   if v_is_new = 0 then

         delete from AsientoItem
         where exists ( select asi_id
                        from AsientoItemBorradoTMP
                        where as_id = v_as_id
                          and asTMP_id = p_asTMP_id
                          and asi_id = AsientoItem.asi_id );

         delete from AsientoItemBorradoTMP where as_id = v_as_id and asTMP_id = p_asTMP_id;

   end if;

/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                                     borrar temporales                                                              //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/

   delete from AsientoItemTMP where asTMP_ID = p_asTMP_id;
   delete from AsientoTMP where asTMP_ID = p_asTMP_id;

/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                                     valido el asiento                                                              //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/

   select * from sp_doc_asiento_validate(v_as_id) into v_error, v_error_msg;

   if v_error <> 0 then
      raise exception '%', v_error_msg;
   end if;

/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                                     talonario                                                                      //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/

   select ta_id
     into v_ta_id
   from Documento
   where doc_id = v_doc_id;

   perform sp_talonario_set(v_ta_id, v_as_nrodoc);


/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                                     historial de modificaciones                                                    //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/

   select modifico into v_modifico from Asiento where as_id = v_as_id;

   if v_is_new <> 0 then
      perform sp_historia_update(19001, v_as_id, v_modifico, 1);
   else
      perform sp_historia_update(19001, v_as_id, v_modifico, 3);
   end if;

/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                                     fin                                                                            //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/

   rtn.type := 'as_id';
   rtn.id := v_as_id;

   return next rtn;

exception
  when others then

   raise exception 'Ha ocurrido un error al grabar el asiento. sp_doc_asiento_save. %. %.',
                   sqlstate, sqlerrm;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_doc_asiento_save_item(p_is_new integer, p_asi_id integer, p_as_id integer, p_asi_orden integer, p_asi_debe numeric, p_asi_haber numeric, p_asi_origen numeric, p_asi_tipo integer, p_mon_id integer, p_cue_id integer, p_ccos_id integer, p_cheq_id integer, p_asi_descrip character varying DEFAULT ''::character varying)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
declare
   v_asi_id integer;
   v_asi_debe decimal(18,6);
   v_asi_haber decimal(18,6);
begin

   v_asi_debe := p_asi_debe;
   v_asi_haber := p_asi_haber;

   select sp_dbGetNewId('AsientoItem', 'asi_id') into v_asi_id;

   if p_asi_haber < 0 then

      v_asi_debe := abs(p_asi_haber);
      v_asi_haber := 0;

   end if;

   if p_asi_debe < 0 then

      v_asi_haber := abs(p_asi_debe);
      v_asi_debe := 0;

   end if;

   insert into AsientoItem ( as_id, asi_id, asi_orden, asi_descrip, asi_debe, asi_haber, asi_origen, asi_tipo, cue_id,
                             ccos_id, cheq_id, mon_id )
   values ( p_as_id, v_asi_id, p_asi_orden, p_asi_descrip, v_asi_debe, v_asi_haber, p_asi_origen, p_asi_tipo, p_cue_id,
            p_ccos_id, p_cheq_id, p_mon_id );

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_doc_asiento_validate(p_as_id integer, OUT p_error integer, OUT p_error_msg character varying)
 RETURNS record
 LANGUAGE plpgsql
AS $function$
declare
   v_debe decimal(18,6);
   v_haber decimal(18,6);
   v_strDebe varchar(255);
   v_strHaber varchar(255);

   v_asi_id integer;
   v_dif decimal(18,6);
begin

   select sum(asi_debe),
          sum(asi_haber)
     into v_debe,
          v_haber
   from AsientoItem
   where as_id = p_as_id;

   v_debe := round(coalesce(v_debe, 0), 2);
   v_haber := round(coalesce(v_haber, 0), 2);

   if v_debe <> v_haber then

      v_strDebe := trim(to_char(v_debe, '9,999,999,990.00'));
      v_strHaber := trim(to_char(v_haber, '9,999,999,990.00'));

      p_error := 1;
      p_error_msg := '@@ERROR_SP:El asiento no balancea:;;  Debe : ' || v_strDebe || ';  Haber: ' || v_strHaber || ';;';

   else

      update asientoitem
         set asi_debe = round(asi_debe, 2),
             asi_haber = round(asi_haber, 2)
      where as_id = p_as_id;

      select sum(asi.asi_debe) - sum(asi.asi_haber)
        into v_dif
      from  AsientoItem asi
      where as_id = p_as_id;

      if v_dif <> 0 then

         if v_dif < 0 then
            select min(asi_id)
              into v_asi_id
            from AsientoItem
            where as_id = p_as_id
              and asi_debe <> 0;

         else
            select min(asi_id)
              into v_asi_id
            from AsientoItem
            where as_id = p_as_id
              and asi_haber <> 0;

         end if;

         if v_asi_id is not null then

            if v_dif < 0 then

               update asientoitem
                  set asi_debe = asi_debe + abs(v_dif)
               where asi_id = v_asi_id;

            else

               update asientoitem
                  set asi_haber = asi_haber + abs(v_dif)
               where asi_id = v_asi_id;

            end if;

         end if;

      end if;

      delete from asientoitem
      where asi_debe = 0
        and asi_haber = 0
        and as_id = p_as_id;

      update asientoitem
         set asi_debe = abs(asi_haber),
             asi_haber = 0
      where asi_haber < 0
        and asi_debe = 0
        and as_id = p_as_id;

      update asientoitem
         set asi_haber = abs(asi_debe),
             asi_debe = 0
      where asi_debe < 0
        and asi_haber = 0
        and as_id = p_as_id;

      p_error := 0;

   end if;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_doc_cobranza_asiento_save(p_cobz_id integer, p_raise_error integer DEFAULT (-1), p_fc_id integer DEFAULT NULL::integer, OUT p_error integer, OUT p_error_msg character varying)
 RETURNS record
 LANGUAGE plpgsql
AS $function$
declare
   v_is_new integer;

   v_as_id integer;
   v_as_numero integer;
   v_as_nrodoc varchar(50);
   v_as_descrip varchar(5000);
   v_as_doc_cliente varchar(5000);
   v_as_fecha date;

   v_asi_orden smallint;
   v_asi_debe decimal(18,6);
   v_asi_haber decimal(18,6);
   v_asi_origen decimal(18,6);
   v_asi_descrip varchar(5000);

   v_cli_id integer;
   v_doc_id_cobranza integer;

   v_doct_id integer;
   v_doc_id integer;
   v_doct_id_cobranza integer;
   v_doc_id_cliente integer;

   v_cobz_fecha date;

   v_ta_id integer;

   v_ccos_id_cliente integer;
   v_ccos_id integer;

   v_mon_id integer;

   v_cue_id integer;

   v_cobzi_orden smallint;
   v_cobzi_importe decimal(18,6);
   v_cobzi_importeorigen decimal(18,6);

   v_cheq_id integer;

   v_creado date;
   v_modificado date;
   v_modifico integer;

   v_error smallint;

   v_ta_ultimonro integer;
   v_ta_mascara varchar(50);

begin

   p_error := 0;

   -- si no existe chau
   --
   if not exists ( select cobz_id
                   from Cobranza
                   where cobz_id = p_cobz_id
                     and est_id <> 7 ) then
      return;
   end if;

   select   as_id,
            cli_id,
            doc_id
   into     v_as_id,
            v_cli_id,
            v_doc_id_cobranza
   from Cobranza
   where cobz_id = p_cobz_id;

   v_as_id := coalesce(v_as_id, 0);

   SET TRANSACTION READ WRITE;

/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                                        insert                                                                      //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/
   -- obtengo el documento @doc_id
   --
   select doc_id_asiento,
          Cobranza.doct_id,
          Documento.doc_id,
          ccos_id,
          cobz_nrodoc || ' ' || cli_nombre
     into v_doc_id,
          v_doct_id_cobranza,
          v_doc_id_cliente,
          v_ccos_id_cliente,
          v_as_doc_cliente
   from Cobranza
   join Documento
     on Cobranza.doc_id = Documento.doc_id
   join Cliente
     on Cobranza.cli_id = Cliente.cli_id
   where cobz_id = p_cobz_id;

   if v_as_id = 0 then

      v_is_new := -1;

      select sp_dbGetNewId('Asiento', 'as_id') into v_as_id;
      select sp_dbGetNewId('Asiento', 'as_numero') into v_as_numero;

      select ta_ultimonro,
             ta_mascara,
             doct_id
        into v_ta_ultimonro,
             v_ta_mascara,
             v_doct_id
      from Documento
      join Talonario
        on Documento.ta_id = Talonario.ta_id
      where doc_id = v_doc_id;

      v_ta_ultimonro := v_ta_ultimonro + 1;
      v_as_nrodoc := trim(to_char(v_ta_ultimonro));
      v_as_nrodoc := substr(v_ta_mascara, 1, length(v_ta_mascara) - length(v_as_nrodoc)) || v_as_nrodoc;

      insert into Asiento ( as_id, as_numero, as_nrodoc, as_descrip, as_fecha, as_doc_cliente, doc_id, doct_id,
                            doct_id_cliente, doc_id_cliente, id_cliente, modifico )
         ( select v_as_id,
                  v_as_numero,
                  v_as_nrodoc,
                  cobz_descrip,
                  cobz_fecha,
                  v_as_doc_cliente,
                  v_doc_id,
                  v_doct_id,
                  v_doct_id_cobranza,
                  v_doc_id_cliente,
                  p_cobz_id,
                  modifico
           from Cobranza
           where cobz_id = p_cobz_id );

/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                                        update                                                                      //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/
   else

      v_is_new := 0;

      select cobz_descrip,
             cobz_fecha,
             modifico,
             modificado
        into v_as_descrip,
             v_as_fecha,
             v_modifico,
             v_modificado
      from Cobranza
      where cobz_id = p_cobz_id;

      select doc_id,
             doct_id
        into v_doc_id,
             v_doct_id
      from Asiento
      where as_id = v_as_id;

      update Asiento
         set as_descrip = v_as_descrip,
             as_fecha = v_as_fecha,
             as_doc_cliente = v_as_doc_cliente,
             doc_id = v_doc_id,
             doct_id = v_doct_id,
             doct_id_cliente = v_doct_id_cobranza,
             doc_id_cliente = v_doc_id_cliente,
             id_cliente = p_cobz_id,
             modifico = v_modifico,
             modificado = v_modificado
      where as_id = v_as_id;

   end if;

/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                                        items                                                                       //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/
   -- borro todos los items y solo hago inserts que se mucho mas simple y rapido
   --
   delete from AsientoItem where as_id = v_as_id;

   v_asi_orden := 1;

   -- Cheques
   -- Efectivo
   -- Tarjeta
   -- Otros
   -- Debe

   for v_cobzi_importe,v_cobzi_importeorigen,v_cue_id,v_ccos_id,v_cheq_id,v_asi_descrip in
        select cobzi.cobzi_importe,
               cobzi.cobzi_importeorigen,
               case
                  when cobzi.cobzi_tipo = 3 and cobzi.cobzi_tarjetaTipo = 1 then t.cue_id_presentado
                  when cobzi.cobzi_tipo = 3 and cobzi.cobzi_tarjetaTipo = 2 then t.cue_id_encartera
                  else cobzi.cue_id
               end cue_id,
               cobzi.ccos_id,
               cobzi.cheq_id,
               cobzi_descrip
        from CobranzaItem cobzi
        left join TarjetaCreditoCupon tc
               on cobzi.tjcc_id = tc.tjcc_id
        left join TarjetaCredito t
               on tc.tjc_id = t.tjc_id
        where cobzi.cobz_id = p_cobz_id
          and ( cobzi.cobzi_tipo = 1
               or cobzi.cobzi_tipo = 2
               or cobzi.cobzi_tipo = 3
               or ( cobzi.cobzi_tipo = 4 and cobzi.cobzi_otroTipo = 1 ) )
   loop

      select mon_id
        into v_mon_id
      from Cuenta
      where cue_id = v_cue_id;

      v_asi_debe := v_cobzi_importe;

      v_asi_origen := v_cobzi_importeorigen;

      perform sp_doc_asiento_save_item(
                            v_is_new,
                            0,
                            v_as_id,
                            v_asi_orden,
                            v_asi_debe,
                            0,
                            v_asi_origen,
                            0,
                            v_mon_id,
                            v_cue_id,
                            v_ccos_id,
                            v_cheq_id,
                            v_asi_descrip);

      v_asi_orden := v_asi_orden + 1;

   end loop;


/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                                        hora la cuenta del cliente                                                  //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/
   -- CtaCte
   -- Otros
   -- Haber

   for v_cobzi_importe,v_cobzi_importeorigen,v_cue_id,v_ccos_id,v_asi_descrip in
        select sum(cobzi_importe),
               sum(cobzi_importeorigen),
               cue_id,
               ccos_id,
               ''
        from CobranzaItem
        where cobz_id = p_cobz_id
          and ( cobzi_tipo = 5 or ( cobzi_tipo = 4 and cobzi_otroTipo = 2 ) )
        group by cue_id,ccos_id
   loop

      select mon_id
        into v_mon_id
      from Cuenta
      where cue_id = v_cue_id;

      v_asi_haber := v_cobzi_importe;

      v_asi_origen := v_cobzi_importeorigen;

      perform sp_doc_asiento_save_item(
                            v_is_new,
                            0,
                            v_as_id,
                            v_asi_orden,
                            0,
                            v_asi_haber,
                            v_asi_origen,
                            0,
                            v_mon_id,
                            v_cue_id,
                            v_ccos_id,
                            null,
                            v_asi_descrip);

      v_asi_orden := v_asi_orden + 1;

   end loop;

/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                                valido el asiento                                                                   //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/
   select * from sp_doc_asiento_validate(v_as_id) into v_error, p_error_msg;

   if v_error <> 0 then
      raise exception '%', p_error_msg;
   end if;

/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                                talonario                                                                           //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/

   select ta_id
     into v_ta_id
   from Documento
   where doc_id = v_doc_id;

   perform sp_talonario_set(v_ta_id, v_as_nrodoc);

/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                                vinculo la cobranza con su asiento                                                  //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/
   update Cobranza
      set as_id = v_as_id,
          cobz_grabarasiento = 0
   where cobz_id = p_cobz_id;

   p_error := 0;

exception
   when others then

      if p_raise_error <> 0 then

         raise exception 'Ha ocurrido un error al grabar la cobranza. sp_doc_cobranza_asiento_save. %. %.',
                         sqlstate, sqlerrm;
      else

         p_error := -1;
         p_error_msg := sqlstate || ';' || sqlerrm || ';';

      end if;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_doc_cobranza_cheque_set_credito(p_cobz_id integer, p_borrar integer DEFAULT 0)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
declare
   v_pendiente decimal(18,6);
   v_cli_id integer;
   v_emp_id integer;

   v_doct_cobranzachq integer := 1013;

   v_old_cli_ids integer[];
   i integer;
begin

   -- si no hay documento adios
   --
   if p_cobz_id = 0 then
      return;
   end if;

   -- datos del documento
   --
   select cli_id,
          emp_id
     into v_cli_id,
          v_emp_id
   from Cobranza
   where cobz_id = p_cobz_id;

   -- borrar referencias a este documento por otro cliente
   --
   -- siempre borro cualquier mencion a este documento en el cache de cualquier
   -- cliente que no sea el indicado por el documento
   --
   if exists ( select cli_id
               from ClienteCacheCredito
               where cli_id <> v_cli_id
                 and doct_id = v_doct_cobranzachq
                 and id = p_cobz_id ) then

      select into v_old_cli_ids cli_id
      from ClienteCacheCredito
      where cli_id <> v_cli_id
        and doct_id = v_doct_cobranzachq
        and id = p_cobz_id;

      delete from ClienteCacheCredito
      where cli_id <> v_cli_id
        and doct_id = v_doct_cobranzachq
        and id = p_cobz_id;

      for i in 1 .. array_upper(v_old_cli_ids, 1)
      loop

            perform sp_cliente_update_credito(v_oldcli[i], v_emp_id);

      end loop;

   end if;

   -- borrar
   --
   if p_borrar <> 0 then

      delete from ClienteCacheCredito
      where cli_id = v_cli_id
        and doct_id = v_doct_cobranzachq
        and id = p_cobz_id;

   -- insert - update
   --
   else

      select sum(cheq_importe)
        into v_pendiente
      from Cheque
      where cobz_id = p_cobz_id
        and cheq_fechacobro > CURRENT_TIMESTAMP
        and cheq_anulado = 0
        and cheq_rechazado = 0;

      v_pendiente := round(coalesce(v_pendiente, 0), 2);

      if exists ( select id
                  from ClienteCacheCredito
                  where cli_id = v_cli_id
                    and doct_id = v_doct_cobranzachq
                    and id = p_cobz_id ) then

         if abs(v_pendiente) >= 0.01 then

            update ClienteCacheCredito
               set clicc_importe = v_pendiente
            where cli_id = v_cli_id
              and doct_id = v_doct_cobranzachq
              and id = p_cobz_id;

         -- si no hay nada pendiente lo saco del cache
         --
         else

            delete from ClienteCacheCredito
            where cli_id = v_cli_id
              and doct_id = v_doct_cobranzachq
              and id = p_cobz_id;

         end if;

      else

         -- solo si hay algo pendiente
         --
         if abs(v_pendiente) >= 0.01 then

            insert into ClienteCacheCredito ( cli_id, doct_id, id, clicc_importe, emp_id )
                                     values ( v_cli_id, v_doct_cobranzachq, p_cobz_id, v_pendiente, v_emp_id );

         end if;

      end if;

   end if;

   -- insertar - actualizar
   --
   -- deuda en cache
   --
   -- actualizo la deuda en la tabla cliente
   --
   perform sp_cliente_update_credito(v_cli_id, v_emp_id);

exception
    when others then
        raise exception 'Ha ocurrido un error al actualizar el estado de la cobranza. sp_doc_cobranza_cheque_set_credito. %. %.',
                         sqlstate, sqlerrm;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_doc_cobranza_editable_get(p_emp_id integer, p_cobz_id integer, p_us_id integer, p_no_anulado integer DEFAULT 0, p_delete integer DEFAULT 0, OUT p_editable integer, OUT p_edit_msg character varying)
 RETURNS record
 LANGUAGE plpgsql
AS $function$
declare
   v_doc_id integer;
   v_cobz_fecha date;
   v_estado integer;
   v_anulado integer := 7;
   v_firmado integer;
   v_emp_id integer;
   v_emp_nombre varchar(255);
   v_impreso smallint;
   v_csPreTsrEditCobranza integer := 18008;
   v_csPreTsrDeleteCobranza integer := 18009;

   v_pre_id integer;

   v_doc_nombre varchar(255);
   v_fca_id integer;

   v_fca_fechaDesde date;
   v_fca_fechaHasta date;

   v_doc_editarImpresos smallint;
begin

   if p_cobz_id <> 0 then

      select d.doc_id,
             d.emp_id,
             c.cobz_fecha,
             c.est_id,
             c.impreso
        into v_doc_id,
             v_emp_id,
             v_cobz_fecha,
             v_estado,
             v_impreso
      from Cobranza c
      join Documento d
        on c.doc_id = d.doc_id
      where c.cobz_id = p_cobz_id;

      if p_emp_id <> v_emp_id then

         select emp_nombre
           into v_emp_nombre
         from Empresa
         where emp_id = v_emp_id;

         p_editable := 0;

         if p_delete = 0 then
            p_edit_msg := 'El comprobante pertenece a la empresa ' || v_emp_nombre || ', para editarlo debe ingresar al sistema indicando dicha empresa.';
         else
            p_edit_msg := 'El comprobante pertenece a la empresa ' || v_emp_nombre || ', para borrarlo debe ingresar al sistema indicando dicha empresa.';
         end if;

         return;

      end if;

      if v_estado = v_anulado and p_no_anulado = 0 then

         p_editable := 0;
         p_edit_msg := 'El comprobante esta anulado';

         return;

      end if;

      if p_delete = 0 then
         v_pre_id := v_csPreTsrEditCobranza;
      else
         v_pre_id := v_csPreTsrDeleteCobranza;
      end if;

      -- Tiene permiso para editar cobranzas
      --
      if not exists ( select per_id
                      from Permiso
                      where pre_id = v_pre_id
                        and ( ( us_id = p_us_id )
                             or exists ( select us_id
                                         from UsuarioRol
                                         where us_id = p_us_id
                                           and rol_id = Permiso.rol_id ) ) ) then

         p_editable := 0;

         if p_delete = 0 then
            p_edit_msg := 'Usted no tiene permiso para editar cobranzas';
         else
            p_edit_msg := 'Usted no tiene permiso para borrar cobranzas';
         end if;

         return;

      end if;

      v_pre_id := null;

      select case
                when p_delete = 0 then pre_id_edit
                else pre_id_delete
             end,
             doc_nombre
        into v_pre_id,
             v_doc_nombre
      from Documento
      where doc_id = v_doc_id;

      if not exists ( select per_id
                      from Permiso
                      where pre_id = v_pre_id
                      and ( ( us_id = p_us_id )
                           or exists ( select us_id
                                       from UsuarioRol
                                       where us_id = p_us_id
                                         and rol_id = Permiso.rol_id ))) then

         p_editable := 0;

         if p_delete = 0 then
            p_edit_msg := 'Usted no tiene permiso para editar ' || v_doc_nombre;
         else
            p_edit_msg := 'Usted no tiene permiso para borrar ' || v_doc_nombre;
         end if;

         return;

      end if;

      -- Fechas de control de Acceso
      select fca_id
        into v_fca_id
      from Documento
      where doc_id = v_doc_id;

      if not v_fca_id is null then

         if not exists ( select fca_id
                         from FechaControlAcceso
                         where fca_id = v_fca_id
                           and v_cobz_fecha between fca_fechaDesde and fca_fechaHasta ) then

            select fca_fechaDesde,
                   fca_fechaHasta
              into v_fca_fechaDesde,
                   v_fca_fechaHasta
            from FechaControlAcceso
            where fca_id = v_fca_id;

            p_editable := 0;

            p_edit_msg := 'La fecha del comprobante esta fuera del intervalo definido por las fechas de control de acceso ('
                          || to_char(coalesce(v_fca_fechaDesde, ''))
                          || ' - '
                          || to_char(coalesce(v_fca_fechaHasta, ''))
                          || ')';

            return;

         end if;

      end if;

      if exists ( select fvcobz_id
                  from FacturaVentaCobranza
                  where cobz_id = p_cobz_id ) then

         p_editable := 0;
         p_edit_msg := 'El comprobante se encuentra aplicado. Antes de poder modificarlo debe eliminar las aplicaciones.';

         return;

      end if;

      if v_impreso <> 0 and p_no_anulado = 0 then

         select doc_editarImpresos
           into v_doc_editarImpresos
         from Documento
         where doc_id = v_doc_id;

         if v_doc_editarImpresos = 0 then

            p_editable := 0;

            if p_delete = 0 then
               p_edit_msg := 'El comprobante esta impreso y la definición de su documento no permite la edición de comprobantes impresos.';
            else
               p_edit_msg := 'El comprobante esta impreso y la definición de su documento no permite eliminar comprobantes impresos.';
            end if;

            return;

         end if;

      end if;

   end if;

   p_editable := 1;
   p_edit_msg := '';

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_doc_cobranza_get(p_emp_id integer, p_cobz_id integer, p_us_id integer, OUT rtn refcursor)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
declare
   v_editable integer;
   v_edit_msg varchar(255);
   v_doc_id integer;
   v_ta_mascara varchar(100);
   v_ta_propuesto smallint;
begin

   rtn := 'rtn';

/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                             TALONARIO Y ESTADO DE EDICION                                                          //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/
   select doc_id
     into v_doc_id
   from Cobranza
   where cobz_id = p_cobz_id;

   select * from sp_talonario_get_propuesto(v_doc_id, 0, 0) into v_ta_mascara, v_ta_propuesto;

   select * from sp_doc_cobranza_editable_get(p_emp_id, p_cobz_id, p_us_id) into v_editable, v_edit_msg;

/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                             select                                                                                 //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/

   open rtn for

      select Cobranza.*,
             doct_nombre,
             cli_nombre,
             est_nombre,
             ccos_nombre,
             suc_nombre,
             doc_nombre,
             cob_nombre,
             case
                when lgj_titulo <> '' then lgj_titulo
                else lgj_codigo
             end lgj_codigo,
             v_editable editable,
             v_edit_msg editMsg,
             v_ta_mascara ta_mascara,
             v_ta_propuesto ta_propuesto
      from Cobranza
      join Documento
        on Cobranza.doc_id = Documento.doc_id
      join DocumentoTipo
        on Cobranza.doct_id = DocumentoTipo.doct_id
      join Estado
        on Cobranza.est_id = Estado.est_id
      join Sucursal
        on Cobranza.suc_id = Sucursal.suc_id
      join Cliente
        on Cobranza.cli_id = Cliente.cli_id
      left join CentroCosto
        on Cobranza.ccos_id = CentroCosto.ccos_id
      left join Cobrador
        on Cobranza.cob_id = Cobrador.cob_id
      left join Legajo
        on Cobranza.lgj_id = Legajo.lgj_id
      where cobz_id = p_cobz_id;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_doc_cobranza_get_cuenta_deudor(p_strids character varying, OUT rtn refcursor)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
declare
   v_cue_deudoresXvta integer := 4;
   v_timeCode timestamp with time zone;
begin

   v_timeCode := CURRENT_TIMESTAMP;

   perform sp_str_string_to_table(v_timeCode, p_strIds, ',');

   rtn := 'rtn';

   open rtn for
      select fv_id,
             c.cue_id,
             c.cue_nombre
      from AsientoItem
      join FacturaVenta
        on AsientoItem.as_id = FacturaVenta.as_id
      join TmpStringToTable
        on FacturaVenta.fv_id = cast(TmpStringToTable.tmpstr2tbl_campo as integer)
      join Cuenta c
        on AsientoItem.cue_id = c.cue_id
      where asi_debe <> 0
        and tmpstr2tbl_id = v_timeCode
        and c.cuec_id = v_cue_deudoresXvta
      group by fv_id,c.cue_id,c.cue_nombre;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_doc_cobranza_get_data_from_aplic(p_doct_id integer, p_strids character varying, OUT rtn refcursor)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
declare
   v_timeCode timestamp with time zone;
begin

   v_timeCode := CURRENT_TIMESTAMP;

   perform sp_str_string_to_table(v_timeCode, p_strIds, ',');

   rtn := 'rtn';

   if p_doct_id = 1 then

      open rtn for

         select distinct fv.suc_id,
                       fv.lgj_id,
                       fv.cpg_id,
                       fv.ccos_id,
                       suc.suc_nombre,
                       lgj.lgj_titulo,
                       cpg.cpg_nombre,
                       ccos.ccos_nombre
         from ( FacturaVenta fv
                join TmpStringToTable
                 on fv.fv_id = cast(TmpStringToTable.tmpstr2tbl_campo as integer)
                and tmpstr2tbl_id = v_timeCode
                 )
         left join Sucursal suc
                on suc.suc_id = fv.suc_id
         left join CondicionPago cpg
                on cpg.cpg_id = fv.cpg_id
         left join CentroCosto ccos
                on ccos.ccos_id = fv.ccos_id
         left join Legajo lgj
                on lgj.lgj_id = fv.lgj_id

         where tmpstr2tbl_id = v_timeCode;

   else

      open rtn for

         -- devolvemos un recordset vacio para que el que llama
         -- no falle el preguntar por eof
         --
         select 0 dummy from Cobranza where 1 = 2;

   end if;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_doc_cobranza_get_facturas(p_emp_id integer, p_cli_id integer, p_bsolovencidos integer DEFAULT 1, p_bagrupado integer DEFAULT 0, OUT rtn refcursor, OUT rtnrates refcursor)
 RETURNS record
 LANGUAGE plpgsql
AS $function$
declare
   v_doct_factura integer := 1;
   v_doct_notadebito integer := 9;
   v_mon_id_default integer;
begin

   rtn := 'rtn';

   if p_bAgrupado = 0 then

      open rtn for

         select f.fv_id,
                fd.fvd_id,
                d.doc_nombre,
                f.fv_numero,
                f.fv_nrodoc,
                f.fv_fecha,
                f.fv_total,
                case f.fv_cotizacion
                                    when 0 then 0
                else fd.fvd_pendiente / f.fv_cotizacion
                   end fv_totalorigen,
                f.fv_pendiente,
                f.fv_cotizacion,
                M.mon_nombre,
                f.mon_id,
                f.fv_descrip,
                fd.fvd_fecha,
                fd.fvd_pendiente

         from FacturaVenta f
         join Documento d
           on f.doc_id = d.doc_id
         join FacturaVentaDeuda fd
           on f.fv_id = fd.fv_id
         join Moneda M
           on f.mon_id = M.mon_id

         where f.cli_id = p_cli_id
           and ( fd.fvd_fecha <= CURRENT_TIMESTAMP or p_bSoloVencidos = 0 )
           and fd.fvd_pendiente > 0
           and f.doct_id <> 7
           and d.emp_id = p_emp_id

         order by f.fv_nrodoc,
                    f.fv_fecha;


   else

      open rtn for
         select f.fv_id,
                0 fvd_id,
                d.doc_nombre,
                f.fv_numero,
                f.fv_nrodoc,
                f.fv_fecha,
                f.fv_total,
                f.fv_totalorigen,
                f.fv_pendiente,
                f.fv_cotizacion,
                M.mon_nombre,
                f.mon_id,
                f.fv_descrip,
                min(fd.fvd_fecha) fvd_fecha,
                0 fvd_pendiente

         from FacturaVenta f
         join Documento d
           on f.doc_id = d.doc_id
         join FacturaVentaDeuda fd
           on f.fv_id = fd.fv_id
         join Moneda M
           on f.mon_id = M.mon_id

         where f.cli_id = p_cli_id
           and ( f.doct_id = v_doct_factura or f.doct_id = v_doct_notadebito )
           and f.doct_id <> 7
           and f.fv_pendiente > 0
           and d.emp_id = p_emp_id

         group by f.fv_id,d.doc_nombre,f.fv_numero,f.fv_nrodoc,f.fv_fecha,f.fv_total,f.fv_totalorigen,f.fv_pendiente,
                  f.fv_cotizacion,M.mon_nombre,f.mon_id,f.fv_descrip
         order by f.fv_nrodoc,
                  f.fv_fecha;

   end if;

   select mon_id into v_mon_id_default from Moneda where mon_legal <> 0;

   rtnRates := 'rtn_rates';

   open rtnRates for
      select f.mon_id,
             m.mon_nombre,
             sp_moneda_get_cotizacion(f.mon_id, CURRENT_TIMESTAMP::date) as mon_precio

      from FacturaVenta f
      join Documento d
        on f.doc_id = d.doc_id
      join FacturaVentaDeuda fd
        on f.fv_id = fd.fv_id
      join Moneda m
        on f.mon_id = m.mon_id

      where f.cli_id = p_cli_id
        and ( fd.fvd_fecha <= CURRENT_TIMESTAMP or p_bSoloVencidos = 0 )
        and fd.fvd_pendiente > 0
        and f.doct_id <> 7
        and d.emp_id = p_emp_id
        and f.mon_id <> v_mon_id_default
      group by f.mon_id, m.mon_nombre
      order by f.mon_id;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_doc_factura_compra_get_items(p_fc_id integer, OUT rtn refcursor, OUT rtn_serie refcursor)
 RETURNS record
 LANGUAGE plpgsql
AS $function$
BEGIN

   rtn := 'rtn';

   OPEN rtn FOR
      SELECT fci.*,
             pr_nombreCompra,
             pr_llevanroserie,
             pr_llevanrolote,
             pr_porcinternoc,
             tri.ti_porcentaje iva_ri_porcentaje,
             trni.ti_porcentaje iva_rni_porcentaje,
             tint.ti_porcentaje internos_porcentaje,
             ccos.ccos_nombre,
             un_nombre,
             to_nombre,
             stl.stl_codigo
      FROM FacturaCompraItem fci
       JOIN Producto
        ON fci.pr_id = Producto.pr_id
       JOIN Unidad
        ON Producto.un_id_compra = Unidad.un_id
       JOIN TipoOperacion
        ON fci.to_id = TipoOperacion.to_id
       LEFT JOIN TasaImpositiva tri
        ON Producto.ti_id_ivaricompra = tri.ti_id
       LEFT JOIN TasaImpositiva trni
        ON Producto.ti_id_ivarnicompra = trni.ti_id
       LEFT JOIN TasaImpositiva tint
        ON Producto.ti_id_internosc = tint.ti_id
       LEFT JOIN CentroCosto ccos
        ON fci.ccos_id = ccos.ccos_id
       LEFT JOIN StockLote stl
        ON fci.stl_id = stl.stl_id
      WHERE fci.fc_id = p_fc_id
      ORDER BY fci.fci_orden;

--///////////////////////////////////////////////////////////////////////////////////////////////////
--
--  NUMEROS DE SERIE
--
--///////////////////////////////////////////////////////////////////////////////////////////////////

   rtn_serie := 'rtn_serie';

   OPEN rtn_serie FOR
      SELECT prns.prns_id,
             prns.prns_codigo,
             prns.prns_descrip,
             prns.prns_fechavto,
             fci.fci_id
      FROM ProductoNumeroSerie prns
       JOIN StockItem sti
        ON prns.prns_id = sti.prns_id
       JOIN FacturaCompraItem fci
        ON sti.sti_grupo = fci.fci_id
       JOIN FacturaCompra fc
        ON fci.fc_id = fc.fc_id
      WHERE fci.fc_id = p_fc_id AND sti.st_id = fc.st_id
      GROUP BY prns.prns_id,prns.prns_codigo,prns.prns_descrip,prns.prns_fechavto,fci.fci_id
      ORDER BY fci.fci_id;

END;
$function$;

CREATE OR REPLACE FUNCTION public.sp_doc_cobranza_get_items(p_cobz_id integer, p_tipo integer, OUT rtn refcursor)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
declare
   v_CobziTCheques smallint;
   v_CobziTEfectivo smallint;
   v_CobziTTarjeta smallint;
   v_CobziTOtros smallint;
   v_CobziTCtaCte smallint;
begin

   v_CobziTCheques := 1;
   v_CobziTEfectivo := 2;
   v_CobziTTarjeta := 3;
   v_CobziTOtros := 4;
   v_CobziTCtaCte := 5;

   rtn := 'rtn';

   if p_tipo = v_CobziTCheques then

      open rtn for
         select CobranzaItem.*,
                cheq.cheq_numero,
                cheq.cheq_propio,
                ccos.ccos_nombre,
                cue.cue_nombre,
                bco.bco_nombre,
                cle.cle_nombre,
                mon.mon_nombre,
                mon.mon_id,
                cheq.cheq_numerodoc,
                bco.bco_id,
                cle.cle_id,
                cheq.cheq_fechavto,
                cheq.cheq_fechacobro
         from CobranzaItem
         join Cheque cheq
           on CobranzaItem.cheq_id = cheq.cheq_id
         left join CentroCosto ccos
           on CobranzaItem.ccos_id = ccos.ccos_id
         left join Banco bco
           on cheq.bco_id = bco.bco_id
         left join Clearing cle
           on cheq.cle_id = cle.cle_id
         left join Cuenta cue
           on CobranzaItem.cue_id = cue.cue_id
         left join Moneda mon
           on cheq.mon_id = mon.mon_id
         where CobranzaItem.cobz_id = p_cobz_id
           and cobzi_tipo = v_CobziTCheques
         order by cobzi_orden;

   else

      if p_tipo = v_CobziTEfectivo then

         open rtn for

            select CobranzaItem.*,
                   ccos.ccos_nombre,
                   cue.cue_nombre,
                   mon.mon_nombre,
                   mon.mon_id
            from CobranzaItem
            join Cuenta cue
              on CobranzaItem.cue_id = cue.cue_id
            join Moneda mon
              on cue.mon_id = mon.mon_id
            left join CentroCosto ccos
              on CobranzaItem.ccos_id = ccos.ccos_id
            where CobranzaItem.cobz_id = p_cobz_id
              and cobzi_tipo = v_CobziTEfectivo
            order by cobzi_orden;

      else

         if p_tipo = v_CobziTTarjeta then

            open rtn for
               select CobranzaItem.*,
                      ccos.ccos_nombre,
                      tjc.tjc_nombre,
                      mon.mon_nombre,
                      tjcc.tjcc_numero,
                      tjcc.tjcc_numerodoc,
                      tjcc.tjcc_descrip,
                      tjcc.tjcc_fechavto,
                      tjcc.tjcc_nroTarjeta,
                      tjcc.tjcc_nroAutorizacion,
                      tjcc.tjcc_titular,
                      tjcc.tjc_id,
                      tjccu.tjccu_id,
                      tjccu.tjccu_cantidad,
                      mon.mon_id,
                      tjc.tjc_id
               from CobranzaItem
               join TarjetaCreditoCupon tjcc
                 on CobranzaItem.tjcc_id = tjcc.tjcc_id
               left join CentroCosto ccos
                 on CobranzaItem.ccos_id = ccos.ccos_id
               left join Moneda mon
                 on tjcc.mon_id = mon.mon_id
               left join TarjetaCredito tjc
                 on tjcc.tjc_id = tjc.tjc_id
               left join TarjetaCreditoCuota tjccu
                 on tjcc.tjccu_id = tjccu.tjccu_id
               where CobranzaItem.cobz_id = p_cobz_id
                 and cobzi_tipo = v_CobziTTarjeta
               order by cobzi_orden;

         else

            if p_tipo = v_CobziTOtros then

               open rtn for
                  select CobranzaItem.*,
                         ccos.ccos_nombre,
                         cue.cue_nombre,
                         ret.ret_nombre,
                         fv.fv_nrodoc
                  from CobranzaItem
                  left join CentroCosto ccos
                         on CobranzaItem.ccos_id = ccos.ccos_id
                  left join Cuenta cue
                         on CobranzaItem.cue_id = cue.cue_id
                  left join Retencion ret
                         on CobranzaItem.ret_id = ret.ret_id
                  left join FacturaVenta fv
                         on CobranzaItem.fv_id_ret = fv.fv_id
                  where CobranzaItem.cobz_id = p_cobz_id
                    and cobzi_tipo = v_CobziTOtros
                  order by cobzi_orden;

            else

               if p_tipo = v_CobziTCtaCte then

                  open rtn for
                     select CobranzaItem.*,
                            ccos.ccos_nombre,
                            cue.cue_nombre,
                            mon.mon_nombre,
                            cue.mon_id
                     from CobranzaItem
                     left join CentroCosto ccos
                            on CobranzaItem.ccos_id = ccos.ccos_id
                     left join Cuenta cue
                            on CobranzaItem.cue_id = cue.cue_id
                     left join Moneda mon
                            on cue.mon_id = mon.mon_id
                     where CobranzaItem.cobz_id = p_cobz_id
                       and cobzi_tipo = v_CobziTCtaCte
                     order by cobzi_orden;

               end if;

            end if;

         end if;

      end if;

   end if;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_doc_cobranza_save(p_us_id integer, p_cobztmp_id integer)
 RETURNS SETOF row_result
 LANGUAGE plpgsql
AS $function$
declare
   rtn row_result;

   v_success integer;
   v_error smallint;
   v_error_msg varchar(5000);
   v_cfg_valor varchar(5000);
   
   v_is_new integer;

   v_cobz_id integer;
   v_cobzi_id integer;
   
   v_orden smallint;
   v_doct_id integer;
   v_doc_id integer;
   
   v_cli_id integer;
   v_emp_id integer;
   v_est_id integer;
   v_suc_id integer;
   v_ta_id integer;
   v_ccos_id integer;
   v_lgj_id integer;
   
   v_cobz_fecha date;
   v_cobz_nrodoc varchar(50);
   v_cobz_numero integer;
   v_cobz_descrip varchar(5000);
   v_cobz_neto decimal(18,6);
   v_cobz_total decimal(18,6);
   v_cobz_otros decimal(18,6);
   v_cobz_pendiente decimal(18,6);
   v_cobz_cotizacion decimal(18,6);
   v_cobz_grabarAsiento smallint;

   v_creado date;
   v_modificado date;
   v_modifico integer;

   v_cobzi_orden smallint;
   v_cobzi_descrip varchar(5000);
   v_cobzi_descuento varchar(100);
   v_cobzi_neto decimal(18,6);
   v_cobzi_importe decimal(18,6);
   v_cobzi_importeorigen decimal(18,6);
   v_cobzi_otroTipo smallint;
   v_cobzi_porcRetencion decimal(18,6);
   v_cobzi_fechaRetencion date;
   v_cobzi_nroRetencion varchar(100);
   v_cobzi_tipo smallint;
   v_cobzi_tarjetaTipo smallint;

   v_cheq_id integer;
   v_cue_id integer;
   v_cue_id_cupon integer;
   v_tjccu_id integer;
   v_tjcc_id integer;
   v_cle_id integer;
   v_bco_id integer;
   v_tjc_id integer;
   v_mon_id integer;
   v_ret_id integer;
   v_fv_id_ret integer;

   v_cheq_numero integer;
   v_cheq_propio smallint;
   v_cheq_sucursal varchar(255);
   v_cheq_numerodoc varchar(100);
   v_cheq_fechaCobro date;
   v_cheq_fechaVto date;
   v_cheq_fecha2 date;

   v_tjcc_numero integer;
   v_tjcc_numerodoc varchar(100);

   v_cobziTMP_fechaVto date;
   v_cobziTMP_nroTarjeta varchar(50);
   v_cobziTMP_nroAutorizacion varchar(50);
   v_cobziTMP_titular varchar(255);

   v_CobziTCheques smallint;
   v_CobziTEfectivo smallint;
   v_CobziTTarjeta smallint;
   v_CobziTOtros smallint;
   v_CobziTCtaCte smallint;
   v_CheqTercero smallint;

   v_fv_id integer;
   v_fvd_id integer;
   v_doct_id_ncnd integer;

   v_fvTMP_id integer;
   v_fvcobz_id integer;
   v_fvcobz_importe decimal(18,6);
   v_fvd_pendiente decimal(18,6);
   v_fvp_id integer;

   v_pago decimal(18,6);
   v_pagoOrigen decimal(18,6);

   v_fvcobz_importeOrigen decimal(18,6);
   v_fvcobz_cotizacion decimal(18,6);
   v_fvd_fecha date;

   v_ta_propuesto smallint;
   v_ta_tipo smallint;
   v_ta_nrodoc varchar(100);

   v_as_id integer;

   dummyChar varchar(255);

   save_factura_result row_result;

begin

   -- si no existe chau
   --
   if not exists ( select cobzTMP_id
                   from CobranzaTMP
                   where cobzTMP_id = p_cobzTMP_id ) then
      return query select * from result_failed();
      return;

   end if;

   select sp_cfg_getValor('Tesoreria-General', 'Exigir Centro Costo COBZ') into v_cfg_valor;

   v_cfg_valor := coalesce(v_cfg_valor, '0');

   if to_number(v_cfg_valor) <> 0 then

      if exists ( select ccos_id
                  from CobranzaTMP
                  where ccos_id is null
                    and cobzTMP_id = p_cobzTMP_id ) then

         if exists ( select ccos_id
                     from CobranzaItemTMP
                     where ccos_id is null
                       and cobzTMP_id = p_cobzTMP_id
                       and cobzi_tipo in ( 1,2,3,4 ) ) then

            raise exception '@@ERROR_SP: %',
                'Debe indicar un centro de costo en cada item o un centro de costo en la cabecera del documento.';

         end if;

      end if;

   end if;

   v_error_msg := '';

   select cobz_id,
          cobz_fecha,
          cli_id,
          Documento.doc_id,
          doct_id,
          cobz_nrodoc,
          emp_id
     into v_cobz_id,
          v_cobz_fecha,
          v_cli_id,
          v_doc_id,
          v_doct_id,
          v_cobz_nrodoc,
          v_emp_id
   from CobranzaTMP
   join Documento
     on CobranzaTMP.doc_id = Documento.doc_id
   where cobzTMP_id = p_cobzTMP_id;

   v_cobz_id := coalesce(v_cobz_id, 0);

   v_CobziTCheques := 1;
   v_CobziTEfectivo := 2;
   v_CobziTTarjeta := 3;
   v_CobziTOtros := 4;
   v_CobziTCtaCte := 5;
   v_CheqTercero := 2;

   select fvTMP_id
   into v_fvTMP_id
   from FacturaVentaTMP
   where cobzTMP_id = p_cobzTMP_id;

   -- si hay una ND o NC
   --
   if coalesce(v_fvTMP_id, 0) <> 0 then

      -- grabo la factura
      --
      for save_factura_result in
           select * from sp_doc_factura_venta_save(p_us_id, v_fvTMP_id)
      loop

        if save_factura_result.type = 'fv_id' then
          v_fv_id := save_factura_result.id;
          exit;
        end if;

      end loop;

      -- obtengo el DocumentoTipo para saver si es una NC o ND
      --
      select doct_id
        into v_doct_id_ncnd
      from FacturaVenta
      where fv_id = v_fv_id;

      -- si es una nota de credito es por que bajo la cotizacion de la moneda
      -- extranjera y por lo tanto tengo que aplicar la NC a las facturas cobradas
      -- que esten en moneda extranjera
      --
      if v_doct_id_ncnd = 7 /* Nota de credito */ then

         -- obtengo el id de la deuda (El max esta por las dudas)
         --
         select max(fvd_id)
           into v_fvd_id
         from FacturaVentaDeuda
         where fv_id = v_fv_id;

            -- actualizo el id fv_id_notacredito de la vinculacion
            --
            update FacturaVentaNotaCreditoTMP
               set fv_id_notacredito = v_fv_id,
                   fvd_id_notacredito = v_fvd_id
               where fv_id_notacredito = (v_fvTMP_id * -1);

         -- este sp se encarga de todo
         --
         perform sp_doc_factura_venta_nota_credito_save(v_fvTMP_id);

         perform sp_doc_factura_venta_set_credito(v_fv_id);

         perform sp_doc_factura_venta_set_estado(v_fv_id);

      else

         -- si es una nota de debito es por que el dolar subio y por ende
         -- cobre mas pesos. En este caso lo unico que hay que hacer es aplicar
         -- la ND con la cobranza y listo
         --
         if v_doct_id_ncnd = 9 /* Nota de debito */ then

            -- obtengo el Id de la deuda generada por el sp_doc_factura_venta_save
            --
            select max(fvd_id)
              into v_fvd_id
            from FacturaVentaDeuda
            where fv_id = v_fv_id;

            -- actualizo la info de cobranza (fv_id y fvd_id) que fueron creados con la
            -- llamda al sp_doc_factura_venta_save que esta arriba
            --
            update FacturaVentaCobranzaTMP
               set fv_id = v_fv_id,
                   fvd_id = v_fvd_id
            where cobzTMP_id = p_cobzTMP_id
              and fv_id = v_fvTMP_id * -1 -- !!! el registro en FacturaVentaCobranzaTMP que
                                          --     se refiere a la ND no tiene el fv_id por que
                                          --     cuando VB llamo a este sp no existia la ND
                                          --     (recuerden que fue creada con la llamada al
                                          --      sp_doc_factura_venta_save que esta mas arriba)
                                          
              and fvd_id = -1;            -- !!! lo mismo paso con la deuda
         end if;
      end if;
   end if;

   set TRANSACTION READ WRITE;

/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                                        insert                                                                      //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/
   if v_cobz_id = 0 then

      v_is_new := -1;

      select sp_dbGetNewId('Cobranza', 'cobz_id') into v_cobz_id;
      select sp_dbGetNewId('Cobranza', 'cobz_numero') into v_cobz_numero;

      select * from sp_talonario_get_propuesto(v_doc_id) into dummyChar, v_ta_propuesto, v_ta_id, v_ta_tipo;

      if v_ta_propuesto = 0 then

         if v_ta_tipo = 3 then /*Auto Impresor*/

            select sp_talonario_get_next_number(v_ta_id) into v_ta_nrodoc;

            -- con esto evitamos que dos tomen el mismo numero
            --
            perform sp_talonario_set(v_ta_id, v_ta_nrodoc);

            v_cobz_nrodoc := v_ta_nrodoc;

         end if;
      end if;

      insert into Cobranza
           ( cobz_id, cobz_numero, cobz_nrodoc, cobz_descrip, cobz_fecha, cobz_neto, cobz_otros, cobz_total,
             cobz_cotizacion, cobz_grabarAsiento, est_id, suc_id, cli_id, emp_id, doc_id, doct_id, ccos_id,
             lgj_id, modifico )
           ( select v_cobz_id,
                    v_cobz_numero,
                    v_cobz_nrodoc,
                    cobz_descrip,
                    cobz_fecha,
                    cobz_neto,
                    cobz_otros,
                    cobz_total,
                    cobz_cotizacion,
                    cobz_grabarAsiento,
                    est_id,
                    suc_id,
                    cli_id,
                    v_emp_id,
                    doc_id,
                    v_doct_id,
                    ccos_id,
                    lgj_id,
                    modifico
             from CobranzaTMP
             where cobzTMP_id = p_cobzTMP_id );

      select doc_id,
             cobz_nrodoc
        into v_doc_id,
             v_cobz_nrodoc
      from Cobranza
      where cobz_id = v_cobz_id;

/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                                        update                                                                      //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/
   else

      v_is_new := 0;

      select cobz_id,
             cobz_nrodoc,
             cobz_descrip,
             cobz_fecha,
             cobz_neto,
             cobz_otros,
             cobz_total,
             cobz_cotizacion,
             cobz_grabarAsiento,
             est_id,
             suc_id,
             cli_id,
             ccos_id,
             lgj_id,
             modifico,
             modificado
        into v_cobz_id,
             v_cobz_nrodoc,
             v_cobz_descrip,
             v_cobz_fecha,
             v_cobz_neto,
             v_cobz_otros,
             v_cobz_total,
             v_cobz_cotizacion,
             v_cobz_grabarAsiento,
             v_est_id,
             v_suc_id,
             v_cli_id,
             v_ccos_id,
             v_lgj_id,
             v_modifico,
             v_modificado
      from CobranzaTMP
      where cobzTMP_id = p_cobzTMP_id;


      update Cobranza
            set cobz_nrodoc = v_cobz_nrodoc,
                cobz_descrip = v_cobz_descrip,
                cobz_fecha = v_cobz_fecha,
                cobz_neto = v_cobz_neto,
                cobz_otros = v_cobz_otros,
                cobz_total = v_cobz_total,
                cobz_cotizacion = v_cobz_cotizacion,
                cobz_grabarAsiento = v_cobz_grabarAsiento,
                est_id = v_est_id,
                suc_id = v_suc_id,
                cli_id = v_cli_id,
                emp_id = v_emp_id,
                doc_id = v_doc_id,
                doct_id = v_doct_id,
                ccos_id = v_ccos_id,
                lgj_id = v_lgj_id,
                modifico = v_modifico,
                modificado = v_modificado
      where cobz_id = v_cobz_id;

   end if;

/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                                        items                                                                       //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/

   v_orden := 1;

   while exists(select 1 from CobranzaItemTMP where cobzTMP_id = p_cobzTMP_id and cobzi_orden = v_orden)
   loop

      select cobzi_id,
             cobzi_orden,
             cobzi_descrip,
             cobzi_importe,
             cobzi_importeorigen,
             ccos_id,
             cobzi_otroTipo,
             cobzi_porcRetencion,
             cobzi_fechaRetencion,
             cobzi_nroRetencion,
             cobzi_tipo,
             cobzi_tarjetaTipo,
             cheq_id,
             cue_id,
             tjcc_id,
             bco_id,
             cle_id,
             tjc_id,
             cobziTMP_propio,
             cobziTMP_cheque,
             cobziTMP_sucursal,
             cobziTMP_fechaCobro,
             cobziTMP_fechaVto,
             cobziTMP_cupon,
             cobziTMP_fechaVto,
             cobziTMP_nroTarjeta,
             cobziTMP_autorizacion,
             cobziTMP_titular,
             mon_id,
             tjccu_id,
             ret_id,
             fv_id_ret
        into v_cobzi_id,
             v_cobzi_orden,
             v_cobzi_descrip,
             v_cobzi_importe,
             v_cobzi_importeorigen,
             v_ccos_id,
             v_cobzi_otroTipo,
             v_cobzi_porcRetencion,
             v_cobzi_fechaRetencion,
             v_cobzi_nroRetencion,
             v_cobzi_tipo,
             v_cobzi_tarjetaTipo,
             v_cheq_id,
             v_cue_id,
             v_tjcc_id,
             v_bco_id,
             v_cle_id,
             v_tjc_id,
             v_cheq_propio,
             v_cheq_numerodoc,
             v_cheq_sucursal,
             v_cheq_fechaCobro,
             v_cheq_fechaVto,
             v_tjcc_numerodoc,
             v_cobziTMP_fechaVto,
             v_cobziTMP_nroTarjeta,
             v_cobziTMP_nroAutorizacion,
             v_cobziTMP_titular,
             v_mon_id,
             v_tjccu_id,
             v_ret_id,
             v_fv_id_ret
      from CobranzaItemTMP
      where cobzTMP_id = p_cobzTMP_id
        and cobzi_orden = v_orden;

      -- si este renglon es un cheque lo doy de alta en la tabla cheque
      --
      if v_cobzi_tipo = v_CobziTCheques then

         -- si es nuevo insert
         --
         if v_cheq_id is null then

            select sp_dbGetNewId('Cheque', 'cheq_id') into v_cheq_id;
            select sp_dbGetNewId('Cheque', 'cheq_numero') into v_cheq_numero;

            select sp_doc_get_fecha2(v_cheq_fechaCobro, 1, v_cle_id) into v_cheq_fecha2;

            insert into Cheque
              ( cheq_id, cheq_numero, cheq_numerodoc, cheq_sucursal, cheq_propio, cheq_importe, cheq_importeOrigen, 
                cheq_tipo, cheq_fechaCobro, cheq_fechaVto, cheq_fecha2, cheq_descrip, cobz_id, cle_id, bco_id, 
                cli_id, cue_id, mon_id, emp_id )
              values ( v_cheq_id, v_cheq_numero, v_cheq_numerodoc, v_cheq_sucursal, v_cheq_propio, v_cobzi_importe, 
                       v_cobzi_importeOrigen, v_CheqTercero, v_cheq_fechaCobro, v_cheq_fechaVto, v_cheq_fecha2, 
                       v_cobzi_descrip, v_cobz_id, v_cle_id, v_bco_id, v_cli_id, v_cue_id, v_mon_id, v_emp_id );

         else

            select sp_doc_get_fecha2(v_cheq_fechaCobro, 1, v_cle_id) into v_cheq_fecha2;

            -- sino update
            --
            update Cheque
               set cheq_numerodoc = v_cheq_numerodoc,
                   cheq_sucursal = v_cheq_sucursal,
                   cheq_propio = v_cheq_propio,
                   cheq_importe = v_cobzi_importe,
                   cheq_importeOrigen = v_cobzi_importeOrigen,
                   cheq_tipo = v_CheqTercero,
                   cheq_fechaCobro = v_cheq_fechaCobro,
                   cheq_fechaVto = v_cheq_fechaVto,
                   cheq_fecha2 = v_cheq_fecha2,
                   cheq_descrip = v_cobzi_descrip,
                   cobz_id = v_cobz_id,
                   cle_id = v_cle_id,
                   bco_id = v_bco_id,
                   cli_id = v_cli_id,
                   mon_id = v_mon_id
               where cheq_id = v_cheq_id;

            if not exists ( select opgi.cheq_id
                            from OrdenPagoItem opgi
                            join OrdenPago opg
                              on opgi.opg_id = opg.opg_id
                             and opg.est_id <> 7
                             and opgi.cheq_id = v_cheq_id ) then

               if not exists ( select mfi.cheq_id
                               from MovimientoFondoItem mfi
                               join MovimientoFondo mf
                                 on mfi.mf_id = mf.mf_id
                                and mf.est_id <> 7
                                and mfi.cheq_id = v_cheq_id ) then

                  if not exists ( select dbcoi.cheq_id
                                  from DepositoBancoItem dbcoi
                                  join DepositoBanco dbco
                                    on dbcoi.dbco_id = dbco.dbco_id
                                   and dbco.est_id <> 7
                                   and dbcoi.cheq_id = v_cheq_id ) then
                  
                     update Cheque set cue_id = v_cue_id where cheq_id = v_cheq_id;

                  end if;
               end if;
            end if;
         end if;
         
      -- sino es un cheque
      else

         -- si paga con tarjeta
         --
         if v_cobzi_tipo = v_CobziTTarjeta then
            select case
                      when v_cobzi_tipo = 3 and v_cobzi_tarjetaTipo = 1 then cue_id_presentado
                      when v_cobzi_tipo = 3 and v_cobzi_tarjetaTipo = 2 then cue_id_encartera   
                   end
              into v_cue_id_cupon
            from TarjetaCredito
            where tjc_id = v_tjc_id;

            v_cue_id := v_cue_id_cupon;

            -- si es nuevo insert
            --
            if v_tjcc_id is null then
            
               select sp_dbGetNewId('TarjetaCreditoCupon', 'tjcc_id') into v_tjcc_id;
               select sp_dbGetNewId('TarjetaCreditoCupon', 'tjcc_numero') into v_tjcc_numero;

               insert into TarjetaCreditoCupon
                 ( tjc_id, tjcc_id, tjcc_numero, tjcc_numerodoc, tjcc_descrip, tjcc_fechavto, tjcc_nroTarjeta, 
                   tjcc_nroAutorizacion, tjcc_titular, tjcc_importe, tjcc_importeOrigen, cobz_id, cli_id, cue_id, 
                   mon_id, tjccu_id )
                 values ( v_tjc_id, v_tjcc_id, v_tjcc_numero, v_tjcc_numerodoc, v_cobzi_descrip, v_cobziTMP_fechaVto, 
                          v_cobziTMP_nroTarjeta, v_cobziTMP_nroAutorizacion, v_cobziTMP_titular, v_cobzi_importe, 
                          v_cobzi_importeOrigen, v_cobz_id, v_cli_id, v_cue_id_cupon, v_mon_id, v_tjccu_id );


            else

               -- sino update
               --
               update TarjetaCreditoCupon
                  set tjc_id = v_tjc_id,
                      tjcc_numerodoc = v_tjcc_numerodoc,
                      tjcc_descrip = v_cobzi_descrip,
                      tjcc_fechavto = v_cobziTMP_fechaVto,
                      tjcc_nroTarjeta = v_cobziTMP_nroTarjeta,
                      tjcc_nroAutorizacion = v_cobziTMP_nroAutorizacion,
                      tjcc_titular = v_cobziTMP_titular,
                      tjcc_importe = v_cobzi_importe,
                      tjcc_importeOrigen = v_cobzi_importeOrigen,
                      cobz_id = v_cobz_id,
                      cli_id = v_cli_id,
                      mon_id = v_mon_id,
                      tjccu_id = v_tjccu_id
               where tjcc_id = v_tjcc_id;


               -- solo le modifico la cuenta si no esta presentado o conciliado
               --
               if  not exists ( select *
                                from DepositoCuponItem
                                where tjcc_id = v_tjcc_id ) then


                  update TarjetaCreditoCupon set cue_id = v_cue_id_cupon where tjcc_id = v_tjcc_id;

               end if;
            end if;
         end if;
      end if;

      -- si es un renglon nuevo o una cobranza nueva
      --
      if v_is_new <> 0 or v_cobzi_id = 0 then

         select sp_dbGetNewId('CobranzaItem', 'cobzi_id') into v_cobzi_id;

         insert into CobranzaItem
              ( cobz_id, cobzi_id, cobzi_orden, cobzi_descrip, cobzi_importe, cobzi_importeorigen, ccos_id, 
                cobzi_otroTipo, cobzi_porcRetencion, cobzi_fechaRetencion, cobzi_nroRetencion, cobzi_tipo, 
                cobzi_tarjetaTipo, cheq_id, cue_id, tjcc_id, ret_id, fv_id_ret )
         values ( v_cobz_id, v_cobzi_id, v_cobzi_orden, v_cobzi_descrip, v_cobzi_importe, v_cobzi_importeorigen, 
                  v_ccos_id, v_cobzi_otroTipo, v_cobzi_porcRetencion, v_cobzi_fechaRetencion, v_cobzi_nroRetencion, 
                  v_cobzi_tipo, v_cobzi_tarjetaTipo, v_cheq_id, v_cue_id, v_tjcc_id, v_ret_id, v_fv_id_ret );

      else

         update CobranzaItem
            set cobz_id = v_cobz_id,
                cobzi_orden = v_cobzi_orden,
                cobzi_descrip = v_cobzi_descrip,
                cobzi_importe = v_cobzi_importe,
                cobzi_importeorigen = v_cobzi_importeorigen,
                ccos_id = v_ccos_id,
                cobzi_otroTipo = v_cobzi_otroTipo,
                cobzi_porcRetencion = v_cobzi_porcRetencion,
                cobzi_fechaRetencion = v_cobzi_fechaRetencion,
                cobzi_nroRetencion = v_cobzi_nroRetencion,
                cobzi_tipo = v_cobzi_tipo,
                cobzi_tarjetaTipo = v_cobzi_tarjetaTipo,
                cheq_id = v_cheq_id,
                cue_id = v_cue_id,
                tjcc_id = v_tjcc_id,
                ret_id = v_ret_id,
                fv_id_ret = v_fv_id_ret
         where cobz_id = v_cobz_id
           and cobzi_id = v_cobzi_id;

      end if;

      v_orden := v_orden + 1;

   end loop;

   for v_fvcobz_id,v_fv_id,v_fvd_id,v_fvcobz_importe,v_fvcobz_importeOrigen,v_fvcobz_cotizacion in
        select fvcobz_id,
               fv_id,
               fvd_id,
               fvcobz_importe,
               fvcobz_importeOrigen,
               fvcobz_cotizacion
        from FacturaVentaCobranzaTMP
        where cobzTMP_id = p_cobzTMP_id
   loop
      -- este es el while de pago agrupado. abajo esta la explicacion
      --
      while v_fvcobz_importe > 0
      loop
         -- obtengo el monto de la deuda
         --
         -- la cobranza permite cobrar sobre toda la deuda de la factura o sobre cada uno de sus vencimientos.
         -- esto complica un poco la cosa para el programador. si en la info de aplicacion (registro de la tabla
         -- facturaventacobranzatmp no tengo un fvd_id (id del vencimiento), es por que se efectuo la cobranza
         -- sobre toda la deuda de la factura. esto se entiende con un ejemplo:
         --        supongamos una factura con vtos. 30, 60 y 90 dias. tiene 3 vtos, pero el usuario decide
         --        aplicar sobre los tres agrupados un importe dado, para el ejemplo supongamos que los vtos
         --        son todos de 30 pesos o sea 90 pesos el total, y el usuario aplica 80 pesos. el sistema tiene
         --        que aplicar 30 al primer vto, 30 al segundo y 20 al tercero. para poder hacer esto es que utiliza
         --        el while que esta arriba (while de pago agrupado).
         --
         -- observen el if, si no hay fvd_id tomo el primero con el select que ordena por fvd_fecha
         --
         if coalesce(v_fvd_id, 0) = 0 then

            select *
              into v_fvd_id,
                   v_fvd_pendiente
            from ( select fvd_id, fvd_pendiente
                   from FacturaVentaDeuda
                   where fv_id = v_fv_id
                   order by fvd_fecha desc ) t
            limit 1;

         -- si hay info de deuda (fvd_id <> 0) todo es mas facil
         --
         else

            select fvd_pendiente
              into v_fvd_pendiente
            from FacturaVentaDeuda
            where fvd_id = v_fvd_id;

         end if;

         -- si el pago no cancela el pendiente
         --
         if v_fvd_pendiente - v_fvcobz_importe > 0.01 then

            -- no hay pago
            --
            v_fvp_id := null;
            v_pago := v_fvcobz_importe;
            v_pagoOrigen := v_fvcobz_importeOrigen;

         -- si el pago cancela la deuda cargo un nuevo pago
         -- y luego voy a borrar la deuda
         else

            if coalesce(v_fvcobz_cotizacion, 0) <> 0 then

               v_pagoOrigen := v_fvd_pendiente / v_fvcobz_cotizacion;

            else

               v_pagoOrigen := 0;

            end if;

            -- acumulo en el pago toda la deuda para pasar de la tabla FacturaVentaDeuda a FacturaVentaPago
            -- ojo: Uso la variable pago para acumular toda la deuda, pero despues de insertar el pago
            --      le asigno a esta variable solo el monto de deuda pendiente que cancele con este pago
            --
            v_pago := 0;

            select fvd_fecha,
                   fvd_pendiente
              into v_fvd_fecha,
                   v_pago
            from FacturaVentaDeuda
            where fvd_id = v_fvd_id;

            select v_pago + coalesce(sum(fvcobz_importe), 0)
              into v_pago
            from FacturaVentaCobranza
            where fvd_id = v_fvd_id;

            select v_pago + coalesce(sum(fvnc_importe), 0)
              into v_pago
            from FacturaVentaNotaCredito
            where fvd_id_factura = v_fvd_id;

            select sp_dbGetNewId('FacturaVentaPago', 'fvp_id') into v_fvp_id;

            insert into FacturaVentaPago
                 ( fvp_id, fvp_fecha, fvp_importe, fv_id )
            values ( v_fvp_id, v_fvd_fecha, v_pago, v_fv_id );

            -- como explique mas arriba:
            -- esta variable se usa para vincular el pago con la cobranza
            -- asi que la actualizo a la deuda que esta cobranza cancela
            --
            v_pago := v_fvd_pendiente;

         end if;

         -- si hay pago borro la/s deudas
         --
         if coalesce(v_fvp_id, 0) <> 0 then

            -- primero actualizo las referencias pasando de deuda a pago
            --
            update FacturaVentaCobranza
               set fvd_id = null,
                   fvp_id = v_fvp_id
            where fvd_id = v_fvd_id;

            update FacturaVentaNotaCredito
               set fvd_id_factura = null,
                   fvp_id_factura = v_fvp_id
            where fvd_id_factura = v_fvd_id;

            -- ahora si borro
            --
            delete from FacturaVentaDeuda
            where fv_id = v_fv_id
              and ( fvd_id = v_fvd_id or coalesce(v_fvd_id, 0) = 0 );

            -- no hay mas deuda
            --
            v_fvd_id := null;

         end if;

         -- finalmente grabo la vinculacion que puede estar asociada a una deuda o a un pago
         --
         select sp_dbGetNewId('FacturaVentaCobranza', 'fvcobz_id') into v_fvcobz_id;

         insert into FacturaVentaCobranza
            ( fvcobz_id, fvcobz_importe, fvcobz_importeOrigen, fvcobz_cotizacion, fv_id, fvd_id, fvp_id, cobz_id )
         values ( v_fvcobz_id, v_pago, v_pagoOrigen, v_fvcobz_cotizacion, v_fv_id,
                  v_fvd_id, --> uno de estos dos es null
                  v_fvp_id, -->  "       "        "
                  v_cobz_id );

         -- si no hay un pago actualizo la deuda decrementandola
         --
         if coalesce(v_fvp_id, 0) = 0 then

            update FacturaVentaDeuda
               set fvd_pendiente = fvd_pendiente - v_pago
            where fvd_id = v_fvd_id;

         end if;

         -- voy restando al pago el importe aplicado
         --
         v_fvcobz_importe := v_fvcobz_importe - v_pago;

      end loop;
   end loop;

/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                                     items borrados                                                                 //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/

   -- hay que borrar los items borrados de la cobranza solo si esta no es nueva
   --
   if v_is_new = 0 then

      -- antes que nada voy a tener que desvincular los cheques de los
      -- asientoitem vinculados a esta cobranza
      --
      select as_id
        into v_as_id
      from Cobranza
      where cobz_id = v_cobz_id;

      if v_as_id is not null then

         update AsientoItem
            set cheq_id = null
         where as_id = v_as_id;

      end if;

      insert into tt_cobzi_cheque
        ( cheq_id )
        ( select cheq_id
          from CobranzaItem
          where exists ( select cobzi_id
                         from CobranzaItemBorradoTMP
                         where cobz_id = v_cobz_id
                           and cobzTMP_id = p_cobzTMP_id
                           and cobzi_id = CobranzaItem.cobzi_id )
            and cobz_id = v_cobz_id
            and cheq_id is not null );

      insert into tt_cobzi_cupon
        ( tjcc_id )
        ( select tjcc_id
          from CobranzaItem
          where exists ( select cobzi_id
                         from CobranzaItemBorradoTMP
                         where cobz_id = v_cobz_id
                           and cobzTMP_id = p_cobzTMP_id
                           and cobzi_id = CobranzaItem.cobzi_id )
            and cobz_id = v_cobz_id
            and tjcc_id is not null );


      delete from CobranzaItem
      where exists ( select cobzi_id
                     from CobranzaItemBorradoTMP
                     where cobz_id = v_cobz_id
                       and cobzTMP_id = p_cobzTMP_id
                       and cobzi_id = CobranzaItem.cobzi_id );

      -- borro los cheques de clientes que entraron por esta cobranza
      --
      delete from Cheque
      where exists ( select cheq_id
                     from tt_cobzi_cheque
                     where cheq_id = Cheque.cheq_id );

      -- borro los cupones de tarjeta que entraron por esta cobranza
      --
      delete from TarjetaCreditoCupon
      where exists ( select tjcc_id
                     from tt_cobzi_cupon
                     where tjcc_id = TarjetaCreditoCupon.tjcc_id );

      delete from CobranzaItemBorradoTMP
      where cobz_id = v_cobz_id
        and cobzTMP_id = p_cobzTMP_id;

   end if;

/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                                 particularidades de los clientes                                                   //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/

   select * from sp_doc_cobranza_save_cliente(v_cobz_id, p_cobzTMP_ID) into v_success, v_error_msg;

   -- si el documento no es valido
   --
   if coalesce(v_success, 0) = 0 then
      raise exception '%', v_error_msg;
   end if;

/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                                     borrar temporales                                                              //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/

   delete from FacturaVentaCobranzaTMP where cobzTMP_id = p_cobzTMP_id;
   delete from CobranzaItemTMP where cobzTMP_id = p_cobzTMP_id;
   delete from CobranzaTMP where cobzTMP_id = p_cobzTMP_id;

/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                                        pendiente                                                                   //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/
   select sum(fvcobz_importe)
     into v_cobz_pendiente
   from FacturaVentaCobranza
   where cobz_id = v_cobz_id;

   update Cobranza
      set cobz_pendiente = cobz_total - coalesce(v_cobz_pendiente, 0)
   where cobz_id = v_cobz_id;

   for v_fv_id in
        select distinct fv_id
        from FacturaVentaCobranza
        where cobz_id = v_cobz_id
   loop

      perform  sp_doc_factura_venta_set_pendiente(v_fv_id);

      perform sp_doc_factura_venta_set_credito(v_fv_id);

      perform sp_doc_factura_venta_set_estado(v_fv_id);


      --/////////////////////////////////////////////////////////////////////////////////////////////////
      --
      -- validaciones
      --
      --/////////////////////////////////////////////////////////////////////////////////////////////////

      -- estado
      --
      select * from sp_auditoria_estado_check_doc_fv(v_fv_id) into v_success, v_error_msg;
      if coalesce(v_success, 0) = 0 then
         raise exception '%', v_error_msg;
      end if;

      -- totales
      --
      select * from sp_auditoria_totales_check_doc_fv(v_fv_id) into v_success, v_error_msg;
      if coalesce(v_success, 0) = 0 then
         raise exception '%', v_error_msg;
      end if;

      -- vtos
      --
      select * from sp_auditoria_vto_check_doc_fv(v_fv_id) into v_success, v_error_msg;
      if coalesce(v_success, 0) = 0 then
         raise exception '%', v_error_msg;
      end if;

      -- credito
      --
      select * from sp_auditoria_credito_check_doc_fv(v_fv_id) into v_success, v_error_msg;
      if coalesce(v_success, 0) = 0 then
         raise exception '%', v_error_msg;
      end if;

      --
      --/////////////////////////////////////////////////////////////////////////////////////////////////

   end loop;

/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                                        talonario                                                                   //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/
   select ta_id into v_ta_id from Documento where doc_id = v_doc_id;

   perform sp_talonario_set(v_ta_id, v_cobz_nrodoc);

/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                                        estado                                                                      //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/
   perform sp_doc_cobranza_set_credito(v_cobz_id);

   perform sp_doc_cobranza_set_estado(v_cobz_id);

   perform sp_doc_cobranza_cheque_set_credito(v_cobz_id);

   select sp_cfg_getValor('Tesoreria-General', 'Cobranza-Grabar Asiento') into v_cfg_valor;

   v_cfg_valor := coalesce(v_cfg_valor, '0');

   if to_number(v_cfg_valor) <> 0 then

      select * from sp_doc_cobranza_asiento_save(v_cobz_id, 0) into v_error, v_error_msg;
      if coalesce(v_error, 0) <> 0 then
         raise exception '%', v_error_msg;
      end if;

   else

      if not exists ( select cobz_id
                      from CobranzaAsiento
                      where cobz_id = v_cobz_id ) then

         insert into CobranzaAsiento
           ( cobz_id, cobz_fecha )
           ( select cobz_id,
                    cobz_fecha
             from Cobranza
             where cobz_grabarAsiento <> 0
               and cobz_id = v_cobz_id );

      end if;

   end if;

/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                                     validaciones al documento                                                      //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/

   -- estado
   --
   select * from sp_auditoria_estado_check_doc_cobz(v_cobz_id) into v_success, v_error_msg;
   if coalesce(v_success, 0) = 0 then
      raise exception '%', v_error_msg;
   end if;

   -- totales
   --
   select * from sp_auditoria_totales_check_doc_cobz(v_cobz_id) into v_success, v_error_msg;
   if coalesce(v_success, 0) = 0 then
      raise exception '%', v_error_msg;
   end if;

   -- credito
   --
   select * from sp_auditoria_credito_check_doc_cobz(v_cobz_id) into v_success, v_error_msg;
   if coalesce(v_success, 0) = 0 then
      raise exception '%', v_error_msg;
   end if;

/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                                     historial de modificaciones                                                    //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/
   select modifico into v_modifico from Cobranza where cobz_id = v_cobz_id;

   if v_is_new <> 0 then
      perform sp_historia_update(18004, v_cobz_id, v_modifico, 1);
   else
      perform sp_historia_update(18004, v_cobz_id, v_modifico, 3);
   end if;

/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                                     fin                                                                            //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/

   rtn.type := 'cobz_id';
   rtn.id := v_cobz_id;

   return next rtn;

exception
   when others then

     raise exception 'Ha ocurrido un error al grabar la cobranza. sp_doc_cobranza_save. %. %.',
                      sqlstate, sqlerrm;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_doc_cobranza_save_cliente(p_cobz_id integer, p_cobztmp_id integer, OUT p_success integer, OUT p_error_msg character varying)
 RETURNS record
 LANGUAGE plpgsql
AS $function$
begin

   p_success := 1;
   p_error_msg := '';

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_doc_cobranza_set_credito(p_cobz_id integer, p_borrar integer DEFAULT 0)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
begin

   perform sp_doc_cobranza_set_credito_cairo(p_cobz_id, p_borrar);

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_doc_cobranza_set_credito_cairo(p_cobz_id integer, p_borrar integer DEFAULT 0)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
declare

   v_pendiente decimal(18,6);
   v_cli_id integer;
   v_emp_id integer;

   v_doct_cobranza integer := 13;

   v_old_cli_ids integer[];
   i integer;
begin

   -- si no hay documento adios
   --
   if p_cobz_id = 0 then
      return;
   end if;

   SET TRANSACTION READ WRITE;


   -- datos del documento
   --
   select round(cobz_pendiente, 2),
          cli_id,
          emp_id
     into v_pendiente,
          v_cli_id,
          v_emp_id
   from Cobranza
   where cobz_id = p_cobz_id;

   -- borrar referencias a este documento por otro cliente
   --

   -- siempre borro cualquier mencion a este documento en el cache de cualquier
   -- cliente que no sea el indicado por el documento
   --
   if exists ( select cli_id
               from ClienteCacheCredito
               where cli_id <> v_cli_id
                 and doct_id = v_doct_cobranza
                 and id = p_cobz_id ) then

     select into v_old_cli_ids cli_id
     from ClienteCacheCredito
     where cli_id <> v_cli_id
       and doct_id = v_doct_cobranza
       and id = p_cobz_id;

     delete from ClienteCacheCredito
     where cli_id <> v_cli_id
       and doct_id = v_doct_cobranza
       and id = p_cobz_id;

     for i in 1 .. array_upper(v_old_cli_ids, 1)
     loop

         perform sp_cliente_update_credito(v_old_cli_ids[i], v_emp_id);

     end loop;

   end if;

   -- borrar
   --
   if p_borrar <> 0 then

      delete from ClienteCacheCredito
      where cli_id = v_cli_id
        and doct_id = v_doct_cobranza
        and id = p_cobz_id;

   -- insert - update
   --
   else

      if exists ( select id
                  from ClienteCacheCredito
                  where cli_id = v_cli_id
                    and doct_id = v_doct_cobranza
                    and id = p_cobz_id ) then

         if abs(v_pendiente) >= 0.01 then

            update ClienteCacheCredito
               set clicc_importe = v_pendiente
            where cli_id = v_cli_id
              and doct_id = v_doct_cobranza
              and id = p_cobz_id;

         -- si no hay nada pendiente lo saco del cache
         else

            delete from ClienteCacheCredito
            where cli_id = v_cli_id
              and doct_id = v_doct_cobranza
              and id = p_cobz_id;

         end if;

      else

         -- solo si hay algo pendiente
         if abs(v_pendiente) >= 0.01 then

            insert into ClienteCacheCredito ( cli_id, doct_id, id, clicc_importe, emp_id )
                                     values ( v_cli_id, v_doct_cobranza, p_cobz_id, v_pendiente, v_emp_id );

         end if;

      end if;

   end if;

   -- insertar - actualizar
   --
   perform sp_doc_cobranza_cheque_set_credito(p_cobz_id, p_borrar);

   -- deuda en cache
   --
   -- actualizo la deuda en la tabla cliente
   --
   perform sp_cliente_update_credito(v_cli_id, v_emp_id);

exception
    when others then
        raise exception 'Ha ocurrido un error al actualizar el estado de la cobranza. sp_doc_cobranza_set_credito_cairo. %. %.',
                         sqlstate, sqlerrm;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_doc_cobranza_set_estado(p_cobz_id integer, OUT p_est_id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
declare
   v_est_id integer;
   v_cli_id integer;
   v_pendiente decimal(18,6);
   v_llevaFirma smallint;
   v_firmado smallint;
   v_doc_id integer;
   v_doc_llevafirma smallint;

   v_estado_pendiente integer := 1;
   v_estado_pendienteFirma integer := 4;
   v_estado_finalizado integer := 5;
   v_estado_anulado integer := 7;
begin

   if p_cobz_id = 0 then
      return;
   end if;

   select cli_id,
          cobz_firmado,
          est_id,
          round(cobz_pendiente, 2),
          doc_id
     into v_cli_id,
          v_firmado,
          v_est_id,
          v_pendiente,
          v_doc_id
   from Cobranza
   where cobz_id = p_cobz_id;

   select doc_llevafirma
     into v_doc_llevafirma
   from Documento
   where doc_id = v_doc_id;

   if v_est_id <> v_estado_anulado then

      -- si el documento requiere firma y el comprobante no esta firmado
      -- y no esta finalizado (puede ser que se finalizo y luego se modifico el documento
      -- para que requiera firma en cuyo caso no se exige firma para documentos finalizados)
      --
      if v_firmado = 0 and v_doc_llevafirma <> 0 and v_est_id <> v_estado_finalizado then

         v_est_id := v_estado_pendienteFirma;

      else

         -- si el comprobante no tiene pendiente se finaliza
         --
         if coalesce(v_pendiente, 0) <= 0 then

            v_est_id := v_estado_finalizado;

         else

            v_est_id := v_estado_pendiente;

         end if;

      end if;

      update Cobranza
         set est_id = v_est_id
      where cobz_id = p_cobz_id;

   end if;

   p_est_id := v_est_id;

exception
   when others then

   raise exception 'Ha ocurrido un error al actualizar el estado de la cobranza. sp_doc_cobranza_set_estado. %. %.',
                   sqlstate, sqlerrm;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_doc_fac_cpra_orden_remito_save_aplic(p_fc_id integer, p_fctmp_id integer, p_bisaplic integer DEFAULT 0)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
declare
   v_fci_id integer;
   v_orden integer;
   v_ocfc_id integer;
   v_ocfc_cantidad decimal(18,6);
   v_oci_cancelado decimal(18,6);
   v_oci_id integer;
   v_rcfc_id integer;
   v_rcfc_cantidad decimal(18,6);
   v_rci_cancelado decimal(18,6);
   v_rci_id integer;
begin

   v_orden := 0;

/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                                        update pendiente en ordenes                                                 //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/

   create temporary table tt_OrdenCompraFac
   (
     oc_id integer
   ) on commit drop;

   insert into tt_OrdenCompraFac( oc_id )
     ( select distinct oci.oc_id
       from OrdenFacturaCompra ocfc
       join OrdenCompraItem oci
         on ocfc.oci_id = oci.oci_id
       join FacturaCompraItem fci
         on ocfc.fci_id = fci.fci_id
       where not exists ( select *
                          from OrdenFacturaCompraTMP
                          where fcTMP_id = p_fcTMP_id
                            and oci_id = ocfc.oci_id )
         and fci.fc_id = p_fc_id );


   -- borro toda la aplicacion actual de esta factura con ordenes
   --
   delete from OrdenFacturaCompra
   where fci_id in ( select fci_id
                     from FacturaCompraItem
                     where fc_id = p_fc_id );

   for v_ocfc_id, v_fci_id, v_oci_id, v_ocfc_cantidad in
        select ocfc_id,
               fci_id,
               oci_id,
               ocfc_cantidad
        from OrdenFacturaCompraTMP
        where fcTMP_id = p_fcTMP_id
   loop

      -- obtengo por el orden el fci que le corresponde a este oci
      --
      if p_bIsAplic = 0 then

         v_orden := v_orden + 1;

         select fci_id
           into v_fci_id
         from FacturaCompraItem
         where fc_id = p_fc_id
           and fci_orden = v_orden;

      end if;

      -- finalmente grabo la vinculacion que puede estar asociada a una deuda o a un pago
      --
      select sp_dbGetNewId('OrdenFacturaCompra', 'ocfc_id') into v_ocfc_id;

      insert into OrdenFacturaCompra( ocfc_id, ocfc_cantidad, fci_id, oci_id )
           values ( v_ocfc_id, v_ocfc_cantidad, v_fci_id, v_oci_id );

   end loop;

   perform sp_doc_fac_cpra_orden_set_pendiente(p_fc_id);

/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                                        update pendiente en remitos                                                 //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/

   v_orden := 0;

   create temporary table tt_RemitoCompraFac
   (
     rc_id integer
   ) on commit drop;

   insert into tt_RemitoCompraFac
     ( rc_id )
     ( select distinct rci.rc_id
       from RemitoFacturaCompra rcfc
       join RemitoCompraItem rci
         on rcfc.rci_id = rci.rci_id
       join FacturaCompraItem fci
         on rcfc.fci_id = fci.fci_id
       where not exists ( select *
                          from RemitoFacturaCompraTMP
                          where fcTMP_id = p_fcTMP_id
                            and rci_id = rcfc.rci_id )
         and fci.fc_id = p_fc_id );


   -- borro toda la aplicacion actual de esta factura con ordenes
   --
   delete from RemitoFacturaCompra
   where fci_id in ( select fci_id
                     from FacturaCompraItem
                     where fc_id = p_fc_id );

   for v_rcfc_id, v_fci_id, v_rci_id, v_rcfc_cantidad in
        select rcfc_id,
               fci_id,
               rci_id,
               rcfc_cantidad
        from RemitoFacturaCompraTMP
        where fcTMP_id = p_fcTMP_id
   loop

      -- obtengo por el orden el fci que le corresponde a este rci
      --
      if p_bIsAplic = 0 then

         v_orden := v_orden + 1;

         select fci_id
           into v_fci_id
         from FacturaCompraItem
         where fc_id = p_fc_id
           and fci_orden = v_orden;

      end if;

      -- finalmente grabo la vinculacion que puede estar asociada a una deuda o a un pago
      --
      select sp_dbGetNewId('RemitoFacturaCompra', 'rcfc_id') into v_rcfc_id;

      insert into RemitoFacturaCompra( rcfc_id, rcfc_cantidad, fci_id, rci_id )
      values ( v_rcfc_id, v_rcfc_cantidad, v_fci_id, v_rci_id );

   end loop;

   perform sp_doc_fac_cpra_remito_set_pendiente(p_fc_id);

/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                                        update pendiente en items                                                   //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/

   -- Actualizo la deuda de la factura
   --
   perform sp_doc_factura_cpra_set_item_pendiente(p_fc_id);

exception
   when others then

      raise exception 'Ha ocurrido un error al grabar la aplicacion de la factura de compra con las ordenes de compra y remitos. sp_doc_fac_cpra_orden_remito_save_aplic. %. %.',
                      sqlstate, sqlerrm;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_doc_factura_compra_get_legajos(p_fc_id integer, OUT rtn refcursor)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
BEGIN

   rtn := 'rtn';

   OPEN rtn FOR
      SELECT FacturaCompraLegajo.*,
             CASE
               WHEN lgj_titulo <> '' THEN lgj_titulo
               ELSE lgj_codigo
             END lgj_codigo
      FROM FacturaCompraLegajo
       JOIN Legajo ON FacturaCompraLegajo.lgj_id = Legajo.lgj_id
      WHERE fc_id = p_fc_id
      ORDER BY fclgj_orden;

END;
$function$;

CREATE OR REPLACE FUNCTION public.sp_doc_factura_compra_get_otros(p_fc_id integer, OUT rtn refcursor)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
begin

   rtn := 'rtn';

   open rtn for
      select FacturaCompraOtro.*,
             cue_nombre,
             ccos.ccos_nombre
      from FacturaCompraOtro
        join Cuenta
                on FacturaCompraOtro.cue_id = Cuenta.cue_id
        left join CentroCosto ccos
                on FacturaCompraOtro.ccos_id = ccos.ccos_id
      where fc_id = p_fc_id
      order by fcot_orden;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_doc_fac_cpra_orden_set_pendiente(p_fc_id integer)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
declare
   v_error_msg varchar(5000);
   v_success integer;
   v_oc_id integer;
begin

   for v_oc_id in
        select distinct oc_id
        from OrdenFacturaCompra ocfc
        join FacturaCompraItem fci
          on ocfc.fci_id = fci.fci_id
        join OrdenCompraItem oci
          on ocfc.oci_id = oci.oci_id
        where fc_id = p_fc_id
        union
        select oc_id
        from tt_OrdenCompraFac
   loop

      -- actualizo la deuda de la factura
      --
      perform sp_doc_orden_compra_set_pendiente(v_oc_id);

      -- estado
      --
      perform sp_doc_orden_compra_set_credito(v_oc_id);

      perform sp_doc_orden_compra_set_estado(v_oc_id);

      -- validaciones
      --
      v_success := 0;
      v_error_msg := '';

      -- estado
      --
      select * from sp_auditoria_estado_check_doc_oc(v_oc_id) into v_success, v_error_msg;
      if coalesce(v_success, 0) = 0 then
         raise exception '%', v_error_msg;
      end if;

   end loop;

exception
   when others then

   raise exception 'Ha ocurrido un error al actualizar el pendiente de la orden de compra. sp_doc_fac_cpra_orden_set_pendiente. %. %.',
                   sqlstate, sqlerrm;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_doc_fac_cpra_remito_set_pendiente(p_fc_id integer)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
declare
   v_error_msg varchar(5000);
   v_success integer;
   v_rc_id integer;
begin

   for v_rc_id in
         select distinct rc_id
         from RemitoFacturaCompra rcfc
         join FacturaCompraItem fci
           on rcfc.fci_id = fci.fci_id
         join RemitoCompraItem rci
           on rcfc.rci_id = rci.rci_id
         where fc_id = p_fc_id
      union
         select rc_id
           from tt_RemitoCompraFac
   loop

      -- actualizo la deuda de la factura
      --
      perform sp_doc_remito_compra_set_pendiente(v_rc_id);

      -- estado
      --
      perform sp_doc_remito_compra_set_credito(v_rc_id);

      perform sp_doc_remito_compra_set_estado(v_rc_id);

      -- validaciones
      --
      -- estado
      --
      select * from sp_auditoria_estado_check_doc_rc(v_rc_id) into v_success, v_error_msg;

      if coalesce(v_success, 0) = 0 then
         raise exception '%', v_error_msg;
      end if;

   end loop;

exception
   when others then

      raise exception 'Ha ocurrido un error al actualizar el pendiente del remito de compra. sp_doc_fac_cpra_remito_set_pendiente. %. %.',
                      sqlstate, sqlerrm;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_doc_fac_cpra_validate_deposito(p_fctmp_id integer, OUT p_success integer, OUT p_error_msg character varying)
 RETURNS record
 LANGUAGE plpgsql
AS $function$
declare
    v_error integer;
    v_llevaStock integer;

    v_depl_nombre varchar(255);
    v_pr_nombrecompra varchar(2000);
    v_productos varchar(8000);
begin

   v_error := 0;
   p_success := 0;
   p_error_msg := '@@ERROR_SP:';

   select doc.doc_muevestock
     into v_llevaStock
   from Documento doc
   join FacturaCompraTMP fc
     on doc.doc_id = fc.doc_id
   where fc.fcTMP_id = p_fcTMP_id;

   if v_llevaStock <> 0 then

      if exists ( select 1
                  from FacturaCompraItemTMP fci
                  join FacturaCompraTMP fc
                    on fci.fcTMP_id = fc.fcTMP_id
                  join Documento doc
                    on fc.doc_id = doc.doc_id
                  where fc.fcTMP_id = p_fcTMP_id
                    and not exists ( select *
                                     from ProductoDepositoEntrega
                                     where pr_id = fci.pr_id
                                       and depl_id = fc.depl_id
                                       and suc_id = fc.suc_id
                                       and emp_id = doc.emp_id
                                       and ( prov_id is null or prov_id = fc.prov_id ) )
                    and exists ( select *
                                 from ProductoDepositoEntrega
                                 where pr_id = fci.pr_id
                                   and depl_id <> fc.depl_id
                                   and suc_id = fc.suc_id
                                   and emp_id = doc.emp_id
                                   and ( prov_id is null or prov_id = fc.prov_id ) ) ) then
         select depl.depl_nombre
           into v_depl_nombre
         from FacturaCompraTMP fc
         join DepositoLogico depl
           on fc.depl_id = depl.depl_id
         where fc.fcTMP_id = p_fcTMP_id;

         v_productos := '';

         for v_pr_nombrecompra in
            select pr.pr_nombrecompra
            from FacturaCompraItemTMP fci
            join FacturaCompraTMP fc
             on fci.fcTMP_id = fc.fcTMP_id
            join Producto pr
             on fci.pr_id = pr.pr_id
            join Documento doc
             on fc.doc_id = doc.doc_id
            where fc.fcTMP_id = p_fcTMP_id
              and not exists ( select *
                               from ProductoDepositoEntrega
                               where pr_id = fci.pr_id
                                 and depl_id = fc.depl_id
                                 and suc_id = fc.suc_id
                                 and emp_id = doc.emp_id
                                 and ( prov_id is null or prov_id = fc.prov_id ) )
              and exists ( select *
                           from ProductoDepositoEntrega
                           where pr_id = fci.pr_id
                             and depl_id <> fc.depl_id
                             and suc_id = fc.suc_id
                             and emp_id = doc.emp_id
                             and ( prov_id is null or prov_id = fc.prov_id ) )
         loop
            v_productos := v_productos || v_pr_nombrecompra || CHR(10);
         end loop;

         v_error := 1;

         p_error_msg := p_error_msg || 'Esta factura indica articulos que no estan habilitados para ingresar en el deposito:' || CHR(10) || CHR(10) || v_depl_nombre || CHR(10) || CHR(10) || 'Los articulos son:' || CHR(10) || CHR(10) || v_productos;

      end if;

   end if;

   -- no hubo errores asi que todo bien
   --
   if v_error = 0 then
      p_success := 1;
   end if;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_doc_fac_vta_hora_set_pendiente(p_fv_id integer)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
declare
   v_error_msg varchar(5000);
   v_hora_id integer;
begin

   v_error_msg := '';

   for v_hora_id in
        select distinct horafv.hora_id
        from HoraFacturaVenta horafv
        join FacturaVentaItem fvi
          on horafv.fvi_id = fvi.fvi_id
        join Hora hora
          on horafv.hora_id = Hora.hora_id
        where fv_id = p_fv_id
        union
        select hora_id
        from tt_HoraFac
   loop

      -- actualizo la deuda de la factura
      --
      perform sp_hora_set_pendiente(v_hora_id);

   end loop;

exception
   when others then

   raise exception 'Ha ocurrido un error al actualizar el pendiente de la hora. sp_doc_fac_vta_hora_set_pendiente. %. %.',
                   sqlstate, sqlerrm;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_doc_fac_vta_pack_set_pendiente(p_fv_id integer)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
declare
   v_error_msg varchar(5000);
   v_success integer;
   v_pklst_id integer;
begin

   for v_pklst_id in
        select distinct pklst_id
        from PackingListFacturaVenta pklstfv
        join FacturaVentaItem fvi
          on pklstfv.fvi_id = fvi.fvi_id
        join PackingListItem pklsti
          on pklstfv.pklsti_id = pklsti.pklsti_id
         where fv_id = p_fv_id
        union
        select pklst_id
        from tt_PackingListFac
   loop

      -- actualizo la deuda de la factura
      --
      perform sp_doc_packing_list_set_pendiente(v_pklst_id);

      -- estado
      --
      perform sp_doc_packing_list_set_credito(v_pklst_id);

      perform sp_doc_packing_list_set_estado(v_pklst_id);

   end loop;

exception
   when others then

   raise exception 'Ha ocurrido un error al actualizar el pendiente del packing list. sp_doc_fac_vta_pack_set_pendiente. %. %.',
                   sqlstate, sqlerrm;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_doc_fac_vta_pedido_remito_save_aplic(p_fv_id integer, p_fvtmp_id integer, p_bisaplic integer DEFAULT 0)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
declare
   v_fvi_id integer;
   v_orden integer;
   v_pvfv_id integer;
   v_pvfv_cantidad decimal(18,6);
   v_pvi_id integer;
   v_rvfv_id integer;
   v_rvfv_cantidad decimal(18,6);
   v_rvi_id integer;
   v_pklstfv_id integer;
   v_pklstfv_cantidad decimal(18,6);
   v_pklsti_cancelado decimal(18,6);
   v_pklsti_id integer;
   v_horafv_id integer;
   v_horafv_cantidad decimal(18,6);
   v_hora_id integer;
begin

/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                                        update pendiente en pedidos                                                 //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/

   v_orden := 0;

   create temporary table tt_PedidoVentaFac
   (
     pv_id integer
   ) on commit drop;

   insert into tt_PedidoVentaFac
     ( pv_id )
     ( select distinct pvi.pv_id
       from PedidoFacturaVenta pvfv
       join PedidoVentaItem pvi
         on pvfv.pvi_id = pvi.pvi_id
       join FacturaVentaItem fvi
         on pvfv.fvi_id = fvi.fvi_id
       where not exists ( select *
                          from PedidoFacturaVentaTMP
                          where fvTMP_id = p_fvTMP_id
                            and pvi_id = pvfv.pvi_id )
         and fvi.fv_id = p_fv_id );

   -- borro toda la aplicacion actual de esta factura con pedidos
   --
   delete from PedidoFacturaVenta
   where fvi_id in ( select fvi_id
                     from FacturaVentaItem
                     where fv_id = p_fv_id );

   for v_pvfv_id,v_fvi_id,v_pvi_id,v_pvfv_cantidad in
        select pvfv_id,
                  fvi_id,
                  pvi_id,
                  pvfv_cantidad
        from PedidoFacturaVentaTMP
        where fvTMP_id = p_fvTMP_id
   loop

      -- obtengo por el orden el fvi que le corresponde a este pvi
      --
      if p_bIsAplic = 0 then

         v_orden := v_orden + 1;

         select fvi_id
           into v_fvi_id
         from FacturaVentaItem
         where fv_id = p_fv_id
           and fvi_orden = v_orden;

      end if;

      -- finalmente grabo la vinculacion
      --
      select sp_dbGetNewId('PedidoFacturaVenta', 'pvfv_id') into v_pvfv_id;

      insert into PedidoFacturaVenta( pvfv_id, pvfv_cantidad, fvi_id, pvi_id )
      values ( v_pvfv_id, v_pvfv_cantidad, v_fvi_id, v_pvi_id );

   end loop;

   perform sp_doc_fac_vta_pedido_set_pendiente(p_fv_id);

/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                                        update pendiente en remitos                                                 //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/

   v_orden := 0;
   
   create temporary table tt_RemitoVentaFac
   (
     rv_id integer
   ) on commit drop;

   insert into tt_RemitoVentaFac
     ( rv_id )
     ( select distinct rvi.rv_id
       from RemitoFacturaVenta rvfv
       join RemitoVentaItem rvi
         on rvfv.rvi_id = rvi.rvi_id
       join FacturaVentaItem fvi
         on rvfv.fvi_id = fvi.fvi_id
       where not exists ( select *
                          from RemitoFacturaVentaTMP
                          where fvTMP_id = p_fvTMP_id
                            and rvi_id = rvfv.rvi_id )
         and fvi.fv_id = p_fv_id );

   -- borro toda la aplicacion actual de esta factura con pedidos
   --
   delete from RemitoFacturaVenta
   where fvi_id in ( select fvi_id
                     from FacturaVentaItem
                     where fv_id = p_fv_id );

   for v_rvfv_id,v_fvi_id,v_rvi_id,v_rvfv_cantidad in
        select rvfv_id,
               fvi_id,
               rvi_id,
               rvfv_cantidad
        from RemitoFacturaVentaTMP
        where fvTMP_id = p_fvTMP_id
   loop

      -- obtengo por el orden el fvi que le corresponde a este rvi
      --
      if p_bIsAplic = 0 then

         v_orden := v_orden + 1;

         select fvi_id
           into v_fvi_id
         from FacturaVentaItem
         where fv_id = p_fv_id
           and fvi_orden = v_orden;

      end if;

      -- finalmente grabo la vinculacion que puede estar asociada a una deuda o a un pago
      --
      select sp_dbGetNewId('RemitoFacturaVenta', 'rvfv_id') into v_rvfv_id;

      insert into RemitoFacturaVenta( rvfv_id, rvfv_cantidad, fvi_id, rvi_id )
      values ( v_rvfv_id, v_rvfv_cantidad, v_fvi_id, v_rvi_id );

   end loop;

   perform sp_doc_fac_vta_remito_set_pendiente(p_fv_id);

/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                                        update pendiente en packing list                                            //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/
   
   v_orden := 0;

   create temporary table tt_PackingListFac
   (
     pklst_id integer
   ) on commit drop;

   insert into tt_PackingListFac
     ( pklst_id )
     ( select distinct pklsti.pklst_id
       from PackingListFacturaVenta pklstfv
       join PackingListItem pklsti
         on pklstfv.pklsti_id = pklsti.pklsti_id
       join FacturaVentaItem fvi
         on pklstfv.fvi_id = fvi.fvi_id
       where not exists ( select *
                          from PackingListFacturaVentaTMP
                          where fvTMP_id = p_fvTMP_id
                            and pklsti_id = pklstfv.pklsti_id )
         and fvi.fv_id = p_fv_id );

   for v_pklstfv_id,v_pklsti_id,v_pklstfv_cantidad in
        select pklstfv_id,
               pklsti_id,
               pklstfv_cantidad
        from PackingListFacturaVentaTMP
        where fvTMP_id = p_fvTMP_id
   loop

      -- obtengo por el orden el fvi que le corresponde a este pklsti
      --
      v_orden := v_orden + 1;

      select fvi_id
        into v_fvi_id
      from FacturaVentaItem
      where fv_id = p_fv_id
        and fvi_orden = v_orden;

      -- finalmente grabo la vinculacion que puede estar asociada a una deuda o a un pago
      --
      select sp_dbGetNewId('PackingListFacturaVenta', 'pklstfv_id') into v_pklstfv_id;

      insert into PackingListFacturaVenta( pklstfv_id, pklstfv_cantidad, fvi_id, pklsti_id )
      values ( v_pklstfv_id, v_pklstfv_cantidad, v_fvi_id, v_pklsti_id );

      update FacturaVentaItem
         set fvi_pendientepklst = fvi_cantidadaremitir - v_pklstfv_cantidad
      where fvi_id = v_fvi_id;

   end loop;

   perform sp_doc_fac_vta_pack_set_pendiente(p_fv_id);

/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                                        update pendiente en horas                                                   //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/
   
   v_orden := 0;

   create temporary table tt_HoraFac
   (
     hora_id integer
   ) on commit drop;
   
   insert into tt_HoraFac
     ( hora_id )
     ( select distinct horafv.hora_id
       from HoraFacturaVenta horafv
       join Hora hora
         on horafv.hora_id = Hora.hora_id
       join FacturaVentaItem fvi
         on horafv.fvi_id = fvi.fvi_id
       where not exists ( select *
                          from HoraFacturaVentaTMP
                          where fvTMP_id = p_fvTMP_id
                            and hora_id = horafv.hora_id )
         and fvi.fv_id = p_fv_id );

   -- borro toda la aplicacion actual de esta factura con pedidos
   --
   delete from HoraFacturaVenta
   where fvi_id in ( select fvi_id
                     from FacturaVentaItem
                     where fv_id = p_fv_id );

   for v_horafv_id,v_fvi_id,v_hora_id,v_horafv_cantidad in
        select horafv_id,
               fvi_id,
               hora_id,
               horafv_cantidad
        from HoraFacturaVentaTMP
        where fvTMP_id = p_fvTMP_id
   loop

      -- obtengo por el orden el fvi que le corresponde a este hora
      --
      if p_bIsAplic = 0 then

         v_orden := v_orden + 1;

         select fvi_id
           into v_fvi_id
         from FacturaVentaItem
         where fv_id = p_fv_id
         and fvi_orden = v_orden;

      end if;

      -- finalmente grabo la vinculacion que puede estar asociada a una deuda o a un pago
      --
      select sp_dbGetNewId('HoraFacturaVenta', 'horafv_id') into v_horafv_id;

      insert into HoraFacturaVenta( horafv_id, horafv_cantidad, fvi_id, hora_id )
      values ( v_horafv_id, v_horafv_cantidad, v_fvi_id, v_hora_id );

   end loop;

   perform sp_doc_fac_vta_hora_set_pendiente(p_fv_id);

/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                                        update pendiente en items                                                   //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/
   perform sp_doc_factura_vta_set_item_pendiente(p_fv_id);

exception
   when others then

      raise exception 'Ha ocurrido un error al grabar la aplicacion de la factura de compra con las ordenes de compra y remitos. sp_doc_fac_vta_pedido_remito_save_aplic. %. %.',
                      sqlstate, sqlerrm;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_doc_fac_vta_pedido_set_pendiente(p_fv_id integer)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
declare
   v_error_msg varchar(5000);
   v_success integer;
   v_pv_id integer;
begin

   for v_pv_id in
        select distinct pv_id
        from PedidoFacturaVenta pvfv
        join FacturaVentaItem fvi
          on pvfv.fvi_id = fvi.fvi_id
        join PedidoVentaItem pvi
          on pvfv.pvi_id = pvi.pvi_id
        where fv_id = p_fv_id
        union
        select pv_id
        from tt_PedidoVentaFac   
   loop
         
      -- actualizo la deuda de la factura
      --
      perform sp_doc_pedido_venta_set_pendiente(v_pv_id);

      -- estado
      --
      perform sp_doc_pedido_venta_set_credito(v_pv_id);

      perform sp_doc_pedido_venta_set_estado(v_pv_id);

      -- validaciones
      --
      v_success := 0;
      v_error_msg := '';         
      
      -- estado
      --
      select * from sp_auditoria_estado_check_doc_pv(v_pv_id) into v_success, v_error_msg;
      if coalesce(v_success, 0) = 0 then
         raise exception '%', v_error_msg;
      end if;

   end loop;

exception
   when others then

   raise exception 'Ha ocurrido un error al actualizar el pendiente del pedido de venta. sp_doc_fac_vta_pedido_set_pendiente. %. %.',
                   sqlstate, sqlerrm;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_doc_fac_vta_remito_set_pendiente(p_fv_id integer)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
declare
   v_error_msg varchar(5000);
   v_success integer;
   v_rv_id integer;
begin

   for v_rv_id in
        select distinct rv_id
        from RemitoFacturaVenta rvfv
        join FacturaVentaItem fvi
          on rvfv.fvi_id = fvi.fvi_id
        join RemitoVentaItem rvi
          on rvfv.rvi_id = rvi.rvi_id
        where fv_id = p_fv_id
        union
        select rv_id
        from tt_RemitoVentaFac
   loop

      -- actualizo la deuda de la factura
      --
      perform sp_doc_remito_venta_set_pendiente(v_rv_id);

      -- estado
      --
      perform sp_doc_remito_venta_set_credito(v_rv_id);

      perform sp_doc_remito_venta_set_estado(v_rv_id);

      -- validaciones
      --
      v_success := 0;
      v_error_msg := '';

      -- estado
      --
      select * from sp_auditoria_estado_check_doc_rv(v_rv_id) into v_success, v_error_msg;
      if coalesce(v_success, 0) = 0 then
         raise exception '%', v_error_msg;
      end if;

   end loop;

exception
   when others then

   raise exception 'Ha ocurrido un error al actualizar el pendiente del remito de venta. sp_doc_fac_vta_remito_set_pendiente. %. %.',
                   sqlstate, sqlerrm;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_doc_factura_compra_asiento_save(p_fc_id integer, p_raise_error integer DEFAULT (-1), OUT p_error integer, OUT p_error_msg character varying, OUT p_as_id integer)
 RETURNS record
 LANGUAGE plpgsql
AS $function$
declare
   v_is_new integer;

   v_as_id integer;
   v_as_numero integer;
   v_as_nrodoc varchar(50);
   v_as_fecha date;
   v_as_descrip varchar(5000);
   v_as_doc_cliente varchar(5000);

   v_asi_orden smallint;
   v_asi_debe decimal(18,6);
   v_asi_haber decimal(18,6);
   v_asi_origen decimal(18,6);
   v_asi_tipo smallint;

   v_prov_id integer;
   v_doc_id_factura integer;

   v_desc1 decimal(18,6);
   v_desc2 decimal(18,6);
   v_descuento1 decimal(18,6);
   v_descuento2 decimal(18,6);

   v_doct_id integer;
   v_doc_id integer;
   v_doct_id_factura integer;
   v_doc_id_cliente integer;
   v_doc_esresumenbco smallint;

   v_ta_id integer;

   v_ccos_id integer;
   v_ccos_id_cliente integer;

   v_mon_id integer;

   v_cue_id integer;

   v_to_id integer;
   v_to_count smallint;

   v_fci_id integer;
   v_fci_orden smallint;
   v_fci_importe decimal(18,6);
   v_fci_importeorigen decimal(18,6);
   v_fci_neto decimal(18,6);

   v_fcot_debe decimal(18,6);
   v_fcot_haber decimal(18,6);
   v_fcot_origen decimal(18,6);
   v_fcperc_origen decimal(18,6);
   v_fcperc_importe decimal(18,6);

   v_error smallint;
   v_aux decimal(18,6);
   v_coef decimal(18,6);

   v_orden_item smallint;

   v_ta_ultimonro integer;
   v_ta_mascara varchar(50);

   v_creado date;
   v_modificado date;
   v_modifico integer;

   v_cfg_valor varchar(5000);

   c_items refcursor;
begin

   p_error := 0;

   -- si no existe chau
   --
   if not exists ( select fc_id
                   from FacturaCompra
                   where fc_id = p_fc_id
                     and est_id <> 7 ) then
      return;
   end if;

   select fc.as_id,
          fc.prov_id,
          fc.doc_id,
          fc.fc_descuento1,
          fc.fc_descuento2,
          case
             when cpg.cpg_asientoXVto <> 0 and cpg.cpg_tipo not in ( 2,3 ) then fc.fc_fechaVto
             else fc.fc_fechaiva
          end
     into v_as_id,
          v_prov_id,
          v_doc_id_factura,
          v_desc1,
          v_desc2,
          v_as_fecha
   from FacturaCompra fc
   join CondicionPago cpg
     on fc.cpg_id = cpg.cpg_id
   where fc.fc_id = p_fc_id;

   v_as_id := coalesce(v_as_id, 0);

   select doc_esresumenbco
     into v_doc_esresumenbco
   from Documento
   where doc_id = v_doc_id_factura;

   SET TRANSACTION READ WRITE;

/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                                        insert                                                                      //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/

   -- obtengo el documento @doc_id
   --
   select doc_id_asiento,
          FacturaCompra.doct_id,
          Documento.doc_id,
          Documento.mon_id,
          ccos_id,
          fc_nrodoc || ' ' || prov_nombre
     into v_doc_id,
          v_doct_id_factura,
          v_doc_id_cliente,
          v_mon_id,
          v_ccos_id_cliente,
          v_as_doc_cliente
   from FacturaCompra
   join Documento
     on FacturaCompra.doc_id = Documento.doc_id
   join Proveedor
     on FacturaCompra.prov_id = Proveedor.prov_id
   where fc_id = p_fc_id;

   -- obtengo el as_nrodoc
   --
   if v_as_id = 0 then

      v_is_new := -1;

      select sp_dbGetNewId('Asiento', 'as_id') into v_as_id;
      select sp_dbGetNewId('Asiento', 'as_numero') into v_as_numero;

      select ta_ultimonro,
             ta_mascara,
             doct_id
        into v_ta_ultimonro,
             v_ta_mascara,
             v_doct_id
      from Documento
      join Talonario
        on Documento.ta_id = Talonario.ta_id
      where doc_id = v_doc_id;

      v_ta_ultimonro := v_ta_ultimonro + 1;
      v_as_nrodoc := trim(to_char(v_ta_ultimonro));
      v_as_nrodoc := substr(v_ta_mascara, 1, length(v_ta_mascara) - length(v_as_nrodoc)) || v_as_nrodoc;

      insert into Asiento( as_id, as_numero, as_nrodoc, as_descrip, as_fecha, as_doc_cliente, doc_id, doct_id,
                           doct_id_cliente, doc_id_cliente, id_cliente, modifico )
        ( select v_as_id,
                 v_as_numero,
                 v_as_nrodoc,
                 fc_descrip,
                 v_as_fecha,
                 v_as_doc_cliente,
                 v_doc_id,
                 v_doct_id,
                 v_doct_id_factura,
                 v_doc_id_cliente,
                 p_fc_id,
                 modifico
          from FacturaCompra
          where fc_id = p_fc_id );

/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                                        update                                                                      //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/
   else

      v_is_new := 0;

      select fc_descrip,
             modifico,
             modificado
        into v_as_descrip,
             v_modifico,
             v_modificado
      from FacturaCompra
      where fc_id = p_fc_id;

      select doc_id,
             doct_id
        into v_doc_id,
             v_doct_id
      from Asiento
      where as_id = v_as_id;

      update Asiento
         set as_descrip = v_as_descrip,
             as_fecha = v_as_fecha,
             as_doc_cliente = v_as_doc_cliente,
             doc_id = v_doc_id,
             doct_id = v_doct_id,
             doct_id_cliente = v_doct_id_factura,
             doc_id_cliente = v_doc_id_cliente,
             id_cliente = p_fc_id,
             modifico = v_modifico,
             modificado = v_modificado
      where as_id = v_as_id;

   end if;

/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                                        items                                                                       //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/
   -- borro todos los items y solo hago inserts que se mucho mas simple y rapido
   --
   delete from AsientoItem where as_id = v_as_id;

   select count(distinct to_id)
     into v_to_count
   from FacturaCompraItem
   where fc_id = p_fc_id;

   if v_doct_id_factura = 2 /* Factura */ or v_doct_id_factura = 10 /* Nota de Debito */ then
      v_asi_orden := 1;
   else
      if v_doct_id_factura = 8 /* Nota de Credito */ then

         v_orden_item := v_to_count;

         if v_desc1 <> 0 or v_desc2 <> 0 then
            v_asi_orden := v_orden_item + 2;
         else
            v_asi_orden := v_orden_item + 1;
         end if;

      end if;

   end if;

   -- los resumenes bancarios no agrupan los renlgones por cuenta
   -- para ayudar a la conciliacion bancaria
   --
   if v_doc_esresumenbco <> 0 then

      open c_items for
         select fci.fci_neto,
                fci.fci_importe,
                fci.fci_importeorigen,
                coalesce(pcueg.cue_id, cueg.cue_id),
                fci.ccos_id
         from FacturaCompraItem fci
         join Producto p
           on fci.pr_id = p.pr_id
         join CuentaGrupo cueg
           on p.cueg_id_compra = cueg.cueg_id
         left join ProveedorCuentaGrupo pcueg
           on cueg.cueg_id = pcueg.cueg_id and pcueg.prov_id = v_prov_id
         where fci.fc_id = p_fc_id;

   -- las facturas normales agrupan por cuenta para hacer los asientos
   -- mas breves y ahorrar espacio en el libro diario
   --
   else

      open c_items for
         select sum(fci.fci_neto),
                sum(fci.fci_importe),
                sum(fci.fci_importeorigen),
                coalesce(pcueg.cue_id, cueg.cue_id),
                fci.ccos_id
         from FacturaCompraItem fci
         join Producto p
           on fci.pr_id = p.pr_id
         join CuentaGrupo cueg
           on p.cueg_id_compra = cueg.cueg_id
         left join ProveedorCuentaGrupo pcueg
           on cueg.cueg_id = pcueg.cueg_id and pcueg.prov_id = v_prov_id
         where fci.fc_id = p_fc_id
         group by coalesce(pcueg.cue_id, cueg.cue_id),fci.ccos_id;

   end if;

   loop

      fetch c_items into v_fci_neto,v_fci_importe,v_fci_importeorigen,v_cue_id,v_ccos_id;
      exit when not found;

      if v_doct_id_factura = 2 /* Factura */ or v_doct_id_factura = 10 /* Nota de Debito */ then

         v_asi_debe := v_fci_neto;
         v_asi_haber := 0;

      else

         if v_doct_id_factura = 8 /* Nota de Credito */ then

            v_asi_debe := 0;
            v_asi_haber := v_fci_neto;

         end if;

      end if;

      if v_fci_importeorigen <> 0 then
         v_asi_origen := v_fci_neto / (v_fci_importe / v_fci_importeorigen);
      else
         v_asi_origen := 0;
      end if;

      perform sp_doc_asiento_save_item(
                            v_is_new,
                            0,
                            v_as_id,
                            v_asi_orden,
                            v_asi_debe,
                            v_asi_haber,
                            v_asi_origen,
                            0,
                            v_mon_id,
                            v_cue_id,
                            v_ccos_id,
                            null);

      v_asi_orden := v_asi_orden + 1;

   end loop;

   close c_items;

   -- los resumenes bancarios no agrupan los renlgones por cuenta
   -- para ayudar a la conciliacion bancaria
   --
   if v_doc_esresumenbco <> 0 then

      open c_items for
         select fcot_debe,
                fcot_haber,
                fcot_origen,
                cue_id,
                ccos_id
      from FacturaCompraOtro fcot
      where fc_id = p_fc_id;

   else

      open c_items for
         select sum(fcot_debe),
                sum(fcot_haber),
                sum(fcot_origen),
                cue_id,
                ccos_id
         from FacturaCompraOtro fcot
         where fc_id = p_fc_id
         group by cue_id,ccos_id;

   end if;

   loop

      fetch c_items into v_asi_debe,v_asi_haber,v_asi_origen,v_cue_id,v_ccos_id;
      exit when not found;

      if v_doct_id_factura = 8 /* Nota de Credito */ then

         v_aux := v_asi_debe;
         v_asi_debe := v_asi_haber;
         v_asi_haber := v_aux;

      end if;

      perform sp_doc_asiento_save_item(
                            v_is_new,
                            0,
                            v_as_id,
                            v_asi_orden,
                            v_asi_debe,
                            v_asi_haber,
                            v_asi_origen,
                            0,
                            v_mon_id,
                            v_cue_id,
                            v_ccos_id,
                            null);

      v_asi_orden := v_asi_orden + 1;

   end loop;

   close c_items;

/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                                        percepciones                                                                //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/

   -- los resumenes bancarios no agrupan los renlgones por cuenta
   -- para ayudar a la conciliacion bancaria
   --
   if v_doc_esresumenbco <> 0 then

      open c_items for
         select fcperc.fcperc_importe,
                fcperc.fcperc_origen,
                pt.cue_id,
                fcperc.ccos_id
         from FacturaCompraPercepcion fcperc
         join Percepcion p
           on fcperc.perc_id = p.perc_id
         join PercepcionTipo pt
           on p.perct_id = pt.perct_id
         where fcperc.fc_id = p_fc_id;

   else

      open c_items for
         select sum(fcperc.fcperc_importe),
                sum(fcperc.fcperc_origen),
                pt.cue_id,
                fcperc.ccos_id
         from FacturaCompraPercepcion fcperc
         join Percepcion p
           on fcperc.perc_id = p.perc_id
         join PercepcionTipo pt
           on p.perct_id = pt.perct_id
         where fcperc.fc_id = p_fc_id
         group by pt.cue_id,fcperc.ccos_id;

   end if;

   v_asi_haber := 0;

   loop

      fetch c_items into v_asi_debe,v_asi_origen,v_cue_id,v_ccos_id;
      exit when not found;

      if v_doct_id_factura = 8 /* Nota de Credito */ then

         v_asi_haber := v_asi_debe;
         v_asi_debe := 0;

      end if;

      perform sp_doc_asiento_save_item(
                            v_is_new,
                            0,
                            v_as_id,
                            v_asi_orden,
                            v_asi_debe,
                            v_asi_haber,
                            v_asi_origen,
                            0,
                            v_mon_id,
                            v_cue_id,
                            v_ccos_id,
                            null);

      v_asi_orden := v_asi_orden + 1;

   end loop;

   close c_items;

/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                                        iva                                                                         //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/
   perform sp_doc_factura_compra_asiento_save_iva(
                                    p_fc_id,
                                    v_as_id,
                                    1,
                                    v_mon_id,
                                    v_doct_id_factura,
                                    v_ccos_id,
                                    v_desc1,
                                    v_desc2,
                                    v_doc_esresumenbco);

   perform sp_doc_factura_compra_asiento_save_iva(
                                    p_fc_id,
                                    v_as_id,
                                    0,
                                    v_mon_id,
                                    v_doct_id_factura,
                                    v_ccos_id,
                                    v_desc1,
                                    v_desc2,
                                    v_doc_esresumenbco);

/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                                        internos                                                                    //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/
   perform sp_doc_factura_compra_asiento_save_interno(
                                    p_fc_id,
                                    v_as_id,
                                    v_mon_id,
                                    v_doct_id_factura,
                                    v_ccos_id,
                                    v_desc1,
                                    v_desc2,
                                    v_doc_esresumenbco);

/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                                        ahora la cuenta del proveedor                                               //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/

   v_descuento2 := 0;
   v_descuento1 := 0;

   open c_items for
      select sum(fci_neto),
             sum(fci_importe),
             sum(fci_importeorigen),
             to_id
      from FacturaCompraItem
      where fc_id = p_fc_id
      group by to_id;

   loop

      fetch c_items into v_fci_neto,v_fci_importe,v_fci_importeorigen,v_to_id;
      exit when not found;

      select * from sp_doc_get_cue_id
                    (
                     v_prov_id,
                     v_doc_id_factura,
                     v_to_id
                    )
               into
                     v_cue_id,
                     v_mon_id;

      if v_doct_id_factura = 8 /* Nota de Credito */ then

         v_asi_debe := v_fci_importe;

         -- otros y percepciones van con la cuenta asociada al tipo de operacion 1 (comercial)
         --
         if v_to_id = 1 /* Comercial */ or v_to_count = 1 then

            -- sumo otros
            --
            select sum(fcot_haber),
                   sum(fcot_debe),
                   sum(fcot_origen)
              into v_fcot_haber,
                   v_fcot_debe,
                   v_fcot_origen
            from FacturaCompraOtro
            where fc_id = p_fc_id;

            v_aux := v_fcot_debe;
            v_fcot_debe := v_fcot_haber;
            v_fcot_haber := v_aux;

            -- sumo Percepciones
            --
            select sum(fcperc_importe),
                   sum(fcperc_origen)
              into v_fcperc_importe,
                   v_fcperc_origen
            from FacturaCompraPercepcion
            where fc_id = p_fc_id;

         else

            -- otros tipos de operaciones
            --
            v_fcot_debe := 0;
            v_fcot_haber := 0;
            v_fcot_origen := 0;
            v_fcperc_importe := 0;
            v_fcperc_origen := 0;

         end if;

         v_asi_debe := v_asi_debe + coalesce(v_fcot_haber, 0) - coalesce(v_fcot_debe, 0) + coalesce(v_fcperc_importe, 0);
         v_fci_importeorigen := v_fci_importeorigen + coalesce(v_fcot_origen, 0) + coalesce(v_fcperc_origen, 0);

         if v_fci_importeorigen <> 0 then
            v_coef := v_asi_debe / v_fci_importeorigen;
         else
            v_coef := 0;
         end if;

         v_asi_debe := v_asi_debe - (v_asi_debe * v_desc1 / 100);
         v_asi_debe := v_asi_debe - (v_asi_debe * v_desc2 / 100);
         v_descuento2 := v_descuento2 + (v_fci_neto - v_fci_neto * v_desc1 / 100) * v_desc2 / 100;
         v_descuento1 := v_descuento1 + v_fci_neto * v_desc1 / 100;
         v_asi_haber := 0;
         v_asi_orden := 1;

      else

         if v_doct_id_factura = 2 /* Factura */ or v_doct_id_factura = 10 /* Nota de Debito */ then

            v_asi_debe := 0;
            v_asi_haber := v_fci_importe;

            -- otros y percepciones van con la cuenta asociada al tipo de operacion 1 (comercial)
            --
            if v_to_id = 1 /* Comercial */ or v_to_count = 1 then

               -- sumo otros
               --
               select sum(fcot_debe),
                      sum(fcot_haber),
                      sum(fcot_origen)
                 into v_fcot_debe,
                      v_fcot_haber,
                      v_fcot_origen
               from FacturaCompraOtro
               where fc_id = p_fc_id;

               -- sumo percepciones
               --
               select sum(fcperc_importe),
                      sum(fcperc_origen)
                 into v_fcperc_importe,
                      v_fcperc_origen
               from FacturaCompraPercepcion
               where fc_id = p_fc_id;

            else

               -- otros tipos de operaciones
               --
               v_fcot_debe := 0;
               v_fcot_haber := 0;
               v_fcot_origen := 0;
               v_fcperc_importe := 0;
               v_fcperc_origen := 0;

            end if;

            v_asi_haber := v_asi_haber + coalesce(v_fcot_debe, 0) - coalesce(v_fcot_haber, 0) + coalesce(v_fcperc_importe, 0);
            v_fci_importeorigen := v_fci_importeorigen + coalesce(v_fcot_origen, 0) + coalesce(v_fcperc_origen, 0);

            if v_fci_importeorigen <> 0 then
               v_coef := v_asi_haber / v_fci_importeorigen;
            else
               v_coef := 0;
            end if;

            v_asi_haber := v_asi_haber - (v_asi_haber * v_desc1 / 100);
            v_asi_haber := v_asi_haber - (v_asi_haber * v_desc2 / 100);
            v_descuento2 := v_descuento2 + (v_fci_neto - v_fci_neto * v_desc1 / 100) * v_desc2 / 100;
            v_descuento1 := v_descuento1 + v_fci_neto * v_desc1 / 100;

            select max(asi_orden) + 1
              into v_asi_orden
            from AsientoItem
            where as_id = v_as_id;

         end if;

      end if;

      if v_fci_importeorigen <> 0 then

         v_fci_importeorigen := v_fci_importeorigen - (v_fci_importeorigen * v_desc1 / 100);
         v_fci_importeorigen := v_fci_importeorigen - (v_fci_importeorigen * v_desc2 / 100);
         v_asi_origen := v_fci_importeorigen;

      else

         v_asi_origen := 0;

      end if;

      if v_to_count = 1 then

         v_asi_tipo := 2;-- Cta acreedor

      else

         select to_generadeuda
           into v_asi_tipo
         from TipoOperacion
         where to_id = v_to_id;

         if v_asi_tipo <> 0 or v_to_count = 1 then
            v_asi_tipo := 2;-- Cta acreedor
         end if;

      end if;

      perform sp_doc_asiento_save_item(
                            v_is_new,
                            0,
                            v_as_id,
                            v_asi_orden,
                            v_asi_debe,
                            v_asi_haber,
                            v_asi_origen,
                            v_asi_tipo,
                            v_mon_id,
                            v_cue_id,
                            v_ccos_id_cliente,
                            null);

      v_asi_orden := v_asi_orden + 1;

   end loop;

   close c_items;

/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                                descuentos globales                                                                 //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/
   if v_desc1 <> 0 or v_desc2 <> 0 then

      select sp_cfg_getValor('Compras-General', 'Cuenta Descuento Global') into v_cfg_valor;

      v_cue_id := to_number(v_cfg_valor);

      if v_doct_id_factura = 8 /* Nota de Credito */ then

         v_asi_orden := 2;

      else

         if v_doct_id_factura = 2 /* Factura */ or v_doct_id_factura = 10 /* Nota de Debito */ then

            select max(asi_orden) + 1
              into v_asi_orden
            from AsientoItem
            where as_id = v_as_id;

         end if;

      end if;

      if v_desc1 <> 0 then

         if v_doct_id_factura = 8 /* Nota de Credito */ then

            v_asi_debe := v_descuento1;
            v_asi_haber := 0;

         else

            if v_doct_id_factura = 2 /* Factura */ or v_doct_id_factura = 10 /* Nota de Debito */ then

               v_asi_debe := 0;
               v_asi_haber := v_descuento1;

            end if;

         end if;

         if v_coef <> 0 then
            v_asi_origen := v_descuento1 / v_coef;
         else
            v_asi_origen := 0;
         end if;

      end if;

      if v_desc2 <> 0 then

         select max(asi_orden) + 1
           into v_asi_orden
         from AsientoItem
         where as_id = v_as_id;

         if v_doct_id_factura = 8 /* Nota de Credito */ then

            v_asi_debe := v_asi_debe + v_descuento2;
            v_asi_haber := 0;

         else

            if v_doct_id_factura = 2 /* Factura */ or v_doct_id_factura = 10 /* Nota de Debito */ then

               v_asi_debe := 0;
               v_asi_haber := v_asi_haber + v_descuento2;

            end if;

         end if;

         if v_coef <> 0 then
            v_asi_origen := v_asi_origen + v_descuento2 / v_coef;
         else
            v_asi_origen := 0;
         end if;

      end if;

      perform sp_doc_asiento_save_item(
                            v_is_new,
                            0,
                            v_as_id,
                            v_asi_orden,
                            v_asi_debe,
                            v_asi_haber,
                            v_asi_origen,
                            0,
                            v_mon_id,
                            v_cue_id,
                            v_ccos_id_cliente,
                            null);

   end if;

/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                                valido el asiento                                                                   //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/
   select * from sp_doc_asiento_validate(v_as_id) into v_error, p_error_msg;

   if v_error <> 0 then
      raise exception '%', p_error_msg;
   end if;

/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                                talonario                                                                           //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/
   select ta_id
     into v_ta_id
   from Documento
   where doc_id = v_doc_id;

   perform sp_talonario_set(v_ta_id, v_as_nrodoc);

/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                                vinculo la factura con su asiento                                                   //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/
   update FacturaCompra
      set as_id = v_as_id,
          fc_grabarasiento = 0
   where fc_id = p_fc_id;

   p_error := 0;
   p_as_id := v_as_id;

exception
   when others then

      if p_raise_error <> 0 then

         raise exception 'Ha ocurrido un error al grabar la factura de Compra. sp_doc_factura_compra_asiento_save. %. %.',
                         sqlstate, sqlerrm;
      else

         p_error := -1;
         p_error_msg := sqlstate || ';' || sqlerrm || ';';

      end if;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_doc_factura_compra_asiento_save_interno(p_fc_id integer, p_as_id integer, p_mon_id integer, p_doct_id_factura integer, p_ccos_id integer, p_desc1 numeric, p_desc2 numeric, p_doc_esresumenbco integer)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
declare
   v_iva decimal(18,6);
   v_fci_importe decimal(18,6);
   v_fci_importeorigen decimal(18,6);
   v_cue_id integer;
   v_asi_debe decimal(18,6);
   v_asi_haber decimal(18,6);
   v_asi_origen decimal(18,6);
   v_fci_neto decimal(18,6);
   v_asi_orden smallint;
   v_asi_id integer;
   v_is_new integer;

   c_items refcursor;
begin

   select max(asi_orden)
     into v_asi_orden
   from AsientoItem
   where as_id = p_as_id;

   -- los resumenes bancarios no agrupan los renlgones por cuenta
   -- para ayudar a la conciliacion bancaria
   --
   if p_doc_esresumenbco <> 0 then

      open c_items for
         select fci.fci_internos,
                fci.fci_importe,
                fci.fci_importeorigen,
                ti.cue_id
         from FacturaCompraItem fci
         join Producto p
           on fci.pr_id = p.pr_id
         join TasaImpositiva ti
            on p.ti_id_internosc = ti.ti_id
         where fci.fc_id = p_fc_id;

   else

      open c_items for
         select sum(fci.fci_internos),
                sum(fci.fci_importe),
                sum(fci.fci_importeorigen),
                ti.cue_id
         from FacturaCompraItem fci
         join Producto p
           on fci.pr_id = p.pr_id
         join TasaImpositiva ti
           on p.ti_id_internosc = ti.ti_id
         where fci.fc_id = p_fc_id
         group by ti.cue_id
         having sum(fci.fci_internos) <> 0;

   end if;

   loop
      fetch c_items into v_iva,v_fci_importe,v_fci_importeorigen,v_cue_id;
      exit when not found;

      v_asi_id := null;

      if p_doct_id_factura = 2 /* Factura */ or p_doct_id_factura = 10 /* Nota de Debito */ then

         v_asi_debe := v_iva;
         v_asi_debe := v_asi_debe - (v_asi_debe * p_desc1 / 100);
         v_asi_debe := v_asi_debe - (v_asi_debe * p_desc2 / 100);
         v_asi_haber := 0;

         select asi_id
           into v_asi_id
         from AsientoItem
         where as_id = p_as_id
           and cue_id = v_cue_id
           and asi_haber = 0
           and coalesce(ccos_id, 0) = coalesce(p_ccos_id, 0);

      else

         if p_doct_id_factura = 8 /* Nota de Credito */ then

            v_asi_debe := 0;
            v_asi_haber := v_iva;
            v_asi_haber := v_asi_haber - (v_asi_haber * p_desc1 / 100);
            v_asi_haber := v_asi_haber - (v_asi_haber * p_desc2 / 100);

            select asi_id
              into v_asi_id
            from AsientoItem
            where as_id = p_as_id
              and cue_id = v_cue_id
              and asi_debe = 0
              and coalesce(ccos_id, 0) = coalesce(p_ccos_id, 0);

         end if;

      end if;

      if v_fci_importeorigen <> 0 then

         v_fci_importeorigen := v_fci_importeorigen - (v_fci_importeorigen * p_desc1 / 100);
         v_fci_importeorigen := v_fci_importeorigen - (v_fci_importeorigen * p_desc2 / 100);
         v_asi_origen := v_iva / (v_fci_importe / v_fci_importeorigen);

      else

         v_asi_origen := 0;

      end if;

      v_asi_id := coalesce(v_asi_id, 0);

      -- en los resumenes bancarios no juntamos los importes por cuenta
      -- para facilitar la conciliacion con el banco
      --
      if p_doc_esresumenbco <> 0 then
         v_asi_id := 0;
      end if;

      if v_asi_id = 0 then

         select sp_dbGetNewId('AsientoItem', 'asi_id') into v_asi_id;

         v_asi_orden := v_asi_orden + 1;

         insert into AsientoItem( as_id, asi_id, asi_orden, asi_descrip, asi_debe, asi_haber, asi_origen, cue_id,
                                  ccos_id, mon_id )
         values ( p_as_id, v_asi_id, v_asi_orden, '', v_asi_debe, v_asi_haber, v_asi_origen, v_cue_id, p_ccos_id, p_mon_id );

      else

         update AsientoItem
            set asi_debe = asi_debe + v_asi_debe,
                asi_haber = asi_haber + v_asi_haber,
                asi_origen = asi_origen + v_asi_origen
         where asi_id = v_asi_id;

      end if;

   end loop;

   close c_items;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_doc_factura_compra_asiento_save_iva(p_fc_id integer, p_as_id integer, p_iva_ri integer, p_mon_id integer, p_doct_id_factura integer, p_ccos_id integer, p_desc1 numeric, p_desc2 numeric, p_doc_esresumenbco integer)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
declare
   v_iva decimal(18,6);
   v_fci_importe decimal(18,6);
   v_fci_importeorigen decimal(18,6);
   v_cue_id integer;
   v_asi_debe decimal(18,6);
   v_asi_haber decimal(18,6);
   v_asi_origen decimal(18,6);
   v_fci_neto decimal(18,6);
   v_asi_orden smallint;
   v_asi_id integer;
   v_is_new integer;
   c_items refcursor;
begin

   select max(asi_orden)
     into v_asi_orden
   from AsientoItem
   where as_id = p_as_id;

   if p_iva_ri <> 0 then

      -- los resumenes bancarios no agrupan los renlgones por cuenta
      -- para ayudar a la conciliacion bancaria
      --
      if p_doc_esresumenbco <> 0 then

         open c_items for 
            select fci.fci_ivari,
                   fci.fci_importe,
                   fci.fci_importeorigen,
                   ti.cue_id
            from FacturaCompraItem fci
            join Producto p
              on fci.pr_id = p.pr_id
            join TasaImpositiva ti
              on p.ti_id_ivariCompra = ti.ti_id
            where fci.fc_id = p_fc_id;

      else

         open c_items for 
            select sum(fci.fci_ivari),
                   sum(fci.fci_importe),
                   sum(fci.fci_importeorigen),
                   ti.cue_id
            from FacturaCompraItem fci
            join Producto p
              on fci.pr_id = p.pr_id
            join TasaImpositiva ti
              on p.ti_id_ivariCompra = ti.ti_id
            where fci.fc_id = p_fc_id
            group by ti.cue_id
            having sum(fci.fci_ivari) <> 0;

      end if;

   else

      -- los resumenes bancarios no agrupan los renlgones por cuenta
      -- para ayudar a la conciliacion bancaria
      --
      if p_doc_esresumenbco <> 0 then

         open c_items for 
            select fci.fci_ivarni,
                   fci.fci_importe,
                   fci.fci_importeorigen,
                   ti.cue_id
            from FacturaCompraItem fci
            join Producto p
              on fci.pr_id = p.pr_id
            join TasaImpositiva ti
              on p.ti_id_ivarniCompra = ti.ti_id
            where fci.fc_id = p_fc_id;

      else

         open c_items for 
            select sum(fci.fci_ivarni),
                   sum(fci.fci_importe),
                   sum(fci.fci_importeorigen),
                   ti.cue_id
            from FacturaCompraItem fci
            join Producto p
              on fci.pr_id = p.pr_id
            join TasaImpositiva ti
              on p.ti_id_ivarniCompra = ti.ti_id
            where fci.fc_id = p_fc_id
            group by ti.cue_id
            having sum(fci.fci_ivarni) <> 0;

      end if;

   end if;

   loop

      fetch c_items into v_iva,v_fci_importe,v_fci_importeorigen,v_cue_id;
      exit when not found;

      v_asi_id := null;

      if p_doct_id_factura = 2 /* Factura */ or p_doct_id_factura = 10 /* Nota de Debito */ then

         v_asi_debe := v_iva;
         v_asi_debe := v_asi_debe - (v_asi_debe * p_desc1 / 100);
         v_asi_debe := v_asi_debe - (v_asi_debe * p_desc2 / 100);
         v_asi_haber := 0;

         select asi_id
           into v_asi_id
         from AsientoItem
         where as_id = p_as_id
           and cue_id = v_cue_id
           and asi_haber = 0
           and coalesce(ccos_id, 0) = coalesce(p_ccos_id, 0);

      else

         if p_doct_id_factura = 8 /* Nota de Credito */ then

            v_asi_debe := 0;
            v_asi_haber := v_iva;
            v_asi_haber := v_asi_haber - (v_asi_haber * p_desc1 / 100);
            v_asi_haber := v_asi_haber - (v_asi_haber * p_desc2 / 100);

            select asi_id
              into v_asi_id
            from AsientoItem
            where as_id = p_as_id
              and cue_id = v_cue_id
              and asi_debe = 0
              and coalesce(ccos_id, 0) = coalesce(p_ccos_id, 0);

         end if;

      end if;

      if v_fci_importeorigen <> 0 then

         v_fci_importeorigen := v_fci_importeorigen - (v_fci_importeorigen * p_desc1 / 100);
         v_fci_importeorigen := v_fci_importeorigen - (v_fci_importeorigen * p_desc2 / 100);
         v_asi_origen := v_iva / (v_fci_importe / v_fci_importeorigen);

      else

         v_asi_origen := 0;

      end if;

      v_asi_id := coalesce(v_asi_id, 0);

      -- en los resumenes bancarios no juntamos los importes por cuenta
      -- para facilitar la conciliacion con el banco
      --
      if p_doc_esresumenbco <> 0 then

         v_asi_id := 0;

      end if;

      if v_asi_id = 0 then

         select sp_dbGetNewId('AsientoItem', 'asi_id') into v_asi_id;

         v_asi_orden := v_asi_orden + 1;

         insert into AsientoItem( as_id, asi_id, asi_orden, asi_descrip, asi_debe, asi_haber, asi_origen, cue_id,
                                  ccos_id, mon_id )
         values ( p_as_id, v_asi_id, v_asi_orden, '', v_asi_debe, v_asi_haber, v_asi_origen, v_cue_id, p_ccos_id,
                  p_mon_id );

      else

         update AsientoItem
            set asi_debe = asi_debe + v_asi_debe,
                asi_haber = asi_haber + v_asi_haber,
                asi_origen = asi_origen + v_asi_origen
         where asi_id = v_asi_id;

      end if;

   end loop;

   close c_items;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_doc_factura_compra_editable_get(p_emp_id integer, p_fc_id integer, p_us_id integer, p_no_anulado integer DEFAULT 0, p_delete integer DEFAULT 0, OUT p_editable integer, OUT p_edit_msg character varying)
 RETURNS record
 LANGUAGE plpgsql
AS $function$
declare
   v_doc_id integer;
   v_fc_fecha date;
   v_estado integer;
   v_firmado integer;
   v_emp_id integer;
   v_emp_nombre varchar(255);
   v_impreso numeric(3,0);

   v_anulado integer := 7;
   v_csPreCpraEditFactura integer := 17003;
   v_csPreCpraDeleteFactura integer := 17004;

   v_pre_id integer;
   v_doc_nombre varchar(255);
   v_fca_id integer;

   v_fca_fechaDesde date;
   v_fca_fechaHasta date;

   v_doc_editarimpresos smallint;
begin

   if p_fc_id <> 0 then

      select d.doc_id,
             d.emp_id,
             c.fc_fecha,
             c.est_id,
             c.impreso
        into v_doc_id,
             v_emp_id,
             v_fc_fecha,
             v_estado,
             v_impreso
      from FacturaCompra c
               join Documento d
                on c.doc_id = d.doc_id
      where c.fc_id = p_fc_id;

      if p_emp_id <> v_emp_id then

         select emp_nombre
           into v_emp_nombre
         from Empresa
         where emp_id = v_emp_id;

         p_editable := 0;

         if p_delete = 0 then
            p_edit_msg := 'El comprobante pertenece a la empresa ' || v_emp_nombre || ', para editarlo debe ingresar al sistema indicando dicha empresa.';
         else
            p_edit_msg := 'El comprobante pertenece a la empresa ' || v_emp_nombre || ', para borrarlo debe ingresar al sistema indicando dicha empresa.';
         end if;

         return;

      end if;

      if v_estado = v_anulado and p_no_anulado = 0 then

         p_editable := 0;
         p_edit_msg := 'El comprobante esta anulado';

         return;

      end if;

      if p_delete = 0 then
         v_pre_id := v_csPreCpraEditFactura;
      else
         v_pre_id := v_csPreCpraDeleteFactura;
      end if;

      -- Tiene permiso para editar facturas de compra
      --
      if not exists ( select per_id
                      from Permiso
                      where pre_id = v_pre_id
                        and ( ( us_id = p_us_id )
                             or exists ( select us_id
                                         from UsuarioRol
                                         where us_id = p_us_id
                                           and rol_id = Permiso.rol_id ))) then

         p_editable := 0;

         if p_delete = 0 then
            p_edit_msg := 'Usted no tiene permiso para editar facturas de compra';
         else
            p_edit_msg := 'Usted no tiene permiso para borrar facturas de compra';
         end if;

         return;

      end if;

      v_pre_id := null;

      select case
               when p_delete = 0 then pre_id_edit
               else pre_id_delete
             end,
             doc_nombre
        into v_pre_id,
             v_doc_nombre
      from Documento
      where doc_id = v_doc_id;

      if not exists ( select per_id
                      from Permiso
                      where pre_id = v_pre_id
                        and ( ( us_id = p_us_id )
                             or exists ( select us_id
                                         from UsuarioRol
                                         where us_id = p_us_id
                                           and rol_id = Permiso.rol_id))) then
         p_editable := 0;

         if p_delete = 0 then
            p_edit_msg := 'Usted no tiene permiso para editar ' || v_doc_nombre;
         else
            p_edit_msg := 'Usted no tiene permiso para borrar ' || v_doc_nombre;
         end if;

         return;

      end if;

      -- Fechas de control de Acceso
      select fca_id
        into v_fca_id
      from Documento
      where doc_id = v_doc_id;

      if not v_fca_id is null then

         if not exists ( select fca_id
                         from FechaControlAcceso
                         where fca_id = v_fca_id
                           and v_fc_fecha BETWEEN fca_fechaDesde and fca_fechaHasta ) then

            select fca_fechaDesde,
                   fca_fechaHasta
              into v_fca_fechaDesde,
                   v_fca_fechaHasta
            from FechaControlAcceso
            where fca_id = v_fca_id;

            p_editable := 0;

            p_edit_msg := 'La fecha del comprobante esta fuera del intervalo definido por las fechas de control de acceso ('
                            || to_char(coalesce(v_fca_fechaDesde, '1900-01-01'), 'dd-mm-yyyy')
                            || ' - '
                            || to_char(coalesce(v_fca_fechaHasta, '1900-01-01'), 'dd-mm-yyyy')
                            || ')';
            return;

         end if;

      end if;

      if exists ( select fc_id
                  from FacturaCompraOrdenPago
                  where fc_id = p_fc_id ) then

         -- Si la condicion de pago es por debito automatico
         -- la aplicacion no impide la edicion
         --
         if not exists ( select fc.cpg_id
                         from FacturaCompra fc
                         join CondicionPago cpg
                           on fc.cpg_id = cpg.cpg_id
                          and cpg.cpg_tipo in ( 2,3 )
                         where fc.fc_id = p_fc_id ) then
            p_editable := 0;
            p_edit_msg := 'El comprobante esta vinculado a una orden de pago';

            return;

         end if;

      end if;

      if exists ( select fc_id_factura
                  from FacturaCompraNotaCredito
                  where fc_id_factura = p_fc_id
                     or fc_id_notacredito = p_fc_id ) then

         p_editable := 0;
         p_edit_msg := 'El comprobante esta vinculado a una factura o nota de credito';

         return;

      end if;


      if exists ( select fci.fc_id
                  from RemitoFacturaCompra r
                  join FacturaCompraItem fci
                    on r.fci_id = fci.fci_id
                  where fci.fc_id = p_fc_id ) then

         p_editable := 0;
         p_edit_msg := 'El comprobante esta vinculado a un remito';

         return;

      end if;

      if exists ( select fci.fc_id
                  from OrdenFacturaCompra oc
                  join FacturaCompraItem fci
                    on oc.fci_id = fci.fci_id
                  where fci.fc_id = p_fc_id ) then

         p_editable := 0;
         p_edit_msg := 'El comprobante esta vinculado a una orden de compra';

         return;

      end if;

      if v_impreso <> 0 and p_no_anulado = 0 then

         select doc_editarimpresos
           into v_doc_editarimpresos
         from Documento
         where doc_id = v_doc_id;

         if v_doc_editarimpresos = 0 then

            p_editable := 0;

            if p_delete = 0 then
               p_edit_msg := 'El comprobante esta impreso y la definición de su documento no permite la edición de comprobantes impresos.';
            else
               p_edit_msg := 'El comprobante esta impreso y la definición de su documento no permite eliminar comprobantes impresos.';
            end if;

            return;

         end if;

      end if;

   end if;

   p_editable := 1;
   p_edit_msg := '';

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_doc_factura_compra_get(p_emp_id integer, p_fc_id integer, p_us_id integer, OUT rtn refcursor)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
declare
   v_editable smallint;
   v_edit_msg varchar(255);
   v_doc_id integer;
   v_doct_id integer;
   v_ta_mascara varchar(100);
   v_ta_propuesto smallint;
   v_DeplNombre varchar(255);
   v_DeplId integer;
   v_bIvari smallint;
   v_bIvarni smallint;
   v_prov_id integer;
begin

   rtn := 'rtn';

/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                             TALONARIO Y ESTADO DE EDICION                                                          //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/

   select prov_id,
          doc_id,
          doct_id
   into v_prov_id,
          v_doc_id,
          v_doct_id
   from FacturaCompra
   where fc_id = p_fc_id;

   select * from sp_talonario_get_propuesto(v_doc_id, 0, v_prov_id) into v_ta_mascara, v_ta_propuesto;

   select * from sp_proveedor_get_iva(v_prov_id) into v_bIvari, v_bIvarni;

   select * from sp_doc_factura_compra_editable_get(p_emp_id, p_fc_id, p_us_id) into v_editable, v_edit_msg;

/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                             DEPOSITO                                                                               //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/
    /*Factura de Compra*/
    /*Nota de Debito Compra*/
   if v_doct_id = 2
     or v_doct_id = 10 then
   begin
      select dDestino.depl_nombre,
             depl_id_destino
      into v_DeplNombre,
           v_DeplId
      from FacturaCompra
               join Stock
                on FacturaCompra.st_id = Stock.st_id
               left join DepositoLogico dDestino
                on Stock.depl_id_destino = dDestino.depl_id
      where fc_id = p_fc_id;

      v_DeplNombre := coalesce(v_DeplNombre, '');

      v_DeplId := coalesce(v_DeplId, 0);

      if v_DeplId = 0 then
      begin
         select dDestino.depl_nombre,
                depl_id_destino
           into v_DeplNombre,
                v_DeplId
           from FacturaCompra
                  join RemitoCompra
                   on FacturaCompra.rc_id = RemitoCompra.rc_id
                  join Stock
                   on RemitoCompra.st_id = Stock.st_id
                  left join DepositoLogico dDestino
                   on Stock.depl_id_destino = dDestino.depl_id
            where fc_id = p_fc_id;

      end;
      end if;

   end;
   else
   begin
      /*Nota de Credito Compra*/
      if v_doct_id = 8 then
         select dOrigen.depl_nombre,
                        depl_id_origen
           into v_DeplNombre,
                v_DeplId
           from FacturaCompra
                  join Stock
                   on FacturaCompra.st_id = Stock.st_id
                  left join DepositoLogico dOrigen
                   on Stock.depl_id_origen = dOrigen.depl_id
            where fc_id = p_fc_id;

      end if;

      v_DeplNombre := coalesce(v_DeplNombre, '');

      v_DeplId := coalesce(v_DeplId, 0);

      if v_DeplId = 0 then
      begin
         select dOrigen.depl_nombre,
                depl_id_origen
           into v_DeplNombre,
                v_DeplId
           from FacturaCompra
                  join RemitoCompra
                   on FacturaCompra.rc_id = RemitoCompra.rc_id
                  join Stock
                   on RemitoCompra.st_id = Stock.st_id
                  left join DepositoLogico dOrigen
                   on Stock.depl_id_origen = dOrigen.depl_id
            where fc_id = p_fc_id;

      end;
      end if;

   end;
   end if;

/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                             select                                                                                 //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/
   open rtn for

      select FacturaCompra.*,
             doct_nombre,
             mon_nombre,
             prov_nombre,
             lp_nombre,
             ld_nombre,
             cpg_nombre,
             est_nombre,
             ccos_nombre,
             suc_nombre,
             doc_nombre,
             case
                  when lgj_titulo <> '' then lgj_titulo
                  else lgj_codigo
             end lgj_codigo,
             pOrigen.pro_nombre ProOrigen,
             pDestino.pro_nombre ProDestino,
             v_DeplId depl_id,
             v_DeplNombre depl_nombre,
             v_bIvari bIvaRi,
             v_bIvarni bIvaRni,
             v_editable editable,
             v_edit_msg editMsg,
             v_ta_mascara ta_mascara,
             v_ta_propuesto ta_propuesto,
             doc_muevestock,
             doc_tipofactura
        from FacturaCompra
               join Documento
                on FacturaCompra.doc_id = Documento.doc_id
               join DocumentoTipo
                on FacturaCompra.doct_id = DocumentoTipo.doct_id
               join Moneda
                on FacturaCompra.mon_id = Moneda.mon_id
               join CondicionPago
                on FacturaCompra.cpg_id = CondicionPago.cpg_id
               join Estado
                on FacturaCompra.est_id = Estado.est_id
               join Sucursal
                on FacturaCompra.suc_id = Sucursal.suc_id
               join Proveedor
                on FacturaCompra.prov_id = Proveedor.prov_id
               left join CentroCosto
                on FacturaCompra.ccos_id = CentroCosto.ccos_id
               left join ListaPrecio
                on FacturaCompra.lp_id = ListaPrecio.lp_id
               left join ListaDescuento
                on FacturaCompra.ld_id = ListaDescuento.ld_id
               left join Legajo
                on FacturaCompra.lgj_id = Legajo.lgj_id
               left join Provincia pOrigen
                on FacturaCompra.pro_id_origen = pOrigen.pro_id
               left join Provincia pDestino
                on FacturaCompra.pro_id_destino = pDestino.pro_id
         where fc_id = p_fc_id;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_doc_factura_compra_get_aplic(p_emp_id integer, p_fc_id integer, p_tipo integer, OUT rtn refcursor)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
declare
   v_prov_id integer;
   v_doct_id integer;
begin

   rtn := 'rtn';

   select prov_id,
          doct_id
     into v_prov_id,
          v_doct_id
   from FacturaCompra
   where fc_id = p_fc_id;

   --//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
   --
   -- vencimientos
   --
   --//////////////////////////////////////////////////////////////////////////////////////////////////////////////////

   if p_tipo = 1 then

      open rtn for
         select fcd.fcd_id,
                0 fcp_id,
                fcd.fcd_fecha fecha,
                coalesce(( select sum(fcopg_importe)
                      from FacturaCompraOrdenPago fcc
                      where fcd.fcd_id = fcc.fcd_id ), 0)
              + coalesce(( select sum(fccn1.fcnc_importe)
                      from FacturaCompraNotaCredito fccn1
                      where fcd.fcd_id = fccn1.fcd_id_factura ), 0)
              + coalesce(( select sum(fccn2.fcnc_importe)
                      from FacturaCompraNotaCredito fccn2
                      where fcd.fcd_id = fccn2.fcd_id_notacredito ), 0) importe,
                fcd.fcd_pendiente pendiente
         from FacturaCompraDeuda fcd
         where fcd.fc_id = p_fc_id
         group by fcd.fcd_id,fcd.fcd_fecha,fcd.fcd_pendiente

         union

         select 0 fcd_id,
                fcp_id,
                fcp_fecha fecha,
                fcp_importe importe,
                0 pendiente
         from FacturaCompraPago
         where fc_id = p_fc_id

         order by fecha;

   else

      --////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      --
      -- aplicaciones ordenes de pago y notas de credito
      --
      --////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      if p_tipo = 2 then

         --/////////////////////////////////////////////////////////////////////////////////////////////////////////////
         --
         --  notas de credito select * from documentotipo
         --
         --/////////////////////////////////////////////////////////////////////////////////////////////////////////////
         if v_doct_id = 8 /*nota de credito compra*/ then

            open rtn for
               select fcnc.fcnc_id,
                      fcnc.fcnc_importe Aplicado,
                      fcnc.fcd_id_factura fcd_id2,
                      fcnc.fcd_id_notacredito fcd_id,
                      fcnc.fcp_id_factura fcp_id2,
                      fcnc.fcp_id_notacredito fcp_id,
                      fcdfc.fcd_pendiente pendiente,
                      fcnc.fc_id_factura fc_id,
                      fc.fc_nrodoc nrodoc,
                      d.doc_nombre,
                      /* para el union */
                      0 opg_id,
                      0 fcopg_id,
                      0 fcopg_importeOrigen,
                      0 fcopg_cotizacion,
                      0 opg_pendiente,
                      '' opg_nroDoc,
                      coalesce(fcdfc.fcd_fecha, fcpfc.fcp_fecha) opg_fecha
                 /* fin para el union */
               from FacturaCompraNotaCredito fcnc
               join FacturaCompra fc
                on fcnc.fc_id_factura = fc.fc_id
               left join FacturaCompraPago fcpnc
                on fcnc.fcp_id_notacredito = fcpnc.fcp_id
               left join FacturaCompraDeuda fcdnc
                on fcnc.fcd_id_notacredito = fcdnc.fcd_id
               left join FacturaCompraPago fcpfc
                on fcnc.fcp_id_factura = fcpfc.fcp_id
               left join FacturaCompraDeuda fcdfc
                on fcnc.fcd_id_factura = fcdfc.fcd_id
               left join Documento d
                on fc.doc_id = d.doc_id
               where fcnc.fc_id_notacredito = p_fc_id
               order by nrodoc;

         else

            open rtn for

               --///////////////////////////////////////////////////////////////////////////////////////////////////////
               --
               --  factura y nota de debito
               --
               --///////////////////////////////////////////////////////////////////////////////////////////////////////

               select fcnc_id,
                      fcnc_importe Aplicado,
                      fcd_id_factura fcd_id,
                      fcd_id_notacredito fcd_id2,
                      fcp_id_factura fcp_id,
                      fcp_id_notacredito fcp_id2,
                      fcdnc.fcd_pendiente pendiente,
                      fc_id_notacredito fc_id,
                      fc_nrodoc nrodoc,
                      doc_nombre,
                      /* para el union */
                      0 opg_id,
                      0 fcopg_id,
                      0 fcopg_importeOrigen,
                      0 fcopg_cotizacion,
                      coalesce(fcdnc.fcd_fecha, fcpnc.fcp_fecha) opg_fecha
                      /* fin para el union */
               from FacturaCompraNotaCredito fcnc
               join FacturaCompra fc
                on fcnc.fc_id_notacredito = fc.fc_id
               left join FacturaCompraPago fcpnc
                on fcnc.fcp_id_notacredito = fcpnc.fcp_id
               left join FacturaCompraDeuda fcdnc
                on fcnc.fcd_id_notacredito = fcdnc.fcd_id
               left join FacturaCompraPago fcpfc
                on fcnc.fcp_id_factura = fcpfc.fcp_id
               left join FacturaCompraDeuda fcdfc
                on fcnc.fcd_id_factura = fcdfc.fcd_id
               left join Documento d
                on fc.doc_id = d.doc_id
               where fcnc.fc_id_factura = p_fc_id

               union

               select 
                      /* para el union */
                      0 fcnc_id,
                      fcopg_importe Aplicado,
                      fcc.fcd_id fcd_id,
                      0 fcd_id2,
                      fcc.fcp_id fcp_id,
                      0 fcp_id2,
                      opg_pendiente pendiente,
                      0 fc_id,
                      opg_nroDoc nrodoc,
                      doc_nombre,
                      /* fin para el union */
                      opg.opg_id,
                      fcopg_id,
                      fcopg_importeOrigen,
                      fcopg_cotizacion,
                      opg_fecha
               from FacturaCompraOrdenPago fcc
               join FacturaCompra fc
                on fcc.fc_id = fc.fc_id
               join OrdenPago opg
                on fcc.opg_id = opg.opg_id
               left join FacturaCompraDeuda fcd
                on fcc.fcd_id = fcd.fcd_id
               left join FacturaCompraPago fcp
                on fcc.fcp_id = fcp.fcp_id
               left join Documento d
                on opg.doc_id = d.doc_id
               where fc.fc_id = p_fc_id

               order by nrodoc,
                        opg_fecha;

         end if;

      else

         --/////////////////////////////////////////////////////////////////////////////////////////////////////////////
         --
         -- aplicaciones posibles (ordenes de pago y notas de credito)
         --
         --/////////////////////////////////////////////////////////////////////////////////////////////////////////////
         if p_tipo = 3 then

            --//////////////////////////////////////////////////////////////////////////////////////////////////////////
            --
            --  notas de credito
            --
            --//////////////////////////////////////////////////////////////////////////////////////////////////////////
            if v_doct_id = 8 /*nota de credito compra*/ then

               open rtn for
                  select 0 opg_id,
                         fc.fc_id,
                         fcd.fcd_id,
                         fcd.fcd_fecha Fecha,
                         d.doc_nombre,
                         fc.fc_nrodoc nroDoc,
                         fcd.fcd_pendiente Pendiente
                  from FacturaCompra fc
                  join FacturaCompraDeuda fcd
                   on fc.fc_id = fcd.fc_id
                  join Documento d
                   on fc.doc_id = d.doc_id
                  where fc.prov_id = v_prov_id
                    and fc.est_id <> 7
                    -- empresa
                    and d.emp_id = p_emp_id
                    and fc.doct_id <> 8
                    /* facturas y notas de debito */
                    and not exists ( select fcnc_id
                                     from FacturaCompraNotaCredito
                                     where fcd_id_factura = fcd.fcd_id
                                       and fc_id_notacredito = p_fc_id )
                    and round(fcd.fcd_pendiente, 2) > 0
                  order by nroDoc,
                           fecha;


            else

               open rtn for
                  --////////////////////////////////////////////////////////////////////////////////////////////////////
                  --
                  --  factura y nota de debito
                  --
                  --////////////////////////////////////////////////////////////////////////////////////////////////////
                  select 0 opg_id,
                           fc.fc_id,
                           fcd_id,
                           fcd_fecha Fecha,
                           doc_nombre,
                           fc_nrodoc nroDoc,
                           fcd_pendiente Pendiente
                    from FacturaCompra fc
                           join FacturaCompraDeuda fcd
                            on fc.fc_id = fcd.fc_id
                           join Documento d
                            on fc.doc_id = d.doc_id
                     where fc.prov_id = v_prov_id
                             and fc.est_id <> 7
                             -- empresa
                             and d.emp_id = p_emp_id
                             and fc.doct_id = 8
                             /* notas de credito */
                             and not exists ( select fcd_id
                                              from FacturaCompraNotaCredito
                                              where fcd_id_notacredito = fcd.fcd_id
                                                and fc_id_factura = p_fc_id )
                             and round(fcd_pendiente, 2) > 0
                  union
                  
                  select opg_id,
                         0 fc_id,
                         0 fcd_id,
                         opg_fecha Fecha,
                         doc_nombre,
                         opg_nrodoc nroDoc,
                         opg_pendiente Pendiente
                  from OrdenPago opg
                  join Documento d
                   on opg.doc_id = d.doc_id
                  where prov_id = v_prov_id
                    and opg.est_id <> 7
                    -- empresa
                    and d.emp_id = p_emp_id
                    and not exists ( select opg_id
                                     from FacturaCompraOrdenPago
                                     where opg_id = opg.opg_id
                                       and fc_id = p_fc_id )
                    and round(opg_pendiente, 2) > 0
                  order by nroDoc,
                           fecha;
            end if;


         else

            --//////////////////////////////////////////////////////////////////////////////////////////////////////////
            --
            -- pendientes items (articulos)
            --
            --//////////////////////////////////////////////////////////////////////////////////////////////////////////
            if p_tipo = 4 then

               open rtn for
                  select fci.fci_id,
                         fci.pr_id,
                         p.pr_nombrecompra,
                         fci.fci_pendiente,
                         fci.fci_cantidadaremitir - fci.fci_pendiente aplicado,
                         fci.fci_orden
                  from FacturaCompraItem fci
                           join Producto p
                            on fci.pr_id = p.pr_id
                  where fci.fc_id = p_fc_id
                  order by fci.fci_orden;

            else

               --///////////////////////////////////////////////////////////////////////////////////////////////////////
               --
               -- aplicaciones ordenes y remitos - sp_col ordenfacturaCompra
               --
               --///////////////////////////////////////////////////////////////////////////////////////////////////////
               if p_tipo = 5 then

                  open rtn for
                     select fci.fci_id,
                            fci.pr_id,
                            oci.oc_id,
                            oci.oci_id,
                            ocfc_id,
                            0 rc_id,
                            0 rci_id,
                            0 rcfc_id,
                            ocfc_cantidad Aplicado,
                            doc_nombre,
                            oc_nrodoc nrodoc,
                            oc_fecha Fecha,
                            oci_pendientefac Pendiente,
                            oci_orden orden
                  from FacturaCompraItem fci
                  join OrdenFacturaCompra ocfc
                   on fci.fci_id = ocfc.fci_id
                  join OrdenCompraItem oci
                   on ocfc.oci_id = oci.oci_id
                  join OrdenCompra oc
                   on oci.oc_id = oc.oc_id
                  join Documento doc
                   on oc.doc_id = doc.doc_id
                  where fci.fc_id = p_fc_id

                  union

                  select fci.fci_id,
                         fci.pr_id,
                         0 oc_id,
                         0 oci_id,
                         0 ocfc_id,
                         rci.rc_id,
                         rci.rci_id,
                         rcfc_id,
                         rcfc_cantidad Aplicado,
                         doc_nombre,
                         rc_nrodoc nrodoc,
                         rc_fecha Fecha,
                         rci_pendientefac Pendiente,
                         rci_orden orden
                  from FacturaCompraItem fci
                  join RemitoFacturaCompra rcfc
                   on fci.fci_id = rcfc.fci_id
                  join RemitoCompraItem rci
                   on rcfc.rci_id = rci.rci_id
                  join RemitoCompra rc
                   on rci.rc_id = rc.rc_id
                  join Documento doc
                   on rc.doc_id = doc.doc_id
                  where fci.fc_id = p_fc_id

                  order by Fecha,
                           nrodoc,
                           orden;


               else

                  --////////////////////////////////////////////////////////////////////////////////////////////////////
                  --
                  -- aplicaciones posibles (ordenes y remitos)   sp_col OrdenfacturaCompra
                  --
                  --////////////////////////////////////////////////////////////////////////////////////////////////////
                  if p_tipo = 6 then

                     open rtn for
                        select oci.pr_id,
                               oci.oc_id,
                               oci_id,
                               0 rc_id,
                               0 rci_id,
                               doc_nombre,
                               oc_nrodoc nrodoc,
                               oc_fecha Fecha,
                               oci_pendientefac Pendiente,
                               oci_orden orden
                        from FacturaCompraItem fci
                        join FacturaCompra fc
                         on fci.fc_id = fc.fc_id
                        join OrdenCompra oc
                         on fc.prov_id = oc.prov_id and oc.doct_id = 35 and oc.est_id <> 7
                        join Documento doc
                         on oc.doc_id = doc.doc_id
                        join OrdenCompraItem oci
                         on oc.oc_id = oci.oc_id and fci.pr_id = oci.pr_id
                        where fci.fc_id = p_fc_id
                          -- empresa
                          and doc.emp_id = p_emp_id
                          and oci_pendientefac > 0
                          -- el orden compra item no tiene que estar vinculado
                          -- con ningun item de esta factura
                          --
                          and not exists ( select *
                                           from OrdenFacturaCompra ocfc
                                           join FacturaCompraItem fci
                                            on ocfc.fci_id = fci.fci_id
                                           where oci_id = oci.oci_id
                                             and fc_id = fc.fc_id )
                        union

                        select rci.pr_id,
                               0 oc_id,
                               0 oci_id,
                               rci.rc_id,
                               rci_id,
                               doc_nombre,
                               rc_nrodoc nrodoc,
                               rc_fecha Fecha,
                               rci_pendientefac Pendiente,
                               rci_orden orden
                        from FacturaCompraItem fci
                        join FacturaCompra fc
                         on fci.fc_id = fc.fc_id
                        join RemitoCompra rc
                         on fc.prov_id = rc.prov_id and rc.doct_id = 4 and rc.est_id <> 7
                        join Documento doc
                         on rc.doc_id = doc.doc_id
                        join RemitoCompraItem rci
                         on rc.rc_id = rci.rc_id and fci.pr_id = rci.pr_id
                        where fci.fc_id = p_fc_id
                                 -- empresa
                                 and doc.emp_id = p_emp_id
                                 and rci_pendientefac > 0
                                 -- el remito compra item no tiene que estar vinculado
                                 -- con ningun item de esta factura
                                 --
                                 and not exists ( select *
                                                  from RemitoFacturaCompra rcfc
                                                  join FacturaCompraItem fci
                                                   on rcfc.fci_id = fci.fci_id
                                                  where rci_id = rci.rci_id
                                                    and fc_id = fc.fc_id )

                        order by Fecha,
                                 nrodoc,
                                 orden;

                  end if;
               end if;
            end if;
         end if;
      end if;
   end if;
end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_doc_factura_compra_get_remitos(p_emp_id integer, p_prov_id integer, p_mon_id integer, OUT rtn refcursor)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
declare
   v_doct_remito integer;
begin

   v_doct_remito := 4;

   rtn := 'rtn';

   open rtn for

      select rc.rc_id,
             d.doc_nombre,
             rc.rc_numero,
             rc.rc_nrodoc,
             rc.rc_fecha,
             rc.rc_total,
             rc.rc_pendiente,
             rc.rc_descrip
      from remitocompra rc
      join documento d
        on rc.doc_id = d.doc_id
      join moneda m
        on d.mon_id = m.mon_id
      where rc.prov_id = p_prov_id
        and rc.est_id <> 7 -- anulado
        and rc.doct_id = v_doct_remito
        and d.mon_id = p_mon_id
        and d.emp_id = p_emp_id
        and exists ( select rci_id
                     from remitocompraitem
                     where rc_id = rc.rc_id
                       and rci_pendientefac > 0 )
      order by rc.rc_nrodoc,
               rc.rc_fecha;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_doc_factura_compra_get_remitos_items(p_strids character varying, OUT rtn refcursor)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
declare
   v_timeCode timestamp with time zone;
begin

   v_timeCode := CURRENT_TIMESTAMP;

   perform sp_str_string_to_table(v_timeCode, p_strIds, ',');

   rtn := 'rtn';

   open rtn for
      select rci.rci_id,
             rc.rc_id,
             rc.rc_numero,
             rc.rc_nrodoc,
             p.pr_nombreCompra,
             p.pr_llevanroserie,
             rci.pr_id,
             case
                when prov.prov_catfiscal = 1
                  or prov.prov_catfiscal = 2
                  or prov.prov_catfiscal = 4
                  or prov.prov_catfiscal = 7
                  or prov.prov_catfiscal = 8
                  or prov.prov_catfiscal = 9
                  or prov.prov_catfiscal = 10
                  or prov.prov_catfiscal = 11 then
                   ((rci.rci_neto / rci.rci_cantidad) * (1 + tiri.ti_porcentaje / 100))
                   + (((rci.rci_neto * p.pr_porcinternoc / 100) * coalesce(tiint.ti_porcentaje, 0) / 100) / rci.rci_cantidad)

                -- No inscripto
                --
                when prov.prov_catfiscal = 3
                  or prov.prov_catfiscal = 10 then
                   ((rci.rci_neto / rci.rci_cantidad) * (1 + tiri.ti_porcentaje / 100))
                   + ((rci.rci_neto * tirni.ti_porcentaje / 100) / rci.rci_cantidad)
                   + (((rci.rci_neto * p.pr_porcinternoc / 100) * coalesce(tiint.ti_porcentaje, 0) / 100) / rci.rci_cantidad)

                -- Exentos
                else (rci.rci_neto / rci.rci_cantidad) + (((rci.rci_neto * p.pr_porcinternoc / 100)
                     * coalesce(tiint.ti_porcentaje, 0) / 100) / rci.rci_cantidad)-- Internos

             end rci_precio,
             rci.rci_cantidadaremitir,
             rci.rci_pendientefac,
             case
                when prov.prov_catfiscal = 1
                  or prov.prov_catfiscal = 2
                  or prov.prov_catfiscal = 4
                  or prov.prov_catfiscal = 7
                  or prov.prov_catfiscal = 8
                  or prov.prov_catfiscal = 9
                  or prov.prov_catfiscal = 10
                  or prov.prov_catfiscal = 11 then
                   rci.rci_pendientefac * ((rci.rci_neto / rci.rci_cantidad) * (1 + tiri.ti_porcentaje / 100))
                   + rci.rci_pendientefac * (((rci.rci_neto * p.pr_porcinternoc / 100) * coalesce(tiint.ti_porcentaje, 0) / 100) / rci.rci_cantidad)

                -- No inscripto
                --
                when prov.prov_catfiscal = 3 then
                 rci.rci_pendientefac * ((rci.rci_neto / rci.rci_cantidad) * (1 + tiri.ti_porcentaje / 100))
                 + rci.rci_pendientefac * ((rci.rci_neto * tirni.ti_porcentaje / 100) / rci.rci_cantidad)
                 + rci.rci_pendientefac * (((rci.rci_neto * p.pr_porcinternoc / 100) * coalesce(tiint.ti_porcentaje, 0) / 100) / rci.rci_cantidad)

                -- Exentos
                else rci.rci_pendientefac * (rci.rci_neto / rci.rci_cantidad) + rci.rci_pendientefac
                     * (((rci.rci_neto * p.pr_porcinternoc / 100) * coalesce(tiint.ti_porcentaje, 0) / 100) / rci.rci_cantidad)

             end rci_importe,
             rci.rci_descrip,
             rci.rci_precio rci_precio2,
             rci.rci_precioLista,
             rci.rci_precioUsr,
             rci.rci_descuento,
             rci.ccos_id,
             case prov.prov_catfiscal
                 when 1  then tiri.ti_porcentaje--'Inscripto'
                 when 2  then tiri.ti_porcentaje-- FALTA VERIFICAR QUE SEA ASI --'Exento'
                 when 4  then tiri.ti_porcentaje--'Consumidor Final'
                 when 7  then tiri.ti_porcentaje--'Extranjero Iva'
                 when 8  then tiri.ti_porcentaje--'No responsable'
                 when 9  then tiri.ti_porcentaje-- FALTA VERIFICAR QUE SEA ASI --'No Responsable exento'
                 when 10 then tiri.ti_porcentaje--'No categorizado'
                 when 11 then tiri.ti_porcentaje--'InscriptoM'
                 else 0
             end rci_ivariporc,
             case prov.prov_catfiscal
                 when 3 then tirni.ti_porcentaje--'No categorizado'
                 else 0
             end rci_ivarniporc,
             tiint.ti_porcentaje fci_internosporc,
             p.pr_porcinternoc

        from RemitoCompra rc
        join RemitoCompraItem rci
          on rci.rc_id = rc.rc_id
        join TmpStringToTable
          on rc.rc_id = cast(TmpStringToTable.tmpstr2tbl_campo as integer)
        join Producto p
          on rci.pr_id = p.pr_id
        join Proveedor prov
          on rc.prov_id = prov.prov_id
        join TasaImpositiva tiri
          on p.ti_id_ivaricompra = tiri.ti_id
        left join TasaImpositiva tirni
          on p.ti_id_ivarnicompra = tirni.ti_id
        left join TasaImpositiva tiint
          on p.ti_id_internosc = tiint.ti_id

        where rci.rci_pendientefac > 0
          and tmpstr2tbl_id = v_timeCode

        order by rc.rc_nrodoc,
                 rc.rc_fecha;

end;

$function$;

CREATE OR REPLACE FUNCTION public.sp_doc_factura_compra_nota_credito_save(p_us_id integer, p_fctmp_id integer)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
declare
   v_success integer;
   v_error_msg varchar(5000);
   v_fcnc_id integer;
   v_fcnc_importe decimal(18,6);
   v_fcd_pendiente decimal(18,6);
   v_fcd_importe decimal(18,6);
   v_pago decimal(18,6);
   v_fcd_id integer;
   v_fcp_id integer;
   v_doct_id integer;
   v_fc_id integer;
   v_fcp_fecha date;
   v_fcd_fecha date;
   v_fcd_fecha2 date;
   v_borrar_vinculacion smallint;
   v_fcd_id_factura integer;
   v_fcd_id_notacredito integer;
   v_fcp_id_factura integer;
   v_fcp_id_notacredito integer;
   v_fc_id_factura integer;
   v_fc_id_notacredito integer;
   v_fc_id_aplic integer;
   v_c_fcncaplic varchar(4000);
begin

   v_borrar_vinculacion := 0;

   select fc_id
     into v_fc_id
   from FacturaCompraTMP
   where fcTMP_id = p_fcTMP_id;

   select d.doct_id
     into v_doct_id
   from FacturaCompraTMP tmp
   join Documento d
     on tmp.doc_id = d.doc_id
   where tmp.doc_id = d.doc_id
     and tmp.fcTMP_id = p_fcTMP_id;

/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                                        aplicacion-previa                                                           //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/

   create temporary table tt_FacturaCompraNotaCredito(fc_id integer) on commit drop;

   /* nota de credito */
   if v_doct_id = 8 then

      if exists ( select fcnc_id
                  from FacturaCompraNotaCredito
                  where fc_id_notacredito = v_fc_id ) then

         v_borrar_vinculacion := 1;

         insert into tt_FacturaCompraNotaCredito
           ( fc_id )
           ( select distinct fc_id_factura
             from FacturaCompraNotaCredito fcnc
             where fc_id_notacredito = v_fc_id
               and not exists ( select *
                                from FacturaCompraNotaCreditoTMP
                                where fcTMP_id = p_fcTMP_id
                                  and fcnc_importe <> 0
                                  and fc_id_factura = fcnc.fc_id_factura ) );
      end if;

   else

      /* nota de debito y factura */
      if exists ( select fcnc_id
                  from FacturaCompraNotaCredito
                  where fc_id_factura = v_fc_id ) then

         v_borrar_vinculacion := 1;

         insert into tt_FacturaCompraNotaCredito
           ( fc_id )
           ( select distinct fc_id_notacredito
             from FacturaCompraNotaCredito fcnc
             where fc_id_factura = v_fc_id
               and not exists ( select *
                                from FacturaCompraNotaCreditoTMP
                                where fcTMP_id = p_fcTMP_id
                                  and fcnc_importe <> 0
                                  and fc_id_notacredito = fcnc.fc_id_notacredito ) );

      end if;

   end if;

   SET TRANSACTION READ WRITE;

   -- tengo que eliminar la aplicacion anterior si es que existe
   --
   if coalesce(v_borrar_vinculacion, 0) <> 0 then

      /* nota de credito *//* nota de debito y factura *//* nota de credito *//* nota de debito y factura */

      for v_fcnc_id,v_fcd_id_notacredito,v_fcd_id_factura,v_fcp_id_notacredito,v_fcp_id_factura,v_fcnc_importe in
         select fcnc_id,
                fcd_id_notacredito,
                fcd_id_factura,
                fcp_id_notacredito,
                fcp_id_factura,
                fcnc_importe
         from FacturaCompraNotaCredito
         where ( ( fcd_id_notacredito is not null ) and ( fc_id_notacredito = v_fc_id and v_doct_id = 8 ) )
            or ( ( fcd_id_factura is not null ) and ( fc_id_factura = v_fc_id and v_doct_id <> 8 ) )
            or ( ( fcp_id_notacredito is not null ) and ( fc_id_notacredito = v_fc_id and v_doct_id = 8 ) )
            or ( ( fcp_id_factura is not null ) and ( fc_id_factura = v_fc_id and v_doct_id <> 8 ) )

      loop

         -- actualizo la deuda de la factura
         --
         if v_fcd_id_factura is not null then

            update FacturaCompraDeuda
            set fcd_pendiente = fcd_pendiente + v_fcnc_importe
            where fcd_id = v_fcd_id_factura;

         end if;

            -- actualizo la deuda de la nota de credito
            --
            if v_fcd_id_notacredito is not null then

               update FacturaCompraDeuda
               set fcd_pendiente = fcd_pendiente + v_fcnc_importe
               where fcd_id = v_fcd_id_notacredito;

            end if;

            -- si hay un pago
            --
            if v_fcp_id_factura is not null then

               if exists ( select fcp_id
                           from FacturaCompraPago
                           where fcp_id = v_fcp_id_factura ) then

                  select fc_id,
                         fcp_importe,
                         fcp_fecha
                    into v_fc_id_factura,
                         v_fcd_importe,
                         v_fcp_fecha
                  from FacturaCompraPago
                  where fcp_id = v_fcp_id_factura;

                  select coalesce(sum(fcnc_importe), 0)
                    into v_fcd_pendiente
                  from FacturaCompraNotaCredito fcnc
                  where fcp_id_factura = v_fcp_id_factura
                  and exists ( select *
                               from FacturaCompraNotaCreditoTMP fcnctmp
                               where fcTMP_id = p_fcTMP_id
                                 and ( fcnctmp.fcd_id_notacredito = fcnc.fcd_id_notacredito
                                       or fcnctmp.fcp_id_notacredito = fcnc.fcp_id_notacredito ) );

                  -- creo una deuda
                  --
                  select sp_dbGetNewId('FacturaCompraDeuda', 'fcd_id') into v_fcd_id;

                  select sp_doc_get_fecha2(v_fcp_fecha, 0, null) into v_fcd_fecha2;

                  insert into FacturaCompraDeuda
                         ( fcd_id, fcd_fecha, fcd_fecha2, fcd_importe, fcd_pendiente, fc_id )
                  values ( v_fcd_id, v_fcp_fecha, v_fcd_fecha2, v_fcd_importe, v_fcd_pendiente, v_fc_id_factura );

                  -- actualizo la tabla de vinculacion para que apunte a la deuda
                  --
                  update FacturaCompraOrdenPago
                     set fcd_id = v_fcd_id,
                         fcp_id = null
                  where fcp_id = v_fcp_id_factura;

                  -- actualizo la tabla de vinculacion para que apunte a la deuda
                  --
                  update FacturaCompraNotaCredito
                     set fcd_id_factura = v_fcd_id,
                         fcp_id_factura = null
                  where fcp_id_factura = v_fcp_id_factura;

                  -- actualizo la temporal para que apunte a la deuda
                  --
                  update FacturaCompraNotaCreditoTMP
                     set fcd_id_factura = v_fcd_id
                  where fcp_id_factura = v_fcp_id_factura;

                  -- actualizo la temporal para que apunte a la deuda
                  --
                  update FacturaCompraOrdenPagoTMP
                     set fcp_id = null,
                         fcd_id = v_fcd_id
                  where fcp_id = v_fcp_id_factura;

                  -- borro el pago
                  --
                  delete from FacturaCompraPago where fcp_id = v_fcp_id_factura;

               end if;

            end if;

            if v_fcp_id_notacredito is not null then

               if exists ( select fcp_id
                           from FacturaCompraPago
                           where fcp_id = v_fcp_id_notacredito ) then

                  select fc_id,
                         fcp_importe,
                         fcp_fecha
                    into v_fc_id_notacredito,
                         v_fcd_importe,
                         v_fcp_fecha
                  from FacturaCompraPago
                  where fcp_id = v_fcp_id_notacredito;


                  select coalesce(sum(fcnc_importe), 0)
                    into v_fcd_pendiente
                  from FacturaCompraNotaCredito fcnc
                  where fcp_id_notacredito = v_fcp_id_notacredito
                    and exists ( select *
                                 from FacturaCompraNotaCreditoTMP fcnctmp
                                 where fcTMP_id = p_fcTMP_id
                                   and ( fcnctmp.fcd_id_factura = fcnc.fcd_id_factura
                                        or fcnctmp.fcp_id_factura = fcnc.fcp_id_factura ) );

                  -- creo una deuda
                  --
                  select sp_dbGetNewId('FacturaCompraDeuda', 'fcd_id') into v_fcd_id;

                  select sp_doc_get_fecha2(v_fcp_fecha, 0, null) into v_fcd_fecha2;

                  insert into FacturaCompraDeuda
                         ( fcd_id, fcd_fecha, fcd_fecha2, fcd_importe, fcd_pendiente, fc_id )
                  values ( v_fcd_id, v_fcp_fecha, v_fcd_fecha2, v_fcd_importe, v_fcd_pendiente, v_fc_id_notacredito );

                  -- actualizo la tabla de vinculacion para que apunte a la deuda
                  --
                  update FacturaCompraOrdenPago
                     set fcd_id = v_fcd_id,
                         fcp_id = null
                  where fcp_id = v_fcp_id_notacredito;

                  -- a ctualizo la tabla de vinculacion para que apunte a la deuda
                  --
                  update FacturaCompraNotaCredito
                     set fcd_id_notacredito = v_fcd_id,
                         fcp_id_notacredito = null
                  where fcp_id_notacredito = v_fcp_id_notacredito;

                  -- actualizo la temporal para que apunte a la deuda
                  --
                  update FacturaCompraNotaCreditoTMP
                     set fcd_id_notacredito = v_fcd_id
                  where fcp_id_notacredito = v_fcp_id_notacredito;

                  -- borro el pago
                  --
                  delete from FacturaCompraPago where fcp_id = v_fcp_id_notacredito;

               end if;

            end if;

            delete from FacturaCompraNotaCredito where fcnc_id = v_fcnc_id;

      end loop;


      delete from FacturaCompraNotaCredito
      where ( fc_id_notacredito = v_fc_id and v_doct_id = 8 )/* nota de credito*/
         or ( fc_id_factura = v_fc_id and v_doct_id <> 8 );/* nota de debito y Factura*/

   end if;

   for v_fcnc_importe,v_fc_id_factura,v_fc_id_notacredito,v_fcd_id_factura,
        v_fcd_id_notacredito,v_fcp_id_factura,v_fcp_id_notacredito in 
      select fcnc_importe,
             fc_id_factura,
             fc_id_notacredito,
             fcd_id_factura,
             fcd_id_notacredito,
             fcp_id_factura,
             fcp_id_notacredito
      from FacturaCompraNotaCreditoTMP
      where fcTMP_id = p_fcTMP_id
        and fcnc_importe <> 0
   loop

   /*
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
   //                                                                                                               //
   //                                        factura                                                                //
   //                                                                                                               //
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
   */
         -- si tengo una factura
         --
         if v_fcd_id_factura is not null then

            -- obtengo el monto de la deuda
            --
            select fcd_pendiente
              into v_fcd_pendiente
            from FacturaCompraDeuda
            where fcd_id = v_fcd_id_factura;

            -- si el pago no cancela el pendiente
            --
            if v_fcd_pendiente - v_fcnc_importe >= 0.01 then

               -- no hay pago
               v_fcp_id := null;

            -- si el pago cancela la deuda cargo un nuevo pago
            -- y luego voy a borrar la deuda
            --
            else

               -- acumulo en el pago toda la deuda para pasar de la tabla FacturaCompraDeuda a FacturaCompraPago
               --
               v_pago := 0;


               select fcd_fecha,
                      fcd_importe
                 into v_fcd_fecha,
                      v_pago
               from FacturaCompraDeuda
               where fcd_id = v_fcd_id_factura;

               select sp_dbGetNewId('FacturaCompraPago', 'fcp_id') into v_fcp_id;

               insert into FacturaCompraPago
                      ( fcp_id, fcp_fecha, fcp_importe, fc_id )
               values ( v_fcp_id, v_fcd_fecha, v_pago, v_fc_id_factura );

               v_fcp_id_factura := v_fcp_id;

            end if;

            -- si hay pago borro la/s deudas
            --
            if coalesce(v_fcp_id, 0) <> 0 then
               
               -- actualizo la tabla de vinculacion para que apunte al pago
               --
               update FacturaCompraOrdenPago
                  set fcd_id = null,
                      fcp_id = v_fcp_id
               where fcd_id = v_fcd_id_factura;

               -- actualizo la tabla de vinculacion para que apunte a la deuda
               --
               update FacturaCompraNotaCredito
                  set fcd_id_factura = null,
                      fcp_id_factura = v_fcp_id
               where fcd_id_factura = v_fcd_id_factura;

               -- actualizo la temporal para que apunte a la deuda
               --
               update FacturaCompraNotaCreditoTMP
                  set fcd_id_factura = null,
                      fcp_id_factura = v_fcp_id
               where fcd_id_factura = v_fcd_id_factura;

               -- actualizo la temporal para que apunte a la deuda
               --
               update FacturaCompraOrdenPagoTMP
                  set fcd_id = null,
                      fcp_id = v_fcp_id
               where fcd_id = v_fcd_id_factura;

               delete from FacturaCompraDeuda where fc_id = v_fc_id_factura and fcd_id = v_fcd_id_factura;

               v_fcd_id_factura := null;

            else

               v_fcp_id_factura := null;

            end if;

         end if;

   /*
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
   //                                                                                                               //
   //                                        nota de credito                                                        //
   //                                                                                                               //
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
   */
         -- si tengo una factura
         --
         if v_fcd_id_notacredito is not null then

            -- obtengo el monto de la deuda
            --
            select fcd_pendiente
              into v_fcd_pendiente
            from FacturaCompraDeuda
            where fcd_id = v_fcd_id_notacredito;

            -- si el pago no cancela el pendiente
            --
            if v_fcd_pendiente - v_fcnc_importe >= 0.01 then

               -- no hay pago
               --
               v_fcp_id := null;

            -- si el pago cancela la deuda cargo un nuevo pago
            -- y luego voy a borrar la deuda
            --
            else

               v_pago := 0;

               select fcd_fecha,
                      fcd_importe
                 into v_fcd_fecha,
                      v_pago
               from FacturaCompraDeuda
               where fcd_id = v_fcd_id_notacredito;

               select sp_dbGetNewId('FacturaCompraPago', 'fcp_id') into v_fcp_id;

               insert into FacturaCompraPago
                      ( fcp_id, fcp_fecha, fcp_importe, fc_id )
               values ( v_fcp_id, v_fcd_fecha, v_pago, v_fc_id_notacredito );

               v_fcp_id_notacredito := v_fcp_id;

            end if;

            -- si hay pago borro la/s deudas
            --
            if coalesce(v_fcp_id, 0) <> 0 then

               -- actualizo la tabla de vinculacion para que apunte al pago
               --
               update FacturaCompraOrdenPago
                  set fcd_id = null,
                      fcp_id = v_fcp_id
               where fcd_id = v_fcd_id_notacredito;

               -- actualizo la tabla de vinculacion para que apunte a la deuda
               --
               update FacturaCompraNotaCredito
                  set fcd_id_notacredito = null,
                      fcp_id_notacredito = v_fcp_id
               where fcd_id_notacredito = v_fcd_id_notacredito;

               -- actualizo la temporal para que apunte a la deuda
               --
               update FacturaCompraNotaCreditoTMP
                  set fcd_id_notacredito = null,
                      fcp_id_notacredito = v_fcp_id
               where fcd_id_notacredito = v_fcd_id_notacredito;

               delete from FacturaCompraDeuda where fc_id = v_fc_id_notacredito and fcd_id = v_fcd_id_notacredito;

               v_fcd_id_notacredito := null;

            else

               v_fcp_id_notacredito := null;

            end if;

         end if;

   /*
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
   //                                                                                                               //
   //                                        vinculacion                                                            //
   //                                                                                                               //
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
   */
         select sp_dbGetNewId('FacturaCompraNotaCredito', 'fcnc_id') into v_fcnc_id;

         insert into FacturaCompraNotaCredito
                ( fcnc_id, fcnc_importe, fcd_id_factura, fcd_id_notacredito, fcp_id_factura, fcp_id_notacredito, fc_id_factura, fc_id_notacredito )
         values ( v_fcnc_id, v_fcnc_importe, v_fcd_id_factura, v_fcd_id_notacredito, v_fcp_id_factura, v_fcp_id_notacredito, v_fc_id_factura, v_fc_id_notacredito );

         -- si no hay un pago actualizo la deuda
         --
         if coalesce(v_fcp_id_factura, 0) = 0 then

            update FacturaCompraDeuda
               set fcd_pendiente = fcd_pendiente - v_fcnc_importe
            where fcd_id = v_fcd_id_factura;

         end if;

         -- si no hay un pago actualizo la deuda
         --
         if coalesce(v_fcp_id_notacredito, 0) = 0 then

            update FacturaCompraDeuda
               set fcd_pendiente = fcd_pendiente - v_fcnc_importe
            where fcd_id = v_fcd_id_notacredito;

         end if;

   end loop;

   /* nota de credito*/
   if v_doct_id = 8 then

      v_c_fcncaplic := 'select fc_id from tt_FacturaCompraNotaCredito
                        union
                        select fc_id_factura from FacturaCompraNotaCredito where fc_id_notacredito = $1';

   else

      v_c_fcncaplic := 'select fc_id from tt_FacturaCompraNotaCredito
                        union
                        select fc_id_notacredito from FacturaCompraNotaCredito where fc_id_factura = $1';

   end if;


   for v_fc_id_aplic in
      execute v_c_fcncaplic using v_fc_id
   loop

      -- actualizo la deuda de la factura
      --
      perform sp_doc_factura_compra_set_pendiente(v_fc_id_aplic);

      perform sp_doc_factura_compra_set_credito(v_fc_id_aplic);

      perform sp_doc_factura_compra_set_estado(v_fc_id_aplic);

      --/////////////////////////////////////////////////////////////////////////////////////////////////
      --
      -- validaciones
      --

      -- vtos
      --
      select * from sp_auditoria_vto_check_doc_fc(v_fc_id_aplic) into v_success, v_error_msg;
      if coalesce(v_success, 0) = 0 then
         raise exception '%', v_error_msg;
      end if;


      -- credito
      --
      select * from sp_auditoria_credito_check_doc_fc(v_fc_id_aplic) into v_success, v_error_msg;
      if coalesce(v_success, 0) = 0 then
         raise exception '%', v_error_msg;
      end if;

      --
      --/////////////////////////////////////////////////////////////////////////////////////////////////

   end loop;

   -- actualizo la deuda de la factura
   --
   perform sp_doc_factura_compra_set_pendiente(v_fc_id);

/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                                        temporales                                                                  //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/
   delete from FacturaCompraNotaCreditoTMP where fcTMP_id = p_fcTMP_id;
   delete from FacturaCompraTMP where fcTMP_id = p_fcTMP_id;

   return;

exception
   when others then

     raise exception 'Ha ocurrido un error al grabar la aplicación de la factura de compra. sp_doc_factura_compra_nota_credito_save_aplic. %. %.',
                      sqlstate, sqlerrm;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_doc_factura_compra_orden_pago_save(p_us_id integer, p_fc_id integer, OUT p_success integer, OUT p_error_msg character varying)
 RETURNS record
 LANGUAGE plpgsql
AS $function$
declare
   v_prov_id integer;
   v_opg_id integer;
   v_as_id integer;
   v_suc_id integer;
   v_cpg_id integer;
   v_ccos_id integer;
   v_lgj_id integer;
   v_fc_fechaVto date;
   v_fc_fechaiva date;
   v_fc_nrodoc varchar(50);
   v_cpg_tipo smallint;
   v_cueg_id_cpg integer;
   v_doc_id_opg integer;
   v_cpg_asientoXVto smallint;
   v_cue_id_cpg integer;
   v_modifico integer;
   v_min_ccos_id integer;
   v_max_ccos_id integer;

   -- la cuenta del acreedor puede ser mas de una cuando
   -- se utilizan tipos de operaciones distintas en los renglones
   -- de una factura. Como esto es casi imposible que suceda
   -- no nos vamos a complicar programando este tipo de casos
   -- sino que controlamos que no se use mas de un tipo de operacion
   -- y si hay mas de una descartamos la factura informandole que
   -- no podra grabarla con la condicion este tipo de condicion de pago
   -- debera usar una condicion de pago normal y generar la op manualmente
   --
   v_to_count integer;

   v_opgTMP_id integer;
   v_opg_fecha date;
   v_opg_total decimal(18,6);
   v_opgiTMP_id integer;
   v_cue_id_acreedor integer;
   v_fcopgTMP_id integer;
   v_fcd_id integer;
   v_fcd_importe decimal(18,6);

   rslt row_result;

begin

   /*
				si la condicion de pago de la factura es de tipo [Debito Automatico] o [Fondo Fijo]
    debo generar una orden de pago automaticamente.

				para esto tengo que sacar de la condicion de pago el documento y la cuenta contable
    de los fondos pasando por la cuenta grupo asociada a dicha condicion de pago.
	 */

   select fc_fechaVto,
          fc_fechaiva,
          fc_nrodoc,
          prov_id,
          cpg_id,
          as_id,
          suc_id,
          ccos_id,
          lgj_id,
          modifico
     into v_fc_fechaVto,
          v_fc_fechaiva,
          v_fc_nrodoc,
          v_prov_id,
          v_cpg_id,
          v_as_id,
          v_suc_id,
          v_ccos_id,
          v_lgj_id,
          v_modifico
   from FacturaCompra
   where fc_id = p_fc_id;

   if v_ccos_id is null then

      select min(ccos_id),
             max(ccos_id)
        into v_min_ccos_id,
             v_max_ccos_id
      from FacturaCompraItem
      where fc_id = p_fc_id
        and ccos_id is not null;

      if v_min_ccos_id = v_max_ccos_id then

         select ccos_id
           into v_ccos_id
         from FacturaCompraItem
         where fc_id = p_fc_id
           and ccos_id is not null;

      end if;

   end if;

   select cpg_tipo,
          cueg_id,
          doc_id,
          cpg_asientoXVto
     into v_cpg_tipo,
          v_cueg_id_cpg,
          v_doc_id_opg,
          v_cpg_asientoXVto
   from CondicionPago
   where cpg_id = v_cpg_id;

   select case
             when provcueg.cue_id is not null then provcueg.cue_id
             else cueg.cue_id
          end
     into v_cue_id_cpg
   from CuentaGrupo cueg
   left join ProveedorCuentaGrupo provcueg
          on cueg.cueg_id = provcueg.cueg_id
   where cueg.cueg_id = v_cueg_id_cpg;

   if v_cpg_tipo in ( 2 /* debito automatico */, 3 /* fondo fijo */ ) then

      select count(distinct to_id)
        into v_to_count
      from FacturaCompraItem
      where fc_id = p_fc_id;

      if v_to_count = 1 then

         select sp_dbGetNewId('OrdenPagoTMP', 'opgTMP_id') into v_opgTMP_id;

         if v_cpg_asientoXVto <> 0 then

            v_opg_fecha := v_fc_fechaVto;

         else

            v_opg_fecha := v_fc_fechaiva;

         end if;

         select sum(fcd_importe)
           into v_opg_total
         from FacturaCompraDeuda
         where fc_id = p_fc_id;


         insert into OrdenPagoTMP( opgTMP_id, opg_id, opg_numero, opg_nrodoc, opg_descrip, opg_fecha, opg_neto,
                                   opg_otros, opg_total, opg_pendiente, opg_cotizacion, opg_grabarAsiento, opg_firmado,
                                   est_id, suc_id, prov_id, doc_id, ccos_id, lgj_id, modifico )
         values ( v_opgTMP_id, 0, 0, '', 'Generada autom ticamente por factura ' || v_fc_nrodoc, v_opg_fecha, v_opg_total,
                  0, v_opg_total, v_opg_total, 0, 1, 0, 1, v_suc_id, v_prov_id, v_doc_id_opg, v_ccos_id, v_lgj_id,
                  v_modifico );

         select sp_dbGetNewId('OrdenPagoItemTMP', 'opgiTMP_id') into v_opgiTMP_id;

         insert into OrdenPagoItemTMP( opgTMP_id, opgiTMP_id, opgi_id, opgi_orden, opgi_otroTipo, opgi_importe,
                                       opgi_importeOrigen, opgi_tipo, ccos_id, cue_id )
         values (
                v_opgTMP_id
              , v_opgiTMP_id
              , 0  --opgi_id
              , 1  --opgi_orden
              , 2  --opgi_otroTipo
              , v_opg_total  --opgi_importe
              , 0  --opgi_importeOrigen
              , 2 --opgi_tipo
              , v_ccos_id
              , v_cue_id_cpg );

         -- si ya genere el asiento obtengo la cuenta
         -- desde el asientoitem de tipo 2 (acreedor)
         --
         if v_as_id is not null then

            select min(cue_id)
              into v_cue_id_acreedor
            from AsientoItem
            where as_id = v_as_id
              and asi_tipo = 2;

         -- si aun no se grabo el asiento lo obtengo del
         -- grupo de cuentas
         --
         else

            select case
                      when provcueg.cue_id is not null then provcueg.cue_id
                      else cueg.cue_id
                   end
              into v_cue_id_acreedor
            from Documento doc
            join CuentaGrupo cueg
              on doc.cueg_id = cueg.cueg_id
            left join ProveedorCuentaGrupo provcueg
                   on cueg.cueg_id = provcueg.cueg_id
            where doc.doc_id = v_doc_id_opg;

         end if;

         select sp_dbGetNewId('OrdenPagoItemTMP', 'opgiTMP_id') into v_opgiTMP_id;

         insert into OrdenPagoItemTMP( opgTMP_id, opgiTMP_id, opgi_id, opgi_orden, opgi_otroTipo, opgi_importe,
                                       opgi_importeOrigen, opgi_tipo, ccos_id, cue_id )
         values (
                v_opgTMP_id
              , v_opgiTMP_id
              , 0  --opgi_id
              , 2  --opgi_orden
              , 1  --opgi_otroTipo
              , v_opg_total  --opgi_importe
              , 0  --opgi_importeOrigen
              , 5  --opgi_tipo
              , v_ccos_id
              , v_cue_id_acreedor );

         for v_fcd_id,v_fcd_importe in
            select fcd_id,
                   fcd_importe
            from FacturaCompraDeuda
            where fc_id = p_fc_id
         loop

               select sp_dbGetNewId('FacturaCompraOrdenPagoTMP', 'fcopgTMP_id') into v_fcopgTMP_id;

               insert into FacturaCompraOrdenPagoTMP( opgTMP_id, fcopgTMP_id, fcopg_id, fcopg_importe, fcopg_importeOrigen,
                                                      fcopg_cotizacion, fc_id, fcd_id, fcp_id, opg_id )
               values ( v_opgTMP_id, v_fcopgTMP_id, 0, v_fcd_importe, 0, 0, p_fc_id, v_fcd_id, null, 0 );

         end loop;

         p_success := 0;

         for rslt in
            select * from sp_doc_orden_pago_save(p_us_id, v_opgTMP_id, 1 /* no error */, p_fc_id)
         loop
            if rslt.type = 'ERROR' then
               p_error_msg := '@@ERROR_SP:' || rslt.message;
               exit;
            else
               if rslt.type = 'opg_id' then
                  v_opg_id = rslt.id;
                  p_success := 1;
                  exit;
               end if;
            end if;
         end loop;

         if p_success <> 0 then

            update OrdenPago set fc_id = p_fc_id where opg_id = v_opg_id;
            update FacturaCompra set opg_id = v_opg_id where fc_id = p_fc_id;

         end if;

      else

         p_error_msg := '@@ERROR_SP:Las facturas con mas de un tipo de operación comercial no pueden utilizar esta condicion de pago. Seleccione una condicion de pago de tipo general y genere la Orden de Pago manualmente.';
         p_success := 0;

      end if;

   else

      p_success := 1;

   end if;

exception
   when others then

   raise exception 'Ha ocurrido un error al guardar la orden de pago asociada a la factura de compra. sp_doc_factura_compra_orden_pago_save. %. %.',
                   sqlstate, sqlerrm;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_doc_factura_compra_save(p_us_id integer, p_fctmp_id integer)
 RETURNS SETOF row_result
 LANGUAGE plpgsql
AS $function$
declare
   rtn row_result;

   v_success smallint;
   v_error smallint;
   v_error_msg varchar(5000);   
   v_cfg_valor varchar(5000);
   
   v_is_new smallint;
   
   v_fc_id integer;
   v_fci_id integer;
   
   v_orden smallint;
   v_doct_id integer;
   v_cpg_id integer;
   v_doc_mueveStock smallint;
   v_depl_id integer;
   v_mon_id integer;
   v_ta_id integer;
   v_doc_id integer;
   v_prov_id integer;
   v_est_id integer;
   v_suc_id integer;
   v_lp_id integer;
   v_ld_id integer;
   v_ccos_id integer;
   v_lgj_id integer;
   v_pro_id_origen integer;
   v_pro_id_destino integer;
   
   v_fc_total decimal(18,6);
   v_fc_fecha date;
   v_fc_fechaVto date;
   v_fc_fechaiva date;
   v_fc_descuento1 decimal(18,6);
   v_fc_descuento2 decimal(18,6);
   v_fc_totalotros decimal(18,6);
   v_fc_totalpercepciones decimal(18,6);
   v_fc_nrodoc varchar(50);
   v_fc_numero integer;
   v_fc_descrip varchar(5000);
   v_fc_fechaentrega date;
   v_fc_neto decimal(18,6);
   v_fc_ivari decimal(18,6);
   v_fc_ivarni decimal(18,6);
   v_fc_internos decimal(18,6);
   v_fc_subtotal decimal(18,6);
   v_fc_totalorigen decimal(18,6);
   v_fc_cotizacion decimal(18,6);
   v_fc_cotizacionProv decimal(18,6);
   v_fc_pendiente decimal(18,6);
   v_fc_importedesc1 decimal(18,6);
   v_fc_importedesc2 decimal(18,6);
   v_fc_grabarasiento smallint;
   v_fc_cai varchar(100);
   v_fc_tipoComprobante smallint;

   v_creado date;
   v_modificado date;
   v_modifico integer;

   v_fciTMP_id integer;
   v_fci_orden smallint;
   v_fci_cantidad decimal(18,6);
   v_fci_cantidadaremitir decimal(18,6);
   v_fci_pendiente decimal(18,6);
   v_fci_descrip varchar(5000);
   v_fci_precio decimal(18,6);
   v_fci_precioUsr decimal(18,6);
   v_fci_precioLista decimal(18,6);
   v_fci_descuento varchar(100);
   v_fci_neto decimal(18,6);
   v_fci_ivari decimal(18,6);
   v_fci_ivarni decimal(18,6);
   v_fci_ivariporc decimal(18,6);
   v_fci_ivarniporc decimal(18,6);
   v_fci_internos decimal(18,6);
   v_fci_internosporc decimal(18,6);
   v_fci_importe decimal(18,6);
   v_fci_importeorigen decimal(18,6);

   v_pr_id integer;
   v_stl_id integer;
   v_to_id integer;

   v_cue_id integer;
   v_cue_id_ivari integer;
   v_cue_id_ivarni integer;

   v_opg_id integer;

   v_fcot_id integer;
   v_fcot_orden smallint;
   v_fcot_debe decimal(18,6);
   v_fcot_haber decimal(18,6);
   v_fcot_origen decimal(18,6);
   v_fcot_descrip varchar(255);

   v_fcperc_id integer;
   v_fcperc_orden smallint;
   v_fcperc_base decimal(18,6);
   v_fcperc_porcentaje decimal(18,6);
   v_fcperc_importe decimal(18,6);
   v_fcperc_origen decimal(18,6);
   v_fcperc_descrip varchar(255);

   v_perc_id integer;

   v_fclgj_id integer;
   v_fclgj_orden smallint;
   v_fclgj_importe decimal(18,6);
   v_fclgj_importeorigen decimal(18,6);
   v_fclgj_descrip varchar(255);
   v_fc_totaldeuda decimal(18,6);

   v_ta_propuesto smallint;
   v_ta_tipo smallint;
   v_ta_nrodoc varchar(100);
   dummyChar varchar;

   v_emp_id integer;
begin

   -- si no existe chau
   --
   if not exists ( select fcTMP_id
                   from FacturaCompraTMP
                   where fcTMP_id = p_fcTMP_id ) then

      return query select * from result_failed();
      return;

   end if;

   select sp_cfg_getValor('Compras-General', 'Exigir Centro Costo') into v_cfg_valor;

   v_cfg_valor := coalesce(v_cfg_valor, '0');

   if to_number(v_cfg_valor) <> 0 then

      if exists ( select ccos_id
                  from FacturaCompraTMP
                  where ccos_id is null
                   and fcTMP_id = p_fcTMP_id ) then


         if exists ( select ccos_id
                     from FacturaCompraItemTMP
                     where ccos_id is null
                       and fcTMP_id = p_fcTMP_id ) then

            raise exception '@@ERROR_SP: %',
               'Debe indicar un centro de costo en cada item o un centro de costo en la cabecera del documento.';

         end if;

         if exists ( select ccos_id
                     from FacturaCompraOtroTMP
                     where ccos_id is null
                       and fcTMP_id = p_fcTMP_id ) then

            raise exception '@@ERROR_SP: %',
               'Debe indicar un centro de costo en cada item de la solapa "Otros" o un centro de costo en la cabecera del documento.';

         end if;

         if exists ( select ccos_id
                     from FacturaCompraPercepcionTMP
                     where ccos_id is null
                       and fcTMP_id = p_fcTMP_id ) then

            raise exception '@@ERROR_SP: %',
               'Debe indicar un centro de costo en cada item de percepciones o un centro de costo en la cabecera del documento.';

         end if;

      end if;

   end if;

   v_error_msg := '';

   select * from sp_doc_fac_cpra_validate_deposito(p_fcTMP_id) into v_success, v_error_msg;
   if coalesce(v_success, 0) = 0 then
      raise exception '%', v_error_msg;
   end if;

   select fc_id
     into v_fc_id
   from FacturaCompraTMP
   where fcTMP_id = p_fcTMP_id;

   v_fc_id := coalesce(v_fc_id, 0);

   select mon_id,
          case prov_catfiscal
              when 1  then ta_id_inscripto    --'Inscripto'
              when 2  then ta_id_final        --'Exento'
              when 3  then ta_id_final        --'No inscripto'
              when 4  then ta_id_final        --'Consumidor Final'
              when 5  then ta_id_externo      --'Extranjero'
              when 6  then ta_id_final        --'Mono Tributo'
              when 7  then ta_id_externo      --'Extranjero Iva'
              when 8  then ta_id_final        --'No responsable'
              when 9  then ta_id_final        --'No Responsable exento'
              when 10 then ta_id_final        --'No categorizado'
              when 11 then ta_id_inscriptoM   --'Inscripto M'
              else -1                         --'Sin categorizar'
          end,
          Documento.doct_id,
          FacturaCompraTMP.cpg_id,
          FacturaCompraTMP.fc_total,
          FacturaCompraTMP.fc_fecha,
          FacturaCompraTMP.fc_fechaVto,
          FacturaCompraTMP.fc_fechaIva,
          FacturaCompraTMP.depl_id,
          Documento.doc_muevestock,
          FacturaCompraTMP.fc_descuento1,
          FacturaCompraTMP.fc_descuento2,
          fc_totalotros,
          fc_totalpercepciones,
          fc_nrodoc,
          FacturaCompraTMP.doc_id,
          FacturaCompraTMP.prov_id,
          FacturaCompraTMP.est_id
     into v_mon_id,
          v_ta_id,
          v_doct_id,
          v_cpg_id,
          v_fc_total,
          v_fc_fecha,
          v_fc_fechaVto,
          v_fc_fechaiva,
          v_depl_id,
          v_doc_mueveStock,
          v_fc_descuento1,
          v_fc_descuento2,
          v_fc_totalotros,
          v_fc_totalpercepciones,
          v_fc_nrodoc,
          v_doc_id,
          v_prov_id,
          v_est_id

   from FacturaCompraTMP
   join Documento
     on FacturaCompraTMP.doc_id = Documento.doc_id
   join Proveedor
     on FacturaCompraTMP.prov_id = Proveedor.prov_id
   where fcTMP_id = p_fcTMP_id;

   if v_ta_id = -1 then
      return query select * from result_error('El proveedor no esta categorizado. Debe indicar en que categoria fiscal se encuentra el proveedor.')
      return;
   end if;

   set TRANSACTION READ WRITE;

/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                                        insert                                                                      //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/
   if v_fc_id = 0 then

      v_is_new := -1;

      select sp_dbGetNewId('FacturaCompra', 'fc_id') into v_fc_id;
      select sp_dbGetNewId('FacturaCompra', 'fc_numero') into v_fc_numero;

      select * from sp_talonario_get_propuesto(v_doc_id, 0, v_prov_id) into dummyChar, v_ta_propuesto, v_ta_id, v_ta_tipo;

      if v_ta_propuesto = 0 then
         if v_ta_tipo = 3 then /*Auto Impresor*/

            select sp_talonario_get_next_number(v_ta_id) into v_ta_nrodoc;

            -- con esto evitamos que dos tomen el mismo numero
            --
            perform sp_talonario_set(v_ta_id, v_ta_nrodoc);

            v_fc_nrodoc := v_ta_nrodoc;

         end if;
      end if;

      insert into FacturaCompra
        ( fc_id, fc_numero, fc_nrodoc, fc_descrip, fc_fecha, fc_fechaentrega, fc_fechaVto, fc_fechaiva, fc_neto,
          fc_ivari, fc_ivarni, fc_internos, fc_total, fc_totalorigen, fc_subtotal, fc_totalotros,
          fc_totalpercepciones, fc_descuento1, fc_descuento2, fc_importedesc1, fc_importedesc2, fc_grabarasiento,
          fc_cotizacion, fc_cotizacionprov, fc_cai, fc_tipocomprobante, mon_id, est_id, suc_id, prov_id, doc_id,
          doct_id, lp_id, ld_id, cpg_id, ccos_id, lgj_id, pro_id_origen, pro_id_destino, modifico )
        ( select v_fc_id,
                 v_fc_numero,
                 v_fc_nrodoc,
                 fc_descrip,
                 fc_fecha,
                 fc_fechaentrega,
                 fc_fechaVto,
                 fc_fechaiva,
                 fc_neto,
                 fc_ivari,
                 fc_ivarni,
                 fc_internos,
                 fc_total,
                 fc_totalorigen,
                 fc_subtotal,
                 fc_totalotros,
                 fc_totalpercepciones,
                 fc_descuento1,
                 fc_descuento2,
                 fc_importedesc1,
                 fc_importedesc2,
                 fc_grabarasiento,
                 fc_cotizacion,
                 fc_cotizacionProv,
                 fc_cai,
                 fc_tipocomprobante,
                 v_mon_id,
                 est_id,
                 suc_id,
                 prov_id,
                 doc_id,
                 v_doct_id,
                 lp_id,
                 ld_id,
                 cpg_id,
                 ccos_id,
                 lgj_id,
                 pro_id_origen,
                 pro_id_destino,
                 modifico
          from FacturaCompraTMP
          where fcTMP_id = p_fcTMP_id );

      select doc_id,
             fc_nrodoc
        into v_doc_id,
             v_fc_nrodoc
      from FacturaCompra
      where fc_id = v_fc_id;
/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                                        update                                                                      //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/
   else

      v_is_new := 0;

      select fc_id,
             fc_nrodoc,
             fc_descrip,
             fc_fechaentrega,
             fc_neto,
             fc_ivari,
             fc_ivarni,
             fc_internos,
             fc_totalorigen,
             fc_cotizacion,
             fc_cotizacionProv,
             fc_descuento1,
             fc_descuento2,
             fc_subtotal,
             fc_importedesc1,
             fc_importedesc2,
             fc_grabarasiento,
             fc_cai,
             fc_tipocomprobante,
             est_id,
             suc_id,
             prov_id,
             doc_id,
             lp_id,
             ld_id,
             ccos_id,
             lgj_id,
             pro_id_origen,
             pro_id_destino,
             modifico,
             modificado
        into v_fc_id,
             v_fc_nrodoc,
             v_fc_descrip,
             v_fc_fechaentrega,
             v_fc_neto,
             v_fc_ivari,
             v_fc_ivarni,
             v_fc_internos,
             v_fc_totalorigen,
             v_fc_cotizacion,
             v_fc_cotizacionProv,
             v_fc_descuento1,
             v_fc_descuento2,
             v_fc_subtotal,
             v_fc_importedesc1,
             v_fc_importedesc2,
             v_fc_grabarasiento,
             v_fc_cai,
             v_fc_tipocomprobante,
             v_est_id,
             v_suc_id,
             v_prov_id,
             v_doc_id,
             v_lp_id,
             v_ld_id,
             v_ccos_id,
             v_lgj_id,
             v_pro_id_origen,
             v_pro_id_destino,
             v_modifico,
             v_modificado
      from FacturaCompraTMP
      where fcTMP_id = p_fcTMP_id;

/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                          generacion automatica de orden de pago                                                    //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/
      /*
            si la condicion de pago de la factura es de tipo [Debito Automatico] o [Fondo Fijo]
            debo generar una orden de pago automaticamente.

            para esto tengo que sacar de la condicion de pago el documento y la cuenta contable
            de los fondos pasando por la cuenta grupo asociada a dicha condicion de pago.
      */

      -- tengo que desaplicar la orden de pago para poder regenerar la deuda
      --
      select opg_id
        into v_opg_id
      from FacturaCompra
      where fc_id = v_fc_id;

      if v_opg_id is not null then

         delete from FacturaCompraOrdenPago where fc_id = v_fc_id;

         update FacturaCompra set opg_id = null where fc_id = v_fc_id;

         update OrdenPago set fc_id = null where fc_id = v_fc_id;

         select emp_id into v_emp_id from OrdenPago where opg_id = v_opg_id;

         perform sp_doc_orden_pago_delete(v_opg_id, v_emp_id, v_modifico);

         delete from FacturaCompraDeuda where fc_id = v_fc_id;

         delete from FacturaCompraPago where fc_id = v_fc_id;

      end if;

      update FacturaCompra
         set fc_nrodoc = v_fc_nrodoc,
             fc_descrip = v_fc_descrip,
             fc_fecha = v_fc_fecha,
             fc_fechaentrega = v_fc_fechaentrega,
             fc_fechaVto = v_fc_fechaVto,
             fc_fechaiva = v_fc_fechaiva,
             fc_neto = v_fc_neto,
             fc_ivari = v_fc_ivari,
             fc_ivarni = v_fc_ivarni,
             fc_internos = v_fc_internos,
             fc_total = v_fc_total,
             fc_totalorigen = v_fc_totalorigen,
             fc_totalotros = v_fc_totalotros,
             fc_totalpercepciones = v_fc_totalpercepciones,
             fc_cotizacion = v_fc_cotizacion,
             fc_cotizacionprov = v_fc_cotizacionprov,
             fc_descuento1 = v_fc_descuento1,
             fc_descuento2 = v_fc_descuento2,
             fc_subtotal = v_fc_subtotal,
             fc_importedesc1 = v_fc_importedesc1,
             fc_importedesc2 = v_fc_importedesc2,
             fc_grabarasiento = v_fc_grabarasiento,
             fc_cai = v_fc_cai,
             fc_tipocomprobante = v_fc_tipocomprobante,
             mon_id = v_mon_id,
             est_id = v_est_id,
             suc_id = v_suc_id,
             prov_id = v_prov_id,
             doc_id = v_doc_id,
             doct_id = v_doct_id,
             lp_id = v_lp_id,
             ld_id = v_ld_id,
             cpg_id = v_cpg_id,
             lgj_id = v_lgj_id,
             pro_id_origen = v_pro_id_origen,
             pro_id_destino = v_pro_id_destino,
             ccos_id = v_ccos_id,
             modifico = v_modifico,
             modificado = v_modificado
      where fc_id = v_fc_id;

   end if;

/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                                        items                                                                       //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/

   v_orden := 1;

   while exists(select 1 from FacturaCompraItemTMP where fcTMP_id = p_fcTMP_id and fci_orden = v_orden)
   loop

      select fciTMP_id,
             fci_id,
             fci_orden,
             fci_cantidad,
             fci_cantidadaremitir,
             fci_pendiente,
             fci_descrip,
             fci_precio,
             fci_precioUsr,
             fci_precioLista,
             fci_descuento,
             fci_neto,
             fci_ivari,
             fci_ivarni,
             fci_ivariporc,
             fci_ivarniporc,
             fci_internos,
             fci_internosporc,
             fci_importe,
             fci_importeorigen,
             pr_id,
             to_id,
             ccos_id,
             cue_id,
             cue_id_ivari,
             cue_id_ivarni,
             stl_id
        into v_fciTMP_id,
             v_fci_id,
             v_fci_orden,
             v_fci_cantidad,
             v_fci_cantidadaremitir,
             v_fci_pendiente,
             v_fci_descrip,
             v_fci_precio,
             v_fci_precioUsr,
             v_fci_precioLista,
             v_fci_descuento,
             v_fci_neto,
             v_fci_ivari,
             v_fci_ivarni,
             v_fci_ivariporc,
             v_fci_ivarniporc,
             v_fci_internos,
             v_fci_internosporc,
             v_fci_importe,
             v_fci_importeorigen,
             v_pr_id,
             v_to_id,
             v_ccos_id,
             v_cue_id,
             v_cue_id_ivari,
             v_cue_id_ivarni,
             v_stl_id
      from FacturaCompraItemTMP
      where fcTMP_id = p_fcTMP_id
        and fci_orden = v_orden;

      -- cuando se inserta se indica
      -- como cantidad a remitir la cantidad (por ahora)
      --
      v_fci_cantidadaremitir := v_fci_cantidad;

      if v_is_new <> 0 or v_fci_id = 0 then

         -- cuando se inserta se toma la cantidad a remitir
         -- como el pendiente
         --
         v_fci_pendiente := v_fci_cantidadaremitir;

         select sp_dbGetNewId('FacturaCompraItem', 'fci_id') into v_fci_id;

         insert into FacturaCompraItem
           ( fc_id, fci_id, fci_orden, fci_cantidad, fci_cantidadaremitir, fci_descrip, fci_pendiente,
             fci_precio, fci_precioUsr, fci_precioLista, fci_descuento, fci_neto, fci_ivari, fci_ivarni,
             fci_ivariporc, fci_ivarniporc, fci_internos, fci_internosporc, fci_importe, fci_importeorigen,
             pr_id, to_id, ccos_id, cue_id, cue_id_ivari, cue_id_ivarni, stl_id )

         values ( v_fc_id, v_fci_id, v_fci_orden, v_fci_cantidad, v_fci_cantidadaremitir, v_fci_descrip,
                  v_fci_pendiente, v_fci_precio, v_fci_precioUsr, v_fci_precioLista, v_fci_descuento,
                  v_fci_neto, v_fci_ivari, v_fci_ivarni, v_fci_ivariporc, v_fci_ivarniporc, v_fci_internos,
                  v_fci_internosporc, v_fci_importe, v_fci_importeorigen, v_pr_id, v_to_id, v_ccos_id,
                  v_cue_id, v_cue_id_ivari, v_cue_id_ivarni, v_stl_id );

      else

         -- cuando se actualiza se indica
         -- como pendiente la cantidad a remitir menos lo aplicado
         --
         select sum(ocfc_cantidad)
           into v_fci_pendiente
         from OrdenFacturaCompra
         where fci_id = v_fci_id;

         v_fci_pendiente := v_fci_cantidadaremitir - coalesce(v_fci_pendiente, 0);

         update FacturaCompraItem
            set fc_id = v_fc_id,
                fci_orden = v_fci_orden,
                fci_cantidad = v_fci_cantidad,
                fci_cantidadaremitir = v_fci_cantidadaremitir,
                fci_pendiente = v_fci_pendiente,
                fci_descrip = v_fci_descrip,
                fci_precio = v_fci_precio,
                fci_precioUsr = v_fci_precioUsr,
                fci_precioLista = v_fci_precioLista,
                fci_descuento = v_fci_descuento,
                fci_neto = v_fci_neto,
                fci_ivari = v_fci_ivari,
                fci_ivarni = v_fci_ivarni,
                fci_ivariporc = v_fci_ivariporc,
                fci_ivarniporc = v_fci_ivarniporc,
                fci_internos = v_fci_internos,
                fci_internosporc = v_fci_internosporc,
                fci_importe = v_fci_importe,
                fci_importeorigen = v_fci_importeorigen,
                pr_id = v_pr_id,
                to_id = v_to_id,
                ccos_id = v_ccos_id,
                cue_id = v_cue_id,
                cue_id_ivari = v_cue_id_ivari,
                cue_id_ivarni = v_cue_id_ivarni,
                stl_id = v_stl_id
         where fc_id = v_fc_id
           and fci_id = v_fci_id;

      end if;

      update FacturaCompraItemTMP
         set fci_id = v_fci_id
      where fcTMP_id = p_fcTMP_id
        and fciTMP_id = v_fciTMP_id
        and fci_orden = v_orden;

      update FacturaCompraItemSerieTMP
         set fci_id = v_fci_id
      where fcTMP_id = p_fcTMP_id
        and fciTMP_id = v_fciTMP_id;

      v_orden := v_orden + 1;

   end loop;

   v_orden := 1;

   while exists(select 1 from FacturaCompraOtroTMP where fcTMP_id = p_fcTMP_id and fcot_orden = v_orden)
   loop

      select fcot_id,
             fcot_orden,
             fcot_debe,
             fcot_haber,
             fcot_origen,
             fcot_descrip,
             cue_id,
             ccos_id
        into v_fcot_id,
             v_fcot_orden,
             v_fcot_debe,
             v_fcot_haber,
             v_fcot_origen,
             v_fcot_descrip,
             v_cue_id,
             v_ccos_id
      from FacturaCompraOtroTMP
      where fcTMP_id = p_fcTMP_id
        and fcot_orden = v_orden;

      if v_is_new <> 0 or v_fcot_id = 0 then

         select sp_dbGetNewId('FacturaCompraOtro', 'fcot_id') into v_fcot_id;

         insert into FacturaCompraOtro( fc_id, fcot_id, fcot_orden, fcot_debe, fcot_haber, fcot_origen,
                                  fcot_descrip, cue_id, ccos_id )
         values ( v_fc_id, v_fcot_id, v_fcot_orden, v_fcot_debe, v_fcot_haber, v_fcot_origen,
               v_fcot_descrip, v_cue_id, v_ccos_id );

      else

         update FacturaCompraOtro
            set fc_id = v_fc_id,
                fcot_orden = v_fcot_orden,
                fcot_debe = v_fcot_debe,
                fcot_haber = v_fcot_haber,
                fcot_origen = v_fcot_origen,
                fcot_descrip = v_fcot_descrip,
                cue_id = v_cue_id,
                ccos_id = v_ccos_id
         where fc_id = v_fc_id
           and fcot_id = v_fcot_id;

      end if;

      v_orden := v_orden + 1;

   end loop;

   v_orden := 1;

   while exists(select 1 from FacturaCompraPercepcionTMP where fcTMP_id = p_fcTMP_id and fcperc_orden = v_orden)
   loop

      select fcperc_id,
             fcperc_orden,
             fcperc_base,
             fcperc_porcentaje,
             fcperc_importe,
             fcperc_origen,
             fcperc_descrip,
             perc_id,
             ccos_id
        into v_fcperc_id,
             v_fcperc_orden,
             v_fcperc_base,
             v_fcperc_porcentaje,
             v_fcperc_importe,
             v_fcperc_origen,
             v_fcperc_descrip,
             v_perc_id,
             v_ccos_id
      from FacturaCompraPercepcionTMP
      where fcTMP_id = p_fcTMP_id
      and fcperc_orden = v_orden;

      if v_is_new <> 0 or v_fcperc_id = 0 then

         select sp_dbGetNewId('FacturaCompraPercepcion', 'fcperc_id') into v_fcperc_id;

         insert into FacturaCompraPercepcion( fc_id, fcperc_id, fcperc_orden, fcperc_base, fcperc_porcentaje,
                                              fcperc_importe, fcperc_origen, fcperc_descrip, perc_id, ccos_id )
         values ( v_fc_id, v_fcperc_id, v_fcperc_orden, v_fcperc_base, v_fcperc_porcentaje, v_fcperc_importe,
                  v_fcperc_origen, v_fcperc_descrip, v_perc_id, v_ccos_id );

      else
         update FacturaCompraPercepcion
            set fc_id = v_fc_id,
                fcperc_orden = v_fcperc_orden,
                fcperc_base = v_fcperc_base,
                fcperc_porcentaje = v_fcperc_porcentaje,
                fcperc_importe = v_fcperc_importe,
                fcperc_origen = v_fcperc_origen,
                fcperc_descrip = v_fcperc_descrip,
                perc_id = v_perc_id,
                ccos_id = v_ccos_id
         where fc_id = v_fc_id
           and fcperc_id = v_fcperc_id;

      end if;

      v_orden := v_orden + 1;

   end loop;

   v_orden := 1;

   while exists(select 1 from FacturaCompraLegajoTMP where fcTMP_id = p_fcTMP_id and fclgj_orden = v_orden)
   loop
      select fclgj_id,
             fclgj_orden,
             fclgj_importe,
             fclgj_importeorigen,
             fclgj_descrip,
             lgj_id
        into v_fclgj_id,
             v_fclgj_orden,
             v_fclgj_importe,
             v_fclgj_importeorigen,
             v_fclgj_descrip,
             v_lgj_id
      from FacturaCompraLegajoTMP
      where fcTMP_id = p_fcTMP_id
      and fclgj_orden = v_orden;

      if v_is_new <> 0 or v_fclgj_id = 0 then

         select sp_dbGetNewId('FacturaCompraLegajo', 'fclgj_id') into v_fclgj_id;

         insert into FacturaCompraLegajo ( fc_id, fclgj_id, fclgj_orden, fclgj_importe, fclgj_importeorigen,
                                           fclgj_descrip, lgj_id )
         values ( v_fc_id, v_fclgj_id, v_fclgj_orden, v_fclgj_importe, v_fclgj_importeorigen,
                  v_fclgj_descrip, v_lgj_id );
      else

         update FacturaCompraLegajo
            set fc_id = v_fc_id,
                fclgj_orden = v_fclgj_orden,
                fclgj_importe = v_fclgj_importe,
                fclgj_importeorigen = v_fclgj_importeorigen,
                fclgj_descrip = v_fclgj_descrip,
                lgj_id = v_lgj_id
         where fc_id = v_fc_id
           and fclgj_id = v_fclgj_id;

      end if;

      v_orden := v_orden + 1;

   end loop;

/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                                     items borrados                                                                 //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/

   if v_is_new = 0 then

      delete from FacturaCompraItem
      where exists ( select fci_id
                     from FacturaCompraItemBorradoTMP
                     where fc_id = v_fc_id
                       and fci_id = FacturaCompraItem.fci_id
                       and fcTMP_id = p_fcTMP_id );

      delete from FacturaCompraOtro
      where exists ( select fcot_id
                     from FacturaCompraOtroBorradoTMP
                     where fc_id = v_fc_id
                       and fcot_id = FacturaCompraOtro.fcot_id
                       and fcTMP_id = p_fcTMP_id );

      delete from FacturaCompraOtroBorradoTMP where fc_id = v_fc_id and fcTMP_id = p_fcTMP_id;

      delete from FacturaCompraPercepcion
      where exists ( select fcperc_id
                     from FacturaCompraPercepcionBorradoTMP
                     where fc_id = v_fc_id
                       and fcperc_id = FacturaCompraPercepcion.fcperc_id
                       and fcTMP_id = p_fcTMP_id );

      delete from FacturaCompraPercepcionBorradoTMP where fc_id = v_fc_id and fcTMP_id = p_fcTMP_id;

      delete from FacturaCompraLegajo
      where exists ( select fclgj_id
                     from FacturaCompraLegajoBorradoTMP
                     where fc_id = v_fc_id
                       and fclgj_id = FacturaCompraLegajo.fclgj_id
                       and fcTMP_id = p_fcTMP_id );

      delete from FacturaCompraLegajoBorradoTMP where fc_id = v_fc_id and fcTMP_id = p_fcTMP_id;

   end if;

   select sum(fci.fci_importe)
     into v_fc_totaldeuda
   from FacturaCompraItem fci
   join TipoOperacion t
     on fci.to_id = t.to_id
   where fci.fc_id = v_fc_id
     and t.to_generadeuda <> 0;

   if v_fc_totaldeuda is null then

      v_fc_totaldeuda := 0;

   else

      v_fc_totaldeuda := v_fc_totaldeuda - ((v_fc_totaldeuda * v_fc_descuento1) / 100);
      v_fc_totaldeuda := v_fc_totaldeuda - ((v_fc_totaldeuda * v_fc_descuento2) / 100);
      v_fc_totaldeuda := v_fc_totaldeuda + v_fc_totalotros + v_fc_totalpercepciones;

   end if;

   perform sp_doc_factura_compra_save_deuda(
                          v_fc_id,
                          v_cpg_id,
                          v_fc_fecha,
                          v_fc_fechaVto,
                          v_fc_totaldeuda,
                          v_est_id
                          );

/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                                     aplicacion orden - remito                                                      //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/

   perform sp_doc_fac_cpra_orden_remito_save_aplic(v_fc_id, p_fcTMP_id, 0);

/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                                     talonarios                                                                     //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/

   perform sp_talonario_set(v_ta_id, v_fc_nrodoc);

/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                                     credito y estado                                                               //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/

   perform sp_doc_factura_compra_set_pendiente(v_fc_id);

   perform sp_doc_factura_compra_set_credito(v_fc_id);

   perform sp_doc_factura_compra_set_estado(v_fc_id);

/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                                     asiento                                                                        //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/

   select sp_cfg_getValor('Compras-General', 'Grabar Asiento') into v_cfg_valor;

   v_cfg_valor := coalesce(v_cfg_valor, '0');

   if to_number(v_cfg_valor) <> 0 then

      select * from sp_doc_factura_compra_asiento_save(v_fc_id, 0) into v_error, v_error_msg;
      if coalesce(v_error, 0) <> 0 then
         raise exception '%', v_error_msg;
      end if;

   else

      if not exists ( select fc_id
                      from FacturaCompraAsiento
                      where fc_id = v_fc_id ) then

         insert into FacturaCompraAsiento
           ( fc_id, fc_fecha )
           ( select fc_id,
                    fc_fecha
             from FacturaCompra
             where fc_grabarAsiento <> 0
               and fc_id = v_fc_id );

      end if;

   end if;

/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                                     stock                                                                          //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/

   if coalesce(v_doc_mueveStock, 0) <> 0 then

      select * from sp_doc_factura_compra_stock_save(p_fcTMP_id, v_fc_id, v_depl_id, 0) into v_error, v_error_msg;
      if coalesce(v_error, 0) <> 0 then
         raise exception '%', v_error_msg;
      end if;

   end if;

/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                          total comercial - necesario para los reportes de cta cte                                  //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/

   update facturacompra set fc_totalcomercial = coalesce(v_fc_totaldeuda, 0) where fc_id = v_fc_id;

/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                                     generacion automatica de orden de pago																										               //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/

   select * from sp_doc_factura_compra_orden_pago_save(p_us_id, v_fc_id) into v_success, v_error_msg;
   if coalesce(v_success, 0) = 0 then
      raise exception '%', v_error_msg;
   end if;

/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                                     validaciones al documento                                                      //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/

   -- estado
   --
   select * from sp_auditoria_estado_check_doc_fc(v_fc_id) into v_success, v_error_msg;
   if coalesce(v_success, 0) = 0 then
      raise exception '%', v_error_msg;
   end if;

   -- stock
   --
   select * from sp_auditoria_stock_check_doc_fc(v_fc_id) into v_success, v_error_msg;
   if coalesce(v_success, 0) = 0 then
      raise exception '%', v_error_msg;
   end if;

   -- totales
   --
   select * from sp_auditoria_totales_check_doc_fc(v_fc_id) into v_success, v_error_msg;
   if coalesce(v_success, 0) = 0 then
      raise exception '%', v_error_msg;
   end if;

   -- vtos
   --
   select * from sp_auditoria_vto_check_doc_fc(v_fc_id) into v_success, v_error_msg;
   if coalesce(v_success, 0) = 0 then
      raise exception '%', v_error_msg;
   end if;

   -- credito
   --
   select * from sp_auditoria_credito_check_doc_fc(v_fc_id) into v_success, v_error_msg;
   if coalesce(v_success, 0) = 0 then
      raise exception '%', v_error_msg;
   end if;

/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                                     borrar temporales                                                              //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/

   delete from RemitoFacturaCompraTMP where fcTMP_ID = p_fcTMP_ID;
   delete from OrdenFacturaCompraTMP where fcTMP_ID = p_fcTMP_ID;
   delete from FacturaCompraItemSerieTMP where fcTMP_id = p_fcTMP_id;
   delete from FacturaCompraPercepcionTMP where fcTMP_id = p_fcTMP_id;
   delete from FacturaCompraLegajoTMP where fcTMP_id = p_fcTMP_id;
   delete from FacturaCompraOtroTMP where fcTMP_id = p_fcTMP_id;
   delete from FacturaCompraItemTMP where fcTMP_id = p_fcTMP_id;
   delete from FacturaCompraItemSerieBTMP where fcTMP_id = p_fcTMP_id;

   /*OJO: esta aca y no en el if (if @IsNew = 0 begin)
          como estaba antes, por que necesito usar
          los registros de esta tabla en
          sp_DocRemitoCompraStockSave para borrar los
          numeros de serie asociados al r‚nglon
   */
   delete from FacturaCompraItemBorradoTMP where fc_id = v_fc_id and fcTMP_id = p_fcTMP_id;

   delete from FacturaCompraTMP where fcTMP_id = p_fcTMP_id;

/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                                     historial de modificaciones                                                    //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/

   select modifico into v_modifico from FacturaCompra where fc_id = v_fc_id;

   if v_is_new <> 0 then
      perform sp_historia_update(17001, v_fc_id, v_modifico, 1);
   else
      perform sp_historia_update(17001, v_fc_id, v_modifico, 3);
   end if;

/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                                     fin                                                                            //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/

   rtn.type := 'fc_id';
   rtn.id := v_fc_id;

   return next rtn;

   perform sp_lista_precio_save_auto(v_fc_id, v_doct_id, v_is_new, v_fc_fecha);

exception
   when others then

     raise exception 'Ha ocurrido un error al grabar la factura de compra. sp_doc_factura_compra_save. %. %.',
                      sqlstate, sqlerrm;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_doc_factura_compra_save_aplic(p_us_id integer, p_fctmp_id integer)
 RETURNS SETOF row_result
 LANGUAGE plpgsql
AS $function$
declare
   rtn row_result;

   v_success smallint;
   v_error_msg varchar(5000);

   v_fc_id integer;
   v_modifico integer;
   v_opgTMP_id integer;   
   v_cpg_tipo smallint;
begin

   select fc_id,
          modifico
     into v_fc_id,
          v_modifico
   from FacturaCompraTMP
   where fcTMP_id = p_fcTMP_id;

   ---------------------------------
   -- si no hay factura no hago nada
   --
   if v_fc_id is null then

      return query select * from result_failed();
      return;

   end if;

/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                                        validaciones a la aplicacion                                                //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/

   delete from FacturaCompraNotaCreditoTMP
   where fcTMP_id = p_fcTMP_id
     and fcd_id_factura is null
     and fcp_id_factura is null
     and fcd_id_notacredito is null
     and fcp_id_notacredito is null;

   delete from FacturaCompraOrdenPagoTMP
   where opgTMP_id in ( select opgTMP_id
                        from OrdenPagoTMP
                        where fcTMP_id = p_fcTMP_id )
     and fcd_id is null
     and fcp_id is null;

/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                                        transaccion                                                                 //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/

   SET TRANSACTION READ WRITE;

/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                                        ordenes - remitos                                                           //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/
   perform sp_doc_fac_cpra_orden_remito_save_aplic(v_fc_id, p_fcTMP_id, 1);

   select cpg.cpg_tipo
     into v_cpg_tipo
   from FacturaCompra fc
   join CondicionPago cpg
     on fc.cpg_id = cpg.cpg_id
   where fc.fc_id = v_fc_id;

/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                                        orden pago                                                                  //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/

   /*
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
   //                                                                                                               //
   //                                        nota de credito                                                        //
   //                                                                                                               //
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
   */
   if not v_cpg_tipo in ( 2,3 ) then

      -- este sp se encarga de todo
      --
      perform sp_doc_factura_compra_nota_credito_save(p_us_id, p_fcTMP_id);

      for v_opgTMP_id in
         select opgTMP_id
         from OrdenPagoTMP
         where fcTMP_id = p_fcTMP_id
      loop

         -- aplico la orden de pago con la factura
         --
         perform sp_doc_orden_pago_save_aplic(p_us_id, v_opgTMP_id, 0);

      end loop;

   end if;

   -- aplicaciones automaticas
   /*
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
   //                                                                                                               //
   //                                        estado                                                                 //
   //                                                                                                               //
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
   */

   perform sp_doc_factura_compra_set_credito(v_fc_id);

   perform sp_doc_factura_compra_set_estado(v_fc_id);

   /*
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
   //                                                                                                               //
   //                                        validaciones                                                           //
   //                                                                                                               //
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
   */

   -- estado
   --
   select * from sp_auditoria_estado_check_doc_fc(v_fc_id) into v_success, v_error_msg;
   if coalesce(v_success, 0) = 0 then
      raise exception '%', v_error_msg;
   end if;

   -- vtos
   --
   select * from sp_auditoria_vto_check_doc_fc(v_fc_id) into v_success, v_error_msg;
   if coalesce(v_success, 0) = 0 then
      raise exception '%', v_error_msg;
   end if;

   -- credito
   --
   select * from sp_auditoria_credito_check_doc_fc(v_fc_id) into v_success, v_error_msg;
   if coalesce(v_success, 0) = 0 then
      raise exception '%', v_error_msg;
   end if;

/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                                        temporales                                                                  //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/
   delete from FacturaCompraNotaCreditoTMP where fcTMP_id = p_fcTMP_id;
   delete from FacturaCompraOrdenPagoTMP where opgTMP_id in (select opgTMP_id from OrdenPagoTMP where fcTMP_id = p_fcTMP_id);
   delete from OrdenPagoTMP where fcTMP_id = p_fcTMP_id;
   delete from OrdenFacturaCompraTMP where fcTMP_id = p_fcTMP_id;
   delete from RemitoFacturaCompraTMP where fcTMP_id = p_fcTMP_id;
   delete from FacturaCompraTMP where fcTMP_id = p_fcTMP_id;

/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                                     historial de modificaciones                                                    //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/

   perform sp_historia_update(17001, v_fc_id, v_modifico, 6);

/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                                     fin                                                                            //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/

   rtn.type := 'fc_id';
   rtn.id := v_fc_id;

   return next rtn;

exception
   when others then

     raise exception 'Ha ocurrido un error al grabar la aplicación de la factura de Compra. sp_doc_factura_compra_save_aplic. %. %.',
                      sqlstate, sqlerrm;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_doc_factura_compra_save_deuda(p_fc_id integer, p_cpg_id integer, p_fc_fecha date, p_fc_fechavto date, p_fc_total numeric, p_est_id integer)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
declare
   v_sys_error varchar := '';
   v_fc_id integer;
   v_cpg_id integer;
   v_fc_fecha date;
   v_fc_total decimal(18,6);
   v_fc_pendiente decimal(18,6);
   v_cpg_escontado smallint;
   v_cpg_eslibre smallint;

   v_p_fc_fechaVto date;

   c_pago_item refcursor;
   v_cpgi_dias smallint;
   v_cpgi_porcentaje decimal(18,6);
   v_fcd_id integer;
   v_fcd_fecha date;
   v_fcd_fecha2 date;
   v_fcd_pendiente decimal(18,6);
   v_importe decimal(18,6);
   v_n smallint;
   v_count_cpgi smallint;
begin

   v_p_fc_fechaVto := p_fc_fechaVto;
   v_fc_id := p_fc_id;
   v_cpg_id := p_cpg_id;
   v_fc_fecha := p_fc_fecha;
   v_fc_total := p_fc_total;

/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                                     pago en cta cte y contado                                                      //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/
   -- la factura no puede estar aplicada a ninguna cobranza
   -- por lo tanto lo primero que hago es borrar toda la info de deuda
   -- y volver a generarla
   --
   delete from FacturaCompraDeuda where fc_id = v_fc_id;

   select cpg_escontado,
          cpg_eslibre
     into v_cpg_escontado,
          v_cpg_eslibre
   from CondicionPago
   where cpg_id = v_cpg_id;

   if p_fc_total <> 0 and p_est_id <> 7 then

      if v_cpg_escontado <> 0 then
         open c_pago_item for select 0 cpgi_dias, 100 cpgi_porcentaje;
      else
         if v_cpg_eslibre <> 0 then
            if v_p_fc_fechaVto < p_fc_fecha then
               v_p_fc_fechaVto := dateadd('D', 1, p_fc_fecha);
            end if;
            open c_pago_item for select datediff('D', p_fc_fecha, v_p_fc_fechaVto) cpgi_dias, 100 cpgi_porcentaje;
         else
            open c_pago_item for select cpgi_dias, cpgi_porcentaje from CondicionPagoItem where cpg_id = v_cpg_id;
         end if;
      end if;

      v_n := 0;
      v_importe := 0;

      select count(*)
        into v_count_cpgi
      from CondicionPagoItem
      where cpg_id = v_cpg_id;

      loop

         fetch c_pago_item into v_cpgi_dias,v_cpgi_porcentaje;
         exit when not found;
                  
         v_fcd_fecha := dateadd('D', v_cpgi_dias, v_fc_fecha);
         v_n := v_n + 1;

         if v_n < v_count_cpgi then

            v_fcd_pendiente := v_fc_total * v_cpgi_porcentaje / 100;
            v_importe := v_importe + v_fcd_pendiente;

         else

            v_fcd_pendiente := v_fc_total - v_importe;

         end if;

         v_fcd_pendiente := round(v_fcd_pendiente, 2);

         select sp_dbGetNewId('FacturaCompraDeuda', 'fcd_id') into v_fcd_id;

         select sp_doc_get_fecha2(v_fcd_fecha, 0, null) into v_fcd_fecha2;

         insert into FacturaCompraDeuda( fcd_id, fcd_fecha, fcd_fecha2, fcd_importe, fcd_pendiente, fc_id )
         values ( v_fcd_id, v_fcd_fecha, v_fcd_fecha2, v_fcd_pendiente, v_fcd_pendiente, v_fc_id );

      end loop;

      close c_pago_item;

      select sum(fcd_pendiente)
        into v_fc_pendiente
      from FacturaCompraDeuda
      where fc_id = v_fc_id;

   else

      v_fc_pendiente := 0;

   end if;

   update FacturaCompra
      set fc_pendiente = coalesce(v_fc_pendiente, 0)
   where fc_id = v_fc_id;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_doc_factura_venta_asiento_save_interno(p_fv_id integer, p_as_id integer, p_mon_id integer, p_doct_id_factura integer, p_ccos_id integer, p_desc1 numeric, p_desc2 numeric)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
declare
   v_iva decimal(18,6);
   v_fvi_importe decimal(18,6);
   v_fvi_importeorigen decimal(18,6);
   v_cue_id integer;
   v_asi_debe decimal(18,6);
   v_asi_haber decimal(18,6);
   v_asi_origen decimal(18,6);
   v_fvi_neto decimal(18,6);
   v_asi_orden smallint;
   v_asi_id integer;
   v_is_new integer;
begin

   select max(asi_orden)
     into v_asi_orden
   from AsientoItem
   where as_id = p_as_id;

   for v_iva,v_fvi_importe,v_fvi_importeorigen,v_cue_id in
        select sum(fvi.fvi_internos),
               sum(fvi.fvi_importe),
               sum(fvi.fvi_importeorigen),
               ti.cue_id
        from FacturaVentaItem fvi
        join Producto p
          on fvi.pr_id = p.pr_id
        join TasaImpositiva ti
          on p.ti_id_internosv = ti.ti_id
        where fvi.fv_id = p_fv_id
        group by ti.cue_id
        having sum(fvi.fvi_internos) <> 0
   loop

      v_asi_id := null;

      if p_doct_id_factura = 1 /* Factura */ or p_doct_id_factura = 9 /* Nota de Debito */ then

         v_asi_haber := v_iva;
         v_asi_haber := v_asi_haber - (v_asi_haber * p_desc1 / 100);
         v_asi_haber := v_asi_haber - (v_asi_haber * p_desc2 / 100);
         v_asi_debe := 0;

         select asi_id
           into v_asi_id
         from AsientoItem
         where as_id = p_as_id
            and cue_id = v_cue_id
            and asi_debe = 0
            and coalesce(ccos_id, 0) = coalesce(p_ccos_id, 0);

      else

         if p_doct_id_factura = 7 /* Nota de Credito */ then

            v_asi_haber := 0;
            v_asi_debe := v_iva;
            v_asi_debe := v_asi_debe - (v_asi_debe * p_desc1 / 100);
            v_asi_debe := v_asi_debe - (v_asi_debe * p_desc2 / 100);

            select asi_id
              into v_asi_id
            from AsientoItem
            where as_id = p_as_id
              and cue_id = v_cue_id
              and asi_haber = 0
              and coalesce(ccos_id, 0) = coalesce(p_ccos_id, 0);

         end if;

      end if;

      if v_fvi_importeorigen <> 0 then

         v_fvi_importeorigen := v_fvi_importeorigen - (v_fvi_importeorigen * p_desc1 / 100);
         v_fvi_importeorigen := v_fvi_importeorigen - (v_fvi_importeorigen * p_desc2 / 100);
         v_asi_origen := v_iva / (v_fvi_importe / v_fvi_importeorigen);

      else

         v_asi_origen := 0;

      end if;

      v_asi_id := coalesce(v_asi_id, 0);

      if v_asi_id = 0 then

         select sp_dbGetNewId('AsientoItem', 'asi_id') into v_asi_id;

         v_asi_orden := v_asi_orden + 1;

         insert into AsientoItem( as_id, asi_id, asi_orden, asi_descrip, asi_haber, asi_debe, asi_origen,
                                  cue_id, ccos_id, mon_id )
         values ( p_as_id, v_asi_id, v_asi_orden, '', v_asi_haber, v_asi_debe, v_asi_origen, v_cue_id, p_ccos_id, p_mon_id );

      else

         update AsientoItem
            set asi_haber = asi_haber + v_asi_haber,
                asi_debe = asi_debe + v_asi_debe,
                asi_origen = asi_origen + v_asi_origen
         where asi_id = v_asi_id;

      end if;

   end loop;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_doc_factura_compra_set_credito(p_fc_id integer, p_borrar integer DEFAULT 0)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
declare
   v_pendiente decimal(18,6);
   v_prov_id integer;
   v_doct_id integer;
   v_emp_id integer;

   v_doct_facturaCpra integer := 2;

   v_old_prov_ids integer[];
   i integer;
begin

   -- si no hay documento adios
   --
   if p_fc_id = 0 then
      return;
   end if;

   SET TRANSACTION READ WRITE;

   select fc.prov_id,
          fc.doct_id,
          doc.emp_id
     into v_prov_id,
          v_doct_id,
          v_emp_id
   from FacturaCompra fc
   join Documento doc
     on fc.doc_id = doc.doc_id
   where fc.fc_id = p_fc_id;

   -- borrar referencias a este documento por otro proveedor
   --

   -- siempre borro cualquier mencion a este documento en el cache de cualquier
   -- proveedor que no sea el indicado por el documento
   --
   if exists ( select prov_id
               from ProveedorCacheCredito
               where prov_id <> v_prov_id
                 and doct_id = v_doct_facturaCpra
                 and id = p_fc_id ) then

      select into v_old_prov_ids prov_id
      from ProveedorCacheCredito
      where prov_id <> v_prov_id
        and doct_id = v_doct_facturaCpra
        and id = p_fc_id;

      delete from ProveedorCacheCredito
      where prov_id <> v_prov_id
        and doct_id = v_doct_facturaCpra
        and id = p_fc_id;

      for i in 1 .. array_upper(v_old_prov_ids, 1)
      loop

         perform sp_proveedor_update_credito(v_old_prov_ids[i], v_emp_id);

      end loop;

   end if;

   -- borrar
   --
   if p_borrar <> 0 then

      delete from ProveedorCacheCredito
      where prov_id = v_prov_id
        and doct_id = v_doct_facturaCpra
        and id = p_fc_id;

   -- insert - update
   --
   else

      select sum(fcd_pendiente)
        into v_pendiente
      from FacturaCompraDeuda
      where fc_id = p_fc_id;

      v_pendiente := round(coalesce(v_pendiente, 0), 2);

      update FacturaCompra
         set fc_pendiente = v_pendiente
      where fc_id = p_fc_id;

      if v_doct_id = 8 then /* nota de credito */
         v_pendiente := -v_pendiente;
      end if;

      if exists ( select id
                  from ProveedorCacheCredito
                  where prov_id = v_prov_id
                    and doct_id = v_doct_facturaCpra
                    and id = p_fc_id ) then

         if abs(v_pendiente) >= 0.01 then

            update ProveedorCacheCredito
               set provcc_importe = v_pendiente
            where prov_id = v_prov_id
              and doct_id = v_doct_facturaCpra
              and id = p_fc_id;

         -- si no hay nada pendiente lo saco del cache
         --
         else

            delete from ProveedorCacheCredito
            where prov_id = v_prov_id
              and doct_id = v_doct_facturaCpra
              and id = p_fc_id;

         end if;

      else

         -- solo si hay algo pendiente
         --
         if abs(v_pendiente) >= 0.01 then

            insert into ProveedorCacheCredito( prov_id, doct_id, id, provcc_importe, emp_id )
              values ( v_prov_id, v_doct_facturaCpra, p_fc_id, v_pendiente, v_emp_id );

         end if;

      end if;

   end if;

   -- deuda en cache
   --

   -- actualizo la deuda en la tabla proveedor
   --
   perform sp_proveedor_update_credito(v_prov_id, v_emp_id);

exception
   when others then

   raise exception 'Ha ocurrido un error al actualizar el estado de la factura de Compra. sp_doc_factura_compra_set_credito.. %. %.',
                   sqlstate, sqlerrm;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_doc_factura_compra_set_estado(p_fc_id integer, OUT p_est_id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
declare
   v_est_id integer;
   v_prov_id integer;
   v_pendiente decimal(18,6);
   v_creditoTotal decimal(18,6);
   v_llevaFirma smallint;
   v_firmado smallint;
   v_deuda decimal(18,6);
   v_doc_id integer;
   v_doc_llevafirma smallint;

   v_estado_pendiente integer := 1;
   v_estado_pendienteCredito integer := 3;
   v_estado_pendienteFirma integer := 4;
   v_estado_finalizado integer := 5;
   v_estado_anulado integer := 7;
begin

   if p_fc_id = 0 then
      return;
   end if;

   select prov_id,
          fc_firmado,
          est_id,
          doc_id
     into v_prov_id,
          v_firmado,
          v_est_id,
          v_doc_id
   from FacturaCompra
   where fc_id = p_fc_id;

   select doc_llevafirma
     into v_doc_llevafirma
   from Documento
   where doc_id = v_doc_id;

   if v_est_id <> v_estado_anulado then

      -- si el documento requiere firma y el comprobante no esta firmado
      -- y no esta finalizado (puede ser que se finalizo y luego se modifico el documento
      -- para que requiera firma en cuyo caso no se exige firma para documentos finalizados)
      --
      if v_firmado = 0 and v_doc_llevafirma <> 0 and v_est_id <> v_estado_finalizado then

         v_est_id := v_estado_pendienteFirma;

      else

         -- se obtiene la deuda del comprobante
         --
         select round(sum(fcd_pendiente), 2)
           into v_deuda
         from FacturaCompraDeuda
         where fc_id = p_fc_id;

         -- si el comprobante no tiene deuda se finaliza
         --
         if coalesce(v_deuda, 0) <= 0.01 then

            v_est_id := v_estado_finalizado;

         else

            -- se obtiene la deuda del proveedor
            --
            select sum(provcc_importe)
              into v_pendiente
            from ProveedorCacheCredito
            where prov_id = v_prov_id;

            -- se obtiene el credito del proveedor
            --
            select prov_creditototal
              into v_creditoTotal
            from Proveedor
            where prov_id = v_prov_id;

            -- si debe mas que el credito concedido al proveedor
            --
            if v_pendiente > v_creditoTotal then

               v_est_id := v_estado_pendienteCredito;

            -- sino solo pendiente
            --
            else

               v_est_id := v_estado_pendiente;

            end if;

         end if;

      end if;

      update FacturaCompra
         set est_id = v_est_id
      where fc_id = p_fc_id;

   end if;

   p_est_id := v_est_id;

exception
   when others then

   raise exception 'Ha ocurrido un error al actualizar el estado de la factura de compra. sp_doc_factura_compra_set_estado. %. %.',
                   sqlstate, sqlerrm;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_doc_factura_compra_set_pendiente(p_fc_id integer)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
declare
   v_fc_pendiente decimal(18,6);
begin

   SET TRANSACTION READ WRITE;

   select sum(fcd_pendiente)
     into v_fc_pendiente
   from FacturaCompraDeuda
   where fc_id = p_fc_id;

   v_fc_pendiente := coalesce(v_fc_pendiente, 0);

   update FacturaCompra
      set fc_pendiente = round(v_fc_pendiente, 2)
   where fc_id = p_fc_id;

exception
   when others then

      raise exception 'Ha ocurrido un error al actualizar el pendiente de la factura de Compra. sp_doc_factura_compra_set_pendiente. %. %.',
                      sqlstate, sqlerrm;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_doc_factura_compra_stock_save(p_fctmp_id integer, p_fc_id integer, p_depl_id integer, p_raise_error integer DEFAULT (-1), OUT p_error integer, OUT p_error_msg character varying)
 RETURNS record
 LANGUAGE plpgsql
AS $function$
declare
   v_is_new integer;

   v_st_id integer;
   v_st_numero integer;
   v_st_nrodoc varchar(50);
   v_st_descrip varchar(5000);
   v_st_fecha date;
   v_st_doc_cliente varchar(5000);

   v_doct_id integer;
   v_doc_id integer;
   v_doct_id_factura integer;
   v_doc_id_factura integer;

   v_fc_fecha date;
   v_suc_id integer;
   v_ta_id integer;
   v_prov_id integer;

   v_sti_id integer;
   v_sti_orden smallint;
   v_sti_ingreso decimal(18,6);
   v_sti_salida decimal(18,6);

   v_depl_id_destino integer;
   v_depl_id_origen integer;
   v_depl_id_tercero integer;

   v_fci_orden smallint;
   v_fci_cantidad decimal(18,6);
   v_fci_id integer;
   v_fci_descrip varchar(255);


   v_pr_id integer;

   v_pr_llevanroserie smallint;
   v_prns_id integer;
   v_prns_codigo varchar(100);
   v_prns_descrip varchar(255);
   v_prns_fechavto date;

   v_pr_llevanrolote smallint;
   v_stl_id integer;
   v_stl_codigo varchar(50);
   v_stl_fecha date;

   v_creado date;
   v_modificado date;
   v_modifico integer;

   v_error smallint;
   v_success smallint;
   v_message varchar(255);

   v_ta_nrodoc varchar(100);

begin

   -- si no existe chau
   --
   if not exists ( select fc_id
                   from FacturaCompra
                   where fc_id = p_fc_id ) then
      return; 
   end if;

   select st_id,
          prov_id,
          doc_id,
          modifico,
          modificado,
          fc_fecha
     into v_st_id,
          v_prov_id,
          v_doc_id_factura,
          v_modifico,
          v_modificado,
          v_stl_fecha
   from FacturaCompra
   where fc_id = p_fc_id;

   v_st_id := coalesce(v_st_id, 0);
   v_depl_id_tercero := -3; /* select * from depositologico */

   SET TRANSACTION READ WRITE;

/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                                        insert                                                                      //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/

   -- obtengo el documento @doc_id
   --
   select doc_id_Stock,
          FacturaCompra.doct_id,
          fc_nrodoc || ' ' || prov_nombre
     into v_doc_id,
          v_doct_id_factura,
          v_st_doc_cliente
   from FacturaCompra
   join Documento
     on FacturaCompra.doc_id = Documento.doc_id
   join Proveedor
     on FacturaCompra.prov_id = Proveedor.prov_id
   where fc_id = p_fc_id;

   if v_doct_id_factura = 2 /* Factura */ or v_doct_id_factura = 10 /* Nota de Debito */ then

      v_depl_id_origen := v_depl_id_tercero;
      v_depl_id_destino := p_depl_id;

   else

      if v_doct_id_factura = 8 /* Nota de Credito */ then

         v_depl_id_origen := p_depl_id;
         v_depl_id_destino := v_depl_id_tercero;

      end if;

   end if;

   if v_st_id = 0 then

      v_is_new := -1;

      select sp_dbGetNewId('Stock', 'st_id') into v_st_id;
      select sp_dbGetNewId('Stock', 'st_numero') into v_st_numero;

      select doct_id,
             ta_id
        into v_doct_id,
             v_ta_id
      from Documento
      where doc_id = v_doc_id;

      select sp_talonario_get_next_number(v_ta_id) into v_ta_nrodoc;

      v_st_nrodoc := v_ta_nrodoc;

      -- con esto evitamos que dos tomen el mismo Numero
      --
      perform sp_talonario_set(v_ta_id, v_ta_nrodoc);

      insert into Stock( st_id, st_numero, st_nrodoc, st_descrip, st_fecha, st_doc_cliente, suc_id, doc_id, doct_id,
                         doct_id_cliente, id_cliente, depl_id_destino, depl_id_origen, modifico )
        ( select v_st_id,
                 v_st_numero,
                 v_st_nrodoc,
                 fc_descrip,
                 fc_fecha,
                 v_st_doc_cliente,
                 suc_id,
                 v_doc_id,
                 v_doct_id,
                 v_doct_id_factura,
                 p_fc_id,
                 v_depl_id_destino,
                 v_depl_id_origen,
                 v_modifico
          from FacturaCompra
          where fc_id = p_fc_id );

/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                                        update                                                                      //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/
   else

      /*
       si es una modificacion, lo primero que hago es borrar
       los numeros de serie asociados a los renglones borrados
      */
      insert into tt_productoNroSerieDel
        ( select sti.prns_id
          from StockItem sti
          join FacturaCompraItemBorradoTMP fci
            on sti.st_id = v_st_id
            and fci.fc_id = p_fc_id
            and fci.fcTMP_id = p_fcTMP_id
            and sti.sti_grupo = fci.fci_id );

      /* ahora si el update */

      v_is_new := 0;

      select fc_descrip,
             fc_fecha,
             suc_id
        into v_st_descrip,
             v_st_fecha,
             v_suc_id
      from FacturaCompra
      where fc_id = p_fc_id;

      select doc_id,
             doct_id
        into v_doc_id,
             v_doct_id
      from Stock
      where st_id = v_st_id;

      update Stock
         set st_descrip = v_st_descrip,
             st_fecha = v_st_fecha,
             st_doc_cliente = v_st_doc_cliente,
             doc_id = v_doc_id,
             doct_id = v_doct_id,
             doct_id_cliente = v_doct_id_factura,
             id_cliente = p_fc_id,
             depl_id_destino = v_depl_id_destino,
             depl_id_origen = v_depl_id_origen,
             modifico = v_modifico,
             modificado = v_modificado
      where st_id = v_st_id;

   end if;

/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                                        items                                                                       //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/

   if v_is_new = 0 then

      -- quito de stockcache lo que se movio con los items de este movimiento
      --
      select * from sp_doc_stock_cache_update(v_st_id, 1 /* restar */, 1 /* no update prns */) into v_message, v_success;

      if coalesce(v_success, 0) = 0 then
         raise exception '%', v_message;
      end if;

      -- borro todos los items y solo hago inserts que se mucho mas simple y rapido
      --
      delete from StockItem where st_id = v_st_id;
      delete from StockCache where prns_id in ( select prns_id from tt_productoNroSerieDel );
      delete from ProductoNumeroSerie where prns_id in ( select prns_id from tt_productoNroSerieDel );

   end if;

   v_sti_orden := 0;

   for v_fci_id,v_fci_cantidad,v_pr_id,v_fci_descrip,v_pr_llevanroserie,v_pr_llevanrolote,v_stl_id,v_stl_codigo in
      select fci.fci_id,
              case
                 when p.pr_stockcompra <> 0 then fci.fci_cantidadaremitir / p.pr_stockcompra
                 else 0
              end col,
              fci.pr_id,
              fci.fci_descrip,
              p.pr_llevanroserie,
              p.pr_llevanrolote,
              fci.stl_id,
              fcit.stl_codigo
      from FacturaCompraItem fci
      join FacturaCompraItemTMP fcit
        on fci.fci_id = fcit.fci_id
       and fcit.fcTMP_id = p_fcTMP_id
      join Producto p
        on fci.pr_id = p.pr_id
      where fci.fc_id = p_fc_id
        and p.pr_llevastock <> 0
   loop

      --  lleva nro de lote
      --
      if v_pr_llevanrolote <> 0 then
         if v_stl_id is null then

            select stl_id
              into v_stl_id
            from StockLote
            where stl_codigo = v_stl_codigo
              and pr_id = v_pr_id;

            if v_stl_id is null then
            
               select sp_dbGetNewId('StockLote', 'stl_id') into v_stl_id;

               insert into StockLote( stl_id, stl_codigo, stl_nrolote, pr_id, stl_fecha, modifico )
               values ( v_stl_id, v_stl_codigo, v_stl_codigo, v_pr_id, v_stl_fecha, v_modifico );

            end if;

            update FacturaCompraItem set stl_id = v_stl_id where fci_id = v_fci_id;

         else

            -- si ya existe un lote para este articulo con este codigo
            -- cambio el stl_id, La tarea de validacion de lotes se encargara de
            -- eliminar lotes que no figuran en StockItem
            --
            if exists ( select *
                        from StockLote
                        where stl_id <> v_stl_id
                          and stl_codigo = v_stl_codigo
                          and pr_id = v_pr_id ) then

               select min(stl_id)
                 into v_stl_id
               from StockLote
               where stl_id <> v_stl_id
                 and stl_codigo = v_stl_codigo
                 and pr_id = v_pr_id;

               update FacturaCompraItem
                     set stl_id = v_stl_id
               where fci_id = v_fci_id;

            -- actualizo el codigo del lote
            --
            else

               update StockLote
                  set stl_codigo = v_stl_codigo
               where stl_id = v_stl_id;

            end if;

         end if;

      end if;

      --  no lleva nro de serie
      --
      if v_pr_llevanroserie = 0 then

         select sp_dbGetNewId('StockItem', 'sti_id') into v_sti_id;

         insert into StockItem( st_id, sti_id, sti_orden, sti_ingreso, sti_salida, sti_descrip, pr_id, depl_id, stl_id )
         values ( v_st_id, v_sti_id, v_sti_orden, 0, v_fci_cantidad, v_fci_descrip, v_pr_id, v_depl_id_origen, v_stl_id );

         v_sti_orden := v_sti_orden + 1;

         select sp_dbGetNewId('StockItem', 'sti_id') into v_sti_id;

         insert into StockItem( st_id, sti_id, sti_orden, sti_ingreso, sti_salida, sti_descrip, pr_id, depl_id, stl_id )
         values ( v_st_id, v_sti_id, v_sti_orden, v_fci_cantidad, 0, v_fci_descrip, v_pr_id, v_depl_id_destino, v_stl_id );

         v_sti_orden := v_sti_orden + 1;

      --  lleva nro de serie
      --
      else

         for v_prns_id,v_prns_codigo,v_prns_descrip,v_prns_fechavto in
            select prns_id,
                   prns_codigo,
                   prns_descrip,
                   prns_fechavto
            from FacturaCompraItemSerieTMP
            where fci_id = v_fci_id
              and fcTMP_id = p_fcTMP_id
         loop

            --  numero de serie
            --
            if v_prns_id <= 0 then
            
               select sp_dbGetNewId('ProductoNumeroSerie', 'prns_id') into v_prns_id;

               insert into ProductoNumeroSerie( prns_id, prns_codigo, prns_descrip, prns_fechavto, pr_id,
                                                depl_id, stl_id, modifico )
               values ( v_prns_id, v_prns_codigo, v_prns_descrip, v_prns_fechavto, v_pr_id, v_depl_id_destino,
                        v_stl_id, v_modifico );

            else

               update ProductoNumeroSerie
                     set prns_codigo = v_prns_codigo,
                         prns_descrip = v_prns_descrip,
                         prns_fechavto = v_prns_fechavto,
                         pr_id = v_pr_id,
                         modificado = v_modificado,
                         modifico = v_modifico
               where prns_id = v_prns_id;

            end if;

            -- movimiento de stock
            --
            select sp_dbGetNewId('StockItem','sti_id') into v_sti_id;

            insert into StockItem( st_id, sti_id, sti_orden, sti_ingreso, sti_salida, sti_descrip, sti_grupo,
                                   pr_id, depl_id, prns_id, stl_id )
            values ( v_st_id, v_sti_id, v_sti_orden, 0, 1, v_fci_descrip, v_fci_id, v_pr_id, v_depl_id_origen,
                     v_prns_id, v_stl_id );

            v_sti_orden := v_sti_orden + 1;

            select sp_dbGetNewId('StockItem', 'sti_id') into v_sti_id;

            insert into StockItem( st_id, sti_id, sti_orden, sti_ingreso, sti_salida, sti_descrip, sti_grupo,
                                   pr_id, depl_id, prns_id, stl_id )
            values ( v_st_id, v_sti_id, v_sti_orden, 1, 0, v_fci_descrip, v_fci_id, v_pr_id, v_depl_id_destino,
                     v_prns_id, v_stl_id );

            v_sti_orden := v_sti_orden + 1;

         end loop;

      end if;

   end loop;

   -- agrego a stockcache lo que se movio con los items de este movimiento
   --
   select * from sp_doc_stock_cache_update(v_st_id, 0 /* sumar */) into v_message, v_success;

   if coalesce(v_success, 0) = 0 then
      raise exception '%', v_message;
   end if;

/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                                vinculo la factura con su stock                                                     //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/

   update FacturaCompra set st_id = v_st_id where fc_id = p_fc_id;

/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                                borro los numeros de serie                                                          //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/
   delete from StockCache
   where prns_id in ( select prns_id
                      from FacturaCompraItemSerieBTMP
                      where fcTMP_id = p_fcTMP_id );

   delete from ProductoNumeroSerie
   where prns_id in ( select prns_id
                      from FacturaCompraItemSerieBTMP
                      where fcTMP_id = p_fcTMP_id );

   p_error := 0;

exception
   when others then

      if p_raise_error <> 0 then

         raise exception 'Ha ocurrido un error al grabar la factura de compra. sp_doc_factura_compra_stock_save.%. %.',
                         sqlstate, sqlerrm;

      else

         p_error_msg := 'Ha ocurrido un error al grabar la factura de compra. sp_doc_factura_compra_stock_save.';

      end if;

      p_error := -1;
      v_message := '@@ERROR_SP:' || coalesce(v_message, '');

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_doc_factura_compra_wizard_save(p_fctmp_id integer)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
begin

	-- Cargo las cuentas del producto y de la tasa impositiva
 --
	update FacturaCompraItemTMP

      set
           cue_id  				= (select coalesce(pcg.cue_id,cg.cue_id)
                          from Producto p
                                 inner join CuentaGrupo cg
                                   on p.cueg_id_compra = cg.cueg_id
                                 inner join FacturaCompraTMP t
                                   on t.fcTMP_id = p_fcTMP_id
                                 left join ProveedorCuentaGrupo pcg
                                   on cg.cueg_id = pcg.cueg_id
                                   and t.prov_id = pcg.prov_id
                          where p.pr_id = FacturaCompraItemTMP.pr_id
                          ),

           cue_id_ivari 		= (select tiri.cue_id
                             from Producto p
                                    inner join TasaImpositiva tiri
                                      on p.ti_id_ivaricompra = tiri.ti_id
                             where p.pr_id = FacturaCompraItemTMP.pr_id
                            ),

           cue_id_ivarni 	= (select tirni.cue_id
                             from Producto p
                                    inner join TasaImpositiva tirni
                                      on p.ti_id_ivarnicompra	= tirni.ti_id
                             where p.pr_id = FacturaCompraItemTMP.pr_id
                             )

  where fcTMP_id = p_fcTMP_id;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_doc_factura_cpra_set_item_pendiente(p_fc_id integer)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
declare
   v_fci_id integer;
   v_est_id integer;

   v_aplicadoorden decimal(18,6);
   v_aplicadoremito decimal(18,6);
begin

   select est_id
     into v_est_id
   from FacturaCompra
   where fc_id = p_fc_id;

   SET TRANSACTION READ WRITE;

   if v_est_id <> 7 then

      for v_fci_id in
         select fci_id
         from FacturaCompraItem
         where fc_id = p_fc_id
      loop

         select coalesce(sum(ocfc_cantidad), 0)
           into v_aplicadoorden
         from OrdenFacturaCompra
         where fci_id = v_fci_id;

         select coalesce(sum(rcfc_cantidad), 0)
           into v_aplicadoremito
         from RemitoFacturaCompra
         where fci_id = v_fci_id;

         v_aplicadoorden := coalesce(v_aplicadoorden, 0);
         v_aplicadoremito := coalesce(v_aplicadoremito, 0);

         update FacturaCompraItem
            set fci_pendiente = fci_cantidadaremitir - v_aplicadoorden - v_aplicadoremito
         where fci_id = v_fci_id;

      end loop;

   else

      update FacturaCompraItem
         set fci_pendiente = 0
      where fc_id = p_fc_id;

   end if;

exception
   when others then

   raise exception 'Ha ocurrido un error al actualizar el pendiente de la factura de compra. sp_doc_factura_cpra_set_item_pendiente. %. %.',
                   sqlstate, sqlerrm;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_doc_factura_venta_asiento_save(p_fv_id integer, p_raise_error integer DEFAULT (-1), OUT p_error integer, OUT p_error_msg character varying, OUT p_as_id integer)
 RETURNS record
 LANGUAGE plpgsql
AS $function$
declare
   v_is_new integer;

   v_as_id integer;
   v_as_numero integer;
   v_as_nrodoc varchar(50);
   v_as_fecha date;
   v_as_descrip varchar(5000);
   v_as_doc_cliente varchar(5000);

   v_asi_orden smallint;
   v_asi_debe decimal(18,6);
   v_asi_haber decimal(18,6);
   v_asi_origen decimal(18,6);
   v_asi_tipo smallint;

   v_cli_id integer;
   v_doc_id_factura integer;

   v_desc1 decimal(18,6);
   v_desc2 decimal(18,6);
   v_descuento1 decimal(18,6);
   v_descuento2 decimal(18,6);

   v_doct_id integer;
   v_doc_id integer;
   v_doct_id_factura integer;
   v_doc_id_cliente integer;

   v_ta_id integer;

   v_ccos_id_cliente integer;
   v_ccos_id integer;

   v_mon_id integer;

   v_cue_id integer;

   v_to_id integer;
   v_to_count smallint;

   v_fvi_id integer;
   v_fvi_orden smallint;
   v_fvi_importe decimal(18,6);
   v_fvi_importeorigen decimal(18,6);
   v_fvi_neto decimal(18,6);

   v_fvperc_origen decimal(18,6);
   v_fvperc_importe decimal(18,6);

   v_error smallint;
   v_aux decimal(18,6);
   v_coef decimal(18,6);

   v_ordenItem smallint;

   v_ta_ultimonro integer;
   v_ta_mascara varchar(50);

   v_creado date;
   v_modificado date;
   v_modifico integer;

   v_cfg_valor varchar(5000);
begin

   p_error := 0;

   -- si no existe chau
   --
   if not exists ( select fv_id
                   from FacturaVenta
                   where fv_id = p_fv_id
                     and est_id <> 7 ) then
      return;
   end if;

   select fv.as_id,
          fv.cli_id,
          fv.doc_id,
          fv.fv_descuento1,
          fv.fv_descuento2,
          case
             when cpg.cpg_asientoXVto <> 0 then fv.fv_fechaVto
             else fv.fv_fechaiva
          end
     into v_as_id,
          v_cli_id,
          v_doc_id_factura,
          v_desc1,
          v_desc2,
          v_as_fecha
   from FacturaVenta fv
   join CondicionPago cpg
     on fv.cpg_id = cpg.cpg_id
   where fv.fv_id = p_fv_id;

   v_as_id := coalesce(v_as_id, 0);

   SET TRANSACTION READ WRITE;

/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                                        insert                                                                      //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/

   -- obtengo el documento @doc_id
   --
   select doc_id_asiento,
          FacturaVenta.doct_id,
          Documento.doc_id,
          Documento.mon_id,
          ccos_id,
          fv_nrodoc || ' ' || cli_nombre
   into v_doc_id,
        v_doct_id_factura,
        v_doc_id_cliente,
        v_mon_id,
        v_ccos_id_cliente,
        v_as_doc_cliente
   from FacturaVenta
   join Documento
     on FacturaVenta.doc_id = Documento.doc_id
   join Cliente
     on FacturaVenta.cli_id = Cliente.cli_id
   where fv_id = p_fv_id;

   -- obtengo el as_nrodoc
   --
   if v_as_id = 0 then

      v_is_new := -1;

      select sp_dbGetNewId('Asiento', 'as_id') into v_as_id;
      select sp_dbGetNewId('Asiento', 'as_numero') into v_as_numero;

      select ta_ultimonro,
             ta_mascara,
             doct_id
        into v_ta_ultimonro,
             v_ta_mascara,
             v_doct_id
      from Documento
      join Talonario
        on Documento.ta_id = Talonario.ta_id
      where doc_id = v_doc_id;

      v_ta_ultimonro := v_ta_ultimonro + 1;
      v_as_nrodoc := trim(to_char(v_ta_ultimonro));
      v_as_nrodoc := substr(v_ta_mascara, 1, length(v_ta_mascara) - length(v_as_nrodoc)) || v_as_nrodoc;

      insert into Asiento( as_id, as_numero, as_nrodoc, as_descrip, as_fecha, as_doc_cliente, doc_id, doct_id,
                           doct_id_cliente, doc_id_cliente, id_cliente, modifico )
        ( select v_as_id,
                 v_as_numero,
                 v_as_nrodoc,
                 fv_descrip,
                 v_as_fecha,
                 v_as_doc_cliente,
                 v_doc_id,
                 v_doct_id,
                 v_doct_id_factura,
                 v_doc_id_cliente,
                 p_fv_id,
                 modifico
          from FacturaVenta
          where fv_id = p_fv_id );

/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                                        update                                                                      //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/
   else

      v_is_new := 0;

      select fv_descrip,
             modifico,
             modificado
        into v_as_descrip,
             v_modifico,
             v_modificado
      from FacturaVenta
      where fv_id = p_fv_id;

      select doc_id,
             doct_id
        into v_doc_id,
             v_doct_id
      from Asiento
      where as_id = v_as_id;

      update Asiento
         set as_descrip = v_as_descrip,
             as_fecha = v_as_fecha,
             as_doc_cliente = v_as_doc_cliente,
             doc_id = v_doc_id,
             doct_id = v_doct_id,
             doct_id_cliente = v_doct_id_factura,
             doc_id_cliente = v_doc_id_cliente,
             id_cliente = p_fv_id,
             modifico = v_modifico,
             modificado = v_modificado
      where as_id = v_as_id;

   end if;

/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                                        items                                                                       //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/
   -- borro todos los items y solo hago inserts que se mucho mas simple y rapido
   --
   delete from AsientoItem where as_id = v_as_id;

   select count(distinct to_id)
     into v_to_count
   from FacturaVentaItem
   where fv_id = p_fv_id;

   if v_doct_id_factura = 1 /* Factura */ or v_doct_id_factura = 9 /* Nota de Debito */then

      select count(distinct to_id)
        into v_ordenItem
      from FacturaVentaItem
      where fv_id = p_fv_id;

      if v_desc1 <> 0 or v_desc2 <> 0 then
         v_asi_orden := v_ordenItem + 2;
      else
         v_asi_orden := v_ordenItem + 1;
      end if;

   else

      if v_doct_id_factura = 7 /* Nota de Credito */ then
         v_asi_orden := 1;
      end if;

   end if;


   for v_fvi_neto,v_fvi_importe,v_fvi_importeorigen,v_cue_id,v_ccos_id in
        select sum(fvi.fvi_neto),
               sum(fvi.fvi_importe),
               sum(fvi.fvi_importeorigen),
               coalesce(ccueg.cue_id, cueg.cue_id),
               fvi.ccos_id
        from FacturaVentaItem fvi
        join Producto p
          on fvi.pr_id = p.pr_id
        join CuentaGrupo cueg
          on p.cueg_id_venta = cueg.cueg_id
        left join ClienteCuentaGrupo ccueg
          on cueg.cueg_id = ccueg.cueg_id and ccueg.cli_id = v_cli_id
        where fvi.fv_id = p_fv_id
        group by coalesce(ccueg.cue_id, cueg.cue_id),fvi.ccos_id
   loop

      if v_doct_id_factura = 1 /* Factura */ or v_doct_id_factura = 9 /* Nota de Debito */ then

         v_asi_debe := 0;
         v_asi_haber := v_fvi_neto;

      else

         if v_doct_id_factura = 7 /* Nota de Credito */ then

            v_asi_debe := v_fvi_neto;
            v_asi_haber := 0;

         end if;

      end if;

      if v_fvi_importeorigen <> 0 then

         v_asi_origen := v_fvi_neto / (v_fvi_importe / v_fvi_importeorigen);

      else

         v_asi_origen := 0;

      end if;

      perform sp_doc_asiento_save_item(
                            v_is_new,
                            0,
                            v_as_id,
                            v_asi_orden,
                            v_asi_debe,
                            v_asi_haber,
                            v_asi_origen,
                            0,
                            v_mon_id,
                            v_cue_id,
                            v_ccos_id,
                            null);

      v_asi_orden := v_asi_orden + 1;

   end loop;

/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                                        percepciones                                                                //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/

   v_asi_debe := 0;

   for v_asi_haber,v_asi_origen,v_cue_id,v_ccos_id in
        select sum(fvperc.fvperc_importe),
               sum(fvperc.fvperc_origen),
               pt.cue_id,
               fvperc.ccos_id
        from FacturaVentaPercepcion fvperc
        join Percepcion p
          on fvperc.perc_id = p.perc_id
        join PercepcionTipo pt
          on p.perct_id = pt.perct_id
        where fvperc.fv_id = p_fv_id
        group by pt.cue_id,fvperc.ccos_id
   loop

      if v_doct_id_factura = 7 /* Nota de Credito */ then

         v_asi_debe := v_asi_haber;
         v_asi_haber := 0;

      end if;

      perform sp_doc_asiento_save_item(
                            v_is_new,
                            0,
                            v_as_id,
                            v_asi_orden,
                            v_asi_debe,
                            v_asi_haber,
                            v_asi_origen,
                            0,
                            v_mon_id,
                            v_cue_id,
                            v_ccos_id,
                            null);

      v_asi_orden := v_asi_orden + 1;

   end loop;


/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                                        iva                                                                         //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/

   perform sp_doc_factura_venta_asiento_save_iva(
                              p_fv_id,
                              v_as_id,
                              1,
                              v_mon_id,
                              v_doct_id_factura,
                              v_ccos_id,
                              v_desc1,
                              v_desc2);

   perform sp_doc_factura_venta_asiento_save_iva(
                              p_fv_id,
                              v_as_id,
                              0,
                              v_mon_id,
                              v_doct_id_factura,
                              v_ccos_id,
                              v_desc1,
                              v_desc2);

/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                                        internos                                                                    //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/

   perform sp_doc_factura_venta_asiento_save_interno(
                                  p_fv_id,
                                  v_as_id,
                                  v_mon_id,
                                  v_doct_id_factura,
                                  v_ccos_id,
                                  v_desc1,
                                  v_desc2);

   v_descuento2 := 0;
   v_descuento1 := 0;


   for v_fvi_neto,v_fvi_importe,v_fvi_importeorigen,v_to_id in
        select sum(fvi_neto),
               sum(fvi_importe),
               sum(fvi_importeorigen),
               to_id
        from FacturaVentaItem
        where fv_id = p_fv_id
        group by to_id
   loop

      select * from sp_doc_get_cue_id
                    (
                     v_cli_id,
                     v_doc_id_factura,
                     v_to_id
                    )
               into
                     v_cue_id,
                     v_mon_id;

      if v_doct_id_factura = 7 /* Nota de Credito */ then

         v_asi_debe := 0;
         v_asi_haber := v_fvi_importe;

         -- las percepciones van con la cuenta asociada al tipo de operacion 1 (comercial)
         --
         if v_to_id = 1 /* Comercial */ or v_to_count = 1 then

            -- sumo percepciones
            --
            select sum(fvperc_importe),
                   sum(fvperc_origen)
              into v_fvperc_importe,
                   v_fvperc_origen
            from FacturaVentaPercepcion
            where fv_id = p_fv_id;

         else

            -- otro tipo de operaciones
            --
            v_fvperc_importe := 0;
            v_fvperc_origen := 0;

         end if;

         v_asi_haber := v_asi_haber + coalesce(v_fvperc_importe, 0);
         v_fvi_importeorigen := v_fvi_importeorigen + coalesce(v_fvperc_origen, 0);

         if v_fvi_importeorigen <> 0 then
            v_coef := v_asi_haber / v_fvi_importeorigen;
         else
            v_coef := 0;
         end if;

         v_asi_haber := v_asi_haber - (v_asi_haber * v_desc1 / 100);
         v_asi_haber := v_asi_haber - (v_asi_haber * v_desc2 / 100);
         v_descuento2 := v_descuento2 + (v_fvi_neto - v_fvi_neto * v_desc1 / 100) * v_desc2 / 100;
         v_descuento1 := v_descuento1 + v_fvi_neto * v_desc1 / 100;

         select max(asi_orden) + 1
           into v_asi_orden
         from AsientoItem
         where as_id = v_as_id;

      else

         if v_doct_id_factura = 1 /* Factura */ or v_doct_id_factura = 9 /* Nota de Debito */ then

            v_asi_debe := v_fvi_importe;

            -- las percepciones van con la cuenta asociada al tipo de operacion 1 (comercial)
            --
            if v_to_id = 1 /* Comercial */ or v_to_count = 1 then

               -- sumo percepciones
               --
               select sum(fvperc_importe),
                      sum(fvperc_origen)
                 into v_fvperc_importe,
                      v_fvperc_origen
               from FacturaVentaPercepcion
               where fv_id = p_fv_id;

            else

               -- otros tipos de operaciones
               --
               v_fvperc_importe := 0;
               v_fvperc_origen := 0;

            end if;

            v_asi_debe := v_asi_debe + coalesce(v_fvperc_importe, 0);
            v_fvi_importeorigen := v_fvi_importeorigen + coalesce(v_fvperc_origen, 0);

            if v_fvi_importeorigen <> 0 then
               v_coef := v_asi_debe / v_fvi_importeorigen;
            else
               v_coef := 0;
            end if;

            v_asi_debe := v_asi_debe - (v_asi_debe * v_desc1 / 100);
            v_asi_debe := v_asi_debe - (v_asi_debe * v_desc2 / 100);
            v_descuento2 := v_descuento2 + (v_fvi_neto - v_fvi_neto * v_desc1 / 100) * v_desc2 / 100;
            v_descuento1 := v_descuento1 + v_fvi_neto * v_desc1 / 100;
            v_asi_haber := 0;
            v_asi_orden := 1;

         end if;

      end if;

      if v_fvi_importeorigen <> 0 then

         v_fvi_importeorigen := v_fvi_importeorigen - (v_fvi_importeorigen * v_desc1 / 100);
         v_fvi_importeorigen := v_fvi_importeorigen - (v_fvi_importeorigen * v_desc2 / 100);
         v_asi_origen := v_fvi_importeorigen;

      else

         v_asi_origen := 0;

      end if;

      if v_to_count = 1 then

         v_asi_tipo := 1;-- Cta deudor

      else

         select to_generadeuda
           into v_asi_tipo
         from TipoOperacion
         where to_id = v_to_id;

         if v_asi_tipo <> 0 then

            v_asi_tipo := 1; -- Cta deudor

         end if;

      end if;

      perform sp_doc_asiento_save_item(
                            v_is_new,
                            0,
                            v_as_id,
                            v_asi_orden,
                            v_asi_debe,
                            v_asi_haber,
                            v_asi_origen,
                            v_asi_tipo,-- TO

                            v_mon_id,
                            v_cue_id,
                            v_ccos_id_cliente,
                            null);

      v_asi_orden := v_asi_orden + 1;

   end loop;

/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                                descuentos globales                                                                 //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/
   if v_desc1 <> 0 or v_desc2 <> 0 then

      select sp_cfg_getValor('Ventas-General', 'Cuenta Descuento Global') into v_cfg_valor;

      v_cue_id := to_number(v_cfg_valor);

      if v_doct_id_factura = 7 /* Nota de Credito */ then

         select max(asi_orden) + 1
           into v_asi_orden
         from AsientoItem
         where as_id = v_as_id;

      else

         if v_doct_id_factura = 1 /* Factura */ or v_doct_id_factura = 9 /* Nota de Debito */ then

            v_asi_orden := 2;

         end if;

      end if;

      if v_desc1 <> 0 then

         if v_doct_id_factura = 7 /* Nota de Credito */ then

            v_asi_debe := 0;
            v_asi_haber := v_descuento1;

         else

            if v_doct_id_factura = 1 /* Factura */ or v_doct_id_factura = 9 /* Nota de Debito */ then

               v_asi_debe := v_descuento1;
               v_asi_haber := 0;

            end if;

         end if;

         if v_coef <> 0 then

            v_asi_origen := v_descuento1 / v_coef;

         else

            v_asi_origen := 0;

         end if;

      end if;

      if v_desc2 <> 0 then

         select max(asi_orden) + 1
           into v_asi_orden
         from AsientoItem
         where as_id = v_as_id;

         if v_doct_id_factura = 7 /* Nota de Credito */ then

            v_asi_debe := 0;
            v_asi_haber := v_asi_haber + v_descuento2;

         else

            if v_doct_id_factura = 1 /* Factura */ or v_doct_id_factura = 9 /* Nota de Debito */ then

               v_asi_debe := v_asi_debe + v_descuento2;
               v_asi_haber := 0;

            end if;

         end if;

         if v_coef <> 0 then

            v_asi_origen := v_asi_origen + v_descuento2 / v_coef;

         else

            v_asi_origen := 0;

         end if;

      end if;

      perform sp_doc_asiento_save_item(
                            v_is_new,
                            0,
                            v_as_id,
                            v_asi_orden,
                            v_asi_debe,
                            v_asi_haber,
                            v_asi_origen,
                            0,
                            v_mon_id,
                            v_cue_id,
                            v_ccos_id_cliente,
                            null);

   end if;

/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                                valido el asiento                                                                   //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/
   select * from sp_doc_asiento_validate(v_as_id) into v_error, p_error_msg;

   if v_error <> 0 then
      raise exception '%', p_error_msg;
   end if;


/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                                talonario                                                                           //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/
   select ta_id
     into v_ta_id
   from Documento
   where doc_id = v_doc_id;

   perform sp_talonario_set(v_ta_id, v_as_nrodoc);

/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                                vinculo la factura con su asiento                                                   //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/
   update FacturaVenta
      set as_id = v_as_id,
          fv_grabarasiento = 0
   where fv_id = p_fv_id;

   p_error := 0;
   p_as_id := v_as_id;

exception
   when others then

      if p_raise_error <> 0 then

         raise exception 'Ha ocurrido un error al grabar la factura de venta. sp_doc_factura_venta_asiento_save. %. %.',
                         sqlstate, sqlerrm;
      else

         p_error := -1;
         p_error_msg := sqlstate || ';' || sqlerrm || ';';

      end if;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_doc_factura_venta_asiento_save_iva(p_fv_id integer, p_as_id integer, p_iva_ri integer, p_mon_id integer, p_doct_id_factura integer, p_ccos_id integer, p_desc1 numeric, p_desc2 numeric)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
declare
   c_FacturaItemAsientoIva refcursor;
   v_iva decimal(18,6);
   v_fvi_importe decimal(18,6);
   v_fvi_importeorigen decimal(18,6);
   v_cue_id integer;
   v_asi_debe decimal(18,6);
   v_asi_haber decimal(18,6);
   v_asi_origen decimal(18,6);
   v_fvi_neto decimal(18,6);
   v_asi_orden smallint;
   v_asi_id integer;
   v_is_new integer;
   c_items refcursor;
begin

   select max(asi_orden)
     into v_asi_orden
   from AsientoItem
   where as_id = p_as_id;

   if p_iva_ri <> 0 then

      open c_items for
         select sum(fvi.fvi_ivari),
                sum(fvi.fvi_importe),
                sum(fvi.fvi_importeorigen),
                ti.cue_id
         from FacturaVentaItem fvi
         join Producto p
           on fvi.pr_id = p.pr_id
         join TasaImpositiva ti
           on p.ti_id_ivariventa = ti.ti_id
         where fvi.fv_id = p_fv_id
         group by ti.cue_id
         having sum(fvi.fvi_ivari) <> 0;

   else

      open c_items for
         select sum(fvi.fvi_ivarni),
                sum(fvi.fvi_importe),
                sum(fvi.fvi_importeorigen),
                ti.cue_id
         from FacturaVentaItem fvi
         join Producto p
           on fvi.pr_id = p.pr_id
         join TasaImpositiva ti
           on p.ti_id_ivarniventa = ti.ti_id
         where fvi.fv_id = p_fv_id
         group by ti.cue_id
         having sum(fvi.fvi_ivarni) <> 0;

   end if;

   loop

      fetch c_items into v_iva,v_fvi_importe,v_fvi_importeorigen,v_cue_id;
      exit when not found;

      v_asi_id := null;

      if p_doct_id_factura = 1 /* Factura */ or p_doct_id_factura = 9 /* Nota de Debito */ then

         v_asi_debe := 0;
         v_asi_haber := v_iva;
         v_asi_haber := v_asi_haber - (v_asi_haber * p_desc1 / 100);
         v_asi_haber := v_asi_haber - (v_asi_haber * p_desc2 / 100);

         select asi_id
           into v_asi_id
         from AsientoItem
         where as_id = p_as_id
           and cue_id = v_cue_id
           and asi_debe = 0
           and coalesce(ccos_id, 0) = coalesce(p_ccos_id, 0);

      else

         if p_doct_id_factura = 7 /* Nota de Credito */ then

            v_asi_debe := v_iva;
            v_asi_debe := v_asi_debe - (v_asi_debe * p_desc1 / 100);
            v_asi_debe := v_asi_debe - (v_asi_debe * p_desc2 / 100);
            v_asi_haber := 0;

            select asi_id
              into v_asi_id
            from AsientoItem
            where as_id = p_as_id
              and cue_id = v_cue_id
              and asi_haber = 0
              and coalesce(ccos_id, 0) = coalesce(p_ccos_id, 0);

         end if;

      end if;

      if v_fvi_importeorigen <> 0 then

         v_fvi_importeorigen := v_fvi_importeorigen - (v_fvi_importeorigen * p_desc1 / 100);
         v_fvi_importeorigen := v_fvi_importeorigen - (v_fvi_importeorigen * p_desc2 / 100);
         v_asi_origen := v_iva / (v_fvi_importe / v_fvi_importeorigen);

      else

         v_asi_origen := 0;

      end if;

      v_asi_id := coalesce(v_asi_id, 0);

      if v_asi_id = 0 then

         select sp_dbGetNewId('AsientoItem', 'asi_id') into v_asi_id;

         v_asi_orden := v_asi_orden + 1;

         insert into AsientoItem( as_id, asi_id, asi_orden, asi_descrip, asi_debe, asi_haber, asi_origen,
                                  cue_id, ccos_id, mon_id )
         values ( p_as_id, v_asi_id, v_asi_orden, '', v_asi_debe, v_asi_haber, v_asi_origen, v_cue_id, p_ccos_id, p_mon_id );

      else

         update AsientoItem
            set asi_debe = asi_debe + v_asi_debe,
                asi_haber = asi_haber + v_asi_haber,
                asi_origen = asi_origen + v_asi_origen
         where asi_id = v_asi_id;

      end if;

   end loop;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_doc_factura_venta_editable_get(p_emp_id integer, p_fv_id integer, p_us_id integer, p_no_anulado integer DEFAULT 0, p_delete integer DEFAULT 0, OUT p_editable integer, OUT p_edit_msg character varying)
 RETURNS record
 LANGUAGE plpgsql
AS $function$
declare
   v_doc_id integer;
   v_fv_fecha date;
   v_estado integer;
   v_firmado integer;
   v_emp_id integer;
   v_emp_nombre varchar(255);
   v_impreso smallint;

   v_anulado integer := 7;
   v_csPreVtaEditFactura integer;
   v_csPreVtaDeleteFactura integer;

   v_pre_id integer;
   v_doc_nombre varchar(255);
   v_fca_id integer;

   v_fca_fechaDesde date;
   v_fca_fechaHasta date;

   v_doc_editarimpresos smallint;
begin

   v_anulado := 7;

   v_csPreVtaEditFactura := 16003;

   v_csPreVtaDeleteFactura := 16004;

   if p_fv_id <> 0 then

      select d.doc_id,
             d.emp_id,
             c.fv_fecha,
             c.est_id,
             c.impreso
        into v_doc_id,
             v_emp_id,
             v_fv_fecha,
             v_estado,
             v_impreso
      from FacturaVenta c
             join Documento d
               on c.doc_id = d.doc_id
      where c.fv_id = p_fv_id;

      if p_emp_id <> v_emp_id then

         select emp_nombre
           into v_emp_nombre
         from Empresa
         where emp_id = v_emp_id;

         p_editable := 0;

         if p_delete = 0 then
            p_edit_msg := 'El comprobante pertenece a la empresa ' || v_emp_nombre || ', para editarlo debe ingresar al sistema indicando dicha empresa.';
         else
            p_edit_msg := 'El comprobante pertenece a la empresa ' || v_emp_nombre || ', para borrarlo debe ingresar al sistema indicando dicha empresa.';
         end if;

         return;

      end if;

      if v_estado = v_anulado and p_no_anulado = 0 then

         p_editable := 0;
         p_edit_msg := 'El comprobante esta anulado';

         return;

      end if;

      if p_delete = 0 then
         v_pre_id := v_csPreVtaEditFactura;
      else
         v_pre_id := v_csPreVtaDeleteFactura;
      end if;

      -- Tiene permiso para editar facturas de venta
      --
      if not exists ( select per_id
                      from Permiso
                      where pre_id = v_pre_id
                        and ( ( us_id = p_us_id )
                             or exists ( select us_id
                                         from UsuarioRol
                                         where us_id = p_us_id
                                           and rol_id = Permiso.rol_id ))) then
         p_editable := 0;

         if p_delete = 0 then
            p_edit_msg := 'Usted no tiene permiso para editar facturas de venta';
         else
            p_edit_msg := 'Usted no tiene permiso para borrar facturas de venta';
         end if;

         return;

      end if;

      v_pre_id := null;

      select case
               when p_delete = 0 then pre_id_edit
               else pre_id_delete
             end,
             doc_nombre
        into v_pre_id,
             v_doc_nombre
      from Documento
      where doc_id = v_doc_id;

      if not exists ( select per_id
                      from Permiso
                      where pre_id = v_pre_id
                        and ( ( us_id = p_us_id )
                               or exists ( select us_id
                                           from UsuarioRol
                                           where us_id = p_us_id
                                             and rol_id = Permiso.rol_id ))) then
         p_editable := 0;

         if p_delete = 0 then
            p_edit_msg := 'Usted no tiene permiso para editar ' || v_doc_nombre;
         else
            p_edit_msg := 'Usted no tiene permiso para borrar ' || v_doc_nombre;
         end if;

         return;

      end if;

      -- Fechas de control de Acceso
      select fca_id
        into v_fca_id
      from Documento
      where doc_id = v_doc_id;

      if not v_fca_id is null then

         if not exists ( select fca_id
                         from FechaControlAcceso
                         where fca_id = v_fca_id
                           and v_fv_fecha between fca_fechaDesde and fca_fechaHasta ) then

            select fca_fechaDesde,
                   fca_fechaHasta
              into v_fca_fechaDesde,
                   v_fca_fechaHasta
            from FechaControlAcceso
            where fca_id = v_fca_id;

            p_editable := 0;

            p_edit_msg := 'La fecha del comprobante esta fuera del intervalo definido por las fechas de control de acceso (' 
                            || to_char(coalesce(v_fca_fechaDesde, ''), 'dd-mm-yyyy') 
                            || ' - ' 
                            || to_char(coalesce(v_fca_fechaHasta, ''), 'dd-mm-yyyy') 
                            || ')';

            return;

         end if;

      end if;

      if exists ( select fv_id
                  from FacturaVentaCobranza
                  where fv_id = p_fv_id ) then

         p_editable := 0;
         p_edit_msg := 'El comprobante esta vinculado a una cobranza';

         return;

      end if;


      if exists ( select fv_id_factura
                  from FacturaVentaNotaCredito
                  where fv_id_factura = p_fv_id
                     or fv_id_notacredito = p_fv_id ) then

         p_editable := 0;
         p_edit_msg := 'El comprobante esta vinculado a una factura o nota de credito';

         return;

      end if;

      if exists ( select fvi.fv_id
                  from RemitoFacturaVenta r
                  join FacturaVentaItem fvi
                    on r.fvi_id = fvi.fvi_id
                  where fvi.fv_id = p_fv_id ) then

         p_editable := 0;
         p_edit_msg := 'El comprobante esta vinculado a un remito';

         return;

      end if;


      if exists ( select fvi.fv_id
                  from PedidoFacturaVenta r
                  join FacturaVentaItem fvi
                    on r.fvi_id = fvi.fvi_id
                  where fvi.fv_id = p_fv_id ) then

         p_editable := 0;
         p_edit_msg := 'El comprobante esta vinculado a un pedido de venta';

         return;

      end if;

      if exists ( select fvi.fv_id
                  from PackingListFacturaVenta r
                  join FacturaVentaItem fvi
                    on r.fvi_id = fvi.fvi_id
                  where fvi.fv_id = p_fv_id ) then

         p_editable := 0;
         p_edit_msg := 'El comprobante esta vinculado a un packing list';

         return;

      end if;

      if v_impreso <> 0 and p_no_anulado = 0 then

         select doc_editarimpresos
           into v_doc_editarimpresos
         from Documento
         where doc_id = v_doc_id;

         if v_doc_editarimpresos = 0 then

            p_editable := 0;

            if p_delete = 0 then
               p_edit_msg := 'El comprobante esta impreso y la definición de su documento no permite la edición de comprobantes impresos.';
            else
               p_edit_msg := 'El comprobante esta impreso y la definición de su documento no permite eliminar comprobantes impresos.';
            end if;

            return;

         end if;

      end if;

   end if;

   p_editable := 1;
   p_edit_msg := '';

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_doc_factura_venta_get(p_emp_id integer, p_fv_id integer, p_us_id integer, OUT rtn refcursor)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
declare
   v_editable integer;
   v_edit_msg varchar(255);
   v_doc_id integer;
   v_doct_id integer;
   v_ta_mascara varchar(100);
   v_ta_propuesto smallint;
   v_DeplNombre varchar(255);
   v_DeplId integer;
   v_DepfId integer;
   v_bIvari smallint;
   v_bIvarni smallint;
   v_cli_id integer;
begin

   rtn := 'rtn';

/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                             TALONARIO Y ESTADO DE EDICION                                                          //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/
   select cli_id,
          doc_id,
          doct_id
   into v_cli_id,
          v_doc_id,
          v_doct_id
   from FacturaVenta
   where fv_id = p_fv_id;

   select * from sp_talonario_get_propuesto(v_doc_id, v_cli_id, 0) into  v_ta_mascara, v_ta_propuesto;

   select * from sp_cliente_get_iva(v_cli_id) into v_bIvari, v_bIvarni;

   select * from sp_doc_factura_venta_editable_get(p_emp_id, p_fv_id, p_us_id) into v_editable, v_edit_msg;

/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                             DEPOSITO                                                                               //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/
   /*Factura de Venta*/
   /*Nota de Debito Venta*/
   if v_doct_id = 1
     or v_doct_id = 9 then
   begin
      select dOrigen.depl_nombre,
             depl_id_origen,
             dOrigen.depf_id
      into v_DeplNombre,
           v_DeplId,
           v_DepfId
      from FacturaVenta
               join Stock
                on FacturaVenta.st_id = Stock.st_id
               left join DepositoLogico dOrigen
                on Stock.depl_id_origen = dOrigen.depl_id
      where fv_id = p_fv_id;

      v_DeplNombre := coalesce(v_DeplNombre, '');

      v_DeplId := coalesce(v_DeplId, 0);

      if v_DeplId = 0 then
      begin
         select dOrigen.depl_nombre,
                depl_id_origen,
                dOrigen.depf_id
           into v_DeplNombre,
                v_DeplId,
                v_DepfId
           from FacturaVenta
                  join RemitoVenta
                   on FacturaVenta.rv_id = RemitoVenta.rv_id
                  join Stock
                   on RemitoVenta.st_id = Stock.st_id
                  left join DepositoLogico dOrigen
                   on Stock.depl_id_origen = dOrigen.depl_id
            where fv_id = p_fv_id;

      end;
      end if;

   end;
   else
   begin
      /*Nota de Credito Venta*/
      if v_doct_id = 7 then
         select dDestino.depl_nombre,
                        depl_id_destino,
                        dDestino.depf_id
           into v_DeplNombre,
                v_DeplId,
                v_DepfId
           from FacturaVenta
                  join Stock
                   on FacturaVenta.st_id = Stock.st_id
                  left join DepositoLogico dDestino
                   on Stock.depl_id_destino = dDestino.depl_id
            where fv_id = p_fv_id;

      end if;

      v_DeplNombre := coalesce(v_DeplNombre, '');

      v_DeplId := coalesce(v_DeplId, 0);

      if v_DeplId = 0 then
      begin
         select dDestino.depl_nombre,
                depl_id_destino,
                dDestino.depf_id
           into v_DeplNombre,
                v_DeplId,
                v_DepfId
           from FacturaVenta
                  join RemitoVenta
                   on FacturaVenta.rv_id = RemitoVenta.rv_id
                  join Stock
                   on RemitoVenta.st_id = Stock.st_id
                  left join DepositoLogico dDestino
                   on Stock.depl_id_destino = dDestino.depl_id
            where fv_id = p_fv_id;

      end;
      end if;

   end;
   end if;

/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                             select                                                                                 //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/
   open rtn for

      select FacturaVenta.*,
             doct_nombre,
             mon_nombre,
             Documento.doc_fv_sinpercepcion,
             cli_nombre,
             lp_nombre,
             ld_nombre,
             cpg_nombre,
             est_nombre,
             ccos_nombre,
             suc_nombre,
             doc_nombre,
             ven_nombre,
             case
                  when lgj_titulo <> '' then lgj_titulo
                  else lgj_codigo
             end lgj_codigo,
             pOrigen.pro_nombre ProOrigen,
             pDestino.pro_nombre ProDestino,
             trans_nombre,
             clis_nombre,
             v_DeplId depl_id,
             v_DeplNombre depl_nombre,
             v_DepfId depf_id,
             v_bIvari bIvaRi,
             v_bIvarni bIvaRni,
             v_editable editable,
             v_edit_msg editMsg,
             v_ta_mascara ta_mascara,
             v_ta_propuesto ta_propuesto,
             doc_muevestock,
             doc_tipofactura
        from FacturaVenta
               join Documento
                on FacturaVenta.doc_id = Documento.doc_id
               join DocumentoTipo
                on FacturaVenta.doct_id = DocumentoTipo.doct_id
               join Moneda
                on FacturaVenta.mon_id = Moneda.mon_id
               join CondicionPago
                on FacturaVenta.cpg_id = CondicionPago.cpg_id
               join Estado
                on FacturaVenta.est_id = Estado.est_id
               join Sucursal
                on FacturaVenta.suc_id = Sucursal.suc_id
               join Cliente
                on FacturaVenta.cli_id = Cliente.cli_id
               left join CentroCosto
                on FacturaVenta.ccos_id = CentroCosto.ccos_id
               left join ListaPrecio
                on FacturaVenta.lp_id = ListaPrecio.lp_id
               left join ListaDescuento
                on FacturaVenta.ld_id = ListaDescuento.ld_id
               left join Vendedor
                on FacturaVenta.ven_id = Vendedor.ven_id
               left join Legajo
                on FacturaVenta.lgj_id = Legajo.lgj_id
               left join Provincia pOrigen
                on FacturaVenta.pro_id_origen = pOrigen.pro_id
               left join Provincia pDestino
                on FacturaVenta.pro_id_destino = pDestino.pro_id
               left join Transporte
                on FacturaVenta.trans_id = Transporte.trans_id
               left join ClienteSucursal
                on FacturaVenta.clis_id = ClienteSucursal.clis_id
         where fv_id = p_fv_id;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_doc_factura_venta_get_items(p_fv_id integer, OUT rtn refcursor, OUT rtn_serie refcursor, OUT rtn_kit refcursor)
 RETURNS record
 LANGUAGE plpgsql
AS $function$
declare
   v_st_id integer;
   v_pr_id integer;
begin

   rtn := 'rtn';

   select st_id
     into v_st_id
   from FacturaVenta
   where fv_id = p_fv_id;

   open rtn for
      
      select fvi.*,
             pr_nombreventa,
             pr_llevanroserie,
             pr_llevanrolote,
             pr_lotefifo,
             pr_eskit,
             pr_porcinternov,
             tri.ti_porcentaje iva_ri_porcentaje,
             trni.ti_porcentaje iva_rni_porcentaje,
             tint.ti_porcentaje internos_porcentaje,
             ccos_nombre,
             un_nombre,
             to_nombre,
             stl_codigo,
             fvi_orden as orden
      from FacturaVentaItem fvi
      join Producto pr
       on fvi.pr_id = pr.pr_id
      join Unidad un
       on pr.un_id_venta = un.un_id
      join TipoOperacion tp
       on fvi.to_id = tp.to_id
      left join TasaImpositiva tri
       on pr.ti_id_ivariventa = tri.ti_id
      left join TasaImpositiva trni
       on pr.ti_id_ivarniventa = trni.ti_id
      left join TasaImpositiva tint
       on pr.ti_id_internosv = tint.ti_id
      left join CentroCosto ccos
       on fvi.ccos_id = ccos.ccos_id
      left join StockLote stl
       on fvi.stl_id = stl.stl_id
      where fv_id = p_fv_id
        and pr_eskit = 0
      
      union
      
      select fvi.*,
             pr_nombreventa,
             ( select min(stik_llevanroserie)
               from StockItemKit
               where pr_id = fvi.pr_id
                 and st_id = v_st_id ) pr_llevanroserie,
             pr_llevanrolote,
             pr_lotefifo,
             pr_eskit,
             pr_porcinternov,
             tri.ti_porcentaje iva_ri_porcentaje,
             trni.ti_porcentaje iva_rni_porcentaje,
             tint.ti_porcentaje internos_porcentaje,
             ccos_nombre,
             un_nombre,
             to_nombre,
             stl_codigo,
             fvi_orden as orden
      from FacturaVentaItem fvi
      join Producto pr
       on fvi.pr_id = pr.pr_id
      join Unidad un
       on pr.un_id_venta = un.un_id
      join TipoOperacion tp
       on fvi.to_id = tp.to_id
      left join TasaImpositiva tri
       on pr.ti_id_ivariventa = tri.ti_id
      left join TasaImpositiva trni
       on pr.ti_id_ivarniventa = trni.ti_id
      left join TasaImpositiva tint
       on pr.ti_id_internosv = tint.ti_id
      left join CentroCosto ccos
       on fvi.ccos_id = ccos.ccos_id
      left join StockLote stl
       on fvi.stl_id = stl.stl_id
      where fv_id = p_fv_id
        and pr_eskit <> 0
      order by orden;

 --///////////////////////////////////////////////////////////////////////////////////////////////////
 --
 --  NUMEROS DE SERIE
 --
 --///////////////////////////////////////////////////////////////////////////////////////////////////

   rtn_serie := 'rtn_serie';

   open rtn_serie for
   
      select prns.pr_id,
                     p.pr_nombrecompra,
                     prns.prns_id,
                     prns.prns_codigo,
                     prns.prns_descrip,
                     prns.prns_fechavto,
                     fvi.fvi_id
      from FacturaVentaItem fvi
      join FacturaVenta fv
        on fvi.fv_id = fv.fv_id
       and fvi.fv_id = p_fv_id
      join StockItem sti
        on sti.st_id = fv.st_id
       and sti.sti_grupo = fvi.fvi_id
      join ProductoNumeroSerie prns
        on prns.prns_id = sti.prns_id
      join Producto p
        on prns.pr_id = p.pr_id
      group by prns.prns_id,prns.pr_id,
               p.pr_nombrecompra,
               prns.prns_codigo,
               prns.prns_descrip,
               prns.prns_fechavto,fvi.fvi_id
      order by fvi.fvi_id;
      
   create temporary table tt_kit_item_serie
   (
    pr_id_kit_padre     integer,
    pr_id_kit           integer,
    cantidad            decimal(18,6) not null,
    cant_kits           integer default (0) not null,
    faltante            integer default (0) not null,
    pr_id               integer not null,
    prk_id              integer not null,
    costo               decimal(18,6) default (0) not null,
    costo_x_insumos     decimal(18,6) default (0) not null,
    col_order           integer default (3) not null,
    nivel               smallint default (0) not null
   ) on commit drop;

   for v_pr_id in select pr_id from StockItemKit where st_id = v_st_id
   loop

         perform sp_stock_producto_get_kit_info(v_pr_id, 0);

         update tt_kit_item_serie
            set pr_id_kit = v_pr_id
         where pr_id_kit is null;

   end loop;

   open rtn_kit for
   
      select k.pr_id_kit pr_id,
             k.pr_id pr_id_item,
             p.pr_nombrecompra,
             p.pr_llevanroserie,
             cantidad
      from tt_kit_item_serie k
      join Producto p
        on k.pr_id = p.pr_id;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_doc_factura_venta_get_percepciones(p_fv_id integer, OUT rtn refcursor)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
begin

   rtn := 'rtn';

   open rtn for
      select FacturaVentaPercepcion.*,
             perc_nombre,
             ccos.ccos_nombre
      from FacturaVentaPercepcion
      join Percepcion
        on FacturaVentaPercepcion.perc_id = Percepcion.perc_id
      left join CentroCosto ccos
        on FacturaVentaPercepcion.ccos_id = ccos.ccos_id
      where fv_id = p_fv_id
      order by fvperc_orden;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_doc_factura_venta_prepare_kit(p_fv_id integer)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
begin

   if exists(
        select 1
        from FacturaVentaItem fvi
        join Producto p
          on fvi.pr_id = p.pr_id
        where fvi.fv_id = p_fv_id
          and p.pr_llevastock <> 0
          and fvi.fvi_nostock = 0
          and p.pr_eskit <> 0) then

      create temporary table tt_KitItems
      (
         pr_id integer    not null,
         nivel integer    not null
      ) on commit drop;

      create temporary table tt_kit_item_serie
      (
         pr_id_kit_padre     integer,
         pr_id_kit           integer,
         cantidad            decimal(18,6) not null,
         cant_kits           integer default (0) not null,
         faltante            integer default (0) not null,
         pr_id               integer not null,
         prk_id              integer not null,
         costo               decimal(18,6) default (0) not null,
         costo_x_insumos     decimal(18,6) default (0) not null,
         col_order           integer default (3) not null,
         nivel               smallint default (0) not null
      ) on commit drop;

   end if;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_doc_factura_venta_remito_save(p_fv_id integer, p_rv_nrodoc character varying)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
declare
   v_rvTMP_id integer;
   v_rviTMP_id integer;
   v_rvi_orden smallint;
   v_rvi_cantidad decimal(18,6);
   v_rvi_cantidadaremitir decimal(18,6);
   v_rvi_pendiente decimal(18,6);
   v_rvi_pendientefac decimal(18,6);
   v_rvi_descrip varchar(255);
   v_rvi_precio decimal(18,6);
   v_rvi_precioUsr decimal(18,6);
   v_rvi_precioLista decimal(18,6);
   v_rvi_descuento varchar(100);
   v_rvi_neto decimal(18,6);
   v_rvi_ivari decimal(18,6);
   v_rvi_ivarni decimal(18,6);
   v_rvi_ivariporc decimal(18,6);
   v_rvi_ivarniporc decimal(18,6);
   v_rvi_importe decimal(18,6);
   v_pr_id integer;
   v_ccos_id integer;
   v_rv_id integer;
   v_rvfv_id integer;
   v_fvi_id integer;
   v_pvi_id integer;
   v_pvfv_cantidad decimal(18,6);
   v_fvi_cantidad decimal(18,6);
   v_fvi_orden integer;
   v_rvi_id integer;
   v_pvrv_id integer;
begin

   select sp_dbGetNewId('RemitoVentaTMP', 'rvTMP_id') into v_rvTMP_id;

   insert into RemitoVentaTMP
        ( rvTMP_id, rv_id, rv_numero, rv_nrodoc, rv_descrip, rv_fecha, rv_fechaentrega, rv_neto, rv_ivari, rv_ivarni,
          rv_subtotal, rv_total, rv_descuento1, rv_descuento2, rv_importedesc1, rv_importedesc2, rv_cotizacion, est_id,
          suc_id, cli_id, doc_id, lp_id, ld_id, lgj_id, cpg_id, ccos_id, ven_id, st_id, depl_id, depl_id_temp,
          pro_id_origen, pro_id_destino, trans_id, clis_id, creado, modificado, modifico )
        ( select v_rvTMP_id,
                 0,
                 0,
                 p_rv_nrodoc,
                 fv.fv_descrip,
                 fv.fv_fecha,
                 fv.fv_fechaentrega,
                 fv.fv_neto,
                 fv.fv_ivari,
                 fv.fv_ivarni,
                 fv.fv_subtotal,
                 fv.fv_total - fv.fv_totalpercepciones,
                 fv.fv_descuento1,
                 fv.fv_descuento2,
                 fv.fv_importedesc1,
                 fv.fv_importedesc2,
                 fv.fv_cotizacion,
                 fv.est_id,
                 fv.suc_id,
                 fv.cli_id,
                 doc.doc_id_remito,
                 fv.lp_id,
                 fv.ld_id,
                 fv.lgj_id,
                 fv.cpg_id,
                 fv.ccos_id,
                 fv.ven_id,
                 null,
                 null,
                 null,
                 fv.pro_id_origen,
                 fv.pro_id_destino,
                 fv.trans_id,
                 fv.clis_id,
                 fv.creado,
                 fv.modificado,
                 fv.modifico
          from FacturaVenta fv
          join Documento doc
            on fv.doc_id = doc.doc_id
          where fv.fv_id = p_fv_id );

   for v_rvi_orden,v_rvi_cantidad,v_rvi_cantidadaremitir,v_rvi_pendiente,v_rvi_pendientefac,v_rvi_descrip,v_rvi_precio,
       v_rvi_precioUsr,v_rvi_precioLista,v_rvi_descuento,v_rvi_neto,v_rvi_ivari,v_rvi_ivarni,v_rvi_ivariporc,
       v_rvi_ivarniporc,v_rvi_importe,v_pr_id,v_ccos_id
   in
      select fvi_orden,
             fvi_cantidad,
             fvi_cantidadaremitir,
             fvi_pendiente,
             fvi_pendiente,
             fvi_descrip,
             fvi_precio,
             fvi_precioUsr,
             fvi_precioLista,
             fvi_descuento,
             fvi_neto,
             fvi_ivari,
             fvi_ivarni,
             fvi_ivariporc,
             fvi_ivarniporc,
             fvi_importe,
             pr_id,
             ccos_id
      from FacturaVentaItem
      where fv_id = p_fv_id
      order by fvi_orden
   loop

      select sp_dbGetNewId('RemitoVentaItemTMP', 'rviTMP_id') into v_rviTMP_id;

      insert into RemitoVentaItemTMP
         ( rvTMP_id, rviTMP_id, rvi_id, rvi_orden, rvi_cantidad, rvi_cantidadaremitir, rvi_pendiente, rvi_pendientefac,
           rvi_descrip, rvi_precio, rvi_precioUsr, rvi_precioLista, rvi_descuento, rvi_neto, rvi_ivari, rvi_ivarni,
           rvi_ivariporc, rvi_ivarniporc, rvi_importe, rvi_importCodigo, pr_id, ccos_id )
      values ( v_rvTMP_id, v_rviTMP_id, 0, v_rvi_orden, v_rvi_cantidad, v_rvi_cantidadaremitir, v_rvi_pendiente,
               v_rvi_pendientefac, v_rvi_descrip, v_rvi_precio, v_rvi_precioUsr, v_rvi_precioLista, v_rvi_descuento,
               v_rvi_neto, v_rvi_ivari, v_rvi_ivarni, v_rvi_ivariporc, v_rvi_ivarniporc, v_rvi_importe, '', v_pr_id,
               v_ccos_id );

   end loop;

   perform sp_doc_remito_venta_save(v_rvTMP_id, v_rv_id);

   -- si existe una aplicacion entre la factura y pedidos de venta
   -- traspaso dicha aplicacion al remito que acabo de generar
   --
   if exists ( select *
               from FacturaVentaItem fvi
               join PedidoFacturaVenta pvfv
                 on fvi.fv_id = p_fv_id and fvi.fvi_id = pvfv.fvi_id ) then


      for v_pvfv_cantidad,v_pvi_id,v_fvi_orden in
           select pvfv.pvfv_cantidad,
                  pvfv.pvi_id,
                  fvi.fvi_orden
           from FacturaVentaItem fvi
           join PedidoFacturaVenta pvfv
            on fvi.fv_id = p_fv_id
           and fvi.fvi_id = pvfv.fvi_id
      loop

         select sp_dbGetNewId('PedidoRemitoVenta', 'pvrv_id') into v_pvrv_id;

         select rvi_id
           into v_rvi_id
         from RemitoVentaItem
         where rv_id = v_rv_id
           and rvi_orden = v_fvi_orden;

         insert into PedidoRemitoVenta( pvrv_id, pvrv_cantidad, pvi_id, rvi_id )
         values ( v_pvrv_id, v_pvfv_cantidad, v_pvi_id, v_rvi_id );

      end loop;

      delete from PedidoFacturaVenta
      where pvfv_id in ( select pvfv.pvfv_id
                         from FacturaVentaItem fvi
                         join PedidoFacturaVenta pvfv
                           on fvi.fv_id = p_fv_id
                          and fvi.fvi_id = pvfv.fvi_id );

   end if;


   for v_fvi_id,v_fvi_cantidad,v_fvi_orden in
        select fvi_id,
               fvi_cantidad,
               fvi_orden
        from FacturaVentaItem
        where fv_id = p_fv_id
        order by fvi_orden
   loop

      select sp_dbGetNewId('RemitoFacturaVenta', 'rvfv_id') into v_rvfv_id;

      select rvi_id
        into v_rvi_id
      from RemitoVentaItem
      where rv_id = v_rv_id
        and rvi_orden = v_fvi_orden;

      insert into RemitoFacturaVenta( rvfv_id, rvfv_cantidad, rvi_id, fvi_id )
      values ( v_rvfv_id, v_fvi_cantidad, v_rvi_id, v_fvi_id );

   end loop;

   perform sp_doc_remito_vta_set_item_pendiente(p_fv_id);

   -- actualizo la deuda de la Pedido
   --
   perform sp_doc_remito_venta_set_pendiente(v_rv_id);

   perform sp_doc_remito_venta_set_credito(v_rv_id);

   perform sp_doc_remito_venta_set_estado(v_rv_id);

exception
   when others then

      raise exception 'Ha ocurrido un error al grabar la factura de venta. sp_doc_factura_venta_remito_save. %. %.',
                      sqlstate, sqlerrm;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_doc_factura_venta_save(p_us_id integer, p_fvtmp_id integer)
 RETURNS SETOF row_result
 LANGUAGE plpgsql
AS $function$
declare
   rtn row_result;
   rtnAnticipo row_result;
   
   v_success integer;
   v_error integer;
   v_error_msg varchar(5000);
   v_cfg_valor varchar(5000);
   
   v_is_new integer;
   
   v_fv_id integer;
   v_fvi_id integer;
   
   v_orden smallint;
   v_doct_id integer;
   v_est_id integer;
   v_cpg_id integer;
   v_doc_mueveStock smallint;
   v_doc_generaremito smallint;
   v_depl_id integer;
   v_mon_id integer;
   v_ta_id integer;
   v_doc_id integer;
   v_cli_id integer;
   v_suc_id integer;
   v_lp_id integer;
   v_ld_id integer;
   v_ccos_id integer;
   v_stl_id integer;
   v_lgj_id integer;
   v_ven_id integer;
   v_pro_id_origen integer;
   v_pro_id_destino integer;
   v_trans_id integer;
   v_clis_id integer;
   v_emp_id integer;

   v_fv_total decimal(18,6);
   v_fv_fecha date;
   v_fv_fechaVto date;
   v_fv_descuento1 decimal(18,6);
   v_fv_descuento2 decimal(18,6);
   v_fv_totalpercepciones decimal(18,6);
   v_fv_nrodoc varchar(50);
   v_rv_nrodoc varchar(50);
   v_fv_numero integer;
   v_fv_descrip varchar(5000);
   v_fv_fechaentrega date;
   v_fv_fechaIva date;
   v_fv_neto decimal(18,6);
   v_fv_ivari decimal(18,6);
   v_fv_ivarni decimal(18,6);
   v_fv_internos decimal(18,6);
   v_fv_subtotal decimal(18,6);
   v_fv_totalorigen decimal(18,6);
   v_fv_cotizacion decimal(18,6);
   v_fv_importedesc1 decimal(18,6);
   v_fv_importedesc2 decimal(18,6);
   v_fv_grabarasiento smallint;
   v_fv_cai varchar(100);
   v_fv_ordencompra varchar(255);

   v_creado date;
   v_modificado date;
   v_modifico integer;

   v_fviTMP_id integer;
   v_fvi_orden smallint;
   v_fvi_cantidad decimal(18,6);
   v_fvi_cantidadaremitir decimal(18,6);
   v_fvi_pendiente decimal(18,6);
   v_fvi_pendientepklst decimal(18,6);
   v_fvi_descrip varchar(5000);
   v_fvi_precio decimal(18,6);
   v_fvi_precioUsr decimal(18,6);
   v_fvi_precioLista decimal(18,6);
   v_fvi_descuento varchar(100);
   v_fvi_neto decimal(18,6);
   v_fvi_ivari decimal(18,6);
   v_fvi_ivarni decimal(18,6);
   v_fvi_ivariporc decimal(18,6);
   v_fvi_ivarniporc decimal(18,6);
   v_fvi_internos decimal(18,6);
   v_fvi_internosporc decimal(18,6);
   v_fvi_importe decimal(18,6);
   v_fvi_importeorigen decimal(18,6);
   v_fvi_nostock smallint;

   v_pr_id integer;
   v_to_id integer;

   v_cue_id integer;
   v_cue_id_ivari integer;
   v_cue_id_ivarni integer;

   v_fvperc_id integer;
   v_fvperc_orden smallint;
   v_fvperc_base decimal(18,6);
   v_fvperc_porcentaje decimal(18,6);
   v_fvperc_importe decimal(18,6);
   v_fvperc_origen decimal(18,6);
   v_fvperc_descrip varchar(255);

   v_perc_id integer;

   v_fv_totaldeuda decimal(18,6);
   
   v_cj_id integer;
   v_mcj_id integer;

   v_cfg_clave varchar(255);

   v_ta_propuesto smallint;
   v_ta_tipo smallint;
   v_ta_nrodoc varchar(100);
   dummyChar varchar(255) := '';

   v_cobz_nrodoc varchar(50);
   v_cobz_fecha date;
   v_cobz_pendiente decimal(18,2);
   v_pendiente varchar(8000);

begin

   -- si no existe chau
   --
   if not exists ( select fvTMP_id
                   from FacturaVentaTMP
                   where fvTMP_id = p_fvTMP_id ) then
      return query select * from result_failed();
      return;

   end if;

   perform sp_doc_factura_venta_save_pre_cliente(p_fvTMP_id);

   select sp_cfg_getValor('Ventas-General', 'Exigir Centro Costo') into v_cfg_valor;

   v_cfg_valor := coalesce(v_cfg_valor, '0');

   if to_number(v_cfg_valor) <> 0 then

      if exists ( select ccos_id
                  from FacturaVentaTMP
                  where ccos_id is null
                    and fvTMP_id = p_fvTMP_id ) then

         if exists ( select ccos_id
                     from FacturaVentaItemTMP
                     where ccos_id is null
                       and fvTMP_id = p_fvTMP_id ) then

            raise exception '@@ERROR_SP: %',
                'Debe indicar un centro de costo en cada item o un centro de costo en la cabecera del documento.';

         end if;

         if exists ( select ccos_id
                     from FacturaVentaPercepcionTMP
                     where ccos_id is null
                       and fvTMP_id = p_fvTMP_id ) then

            raise exception '@@ERROR_SP: %',
                'Debe indicar un centro de costo en cada item de percepciones o un centro de costo en la cabecera del documento.';

         end if;

      end if;

   end if;

   v_error_msg := '';

   select fv_id
   into v_fv_id
   from FacturaVentaTMP
   where fvTMP_id = p_fvTMP_id;

   v_fv_id := coalesce(v_fv_id, 0);

   select mon_id,
          case cli_catfiscal
              when 1 then ta_id_inscripto     --'Inscripto'
              when 2 then ta_id_final         --'Exento'
              when 3 then ta_id_inscripto     --'No inscripto'
              when 4 then ta_id_final         --'Consumidor Final'
              when 5 then ta_id_externo       --'Extranjero'
              when 6 then ta_id_final         --'Mono Tributo'
              when 7 then ta_id_externo       --'Extranjero Iva'
              when 8 then ta_id_final         --'No responsable'
              when 9 then ta_id_final         --'No Responsable exento'
              when 10 then ta_id_final        --'No categorizado'
              when 11 then ta_id_inscripto    --'Inscripto M'
              else -1                         --'Sin categorizar'
          end,
          Documento.doct_id,
          FacturaVentaTMP.cpg_id,
          FacturaVentaTMP.fv_total,
          FacturaVentaTMP.fv_fecha,
          FacturaVentaTMP.fv_fechaVto,
          FacturaVentaTMP.depl_id,
          Documento.doc_muevestock,
          Documento.doc_generaremito,
          FacturaVentaTMP.rv_nrodoc,
          FacturaVentaTMP.fv_descuento1,
          FacturaVentaTMP.fv_descuento2,
          FacturaVentaTMP.fv_totalpercepciones,
          FacturaVentaTMP.est_id,
          Documento.emp_id,
          fv_nrodoc,
          FacturaVentaTMP.doc_id,
          FacturaVentaTMP.cli_id
     into v_mon_id,
          v_ta_id,
          v_doct_id,
          v_cpg_id,
          v_fv_total,
          v_fv_fecha,
          v_fv_fechaVto,
          v_depl_id,
          v_doc_mueveStock,
          v_doc_generaremito,
          v_rv_nrodoc,
          v_fv_descuento1,
          v_fv_descuento2,
          v_fv_totalpercepciones,
          v_est_id,
          v_emp_id,
          v_fv_nrodoc,
          v_doc_id,
          v_cli_id
   from FacturaVentaTMP
   join Documento
     on FacturaVentaTMP.doc_id = Documento.doc_id
   join Cliente
     on FacturaVentaTMP.cli_id = Cliente.cli_id
   where fvTMP_id = p_fvTMP_id;

   if v_ta_id = -1 then
      return query select * from result_error('El cliente no esta categorizado. Debe indicar en que categoria fiscal se encuentra el cliente.')
      return;
   end if;

   set TRANSACTION READ WRITE;

/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                                        insert                                                                      //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/
   if v_fv_id = 0 then

      v_is_new := -1;

      select sp_dbGetNewId('FacturaVenta', 'fv_id') into v_fv_id;
      select sp_dbGetNewId('FacturaVenta', 'fv_numero') into v_fv_numero;

      select * from sp_talonario_get_propuesto(v_doc_id, v_cli_id, 0) into dummyChar, v_ta_propuesto, v_ta_id, v_ta_tipo;

      if v_ta_propuesto = 0 then
         if v_ta_tipo = 3 then /*Auto Impresor*/

            select sp_talonario_get_next_number(v_ta_id) into v_ta_nrodoc;

            -- con esto evitamos que dos tomen el mismo numero
            --
            perform sp_talonario_set(v_ta_id, v_ta_nrodoc);

            v_fv_nrodoc := v_ta_nrodoc;

         end if;
      end if;

      insert into FacturaVenta
           ( fv_id, fv_numero, fv_nrodoc, fv_descrip, fv_fecha, fv_fechaentrega, fv_fechaVto, fv_fechaIva, fv_neto,
             fv_ivari, fv_ivarni, fv_internos, fv_total, fv_totalorigen, fv_subtotal, fv_totalpercepciones,
             fv_descuento1, fv_descuento2, fv_importedesc1, fv_importedesc2, fv_grabarasiento, fv_cotizacion,
             fv_cai, fv_ordencompra, mon_id, est_id, suc_id, cli_id, doc_id, doct_id, lp_id, ld_id, cpg_id, ccos_id,
             lgj_id, ven_id, pro_id_origen, pro_id_destino, trans_id, emp_id, clis_id, modifico )
           ( select v_fv_id,
                    v_fv_numero,
                    v_fv_nrodoc,
                    fv_descrip,
                    fv_fecha,
                    fv_fechaentrega,
                    fv_fechaVto,
                    fv_fechaIva,
                    fv_neto,
                    fv_ivari,
                    fv_ivarni,
                    fv_internos,
                    fv_total,
                    fv_totalorigen,
                    fv_subtotal,
                    fv_totalpercepciones,
                    fv_descuento1,
                    fv_descuento2,
                    fv_importedesc1,
                    fv_importedesc2,
                    fv_grabarasiento,
                    fv_cotizacion,
                    fv_cai,
                    fv_ordencompra,
                    v_mon_id,
                    est_id,
                    suc_id,
                    cli_id,
                    doc_id,
                    v_doct_id,
                    lp_id,
                    ld_id,
                    cpg_id,
                    ccos_id,
                    lgj_id,
                    ven_id,
                    pro_id_origen,
                    pro_id_destino,
                    trans_id,
                    v_emp_id,
                    clis_id,
                    modifico
             from FacturaVentaTMP
             where fvTMP_id = p_fvTMP_id );

      select doc_id,
             fv_nrodoc
        into v_doc_id,
             v_fv_nrodoc
      from FacturaVenta
      where fv_id = v_fv_id;

/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                                        update                                                                      //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/
   else

      v_is_new := 0;

      select fv_id,
             fv_nrodoc,
             fv_descrip,
             fv_fechaentrega,
             fv_neto,
             fv_fechaIva,
             fv_ivari,
             fv_ivarni,
             fv_internos,
             fv_totalorigen,
             fv_cotizacion,
             fv_subtotal,
             fv_importedesc1,
             fv_importedesc2,
             fv_grabarasiento,
             fv_cai,
             fv_ordencompra,
             est_id,
             suc_id,
             cli_id,
             doc_id,
             lp_id,
             ld_id,
             ccos_id,
             lgj_id,
             ven_id,
             pro_id_origen,
             pro_id_destino,
             trans_id,
             clis_id,
             modifico,
             modificado
        into v_fv_id,
             v_fv_nrodoc,
             v_fv_descrip,
             v_fv_fechaentrega,
             v_fv_neto,
             v_fv_fechaIva,
             v_fv_ivari,
             v_fv_ivarni,
             v_fv_internos,
             v_fv_totalorigen,
             v_fv_cotizacion,
             v_fv_subtotal,
             v_fv_importedesc1,
             v_fv_importedesc2,
             v_fv_grabarasiento,
             v_fv_cai,
             v_fv_ordencompra,
             v_est_id,
             v_suc_id,
             v_cli_id,
             v_doc_id,
             v_lp_id,
             v_ld_id,
             v_ccos_id,
             v_lgj_id,
             v_ven_id,
             v_pro_id_origen,
             v_pro_id_destino,
             v_trans_id,
             v_clis_id,
             v_modifico,
             v_modificado
      from FacturaVentaTMP
      where fvTMP_id = p_fvTMP_id;

      update FacturaVenta
            set fv_nrodoc = v_fv_nrodoc,
                fv_descrip = v_fv_descrip,
                fv_fecha = v_fv_fecha,
                fv_fechaentrega = v_fv_fechaentrega,
                fv_fechaVto = v_fv_fechaVto,
                fv_fechaIva = v_fv_fechaIva,
                fv_neto = v_fv_neto,
                fv_ivari = v_fv_ivari,
                fv_ivarni = v_fv_ivarni,
                fv_total = v_fv_total,
                fv_totalorigen = v_fv_totalorigen,
                fv_totalpercepciones = v_fv_totalpercepciones,
                fv_cotizacion = v_fv_cotizacion,
                fv_descuento1 = v_fv_descuento1,
                fv_descuento2 = v_fv_descuento2,
                fv_subtotal = v_fv_subtotal,
                fv_internos = v_fv_internos,
                fv_importedesc1 = v_fv_importedesc1,
                fv_importedesc2 = v_fv_importedesc2,
                fv_grabarasiento = v_fv_grabarasiento,
                fv_cai = v_fv_cai,
                fv_ordencompra = v_fv_ordencompra,
                mon_id = v_mon_id,
                est_id = v_est_id,
                suc_id = v_suc_id,
                cli_id = v_cli_id,
                doc_id = v_doc_id,
                doct_id = v_doct_id,
                lp_id = v_lp_id,
                ld_id = v_ld_id,
                cpg_id = v_cpg_id,
                lgj_id = v_lgj_id,
                ven_id = v_ven_id,
                pro_id_origen = v_pro_id_origen,
                pro_id_destino = v_pro_id_destino,
                ccos_id = v_ccos_id,
                trans_id = v_trans_id,
                clis_id = v_clis_id,
                emp_id = v_emp_id,
                modifico = v_modifico,
                modificado = v_modificado,
                --
                -- firma (cuando se modifica se elimina la firma)
                --
                fv_firmado = 0
      where fv_id = v_fv_id;

   end if;

/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                                        items                                                                       //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/

   v_orden := 1;

   while exists(select 1 from FacturaVentaItemTMP where fvTMP_id = p_fvTMP_id and fvi_orden = v_orden)
   loop

      select fviTMP_id,
             fvi_id,
             fvi_orden,
             fvi_cantidad,
             fvi_cantidadaremitir,
             fvi_pendiente,
             fvi_pendientepklst,
             fvi_descrip,
             fvi_precio,
             fvi_precioUsr,
             fvi_precioLista,
             fvi_descuento,
             fvi_neto,
             fvi_ivari,
             fvi_ivarni,
             fvi_ivariporc,
             fvi_ivarniporc,
             fvi_internos,
             fvi_internosporc,
             fvi_importe,
             fvi_importeorigen,
             pr_id,
             to_id,
             ccos_id,
             stl_id,
             fvi_nostock,
             cue_id,
             cue_id_ivari,
             cue_id_ivarni
        into v_fviTMP_id,
             v_fvi_id,
             v_fvi_orden,
             v_fvi_cantidad,
             v_fvi_cantidadaremitir,
             v_fvi_pendiente,
             v_fvi_pendientepklst,
             v_fvi_descrip,
             v_fvi_precio,
             v_fvi_precioUsr,
             v_fvi_precioLista,
             v_fvi_descuento,
             v_fvi_neto,
             v_fvi_ivari,
             v_fvi_ivarni,
             v_fvi_ivariporc,
             v_fvi_ivarniporc,
             v_fvi_internos,
             v_fvi_internosporc,
             v_fvi_importe,
             v_fvi_importeorigen,
             v_pr_id,
             v_to_id,
             v_ccos_id,
             v_stl_id,
             v_fvi_nostock,
             v_cue_id,
             v_cue_id_ivari,
             v_cue_id_ivarni
      from FacturaVentaItemTMP
      where fvTMP_id = p_fvTMP_id
        and fvi_orden = v_orden;

      -- cuando se inserta se indica
      -- como cantidad a remitir la cantidad (por ahora)
      --
      v_fvi_cantidadaremitir := v_fvi_cantidad;

      if v_is_new <> 0 or v_fvi_id = 0 then

         -- cuando se inserta se toma la cantidad a remitir
         -- como el pendiente
         --
         v_fvi_pendiente := v_fvi_cantidadaremitir;

         v_fvi_pendientepklst := v_fvi_cantidadaremitir;

         select sp_dbGetNewId('FacturaVentaItem', 'fvi_id') into v_fvi_id;

         insert into FacturaVentaItem
           ( fv_id, fvi_id, fvi_orden, fvi_cantidad, fvi_cantidadaremitir, fvi_descrip, fvi_pendiente,
             fvi_pendientepklst, fvi_precio, fvi_precioUsr, fvi_precioLista, fvi_descuento, fvi_neto,
             fvi_ivari, fvi_ivarni, fvi_ivariporc, fvi_ivarniporc, fvi_internos, fvi_internosporc,
             fvi_importe, fvi_importeorigen, fvi_nostock, pr_id, to_id, ccos_id, stl_id, cue_id, cue_id_ivari,
             cue_id_ivarni )

         values ( v_fv_id, v_fvi_id, v_fvi_orden, v_fvi_cantidad, v_fvi_cantidadaremitir, v_fvi_descrip,
                  v_fvi_pendiente, v_fvi_pendientepklst, v_fvi_precio, v_fvi_precioUsr, v_fvi_precioLista,
                  v_fvi_descuento, v_fvi_neto, v_fvi_ivari, v_fvi_ivarni, v_fvi_ivariporc, v_fvi_ivarniporc,
                  v_fvi_internos, v_fvi_internosporc, v_fvi_importe, v_fvi_importeorigen, v_fvi_nostock,
                  v_pr_id, v_to_id, v_ccos_id, v_stl_id, v_cue_id, v_cue_id_ivari, v_cue_id_ivarni );

      else

         -- cuando se actualiza se indica
         -- como pendiente la cantidad a remitir menos lo aplicado
         --
         select sum(pvfv_cantidad)
           into v_fvi_pendiente
         from PedidoFacturaVenta
         where fvi_id = v_fvi_id;

         v_fvi_pendiente := v_fvi_cantidadaremitir - coalesce(v_fvi_pendiente, 0);

         select sum(pklstfv_cantidad)
           into v_fvi_pendientepklst
         from PackingListFacturaVenta
         where fvi_id = v_fvi_id;

         v_fvi_pendientepklst := v_fvi_cantidadaremitir - coalesce(v_fvi_pendientepklst, 0);

         update FacturaVentaItem
            set fv_id = v_fv_id,
                fvi_orden = v_fvi_orden,
                fvi_cantidad = v_fvi_cantidad,
                fvi_cantidadaremitir = v_fvi_cantidadaremitir,
                fvi_pendiente = v_fvi_pendiente,
                fvi_pendientepklst = v_fvi_pendientepklst,
                fvi_descrip = v_fvi_descrip,
                fvi_precio = v_fvi_precio,
                fvi_precioUsr = v_fvi_precioUsr,
                fvi_precioLista = v_fvi_precioLista,
                fvi_descuento = v_fvi_descuento,
                fvi_neto = v_fvi_neto,
                fvi_ivari = v_fvi_ivari,
                fvi_ivarni = v_fvi_ivarni,
                fvi_ivariporc = v_fvi_ivariporc,
                fvi_ivarniporc = v_fvi_ivarniporc,
                fvi_internos = v_fvi_internos,
                fvi_internosporc = v_fvi_internosporc,
                fvi_importe = v_fvi_importe,
                fvi_importeorigen = v_fvi_importeorigen,
                fvi_nostock = v_fvi_nostock,
                pr_id = v_pr_id,
                to_id = v_to_id,-- TO

                ccos_id = v_ccos_id,
                stl_id = v_stl_id,
                cue_id = v_cue_id,
                cue_id_ivari = v_cue_id_ivari,
                cue_id_ivarni = v_cue_id_ivarni
         where fv_id = v_fv_id
           and fvi_id = v_fvi_id;

      end if;

      update FacturaVentaItemSerieTMP
         set fvi_id = v_fvi_id
      where fviTMP_id = v_fviTMP_id;

      v_orden := v_orden + 1;

   end loop;

   v_orden := 1;

   while exists(select 1 from FacturaVentaPercepcionTMP where fvTMP_id = p_fvTMP_id and fvperc_orden = v_orden)
   loop

      select fvperc_id,
             fvperc_orden,
             fvperc_base,
             fvperc_porcentaje,
             fvperc_importe,
             fvperc_origen,
             fvperc_descrip,
             perc_id,
             ccos_id
        into v_fvperc_id,
             v_fvperc_orden,
             v_fvperc_base,
             v_fvperc_porcentaje,
             v_fvperc_importe,
             v_fvperc_origen,
             v_fvperc_descrip,
             v_perc_id,
             v_ccos_id
      from FacturaVentaPercepcionTMP
      where fvTMP_id = p_fvTMP_id
        and fvperc_orden = v_orden;

      if v_is_new <> 0 or v_fvperc_id = 0 then

         select sp_dbGetNewId('FacturaVentaPercepcion', 'fvperc_id') into v_fvperc_id;

         insert into FacturaVentaPercepcion
              ( fv_id, fvperc_id, fvperc_orden, fvperc_base, fvperc_porcentaje, fvperc_importe, fvperc_origen,
                fvperc_descrip, perc_id, ccos_id )
         values ( v_fv_id, v_fvperc_id, v_fvperc_orden, v_fvperc_base, v_fvperc_porcentaje, v_fvperc_importe,
                  v_fvperc_origen, v_fvperc_descrip, v_perc_id, v_ccos_id );

      else

         update FacturaVentaPercepcion
            set fv_id = v_fv_id,
                fvperc_orden = v_fvperc_orden,
                fvperc_base = v_fvperc_base,
                fvperc_porcentaje = v_fvperc_porcentaje,
                fvperc_importe = v_fvperc_importe,
                fvperc_origen = v_fvperc_origen,
                fvperc_descrip = v_fvperc_descrip,
                perc_id = v_perc_id,
                ccos_id = v_ccos_id
         where fv_id = v_fv_id
           and fvperc_id = v_fvperc_id;

      end if;

      v_orden := v_orden + 1;

   end loop;

/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                                     items borrados                                                                 //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/

   if v_is_new = 0 then
         
      delete from FacturaVentaItem
      where exists ( select fvi_id
                     from FacturaVentaItemBorradoTMP
                     where fv_id = v_fv_id
                       and fvTMP_id = p_fvTMP_id
                       and fvi_id = FacturaVentaItem.fvi_id );

      delete from FacturaVentaItemBorradoTMP
      where fv_id = v_fv_id
        and fvTMP_id = p_fvTMP_id;

      delete from FacturaVentaPercepcion
      where exists ( select fvperc_id
                     from FacturaVentaPercepcionBorradoTMP
                     where fv_id = v_fv_id
                       and fvperc_id = FacturaVentaPercepcion.fvperc_id
                       and fvTMP_id = p_fvTMP_id );

      delete from FacturaVentaPercepcionBorradoTMP
      where fv_id = v_fv_id
        and fvTMP_id = p_fvTMP_id;

   end if;

   select sum(fvi.fvi_importe)
     into v_fv_totaldeuda
   from FacturaVentaItem fvi
   join TipoOperacion t
     on fvi.to_id = t.to_id
   where fvi.fv_id = v_fv_id
     and t.to_generadeuda <> 0;

   if v_fv_totaldeuda is null then
      v_fv_totaldeuda := 0;
   else
      v_fv_totaldeuda := v_fv_totaldeuda - ((v_fv_totaldeuda * v_fv_descuento1) / 100);
      v_fv_totaldeuda := v_fv_totaldeuda - ((v_fv_totaldeuda * v_fv_descuento2) / 100);
      v_fv_totaldeuda := v_fv_totaldeuda + v_fv_totalpercepciones;
   end if;

   perform sp_doc_factura_venta_save_deuda(v_fv_id,
                                           v_cpg_id,
                                           v_fv_fecha,
                                           v_fv_fechaVto,
                                           v_fv_totaldeuda,
                                           v_est_id
                                           );

/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                                        aplicacion pedido - remito                                                  //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/

   perform sp_doc_fac_vta_pedido_remito_save_aplic(v_fv_id, p_fvTMP_id, 0);

/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                                     talonarios                                                                     //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/
   perform sp_talonario_set(v_ta_id, v_fv_nrodoc);

   if coalesce(v_doc_generaremito, 0) <> 0 and v_is_new <> 0 then
   
      perform sp_doc_factura_venta_remito_save(v_fv_id, v_rv_nrodoc);

   end if;

/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                                     credito y estado                                                               //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/

   perform sp_doc_factura_venta_set_pendiente(v_fv_id);

   perform sp_doc_factura_venta_set_credito(v_fv_id);

   perform sp_doc_factura_venta_set_estado(v_fv_id);

/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                                     asiento                                                                        //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/

   select sp_cfg_getValor('Ventas-General', 'Grabar Asiento') into v_cfg_valor;

   v_cfg_valor := coalesce(v_cfg_valor, '0');

   if to_number(v_cfg_valor) <> 0 then

      -- no genero asiento para facturas anuladas
      --
      if v_est_id <> 7 then
         
         select * from sp_doc_factura_venta_asiento_save(v_fv_id, 0) into v_error, v_error_msg;
         if coalesce(v_error, 0) <> 0 then
            raise exception '%', v_error_msg;
         end if;

      end if;

   else

      if not exists ( select fv_id
                      from FacturaVentaAsiento
                      where fv_id = v_fv_id ) then

         insert into FacturaVentaAsiento
           ( fv_id, fv_fecha )
           ( select fv_id,
                    fv_fecha
             from FacturaVenta
             where fv_grabarAsiento <> 0
               and fv_id = v_fv_id );

      end if;

   end if;

/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                                     stock                                                                          //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/

   if coalesce(v_doc_mueveStock, 0) <> 0 then

      select * from sp_doc_factura_venta_stock_save(p_fvTMP_id, v_fv_id, v_depl_id, 0) into v_error, v_error_msg;
      if coalesce(v_error, 0) <> 0 then
         raise exception '%', v_error_msg;
      end if;

   end if;

/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                          total comercial - necesario para los reportes de cta cte                                  //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/

   update facturaventa set fv_totalcomercial = coalesce(v_fv_totaldeuda, 0) where fv_id = v_fv_id;

   select cj_id into v_cj_id from FacturaVentaTMP where fvTMP_id = p_fvTMP_id;

   select sp_movimiento_caja_get_from_caja(v_cj_id, 1 /* apertura */) into v_mcj_id;

   update FacturaVenta set mcj_id = v_mcj_id where fv_id = v_fv_id;

/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                                     validaciones al documento                                                      //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/
   -- estado
   --
   select * from sp_auditoria_estado_check_doc_fv(v_fv_id) into v_success, v_error_msg;
   if coalesce(v_success, 0) = 0 then
      raise exception '%', v_error_msg;
   end if;

   -- stock
   --
   select * from sp_auditoria_stock_check_doc_fv(v_fv_id) into v_success, v_error_msg;
   if coalesce(v_success, 0) = 0 then
      raise exception '%', v_error_msg;
   end if;

   -- totales
   --
   select * from sp_auditoria_totales_check_doc_fv(v_fv_id) into v_success, v_error_msg;
   if coalesce(v_success, 0) = 0 then
      raise exception '%', v_error_msg;
   end if;

   -- vtos
   --
   select * from sp_auditoria_vto_check_doc_fv(v_fv_id) into v_success, v_error_msg;
   if coalesce(v_success, 0) = 0 then
      raise exception '%', v_error_msg;
   end if;

   -- credito
   --
   select * from sp_auditoria_credito_check_doc_fv(v_fv_id) into v_success, v_error_msg;
   if coalesce(v_success, 0) = 0 then
      raise exception '%', v_error_msg;
   end if;

/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                                 cursos (debe hacerse antes de eliminar los items borrados)                         //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/

   select * from sp_doc_factura_venta_save_curso(v_fv_id, p_fvTMP_id) into v_success, v_error_msg;
   if coalesce(v_success, 0) = 0 then
      raise exception '%', v_error_msg;
   end if;

/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                                 particularidades de los clientes                                                   //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/
   select * from sp_doc_factura_venta_save_cliente(v_fv_id, p_fvTMP_id) into v_success, v_error_msg;
   if coalesce(v_success, 0) = 0 then
      raise exception '%', v_error_msg;
   end if;

/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                                     borrar temporales                                                              //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/

   delete from HoraFacturaVentaTMP where fvTMP_ID = p_fvTMP_id;
   delete from PackingListFacturaVentaTMP where fvTMP_ID = p_fvTMP_id;
   delete from RemitoFacturaVentaTMP where fvTMP_ID = p_fvTMP_id;
   delete from PedidoFacturaVentaTMP where fvTMP_ID = p_fvTMP_id;
   delete from FacturaVentaItemSerieTMP where fvTMP_id = p_fvTMP_id;
   delete from FacturaVentaItemTMP where fvTMP_id = p_fvTMP_id;
   delete from FacturaVentaTMP where fvTMP_id = p_fvTMP_id;

/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                                     historial de modificaciones                                                    //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/
   select modifico into v_modifico from FacturaVenta where fv_id = v_fv_id;

   if v_is_new <> 0 then
      perform sp_historia_update(16001, v_fv_id, v_modifico, 1);
   else
      perform sp_historia_update(16001, v_fv_id, v_modifico, 3);
   end if;

/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                                     fin                                                                            //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/

   v_cfg_clave := 'Informar Anticipos Vta_' || trim(to_char(v_modifico));

   select sp_cfg_getValor('Usuario-Config', v_cfg_clave) into v_cfg_valor;

   v_cfg_valor := coalesce(v_cfg_valor, '0');

   if to_number(v_cfg_valor) <> 0 then

      if exists ( select *
                  from Cobranza
                  where round(cobz_pendiente, 2) > 0.02
                    and emp_id = v_emp_id
                    and cli_id = v_cli_id ) then

         v_pendiente := '';

         for v_cobz_nrodoc,v_cobz_fecha,v_cobz_pendiente in
              select cobz_nrodoc,
                     cobz_fecha,
                     cobz_pendiente
              from Cobranza
              where round(cobz_pendiente, 2) > 0
                and emp_id = v_emp_id
                and cli_id = v_cli_id
         loop
         
            v_pendiente := v_pendiente || v_cobz_nrodoc || ' del '
                           || to_char(v_cobz_fecha, 'dd-mm-yyyy')
                           || ' por pesos '
                           || to_char(v_cobz_pendiente, '9,999,999,990.00')
                           || ';';
               
         end loop;

         rtnAnticipo.type := 'resultset';
         open rtnAnticipo.r for select 'INFO', 'Este cliente tiene anticipo/s en la cobranza/s:;;' || v_pendiente;
         return next rtnAnticipo;

      end if;

   end if;

   rtn.type := 'fv_id';
   rtn.id := v_fv_id;

   return next rtn;

exception
   when others then

     raise exception 'Ha ocurrido un error al grabar la factura de venta. sp_doc_factura_venta_save. %. %.',
                      sqlstate, sqlerrm;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_doc_factura_venta_save_curso(v_fv_id integer, p_fvtmp_id integer, OUT p_success integer, OUT p_error_msg character varying)
 RETURNS record
 LANGUAGE plpgsql
AS $function$
declare
   v_error smallint;
   v_cli_id integer;
   v_cli_nombre varchar(255);
   v_cur_id integer;
   v_curi_id integer;
   v_alum_id integer;
   v_modifico integer;
   v_fv_fecha date;

   v_prs_id integer;
   v_prs_apellido varchar(255);
   v_prs_nombre varchar(255);
   v_i integer;
begin

   v_error := 0;
   p_success := 0;
   p_error_msg := '@@ERROR_SP:';

   select fv.cli_id,
          fv.modifico,
          fv.fv_fecha,
          cli.cli_nombre
     into v_cli_id,
          v_modifico,
          v_fv_fecha,
          v_cli_nombre
   from FacturaVenta fv
   join Cliente cli
     on fv.cli_id = cli.cli_id
   where fv.fv_id = v_fv_id;

   select alum.alum_id
     into v_alum_id
   from Persona prs
   join Alumno alum
     on prs.prs_id = alum.prs_id
   where prs.cli_id = v_cli_id;

   -- si no existe aun un alumno lo creamos
   --
   if v_alum_id is null then

      v_i := instr(v_cli_nombre, ',', 1);

      if v_i <> 0 then

         v_prs_apellido := substr(v_cli_nombre, 1, v_i);
         v_prs_nombre := substr(v_cli_nombre, v_i + 1, 1000);

      else

         v_i := instr(v_cli_nombre, ' ', 1);

         if v_i <> 0 then

            v_prs_apellido := substr(v_cli_nombre, 1, v_i);
            v_prs_nombre := substr(v_cli_nombre, v_i + 1, 1000);

         else

            v_prs_apellido := v_cli_nombre;
            v_prs_nombre := '.';

         end if;

      end if;

      select sp_dbGetNewId('Persona', 'prs_id') into v_prs_id;

      insert into Persona( prs_id, prs_apellido, prs_nombre, prs_codigo, modifico, cli_id )
      values ( v_prs_id, v_prs_apellido, v_prs_nombre, trim(to_char(v_prs_id,'00000')), v_modifico, v_cli_id );

      select sp_dbGetNewId('Alumno', 'alum_id') into v_alum_id;

      insert into Alumno( alum_id, alum_codigo, modifico, prs_id, alum_fechaingreso )
      values ( v_alum_id, trim(to_char(v_alum_id,'00000')), v_modifico, v_prs_id, v_fv_fecha );

   end if;

   if v_alum_id is not null then

      begin

         for v_cur_id in
              select distinct pr.cur_id
              from FacturaVentaItem t
              join Producto pr
                on t.pr_id = pr.pr_id
              where t.fv_id = v_fv_id
                and pr.cur_id is not null
         loop

            if not exists ( select *
                            from CursoItem
                            where cur_id = v_cur_id
                              and alum_id = v_alum_id ) then

               select sp_dbGetNewId('CursoItem', 'curi_id') into v_curi_id;

               insert into CursoItem( cur_id, curi_id, alum_id, est_id, fv_id )
               values ( v_cur_id, v_curi_id, v_alum_id, 10, /*En curso*/v_fv_id );
            end if;

         end loop;

      exception
         when others then

            p_success := 0;
            p_error_msg := p_error_msg
                           || format('No se pudo inscribir al alumno a los cursos mencionados por la factura. %s. %s.',
                                     sqlstate, sqlerrm);
            return;
      end;

      begin
         -- borro cualquier inscripcion a cursos que ya no este reflejada por esta factura
         -- y se halla generado por esta factura en versiones anteriores de la misma
         -- (en castellano: por que modificaron o borraron los productos de la factura)
         --
         delete from CursoItem
         where fv_id = v_fv_id
         and not exists ( select distinct pr.cur_id
                          from FacturaVentaItem t
                          join Producto pr
                            on t.pr_id = pr.pr_id
                          where t.fv_id = v_fv_id
                            and pr.cur_id = CursoItem.cur_id );
      exception
         when others then

            p_success := 0;
            p_error_msg := p_error_msg
                           || format('No se pudo borrar la inscripcion a los cursos mencionados por la version anterior de la factura. %s. %s.',
                                     sqlstate, sqlerrm);
            return;
      end;

   end if;

   -- no hubo errores asi que todo bien
   --
   p_success := 1;

exception
   when others then

      p_success := 0;
      p_error_msg := p_error_msg
                     || format('No se pudo guardar el curso asociado a esta factura. sp_doc_factura_venta_save_curso. %s. %s.',
                               sqlstate, sqlerrm);

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_doc_factura_venta_save_deuda(p_fv_id integer, p_cpg_id integer, p_fv_fecha date, p_fv_fechavto date, p_fv_total numeric, p_est_id integer)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
declare
   v_sys_error varchar := '';
   v_fv_id integer;
   v_cpg_id integer;
   v_fv_fecha date;
   v_fv_total decimal(18,6);
   v_fv_pendiente decimal(18,6);
   v_cpg_escontado smallint;
   v_cpg_eslibre smallint;
   
   v_p_fv_fechaVto date;
   
   c_pago_item refcursor;
   v_cpgi_dias smallint;
   v_cpgi_porcentaje decimal(18,6);
   v_fvd_id integer;
   v_fvd_fecha date;
   v_fvd_fecha2 date;
   v_fvd_pendiente decimal(18,6);
   v_importe decimal(18,6);
   v_n smallint;
   v_count_cpgi smallint;

begin

   v_p_fv_fechaVto := p_fv_fechaVto;
   v_fv_id := p_fv_id;
   v_cpg_id := p_cpg_id;
   v_fv_fecha := p_fv_fecha;
   v_fv_total := p_fv_total;

/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                                     pago en cta cte y contado                                                      //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/
   -- la factura no puede estar aplicada a ninguna cobranza
   -- por lo tanto lo primero que hago es borrar toda la info de deuda
   -- y volver a generarla
   --
   delete from FacturaVentaDeuda where fv_id = v_fv_id;

   select cpg_escontado,
          cpg_eslibre
     into v_cpg_escontado,
          v_cpg_eslibre
   from CondicionPago
   where cpg_id = v_cpg_id;

   if p_fv_total <> 0 and p_est_id <> 7 then

      if v_cpg_escontado <> 0 then
         open c_pago_item for select 0 cpgi_dias, 100 cpgi_porcentaje;
      else
         if v_cpg_eslibre <> 0 then
            if v_p_fv_fechaVto < p_fv_fecha then
               v_p_fv_fechaVto := dateadd('D', 1, p_fv_fecha);
            end if;
            open c_pago_item for select datediff('D', p_fv_fecha, v_p_fv_fechaVto) cpgi_dias, 100 cpgi_porcentaje;
         else
            open c_pago_item for select cpgi_dias, cpgi_porcentaje from CondicionPagoItem where cpg_id = v_cpg_id;
         end if;
      end if;

      v_n := 0;
      v_importe := 0;

      select count(*)
        into v_count_cpgi
      from CondicionPagoItem
      where cpg_id = v_cpg_id;

      loop

         fetch c_pago_item into v_cpgi_dias,v_cpgi_porcentaje;
         exit when not found;
         
         v_fvd_fecha := dateadd('D', v_cpgi_dias, v_fv_fecha);
         v_n := v_n + 1;

         if v_n < v_count_cpgi then

            v_fvd_pendiente := v_fv_total * v_cpgi_porcentaje / 100;
            v_importe := v_importe + v_fvd_pendiente;

         else

            v_fvd_pendiente := v_fv_total - v_importe;

         end if;

         v_fvd_pendiente := round(v_fvd_pendiente, 2);

         select sp_dbGetNewId('FacturaVentaDeuda', 'fvd_id') into v_fvd_id;

         select sp_doc_get_fecha2(v_fvd_fecha, 0, null) into v_fvd_fecha2;

         insert into FacturaVentaDeuda( fvd_id, fvd_fecha, fvd_fecha2, fvd_importe, fvd_pendiente, fv_id )
         values ( v_fvd_id, v_fvd_fecha, v_fvd_fecha2, v_fvd_pendiente, v_fvd_pendiente, v_fv_id );

      end loop;

      close c_pago_item;

      select sum(fvd_pendiente)
        into v_fv_pendiente
      from FacturaVentaDeuda
      where fv_id = v_fv_id;

   else

      v_fv_pendiente := 0;

   end if;

   update FacturaVenta
      set fv_pendiente = coalesce(v_fv_pendiente, 0)
   where fv_id = v_fv_id;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_doc_factura_venta_save_item_kit(p_fvtmp_id integer, p_fvi_id integer, p_st_id integer, p_fvi_cantidad integer, p_fvi_descrip character varying, p_pr_id integer, p_depl_id_origen integer, p_depl_id_destino integer, p_stl_id integer, OUT p_sti_orden integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
declare
   v_stik_orden smallint;
   v_stik_llevanroserie integer;
   v_stik_id integer;
   v_pr_id integer;
   v_cantidad decimal(18,6);
   v_bLlevaNroSerie smallint;
begin

   delete from tt_kit_item_serie;

   -- obtengo los componentes del
   --
   perform sp_stock_producto_get_kit_info(p_pr_id, 0);

   select sp_dbGetNewId('StockItemKit', 'stik_id') into v_stik_id;

   if exists ( select *
               from tt_kit_item_serie s
               join producto p
                 on s.pr_id = p.pr_id
               where p.pr_llevanroserie <> 0 ) then

      v_stik_llevanroserie := 1;

   else

      v_stik_llevanroserie := 0;

   end if;

   insert into StockItemKit( stik_id, stik_cantidad, pr_id, st_id, stik_llevanroserie )
   values ( v_stik_id, p_fvi_cantidad, p_pr_id, p_st_id, v_stik_llevanroserie );

   for v_pr_id,v_cantidad in
        select pr_id,
               cantidad
        from tt_kit_item_serie
   loop

      v_cantidad := v_cantidad * p_fvi_cantidad;

      select pr_llevanroserie
        into v_bLlevaNroSerie
      from Producto
      where pr_id = v_pr_id;

      if v_bLlevaNroSerie <> 0 then

         select sp_doc_factura_venta_save_nro_serie(
                                           p_fvTMP_id,
                                           p_fvi_id,
                                           p_st_id,
                                           v_cantidad,
                                           p_fvi_descrip,
                                           v_pr_id,
                                           p_depl_id_origen,
                                           p_depl_id_destino,
                                           v_stik_id) into p_sti_orden;
      else

         select sp_doc_factura_venta_stock_item_save(
                                       0,
                                       p_st_id,
                                       v_cantidad,
                                       p_fvi_descrip,
                                       v_pr_id,
                                       p_depl_id_origen,
                                       p_depl_id_destino,
                                       null,
                                       v_stik_id,
                                       p_stl_id) into p_sti_orden;

      end if;

   end loop;

exception
   when others then

      raise exception 'Ha ocurrido un error al grabar el item de stock de la factura de venta. sp_doc_factura_venta_save_item_kit.%. %.',
                      sqlstate, sqlerrm;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_doc_factura_venta_save_nro_serie(p_fvtmp_id integer, p_fvi_id integer, p_st_id integer, p_fvi_cantidad integer, p_fvi_descrip character varying, p_pr_id integer, p_depl_id_origen integer, p_depl_id_destino integer, p_stik_id integer, OUT p_sti_orden integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
declare
   v_prns_descrip varchar(255);
   v_prns_fechavto date;
   v_prns_id integer;
   v_stl_id integer;
   v_n integer;
begin

   v_n := 1;

   while v_n <= p_fvi_cantidad
   loop

      select prns_id, prns_descrip, prns_fechavto
        into v_prns_id,
             v_prns_descrip,
             v_prns_fechavto
      from ( select prns_id,
                    prns_descrip,
                    prns_fechavto
             from FacturaVentaItemSerieTMP
             where fvi_id = p_fvi_id
               and ( ( pr_id_item = p_pr_id ) or ( p_pr_id = pr_id and pr_id_item is null ) )
               and fvTMP_id = p_fvTMP_id
             order by fvis_orden asc ) t
      limit 1;

      -- actualizo el numero de serie
      --
      update ProductoNumeroSerie
         set prns_descrip = v_prns_descrip,
             prns_fechavto = v_prns_fechavto
      where prns_id = v_prns_id;

      v_stl_id := null;

      select stl_id
        into v_stl_id
      from ProductoNumeroSerie
      where prns_id = v_prns_id;

      select sp_doc_factura_venta_stock_item_save(
                                        p_fvi_id,
                                        p_st_id,
                                        1,
                                        p_fvi_descrip,
                                        p_pr_id,
                                        p_depl_id_origen,
                                        p_depl_id_destino,
                                        v_prns_id,
                                        p_stik_id,
                                        v_stl_id) into p_sti_orden;

      update FacturaVentaItemSerieTMP
         set fvis_orden = fvis_orden + 10000
      where prns_id = v_prns_id
        and fvTMP_id = p_fvTMP_id;

      v_n := v_n + 1;

   end loop;

exception
   when others then

      raise exception 'Ha ocurrido un error al grabar el item de stock del Factura de venta. sp_doc_factura_venta_save_nro_serie.%. %.',
                      sqlstate, sqlerrm;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_doc_factura_venta_save_pre_cliente(p_fvtmp_id integer)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
begin

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_doc_factura_venta_set_credito(p_fv_id integer, p_borrar integer DEFAULT 0)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
begin

   perform sp_doc_factura_venta_set_credito_cairo(p_fv_id, p_borrar);

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_doc_movimiento_fondo_asiento_save(p_mf_id integer, p_raise_error integer DEFAULT (-1), OUT p_error integer, OUT p_error_msg character varying)
 RETURNS record
 LANGUAGE plpgsql
AS $function$
declare
   v_is_new integer;
   
   v_as_id integer;
   v_as_numero integer;
   v_as_nrodoc varchar(50);
   v_as_descrip varchar(5000);
   v_as_doc_cliente varchar(5000);
   v_as_fecha date;

   v_asi_orden smallint;
   v_asi_debe decimal(18,6);
   v_asi_haber decimal(18,6);
   v_asi_origen decimal(18,6);
   
   v_cli_id integer;
   v_doc_id_movimientoFondo integer;

   v_doc_id integer;
   v_doct_id integer;
   v_doct_id_movimientoFondo integer;
   v_doc_id_cliente integer;

   v_mf_fecha date;

   v_ta_id integer;
   
   v_ccos_id_cliente integer;
   v_ccos_id integer;
   
   v_mon_id integer;
   
   v_cue_id integer;

   v_mfi_id integer;   
   v_mfi_orden smallint;
   
   v_cheq_id integer;
      
   v_creado date;
   v_modificado date;
   v_modifico integer;

   v_error smallint;

   v_ta_ultimoNro integer;
   v_ta_mascara varchar(50);

begin

   p_error := 0;

   -- si no existe chau
   --
   if not exists ( select mf_id
                   from MovimientoFondo
                   where mf_id = p_mf_id
                     and est_id <> 7 ) then
      return; 
   end if;
   
   select as_id,
          cli_id,
          doc_id
   into   v_as_id,
          v_cli_id,
          v_doc_id_movimientoFondo
   from MovimientoFondo
   where mf_id = p_mf_id;

   v_as_id := coalesce(v_as_id, 0);

   SET TRANSACTION READ WRITE;

/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                                        insert                                                                      //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/
   -- obtengo el documento @doc_id
   --
   select doc_id_asiento,
          MovimientoFondo.doct_id,
          Documento.doc_id,
          Documento.mon_id,
          ccos_id,
          mf_nrodoc || ' ' || coalesce(cli_nombre, '')
     into v_doc_id,
          v_doct_id_movimientoFondo,
          v_doc_id_cliente,
          v_mon_id,
          v_ccos_id_cliente,
          v_as_doc_cliente
   from MovimientoFondo
   join Documento
     on MovimientoFondo.doc_id = Documento.doc_id
   left join Cliente
          on MovimientoFondo.cli_id = Cliente.cli_id
   where mf_id = p_mf_id;

   if v_as_id = 0 then

      v_is_new := -1;

      select sp_dbGetNewId('Asiento', 'as_id') into v_as_id;
      select sp_dbGetNewId('Asiento', 'as_numero') into v_as_numero;

      select ta_ultimonro,
             ta_mascara,
             doct_id
        into v_ta_ultimoNro,
             v_ta_mascara,
             v_doct_id
      from Documento
      join Talonario
        on Documento.ta_id = Talonario.ta_id
      where doc_id = v_doc_id;

      v_ta_ultimoNro := v_ta_ultimoNro + 1;
      v_as_nrodoc := trim(to_char(v_ta_ultimoNro));
      v_as_nrodoc := substr(v_ta_mascara, 1, length(v_ta_mascara) - length(v_as_nrodoc)) || v_as_nrodoc;

      insert into Asiento ( as_id, as_numero, as_nrodoc, as_descrip, as_fecha, as_doc_cliente, doc_id, doct_id,
                            doct_id_cliente, doc_id_cliente, id_cliente, modifico )
           ( select v_as_id,
                    v_as_numero,
                    v_as_nrodoc,
                    mf_descrip,
                    mf_fecha,
                    v_as_doc_cliente,
                    v_doc_id,
                    v_doct_id,
                    v_doct_id_movimientoFondo,
                    v_doc_id_cliente,
                    p_mf_id,
                    modifico
             from MovimientoFondo
             where mf_id = p_mf_id );

/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                                        update                                                                      //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/
   else

      v_is_new := 0;

      select mf_descrip,
             mf_fecha,
             modifico,
             modificado
        into v_as_descrip,
             v_as_fecha,
             v_modifico,
             v_modificado
      from MovimientoFondo
      where mf_id = p_mf_id;

      select doc_id,
             doct_id
        into v_doc_id,
             v_doct_id
      from Asiento
      where as_id = v_as_id;


      update Asiento
         set as_descrip = v_as_descrip,
             as_fecha = v_as_fecha,
             as_doc_cliente = v_as_doc_cliente,
             doc_id = v_doc_id,
             doct_id = v_doct_id,
             doct_id_cliente = v_doct_id_movimientoFondo,
             doc_id_cliente = v_doc_id_cliente,
             id_cliente = p_mf_id,
             modifico = v_modifico,
             modificado = v_modificado
      where as_id = v_as_id;

   end if;

/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                                        items                                                                       //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/
   -- borro todos los items y solo hago inserts que se mucho mas simple y rapido
   --
   delete from AsientoItem where as_id = v_as_id;

   v_asi_orden := 2;

   for v_asi_debe,v_asi_origen,v_cue_id,v_ccos_id,v_cheq_id in
      select mfi_importe,
             mfi_importeorigen,
             cue_id_debe,
             ccos_id,
             cheq_id
      from MovimientoFondoItem
      where mf_id = p_mf_id
   loop

      v_asi_haber := 0;

      perform sp_doc_asiento_save_item(
                               v_is_new,
                               0,
                               v_as_id,
                               v_asi_orden,
                               v_asi_debe,
                               v_asi_haber,
                               v_asi_origen,
                               0,
                               v_mon_id,
                               v_cue_id,
                               v_ccos_id,
                               v_cheq_id,
                               '');

      v_asi_orden := v_asi_orden + 1;

   end loop;

   for v_asi_haber,v_asi_origen,v_cue_id,v_ccos_id,v_cheq_id in
      select mfi_importe,
             case
                when mfi_tipo = 2 then mfi_importeorigenhaber
                else mfi_importeorigen
             end col,
             cue_id_haber,
             ccos_id,
             cheq_id
      from MovimientoFondoItem
      where mf_id = p_mf_id
   loop

      v_asi_debe := 0;

      perform sp_doc_asiento_save_item(
                            v_is_new,
                            0,
                            v_as_id,
                            v_asi_orden,
                            v_asi_debe,
                            v_asi_haber,
                            v_asi_origen,
                            0,
                            v_mon_id,
                            v_cue_id,
                            v_ccos_id,
                            v_cheq_id,
                            '');

      v_asi_orden := v_asi_orden + 1;

   end loop;

/*
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                               //
//                                valido el asiento                                                              //
//                                                                                                               //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/
   select * from sp_doc_asiento_validate(v_as_id) into v_error, p_error_msg;

   if v_error <> 0 then
      raise exception '%', p_error_msg;
   end if;

/*
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                               //
//                                talonario                                                                      //
//                                                                                                               //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/
   select ta_id
     into v_ta_id
   from Documento
   where doc_id = v_doc_id;

   perform sp_talonario_set(v_ta_id, v_as_nrodoc);

/*
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                               //
//                                vinculo el movimiento fondos con su asiento                                    //
//                                                                                                               //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/
   update MovimientoFondo
      set as_id = v_as_id,
          mf_grabarasiento = 0
   where mf_id = p_mf_id;

   p_error := 0;

exception
   when others then

      if p_raise_error <> 0 then

         raise exception 'Ha ocurrido un error al grabar el movimiento de fondos. sp_doc_movimiento_fondo_asiento_save. %. %.',
                         sqlstate, sqlerrm;
      else

         p_error := -1;
         p_error_msg := sqlstate || ';' || sqlerrm || ';';

      end if;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_doc_orden_pago_asiento_save(p_opg_id integer, p_raise_error integer DEFAULT (-1), p_fc_id integer DEFAULT NULL::integer, OUT p_error integer, OUT p_error_msg character varying)
 RETURNS record
 LANGUAGE plpgsql
AS $function$
declare
   v_is_new integer;
   
   v_as_id integer;
   v_as_numero integer;
   v_as_nrodoc varchar(50);
   v_as_fecha date;
   v_as_descrip varchar(5000);
   v_as_doc_cliente varchar(5000);
   v_as_id_factura integer;
   v_as_total decimal(18,6);

   v_asi_id integer;
   v_asi_orden smallint;
   v_asi_debe decimal(18,6);
   v_asi_haber decimal(18,6);
   v_asi_origen decimal(18,6);
   v_asi_descrip varchar(5000);
   
   v_prov_id integer;
   v_doc_id_OrdenPago integer;

   v_doct_id integer;
   v_doc_id integer;
   v_doct_id_OrdenPago integer;
   v_doc_id_cliente integer;
   
   v_opg_fecha date;

   v_ta_id integer;

   v_ccos_id_cliente integer;
   v_ccos_id integer;

   v_mon_id integer;

   v_cue_id integer;

   v_opgi_orden smallint;
   v_opgi_importe decimal(18,6);
   v_opgi_importeorigen decimal(18,6);

   v_cheq_id integer;

   v_creado date;
   v_modificado date;
   v_modifico integer;
   
   v_fc_id integer;
   v_doct_id_factura integer;

   v_agrupar_asiento smallint;

   v_error smallint;
   v_cfg_valor varchar(5000);

   v_ta_ultimonro integer;
   v_ta_mascara varchar(50);

   v_cuec_id integer;

   c_items refcursor;
begin

   p_error := 0;

   -- si no existe chau
   --
   if not exists ( select opg_id
                   from OrdenPago
                   where opg_id = p_opg_id
                     and est_id <> 7 ) then
      return;
   end if;

    select  as_id,
            prov_id,
            doc_id
    into  v_as_id,
          v_prov_id,
          v_doc_id_OrdenPago
    from OrdenPago
    where opg_id = p_opg_id;

   v_as_id := coalesce(v_as_id, 0);

   select sp_cfg_getValor('Tesoreria-General', 'Asiento Agrupado') into v_cfg_valor;

   v_cfg_valor := coalesce(v_cfg_valor, '0');
   v_agrupar_asiento := to_number(v_cfg_valor);

   SET TRANSACTION READ WRITE;

/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                                        insert                                                                      //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/

   -- obtengo el documento @doc_id
   --
   select doc_id_asiento,
          OrdenPago.doct_id,
          Documento.doc_id,
          ccos_id,
          opg_nrodoc || ' ' || prov_nombre
     into v_doc_id,
          v_doct_id_OrdenPago,
          v_doc_id_cliente,
          v_ccos_id_cliente,
          v_as_doc_cliente
   from OrdenPago
   join Documento
     on OrdenPago.doc_id = Documento.doc_id
   join Proveedor
     on OrdenPago.prov_id = Proveedor.prov_id
   where opg_id = p_opg_id;

   if v_as_id = 0 then

      v_is_new := -1;

      select sp_dbGetNewId('Asiento', 'as_id') into v_as_id;
      select sp_dbGetNewId('Asiento', 'as_numero') into v_as_numero;

      select ta_ultimonro,
             ta_mascara,
             doct_id
        into v_ta_ultimonro,
             v_ta_mascara,
             v_doct_id
      from Documento
      join Talonario
        on Documento.ta_id = Talonario.ta_id
      where doc_id = v_doc_id;

      v_ta_ultimonro := v_ta_ultimonro + 1;
      v_as_nrodoc := trim(to_char(v_ta_ultimonro));
      v_as_nrodoc := substr(v_ta_mascara, 1, length(v_ta_mascara) - length(v_as_nrodoc)) || v_as_nrodoc;

      insert into Asiento( as_id, as_numero, as_nrodoc, as_descrip, as_fecha, as_doc_cliente, doc_id, doct_id,
                           doct_id_cliente, doc_id_cliente, id_cliente, modifico )
        ( select v_as_id,
                 v_as_numero,
                 v_as_nrodoc,
                 opg_descrip,
                 opg_fecha,
                 v_as_doc_cliente,
                 v_doc_id,
                 v_doct_id,
                 v_doct_id_OrdenPago,
                 v_doc_id_cliente,
                 p_opg_id,
                 modifico
          from OrdenPago
          where opg_id = p_opg_id );

/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                                        update                                                                      //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/
   else

      v_is_new := 0;

      select opg_descrip,
             opg_fecha,
             modifico,
             modificado
        into v_as_descrip,
             v_as_fecha,
             v_modifico,
             v_modificado
      from OrdenPago
      where opg_id = p_opg_id;

      select doc_id,
             doct_id
        into v_doc_id,
             v_doct_id
      from Asiento
      where as_id = v_as_id;

      update Asiento
         set as_descrip = v_as_descrip,
             as_fecha = v_as_fecha,
             as_doc_cliente = v_as_doc_cliente,
             doc_id = v_doc_id,
             doct_id = v_doct_id,
             doct_id_cliente = v_doct_id_OrdenPago,
             doc_id_cliente = v_doc_id_cliente,
             id_cliente = p_opg_id,
             modifico = v_modifico,
             modificado = v_modificado
      where as_id = v_as_id;

   end if;

/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                                        items                                                                       //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/

   -- borro todos los items y solo hago inserts que se mucho mas simple y rapido
   --
   delete from AsientoItem where as_id = v_as_id;

   v_asi_orden := 1;

   /*
		  si me llaman sobre una OP que se esta generando, el parametro @@fc_id contiene la
    factura de compra para OPs automaticas, y me lo pasa sp_doc_orden_pagoSave.
		  cuando el que llama es sp_doc_orden_pagoAsiento[s]Save, no recibo el fc_id, asi que
    lo leo de la OP.
	  */
   if p_fc_id is not null then

      v_fc_id := p_fc_id;

   else

      select fc_id
        into v_fc_id
      from OrdenPago
      where opg_id = p_opg_id;

   end if;

   if v_fc_id is not null then

      /*
         cuando es un resumen bancario genero un item por cada concepto de la factura
         contra la cuenta de fondos para que la conciliacion bancaria sea mas facil,
			      ya que el resumen del banco viene con los importes discriminados.
			      por ejemplo cuando el banco cobra un gasto, y este lleva iva, en el resumen
         figuran dos renglones uno por el gasto y otro por el iva sobre dicho gasto.
		    */

      -- solo puede haber una cuenta
      -- pero por las dudas uso el min
      --
      select min(cue.cuec_id)
        into v_cuec_id
      from OrdenPagoItem opgi
      join Cuenta cue
        on opgi.cue_id = cue.cue_id
      where opgi.opg_id = p_opg_id
        and opgi.opgi_tipo = 2; -- efectivo

      -- necesito saber si es una nota de credito
      --
      select doct_id
        into v_doct_id_factura
      from FacturaCompra
      where fc_id = v_fc_id;

      -- solo necesito el detalle de los pagos
      -- si la cuenta es de tipo banco
      --
      if v_cuec_id = 2 /* bancos */ then

         select as_id
           into v_as_id_factura
         from FacturaCompra
         where fc_id = v_fc_id;

      end if;

      /* las ordenes de pago automaticas solo tienen efectivo */
      if v_as_id_factura is null then

         if v_agrupar_asiento = 0 then

            open c_items for
               select opgi_importe,
                      opgi_importeorigen,
                      cue_id,
                      ccos_id,
                      opgi.cheq_id,
                      opgi.opgi_descrip
               from OrdenPagoItem opgi
               where opgi.opg_id = p_opg_id
                 and opgi_tipo = 2; -- efectivo

         else

            open c_items for
               select sum(opgi_importe),
                      sum(opgi_importeorigen),
                      cue_id,
                      ccos_id,
                      opgi.cheq_id,
                      '''' opgi_descrip
               from OrdenPagoItem opgi
               where opgi.opg_id = p_opg_id
                 and opgi_tipo = 2 -- efectivo
               group by cue_id,ccos_id,opgi.cheq_id;

         end if;

      else

         select sum(asi_debe)
           into v_as_total
         from AsientoItem
         where as_id = v_as_id_factura;

         if v_agrupar_asiento = 0 then

            open c_items for
               select opgi.opgi_importe * ((asi.asi_debe + asi.asi_haber) / v_as_total),
                      opgi.opgi_importeorigen * ((asi.asi_debe + asi.asi_haber) / v_as_total),
                      opgi.cue_id,
                      opgi.ccos_id,
                      opgi.cheq_id,
                      cue.cue_nombre
               from OrdenPagoItem opgi,
                    AsientoItem asi
               join Cuenta cue
                 on asi.cue_id = cue.cue_id
               where opgi.opg_id = p_opg_id
                 and opgi.opgi_tipo = 2 -- efectivo
                 and asi.as_id = v_as_id_factura
                 and asi.asi_tipo <> 2 -- cuenta del acreedor
                 and ( ( asi.asi_debe <> 0 and v_doct_id_factura in ( 2,10 ) ) -- facturas y notas de debito
                       or ( asi.asi_haber <> 0 and v_doct_id_factura = 8 ) ); -- nota de credito

         /*
            cuando es un resumen bancario genero un item por cada concepto de la factura
	           contra la cuenta de fondos para que la conciliacion bancaria sea mas facil,
						      ya que el resumen del banco viene con los importes discriminados.

						      por ejemplo cuando el banco cobra un gasto, y este lleva iva, en el resumen
	           figuran dos renglones uno por el gasto y otro por el iva sobre dicho gasto.
					    */

         else

            open c_items for
               select sum(opgi.opgi_importe),
                      sum(opgi.opgi_importeorigen),
                      opgi.cue_id,
                      opgi.ccos_id,
                      opgi.cheq_id,
                      '''' cue_nombre
               from OrdenPagoItem opgi
               where opgi.opg_id = p_opg_id
                 and opgi_tipo = 2 -- efectivo
               group by opgi.cue_id,opgi.ccos_id,opgi.cheq_id;

         end if;

      end if;

   else

      open c_items for
         select opgi_importe,
                opgi_importeorigen,
                cue_id,
                ccos_id,
                opgi.cheq_id,
                opgi.opgi_descrip
         from OrdenPagoItem opgi
         where opgi.opg_id = p_opg_id
           and ( opgi_tipo = 2 or ( opgi_tipo = 4 and opgi_otroTipo = 2 ) ) -- efectivo y otros
      union all
         select opgi_importe,
                opgi_importeorigen,
                Chequera.cue_id,
                ccos_id,
                opgi.cheq_id,
                opgi.opgi_descrip
         from OrdenPagoItem opgi
         join Cheque
           on opgi.cheq_id = Cheque.cheq_id
         join Chequera
           on Cheque.chq_id = Chequera.chq_id
         where opgi.opg_id = p_opg_id
           and opgi_tipo = 1 -- cheques
      union all
         select opgi_importe,
                opgi_importeorigen,
                cobzi.cue_id,
                opgi.ccos_id,
                opgi.cheq_id,
                opgi.opgi_descrip
         from OrdenPagoItem opgi
         join Cheque cheq
           on opgi.cheq_id = cheq.cheq_id
         join CobranzaItem cobzi
           on opgi.cheq_id = cobzi.cheq_id
         where opgi.opg_id = p_opg_id
           and opgi_tipo = 6 -- cheques de terceros
           and cheq.mf_id is null
      union all
         select opgi_importe,
                opgi_importeorigen,
                mfi.cue_id_debe,
                opgi.ccos_id,
                opgi.cheq_id,
                opgi.opgi_descrip
         from OrdenPagoItem opgi
         join Cheque cheq
           on opgi.cheq_id = cheq.cheq_id
         join MovimientoFondoItem mfi
           on opgi.cheq_id = mfi.cheq_id
           and cheq.mf_id = mfi.mf_id
         where opgi.opg_id = p_opg_id
           and opgi_tipo = 6; -- cheques de terceros

   end if;

   loop

      fetch c_items into v_opgi_importe,v_opgi_importeorigen,v_cue_id,v_ccos_id,v_cheq_id,v_asi_descrip;
      exit when not found;

      select mon_id
        into v_mon_id
      from Cuenta
      where cue_id = v_cue_id;

      v_asi_haber := v_opgi_importe;
      v_asi_origen := v_opgi_importeorigen;

      perform sp_doc_asiento_save_item(
                            v_is_new,
                            0,
                            v_as_id,
                            v_asi_orden,
                            0,
                            v_asi_haber,
                            v_asi_origen,
                            0,
                            v_mon_id,
                            v_cue_id,
                            v_ccos_id,
                            v_cheq_id,
                            v_asi_descrip);

      v_asi_orden := v_asi_orden + 1;

   end loop;

   close c_items;

   open c_items for
      select sum(opgi_importe),
             sum(opgi_importeorigen),
             cue_id,
             ccos_id
      from OrdenPagoItem
      where opg_id = p_opg_id
        and ( opgi_tipo = 5 or ( opgi_tipo = 4 and opgi_otroTipo = 1 ) ) /* ctacte, otros, debe */
      group by cue_id, ccos_id;

/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                                        hora la cuenta del proveedor                                                //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/
   loop

      fetch c_items into v_opgi_importe,v_opgi_importeorigen,v_cue_id,v_ccos_id;
      exit when not found;

      select mon_id
        into v_mon_id
      from Cuenta
      where cue_id = v_cue_id;

      v_asi_debe := v_opgi_importe;
      v_asi_origen := v_opgi_importeorigen;

      perform sp_doc_asiento_save_item(
                               v_is_new,
                               0,
                               v_as_id,
                               v_asi_orden,
                               v_asi_debe,
                               0,
                               v_asi_origen,
                               0,
                               v_mon_id,
                               v_cue_id,
                               v_ccos_id,
                               null);

      v_asi_orden := v_asi_orden + 1;

   end loop;

   close c_items;

   -- Si fue una nota de credito invierto el asiento
   --
   if v_fc_id is not null then

      if v_doct_id_factura = 8 then

         for v_asi_id,v_asi_debe,v_asi_haber in
            select asi_id,
                   asi_debe,
                   asi_haber
            from AsientoItem
            where as_id = v_as_id
         loop

            if v_asi_debe <> 0 then

               update AsientoItem
                  set asi_haber = v_asi_debe,
                      asi_debe = 0
               where asi_id = v_asi_id;

            else

               update AsientoItem
                  set asi_debe = v_asi_haber,
                      asi_haber = 0
               where asi_id = v_asi_id;

            end if;

         end loop;

      end if;

   end if;

/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                                valido el asiento                                                                   //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/
   select * from sp_doc_asiento_validate(v_as_id) into v_error, p_error_msg;

   if v_error <> 0 then
      raise exception '%', p_error_msg;
   end if;

/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                                talonario                                                                           //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/

   select ta_id
     into v_ta_id
   from Documento
   where doc_id = v_doc_id;

   perform sp_talonario_set(v_ta_id, v_as_nrodoc);

/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                                vinculo la ordenpago con su asiento                                                 //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/
   update OrdenPago
      set as_id = v_as_id,
          opg_grabarasiento = 0
   where opg_id = p_opg_id;

   p_error := 0;

exception
   when others then

      if p_raise_error <> 0 then

         raise exception 'Ha ocurrido un error al grabar la Orden de Pago. sp_doc_orden_pago_asiento_save. %. %.',
                         sqlstate, sqlerrm;
      else

         p_error := -1;
         p_error_msg := sqlstate || ';' || sqlerrm || ';';

      end if;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_doc_factura_venta_set_credito_cairo(p_fv_id integer, p_borrar integer DEFAULT 0)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
declare
   v_pendiente decimal(18,6);
   v_cli_id integer;
   v_doct_id integer;
   v_emp_id integer;

   v_doct_facturaVta integer := 1;

   v_old_cli_ids integer[];
   i integer;
begin

   -- si no hay documento adios
   --
   if p_fv_id = 0 then
      return;
   end if;

   SET TRANSACTION READ WRITE;

   select cli_id,
          doct_id,
          emp_id
     into v_cli_id,
          v_doct_id,
          v_emp_id
   from FacturaVenta
   where fv_id = p_fv_id;

   -- borrar referencias a este documento por otro cliente
   --

   -- siempre borro cualquier mencion a este documento en el cache de cualquier
   -- cliente que no sea el indicado por el documento
   --
   if exists ( select cli_id
               from ClienteCacheCredito
               where cli_id <> v_cli_id
                 and doct_id = v_doct_facturaVta
                 and id = p_fv_id ) then

      select into v_old_cli_ids cli_id
      from ClienteCacheCredito
      where cli_id <> v_cli_id
        and doct_id = v_doct_facturaVta
        and id = p_fv_id;

      delete from ClienteCacheCredito
      where cli_id <> v_cli_id
        and doct_id = v_doct_facturaVta
        and id = p_fv_id;

      for i in 1 .. array_upper(v_old_cli_ids, 1)
      loop

         perform sp_clienteUpdateCredito(v_old_cli_ids[i], v_emp_id);

      end loop;

   end if;

   -- borrar
   --
   if p_borrar <> 0 then

      delete from ClienteCacheCredito
      where cli_id = v_cli_id
        and doct_id = v_doct_facturaVta
        and id = p_fv_id;

   -- insert - update
   --
   else

      select sum(fvd_pendiente)
        into v_pendiente
      from FacturaVentaDeuda
      where fv_id = p_fv_id;

      v_pendiente := round(coalesce(v_pendiente, 0), 2);

      update FacturaVenta
         set fv_pendiente = v_pendiente
      where fv_id = p_fv_id;

      if v_doct_id = 7 then /* nota de credito */
         v_pendiente := -v_pendiente;
      end if;

      if exists ( select id
                  from ClienteCacheCredito
                  where cli_id = v_cli_id
                    and doct_id = v_doct_facturaVta
                    and id = p_fv_id ) then

         if abs(v_pendiente) >= 0.01 then

            update ClienteCacheCredito
               set clicc_importe = v_pendiente
            where cli_id = v_cli_id
              and doct_id = v_doct_facturaVta
              and id = p_fv_id;

         -- si no hay nada pendiente lo saco del cache
         --
         else

            delete from ClienteCacheCredito
            where cli_id = v_cli_id
              and doct_id = v_doct_facturaVta
              and id = p_fv_id;

         end if;

      else

         -- solo si hay algo pendiente
         --
         if abs(v_pendiente) >= 0.01 then

            insert into ClienteCacheCredito( cli_id, doct_id, id, clicc_importe, emp_id )
              values ( v_cli_id, v_doct_facturaVta, p_fv_id, v_pendiente, v_emp_id );

         end if;

      end if;

   end if;

   -- deuda en cache
   --

   -- actualizo la deuda en la tabla cliente
   --
   perform sp_cliente_update_credito(v_cli_id, v_emp_id);

exception
   when others then

   raise exception 'Ha ocurrido un error al actualizar el estado de la factura de venta. sp_doc_factura_venta_set_credito_cairo. %. %.',
                   sqlstate, sqlerrm;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_doc_factura_venta_set_estado(p_fv_id integer, OUT p_est_id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
declare
   v_est_id integer;
   v_cli_id integer;
   v_pendiente decimal(18,6);
   v_creditoTotal decimal(18,6);
   v_llevaFirma smallint;
   v_firmado smallint;
   v_deuda decimal(18,6);
   v_doc_id integer;
   v_doc_llevafirma smallint;

   v_estado_pendiente integer := 1;
   v_estado_pendienteCredito integer := 3;
   v_estado_pendienteFirma integer := 4;
   v_estado_finalizado integer := 5;
   v_estado_anulado integer := 7;
begin

   if p_fv_id = 0 then
      return;
   end if;

   select cli_id,
          fv_firmado,
          est_id,
          doc_id
     into v_cli_id,
          v_firmado,
          v_est_id,
          v_doc_id
   from FacturaVenta
   where fv_id = p_fv_id;

   select doc_llevafirma
     into v_doc_llevafirma
   from Documento
   where doc_id = v_doc_id;

   if v_est_id <> v_estado_anulado then

      -- si el documento requiere firma y el comprobante no esta firmado
      -- y no esta finalizado (puede ser que se finalizo y luego se modifico el documento
      -- para que requiera firma en cuyo caso no se exige firma para documentos finalizados)
      --
      if v_firmado = 0 and v_doc_llevafirma <> 0 and v_est_id <> v_estado_finalizado then

         v_est_id := v_estado_pendienteFirma;

      else

         -- se obtiene la deuda del comprobante
         --
         select round(sum(fvd_pendiente), 2)
           into v_deuda
         from FacturaVentaDeuda
         where fv_id = p_fv_id;

         -- si el comprobante no tiene deuda se finaliza
         --
         if coalesce(v_deuda, 0) <= 0 then

            v_est_id := v_estado_finalizado;

         else

            -- se obtiene la deuda del cliente
            --
            select sum(clicc_importe)
              into v_pendiente
            from ClienteCacheCredito
            where cli_id = v_cli_id;

            -- se obtiene el credito del cliente
            --
            select cli_creditototal
              into v_creditoTotal
            from Cliente
            where cli_id = v_cli_id;

            -- si debe mas que el credito concedido al cliente
            --
            if v_pendiente > v_creditoTotal then

               v_est_id := v_estado_pendienteCredito;

            -- sino solo pendiente
            --
            else

               v_est_id := v_estado_pendiente;

            end if;

         end if;

      end if;

      update FacturaVenta
         set est_id = v_est_id
      where fv_id = p_fv_id;

   end if;

   select sp_doc_factura_venta_set_estado_cliente(p_fv_id, v_est_id) into v_est_id;

   p_est_id := v_est_id;

exception
   when others then

   raise exception 'Ha ocurrido un error al actualizar el estado de la factura de venta. sp_doc_factura_venta_set_estado. %. %.',
                   sqlstate, sqlerrm;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_doc_factura_venta_set_estado_cliente(p_fv_id integer, p_est_id integer, OUT p_o_est_id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
begin

  p_o_est_id := p_est_id;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_doc_factura_venta_set_pendiente(p_fv_id integer)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
declare
   v_fv_pendiente decimal(18,6);
begin

   SET TRANSACTION READ WRITE;

   select sum(fvd_pendiente)
     into v_fv_pendiente
   from FacturaVentaDeuda
   where fv_id = p_fv_id;

   v_fv_pendiente := coalesce(v_fv_pendiente, 0);

   update FacturaVenta
      set fv_pendiente = round(v_fv_pendiente, 2)
   where fv_id = p_fv_id;

exception
   when others then

      raise exception 'Ha ocurrido un error al actualizar el pendiente de la factura de venta. sp_doc_factura_venta_set_pendiente. %. %.',
                      sqlstate, sqlerrm;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_doc_factura_venta_stock_item_save(p_sti_grupo integer, p_st_id integer, p_fvi_cantidad integer, p_fvi_descrip character varying, p_pr_id integer, p_depl_id_origen integer, p_depl_id_destino integer, p_prns_id integer, p_stik_id integer, p_stl_id integer, OUT p_sti_orden integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
declare
   v_sti_id integer;
   v_pr_id_kit integer;
begin

   select sp_dbGetNewId('StockItem', 'sti_id') into v_sti_id;

   if p_stik_id is not null then

      select pr_id
        into v_pr_id_kit
      from StockItemKit
      where stik_id = p_stik_id;

   end if;

   insert into StockItem( st_id, sti_id, sti_orden, sti_ingreso, sti_salida, sti_descrip, sti_grupo, pr_id, depl_id,
                          prns_id, stik_id, pr_id_kit, stl_id )
   values ( p_st_id, v_sti_id, p_sti_orden, 0, p_fvi_cantidad, p_fvi_descrip, p_sti_grupo, p_pr_id, p_depl_id_origen,
            p_prns_id, p_stik_id, v_pr_id_kit, p_stl_id );

   p_sti_orden := p_sti_orden + 1;

   select sp_dbGetNewId('StockItem', 'sti_id') into v_sti_id;

   insert into StockItem( st_id, sti_id, sti_orden, sti_ingreso, sti_salida, sti_descrip, sti_grupo, pr_id, depl_id,
                          prns_id, stik_id, pr_id_kit, stl_id )
   values ( p_st_id, v_sti_id, p_sti_orden, p_fvi_cantidad, 0, p_fvi_descrip, p_sti_grupo, p_pr_id, p_depl_id_destino,
            p_prns_id, p_stik_id, v_pr_id_kit, p_stl_id );

   p_sti_orden := p_sti_orden + 1;

exception
   when others then

      raise exception 'Ha ocurrido un error al grabar el item de stock de la factura de venta. sp_doc_factura_venta_stock_item_save.%. %.',
                      sqlstate, sqlerrm;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_doc_factura_venta_stock_save(p_fvtmp_id integer, p_fv_id integer, p_depl_id integer, p_raise_error integer DEFAULT (-1), OUT p_error integer, OUT p_error_msg character varying)
 RETURNS record
 LANGUAGE plpgsql
AS $function$
declare
   v_is_new integer;

   v_st_id integer;
   v_st_numero integer;
   v_st_nrodoc varchar(50);
   v_st_descrip varchar(5000);
   v_st_fecha date;
   v_st_doc_cliente varchar(5000);

   v_doct_id integer;
   v_doc_id integer;
   v_doct_id_factura integer;
   v_doc_id_factura integer;

   v_fv_fecha date;
   v_suc_id integer;
   v_ta_id integer;
   v_cli_id integer;

   v_sti_id integer;
   v_sti_orden smallint;
   v_sti_ingreso decimal(18,6);
   v_sti_salida decimal(18,6);

   v_depl_id_origen integer;
   v_depl_id_destino integer;
   v_depl_id_tercero integer;

   v_fvi_orden smallint;
   v_fvi_cantidad decimal(18,6);
   v_fvi_id integer;
   v_fvi_descrip varchar(255);

   v_pr_id integer;
   v_stl_id integer;

   v_creado date;
   v_modificado date;
   v_modifico integer;

   v_error smallint;
   v_success smallint;
   v_message varchar(255);

   v_bEsKit smallint;
   v_bLLevaNroSerie smallint;
   v_bLoteFifo smallint;
   v_cant_lote decimal(18,6);
   v_cant_aux decimal(18,6);

   v_ta_nrodoc varchar(100);

begin

   -- si no existe chau
   --
   if not exists ( select fv_id
                   from FacturaVenta
                   where fv_id = p_fv_id ) then
      return;
   end if;

		select st_id,
         cli_id,
         doc_id
    into v_st_id,
         v_cli_id,
         v_doc_id_factura
		from FacturaVenta
		where fv_id = p_fv_id;
	 
   v_st_id := coalesce(v_st_id, 0);

   v_depl_id_tercero := -3; /* select * from depositologico */

   SET TRANSACTION READ WRITE;

/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                                        insert                                                                      //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/

   -- obtengo el documento @doc_id
   --
   select doc_id_Stock,
          FacturaVenta.doct_id,
          fv_nrodoc || ' ' || cli_nombre
     into v_doc_id,
          v_doct_id_factura,
          v_st_doc_cliente
   from FacturaVenta
   join Documento
     on FacturaVenta.doc_id = Documento.doc_id
   join Cliente
     on FacturaVenta.cli_id = Cliente.cli_id
   where fv_id = p_fv_id;

   if v_doct_id_factura = 1 /* Factura */ or v_doct_id_factura = 9 /* Nota de Debito */ then

      v_depl_id_destino := v_depl_id_tercero;
      v_depl_id_origen := p_depl_id;

   else

      if v_doct_id_factura = 7 /* Nota de Credito */ then

         v_depl_id_destino := p_depl_id;
         v_depl_id_origen := v_depl_id_tercero;

      end if;

   end if;

   if v_st_id = 0 then

      v_is_new := -1;

      select sp_dbGetNewId('Stock', 'st_id') into v_st_id;
      select sp_dbGetNewId('Stock', 'st_numero') into v_st_numero;

      select doct_id,
             ta_id
        into v_doct_id,
             v_ta_id
      from Documento
      where doc_id = v_doc_id;

      select sp_talonario_get_next_number(v_ta_id) into v_ta_nrodoc;

      v_st_nrodoc := v_ta_nrodoc;

      -- con esto evitamos que dos tomen el mismo Numero
      --
      perform sp_talonario_set(v_ta_id, v_ta_nrodoc);

      insert into Stock( st_id, st_numero, st_nrodoc, st_descrip, st_fecha, st_doc_cliente, suc_id, doc_id, doct_id,
                         doct_id_cliente, id_cliente, depl_id_origen, depl_id_destino, modifico )
        ( select v_st_id,
                 v_st_numero,
                 v_st_nrodoc,
                 fv_descrip,
                 fv_fecha,
                 v_st_doc_cliente,
                 suc_id,
                 v_doc_id,
                 v_doct_id,
                 v_doct_id_factura,
                 p_fv_id,
                 v_depl_id_origen,
                 v_depl_id_destino,
                 modifico
          from FacturaVenta
          where fv_id = p_fv_id );

/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                                        update                                                                      //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/
   else

      v_is_new := 0;

      select fv_descrip,
             fv_fecha,
             modifico,
             modificado,
             suc_id
        into v_st_descrip,
             v_st_fecha,
             v_modifico,
             v_modificado,
             v_suc_id
      from FacturaVenta
      where fv_id = p_fv_id;

      select doc_id,
             doct_id
        into v_doc_id,
             v_doct_id
      from Stock
      where st_id = v_st_id;

      update Stock
         set st_descrip = v_st_descrip,
             st_fecha = v_st_fecha,
             st_doc_cliente = v_st_doc_cliente,
             doc_id = v_doc_id,
             doct_id = v_doct_id,
             doct_id_cliente = v_doct_id_factura,
             id_cliente = p_fv_id,
             depl_id_origen = v_depl_id_origen,
             depl_id_destino = v_depl_id_destino,
             modifico = v_modifico,
             modificado = v_modificado
      where st_id = v_st_id;

   end if;

/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                                        items                                                                       //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/

   if v_is_new = 0 then

      -- quito de stockcache lo que se movio con los items de este movimiento
      --
      select * from sp_doc_stock_cache_update(v_st_id, 1 /* restar */, 1 /* no update prns */) into v_message, v_success;

      if coalesce(v_success, 0) = 0 then
         raise exception '%', v_message;
      end if;

      -- borro todos los items y solo hago inserts que es mucho mas simple y rapido
      --
      delete from StockItem where st_id = v_st_id;

      -- borro todos los Kit de este movimiento
      --
      delete from StockItemKit where st_id = v_st_id;

   end if;

   v_sti_orden := 0;

   perform sp_doc_factura_venta_prepare_kit(p_fv_id);

   for v_fvi_id,v_fvi_cantidad,v_pr_id,v_stl_id,v_fvi_descrip,v_bLlevaNroSerie,v_bEsKit,v_bLoteFifo in
        select fvi.fvi_id,
               fvi.fvi_cantidadaremitir * p.pr_ventastock,
               fvi.pr_id,
               fvi.stl_id,
               fvi.fvi_descrip,
               p.pr_llevanroserie,
               p.pr_eskit,
               p.pr_lotefifo
        from FacturaVentaItem fvi
        join Producto p
          on fvi.pr_id = p.pr_id
        where fvi.fv_id = p_fv_id
          and p.pr_llevastock <> 0
          and fvi.fvi_nostock = 0
   loop

         -- si es un kit hay que descomponerlo
         --
         if v_bEsKit <> 0 then

            select sp_doc_factura_venta_save_item_kit(
                                          p_fvTMP_id,
                                          v_fvi_id,
                                          v_st_id,
                                          v_fvi_cantidad,
                                          v_fvi_descrip,
                                          v_pr_id,
                                          v_depl_id_origen,
                                          v_depl_id_destino,
                                          v_stl_id) into v_sti_orden;
         else

            -- si tiene numero de serie hay que grabar un stockitem por cada uno.
            --
            if v_bLlevaNroSerie <> 0 then

               select sp_doc_factura_venta_save_nro_serie(
                                              p_fvTMP_id,
                                              v_fvi_id,
                                              v_st_id,
                                              v_fvi_cantidad,
                                              v_fvi_descrip,
                                              v_pr_id,
                                              v_depl_id_origen,
                                              v_depl_id_destino,
                                              null) into v_sti_orden;

            else

               -- consumo de lote por fifo
               --
               if v_stl_id is null and v_bLoteFifo <> 0 then
                  while v_fvi_cantidad > 0
                  loop

                        -- obtengo por Fifo el lote a descargar
                        --
                        v_stl_id := null;

                        select stl_id, stc_cantidad
                          into v_stl_id,
                               v_cant_lote
                        from ( select stc.stl_id,
                                      stc.stc_cantidad
                               from StockCache stc
                               join StockLote stl
                                 on stc.stl_id = stl.stl_id
                               where stc.pr_id = v_pr_id
                                 and stc.depl_id = p_depl_id
                                 and stc.stc_cantidad > 0
                                 and not exists ( select stl_id
                                                  from tt_t_fifo_stocklote
                                                  where stl_id = stc.stl_id
                                                  group by stl_id
                                                  having stc_cantidad - sum(stl_cantidad) <= 0 )
                               order by stl.stl_fecha asc ) t
                        limit 1;

                        -- si tengo un lote lo agrego a la lista de lotes usados
                        --
                        if v_stl_id is not null then

                           insert into tt_t_fifo_stocklote( stl_id, stl_cantidad )
                           values ( v_stl_id, v_fvi_cantidad );

                        -- si no hay lote le asigno como cantidad lo pendiente
                        -- esto va a generar stock negativo en el deposito
                        -- de la temporal forzando el mensaje de error.
                        --
                        -- en una version futura vamos a lanzar el error desde aca
                        -- ya que si hay stock sin lote en el deposito temporal para
                        -- este producto, el sistema lo usaria, y no notificaria al usuario
                        -- que no hay lotes de DIT para consumir.
                        --
                        -- hay que tener en cuenta que no deberia haber productos sin
                        -- lote en este deposito, con lo cual el caso que menciono arriba
                        -- no deberia darse.
                        --
                        else

                           v_cant_lote := v_fvi_cantidad;

                        end if;

                        if v_cant_lote < v_fvi_cantidad then

                           v_cant_aux := v_cant_lote;

                        else

                           v_cant_aux := v_fvi_cantidad;

                        end if;

                        v_fvi_cantidad := v_fvi_cantidad - v_cant_aux;

                        select sp_doc_factura_venta_stock_item_save(
                                                       0,
                                                       v_st_id,
                                                       v_cant_aux,
                                                       v_fvi_descrip,
                                                       v_pr_id,
                                                       v_depl_id_origen,
                                                       v_depl_id_destino,
                                                       null,
                                                       null,
                                                       v_stl_id) into v_sti_orden;

                  end loop;

               -- solo son simples stockitems (una pavada)
               --
               else

                  select sp_doc_factura_venta_stock_item_save(
                                                 0,
                                                 v_st_id,
                                                 v_fvi_cantidad,
                                                 v_fvi_descrip,
                                                 v_pr_id,
                                                 v_depl_id_origen,
                                                 v_depl_id_destino,
                                                 null,
                                                 null,
                                                 v_stl_id) into v_sti_orden;

               end if;
            end if;
         end if;
   end loop;

   -- agrego a StockCache lo que se movio con los items de este movimiento
   --
   select * from sp_doc_stock_cache_update(v_st_id, 0 /* sumar */) into v_message, v_success;
                                  
   -- valido que no quede nada en interno por culpa de este movimiento
   --
   if v_doct_id_factura = 7 then

      if exists ( select 1
                  from ProductoNumeroSerie prns
                  join StockItem sti
                    on prns.prns_id = sti.prns_id
                  where sti.st_id = v_st_id
                    and prns.depl_id = -2 ) then

         v_message := 'Esta nota de credito esta enviando numeros de serie al deposito interno. Debe comunicarse con soporte de CrowSoft para solucionar el problema.';
         raise exception '%', v_message;
      end if;

   end if;

/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                                vinculo la factura con su stock                                                     //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/

   update FacturaVenta set st_id = v_st_id where fv_id = p_fv_id;

   p_error := 0;

exception
   when others then

      if p_raise_error <> 0 then

         raise exception 'Ha ocurrido un error al grabar la factura de venta. sp_doc_factura_venta_stock_save.%. %.',
                         sqlstate, sqlerrm;

      else

         p_error_msg := 'Ha ocurrido un error al grabar la factura de venta. sp_doc_factura_venta_stock_save.';
         p_error_msg := '@@ERROR_SP:' || coalesce(p_error_msg, '');
         p_error := -1;

      end if;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_doc_get_trans_info(p_emp_id integer, p_doct_id integer, p_id integer, p_us_id integer, OUT p_cotizacion numeric, OUT p_total numeric, OUT p_nrodoc character varying, OUT p_prov_id integer, OUT p_prov_nombre character varying, OUT p_cli_id integer, OUT p_cli_nombre character varying, OUT p_suc_id integer, OUT p_doc_id integer, OUT p_doct_id_out integer, OUT p_emp_id_out integer, OUT p_emp_nombre character varying)
 RETURNS record
 LANGUAGE plpgsql
AS $function$
begin

   if p_doct_id in (1,7,9) /* ventas */ then

      select fv_id, fv_cotizacion, fv_total, fv_nrodoc, fv.cli_id, cli_nombre, fv.suc_id, fv.doc_id, fv.doct_id, fv.emp_id, emp_nombre
        into p_id, p_cotizacion, p_total, p_nrodoc, p_cli_id, p_cli_nombre, p_suc_id, p_doc_id, p_doct_id_out, p_emp_id_out, p_emp_nombre 
      from facturaVenta fv
      inner join cliente cli
       on fv.cli_id = cli.cli_id
      inner join empresa emp
       on fv.emp_id = emp.emp_id
      where fv_id = p_id;

      p_prov_id := 0;
      p_prov_nombre := '';

   else

      select fc_id, fc_cotizacion, fc_total, fc_nrodoc, fc.prov_id, prov_nombre, fc.suc_id, fc.doc_id, fc.doct_id, doc.emp_id, emp_nombre
        into p_id, p_cotizacion, p_total, p_nrodoc, p_prov_id, p_prov_nombre, p_suc_id, p_doc_id, p_doct_id_out, p_emp_id_out, p_emp_nombre 
      from facturaCompra fc
      inner join proveedor prov
       on fc.prov_id = prov.prov_id
      inner join documento doc
       on fc.doc_id = doc.doc_id
      inner join empresa emp
       on doc.emp_id = emp.emp_id
      where fc_id = p_id;

      p_cli_id := 0;
      p_cli_nombre := '';

   end if;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_doc_factura_vta_set_item_pendiente(p_fv_id integer)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
declare
   v_fvi_id integer;
   v_est_id integer;

   v_aplicadopedido decimal(18,6);
   v_aplicadoremito decimal(18,6);
   v_aplicadopacking decimal(18,6);
begin

   select est_id
     into v_est_id
   from FacturaVenta
   where fv_id = p_fv_id;

   SET TRANSACTION READ WRITE;

   if v_est_id <> 7 then

      for v_fvi_id in
           select fvi_id
           from FacturaVentaItem
           where fv_id = p_fv_id
      loop

         select coalesce(sum(pvfv_cantidad), 0)
           into v_aplicadopedido
         from PedidoFacturaVenta
         where fvi_id = v_fvi_id;

         select coalesce(sum(rvfv_cantidad), 0)
           into v_aplicadoremito
         from RemitoFacturaVenta
         where fvi_id = v_fvi_id;

         select coalesce(sum(pklstfv_cantidad), 0)
           into v_aplicadopacking
         from PackingListFacturaVenta
         where fvi_id = v_fvi_id;

         v_aplicadopedido := coalesce(v_aplicadopedido, 0);
         v_aplicadoremito := coalesce(v_aplicadoremito, 0);
         v_aplicadopacking := coalesce(v_aplicadopacking, 0);

         update FacturaVentaItem
            set fvi_pendiente = fvi_cantidadaremitir - v_aplicadopedido - v_aplicadoremito,
                fvi_pendientepklst = fvi_cantidadaremitir - v_aplicadopacking
         where fvi_id = v_fvi_id;

      end loop;

   else

      update FacturaVentaItem
         set fvi_pendiente = 0,
             fvi_pendientepklst = 0
      where fv_id = p_fv_id;

   end if;

exception
   when others then

   raise exception 'Ha ocurrido un error al actualizar el pendiente de la factura de venta. sp_doc_factura_vta_set_item_pendiente. %. %.',
                   sqlstate, sqlerrm;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_doc_get_cue_id(p_tercero_id integer, p_doc_id integer, p_to_id integer DEFAULT 1, OUT p_cue_id integer, OUT p_mon_id integer)
 RETURNS record
 LANGUAGE plpgsql
AS $function$
declare
  v_doct_id integer;
  v_cue_id integer;
  v_mon_id integer;
begin


      -- Ojo: resistir la tentacion de meter esto
      --      en el select de abajo, ya que si no
      --      hay tipo de operacion, va a dejar
      --      el doct_id en null y no va a funcar
      --
      select doct_id
        into v_doct_id
      from Documento
      where doc_id = p_doc_id;

      -- Saco la cuenta del tipo de operacion
      --
      select Cuenta.cue_id,
             Cuenta.mon_id
        into v_cue_id,
             v_mon_id
      from TipoOperacionCuentaGrupo
      join Documento
        on TipoOperacionCuentaGrupo.cueg_id = Documento.cueg_id
      join Cuenta
        on TipoOperacionCuentaGrupo.cue_id = Cuenta.cue_id
      where to_id = p_to_id
        and doc_id = p_doc_id;

      if v_cue_id is null then

         if v_doct_id in ( 1,7,9,13 ) then

            -- Saco la cuenta del cliente
            --
            select Cuenta.cue_id,
                   Cuenta.mon_id
              into v_cue_id,
                   v_mon_id
            from ClienteCuentaGrupo
            join Documento
              on ClienteCuentaGrupo.cueg_id = Documento.cueg_id
            join Cuenta
              on ClienteCuentaGrupo.cue_id = Cuenta.cue_id
            where cli_id = p_tercero_id
              and doc_id = p_doc_id;

            -- Saco la cuenta de CuentaGrupo
            --
            if v_cue_id is null then

               select Cuenta.cue_id,
                      Cuenta.mon_id
                 into v_cue_id,
                      v_mon_id
               from CuentaGrupo
               join Documento
                 on CuentaGrupo.cueg_id = Documento.cueg_id
               join Cuenta
                 on CuentaGrupo.cue_id = Cuenta.cue_id
               where Documento.doc_id = p_doc_id;

            end if;

         else

            -- Saco la cuenta del cliente
            --
            select Cuenta.cue_id,
                   Cuenta.mon_id
              into v_cue_id,
                   v_mon_id
            from ProveedorCuentaGrupo
            join Documento
              on ProveedorCuentaGrupo.cueg_id = Documento.cueg_id
            join Cuenta
              on ProveedorCuentaGrupo.cue_id = Cuenta.cue_id
            where prov_id = p_tercero_id
              and doc_id = p_doc_id;

            -- Saco la cuenta de CuentaGrupo
            --
            if v_cue_id is null then

               select Cuenta.cue_id,
                      Cuenta.mon_id
                 into v_cue_id,
                      v_mon_id
               from CuentaGrupo
               join Documento
                 on CuentaGrupo.cueg_id = Documento.cueg_id
               join Cuenta
                 on CuentaGrupo.cue_id = Cuenta.cue_id
               where Documento.doc_id = p_doc_id;

            end if;
         end if;
      end if;

      p_cue_id := v_cue_id;
      p_mon_id := v_mon_id;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_doc_get_doc_id_for_doct_id(p_emp_id integer, p_us_id integer, p_doct_id integer, p_doct_id_aplic integer, p_id integer, p_idex integer, OUT p_doc_id integer, OUT p_doc_name character varying, OUT p_mon_id integer)
 RETURNS record
 LANGUAGE plpgsql
AS $function$
declare
  v_mon_id integer;
begin

   p_doc_id := 0;
   p_doc_name := '';

   if p_doct_id_aplic = 3 then -- Remitos de Venta

      select doc.mon_id
        into v_mon_id
      from RemitoVenta rv
      join Documento doc
        on rv.doc_id = doc.doc_id
      where rv.rv_id = p_id;

   else
      if p_doct_id_aplic = 4 then -- Remitos de Compra

         select doc.mon_id
           into v_mon_id
         from RemitoCompra rc
         join Documento doc
           on rc.doc_id = doc.doc_id
         where rc.rc_id = p_id;

      end if;
   end if;

   if p_doct_id_aplic = 5 then -- Pedidos de Venta

      select doc.mon_id
        into v_mon_id
      from PedidoVenta pv
      join Documento doc
        on pv.doc_id = doc.doc_id
      where pv.pv_id = p_id;

   else

      if p_doct_id_aplic = 11 then -- Presupuesto de Venta

         select doc.mon_id
           into v_mon_id
         from PresupuestoVenta prv
         join Documento doc
           on prv.doc_id = doc.doc_id
         where prv.prv_id = p_id;

      else

         if p_doct_id_aplic = 35 then -- Ordenes de Compra

            select doc.mon_id
              into v_mon_id
            from OrdenCompra oc
            join Documento doc
              on oc.doc_id = doc.doc_id
            where oc.oc_id = p_id;

         end if;

      end if;

   end if;

   if v_mon_id is null then

      select mon_id
        into v_mon_id
      from Moneda
      where mon_legal <> 0;

   end if;

   /*
      csETFacDirecta = 0
      csETFacPedido = 1
      csETFacRemito = 2
      csETFacPackingList = 3
      csETFacProyecto = 4
      csETFacOrden = 5
   */

   select doc_id, doc_nombre
     into p_doc_id, p_doc_name
   from Documento doc
   where doc.doct_id = p_doct_id
     and doc.mon_id = v_mon_id
     and doc.emp_id = p_emp_id
     and ( ( doc_rv_desde_pv <> 0 and p_doct_id_aplic = 5 and p_doct_id = 3 )
          or ( doc_rv_desde_os <> 0 and p_doct_id_aplic = 42 and p_doct_id = 3 )
          or ( doc_rv_bom <> 0 and p_doct_id_aplic = 5 and p_doct_id = 3 and p_IdEx = -2 )
          or ( doc_pv_desde_prv <> 0 and p_doct_id_aplic = 11 and p_doct_id = 5 )
          or ( doc_rc_desde_oc <> 0 and p_doct_id_aplic = 35 and p_doct_id = 4 )
          or ( doc_tipofactura = 5 and p_doct_id_aplic = 35 and p_doct_id = 2 )
          or ( doc_tipofactura = 2 and p_doct_id_aplic = 4 and p_doct_id = 2 )
          or ( doc_tipofactura = 1 and p_doct_id_aplic = 5 and p_doct_id = 1 )
          or ( doc_tipofactura = 2 and p_doct_id_aplic = 3 and p_doct_id = 1 )
          or ( doc_tipofactura = 3 and p_doct_id_aplic = 21 and p_doct_id = 1 )
          or ( doc_tipofactura = 4 and p_doct_id_aplic = 0 and p_doct_id = 1 and p_IdEx = -1 )
         )
     and exists ( select *
                  from Permiso
                  where pre_id = doc.pre_id_new
                    and ( ( us_id = p_us_id )
                          or exists ( select us_id from UsuarioRol
                                      where us_id = p_us_id
                                        and rol_id = Permiso.rol_id ) ) )
     limit 1;

   select mon_id into p_mon_id from Documento where doc_id = p_doc_id;

   p_mon_id := coalesce(p_mon_id, 0);

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_doc_get_editable(p_emp_id integer, p_doc_id integer, p_us_id integer, p_pre_id integer, OUT p_editable_status integer, OUT p_editable_message character varying)
 RETURNS record
 LANGUAGE plpgsql
AS $function$
begin

   declare
      v_doct_id integer;
      v_emp_id integer;
      v_emp_nombre varchar(255);
      v_doct_nombre varchar(255);
      v_editable smallint;
      v_edit_msg varchar(255);
      v_csPreVtaNew integer;
   begin
      v_csPreVtaNew := p_pre_id;

      select doc.emp_id,
             doc.doct_id,
             doct.doct_nombre
        into v_emp_id,
             v_doct_id,
             v_doct_nombre
      from Documento doc
      join DocumentoTipo doct
        on doc.doct_id = doct.doct_id
      where doc.doc_id = p_doc_id;

      v_editable := 1;

      v_edit_msg := '';

      if p_emp_id <> v_emp_id then
         select emp_nombre
           into v_emp_nombre
         from Empresa
         where emp_id = v_emp_id;

         v_editable := 0;
         v_edit_msg := 'El documento pertenece a la empresa ' || v_emp_nombre
                        || ', para crear nuevos comprobantes debe ingresar al sistema indicando dicha empresa.';

      else

         -- Tiene permiso para crear nuevos documentos
         --
         if not exists ( select per_id
                         from Permiso
                         where pre_id = v_csPreVtaNew
                           and ( ( us_id = p_us_id )
                                or exists ( select us_id
                                            from UsuarioRol
                                            where us_id = p_us_id
                                              and rol_id = Permiso.rol_id ))) then
            v_editable := 0;
            v_edit_msg := 'Usted no tiene permiso para generar nuevos comprobantes para el tipo de documento ' || v_doct_nombre;
         else
          declare
            -- Tiene permiso para crear comprobantes de este documento
            --
            v_pre_id_new integer;
            v_doc_nombre varchar(255);
          begin
            select pre_id_new,
                   doc_nombre
              into v_pre_id_new,
                   v_doc_nombre
            from Documento
            where doc_id = p_doc_id;

            if not exists ( select per_id
                            from Permiso
                            where pre_id = v_pre_id_new
                             and ( ( us_id = p_us_id )
                                  or exists ( select us_id
                                              from UsuarioRol
                                              where us_id = p_us_id
                                                and rol_id = Permiso.rol_id))) then
               v_editable := 0;
               v_edit_msg := 'Usted no tiene permiso para generar nuevos comprobantes para el documento ' || v_doc_nombre;

            end if;

          end;
         end if;

      end if;

      p_editable_status := coalesce(v_editable, 0);
      p_editable_message := coalesce(v_edit_msg, '');

   end;
end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_doc_get_fecha2(p_fecha date, p_is_banco integer, p_cle_id integer, OUT p_fecha2 date)
 RETURNS date
 LANGUAGE plpgsql
AS $function$
declare
   v_fecha2 date;
   v_oldDateFirst integer;
   v_dayweek smallint;
   v_dias smallint;
   v_n smallint;
begin


   -- obtengo el numero de dia de la
   -- fecha que me pasaron
   --
   v_dayweek := extract(dow from p_fecha);

   v_fecha2 := case v_dayweek
                  when 6 /*sabado*/  then dateadd('D', 2, p_fecha)
                  when 0 /*domingo*/ then dateadd('D', 1, p_fecha)
                  else p_fecha
               end;

   -- si es para un cheque
   --
   if p_is_banco <> 0 then

      loop

         if not exists ( select fei.fe_id
                            from FeriadoItem fei
                                   join Feriado fe
                                    on fe.fe_id = fe.fe_id
                                   and fe.fe_banco <> 0
                                   and fe.fe_local = 0
                            where fei.fei_fecha::date = v_fecha2 ) then
            exit;
         end if;

         v_fecha2 := dateadd('D', 1, v_fecha2);

      end loop;

      -- obtengo el dia despues de moverme por feriados
      --
      v_dayweek := extract(dow from v_fecha2);

      loop

         if v_dayweek not in ( 6, 0 ) then
            exit;
         end if;

         -- si estoy en un fin de semana
         --
         v_fecha2 := case v_dayweek
                         when 6 /*sabado*/  then dateadd('D', 2, v_fecha2)
                         when 0 /*domingo*/ then dateadd('D', 1, v_fecha2)
                         else v_fecha2
                     end;

         loop

            if not exists ( select fei.fe_id
                            from FeriadoItem fei
                            join Feriado fe
                              on fe.fe_id = fe.fe_id
                             and fe.fe_banco <> 0
                             and fe.fe_local = 0
                            where fei.fei_fecha::date = v_fecha2 ) then
               exit;
            end if;

            v_fecha2 := dateadd('D', 1, v_fecha2);

         end loop;

         -- obtengo el dia despues moverme por feriados
         --
         v_dayweek := extract(dow from v_fecha2);

      end loop;

      -- obtengo el clearing
      --
      select cle_dias
        into v_dias
      from Clearing
      where cle_id = p_cle_id;

      v_dias := coalesce(v_dias, 0);

      v_n := 1;

      loop

         if v_n > v_dias then
            exit;
         end if;

         -- agrego un dia
         --
         v_fecha2 := dateadd('D', 1, v_fecha2);

         v_dayweek := extract(dow from v_fecha2);

         v_n := v_n + 1;

         -- si es fin de semana
         --
         if v_dayweek in ( 6, 0 ) then
            v_fecha2 := case v_dayweek
                             when 6 /*sabado*/  then dateadd('D', 2, v_fecha2)
                             when 0 /*domingo*/ then dateadd('D', 1, v_fecha2)
                             else v_fecha2
                        end;
         end if;

         loop


            if not exists ( select fei.fe_id
                            from FeriadoItem fei
                            join Feriado fe
                              on fe.fe_id = fe.fe_id
                               and fe.fe_banco <> 0
                               and fe.fe_local = 0
                            where fei.fei_fecha::date = v_fecha2 ) then
               exit;
            end if;

               v_fecha2 := dateadd('D', 1, v_fecha2);

               v_dayweek := extract(dow from v_fecha2);

               -- Si es fin de semana
               --
               if v_dayweek in ( 6, 0 ) then
                  v_fecha2 := case v_dayweek
                                     when 6 /*sabado*/  then dateadd('D', 2, v_fecha2)
                                     when 0 /*domingo*/ then dateadd('D', 1, v_fecha2)
                                     else v_fecha2
                              end;
               end if;

         end loop;

      end loop;

   else

      loop

         if not exists ( select fei.fe_id
                         from FeriadoItem fei
                         join Feriado fe
                           on fe.fe_id = fe.fe_id
                            and fe.fe_laboral <> 0
                            and fe.fe_local = 0
                         where fei.fei_fecha::date = v_fecha2 ) then
            exit;
         end if;

         v_fecha2 := dateadd('D', 1, v_fecha2);

         v_dayweek := extract(dow from v_fecha2);

         -- si es fin de semana
         --
         v_fecha2 := case v_dayweek
                           when 6 /*sabado*/  then dateadd('D', 2, v_fecha2)
                           when 0 /*domingo*/ then dateadd('D', 1, v_fecha2)
                           else v_fecha2
                     end;
      end loop;

   end if;

   p_fecha2 := v_fecha2;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_doc_get_info(p_emp_id integer, p_doc_id integer, p_us_id integer, OUT p_mon_id integer, OUT p_doct_id integer, OUT p_doc_tipofactura integer, OUT p_doc_muevestock integer)
 RETURNS record
 LANGUAGE plpgsql
AS $function$
begin

    select mon_id, doct_id, doc_tipofactura, doc_muevestock
      into p_mon_id, p_doct_id, p_doc_tipofactura, p_doc_muevestock
    from documento
    where doc_id = p_doc_id;

    p_mon_id := coalesce(p_mon_id, 0);
    p_doct_id := coalesce(p_doct_id, 0);
    p_doc_tipofactura := coalesce(p_doc_tipofactura, 0);
    p_doc_muevestock := coalesce(p_doc_muevestock, 0);

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_doc_movimiento_fondo_editable_get(p_emp_id integer, p_mf_id integer, p_us_id integer, p_no_anulado integer DEFAULT 0, p_delete integer DEFAULT 0, OUT p_editable integer, OUT p_edit_msg character varying)
 RETURNS record
 LANGUAGE plpgsql
AS $function$
declare
   v_doc_id integer;
   v_mf_fecha date;
   v_estado integer;
   v_anulado integer := 7;
   v_firmado integer;
   v_emp_id integer;
   v_emp_nombre varchar(255);
   v_impreso smallint;
   v_csPreTsrEditMovimientoFondo integer := 18021;
   v_csPreTsrDeleteMovimientoFondo integer := 18022;
   
   v_pre_id integer;

   v_doc_nombre varchar(255);
   v_fca_id integer;

   v_fca_fechaDesde date;
   v_fca_fechaHasta date;

   v_doc_editarImpresos smallint;
begin

   if p_mf_id <> 0 then

      select d.doc_id,
             d.emp_id,
             c.mf_fecha,
             c.est_id,
             c.impreso
        into v_doc_id,
             v_emp_id,
             v_mf_fecha,
             v_estado,
             v_impreso
      from MovimientoFondo c
      join Documento d
       on c.doc_id = d.doc_id
      where c.mf_id = p_mf_id;

      if p_emp_id <> v_emp_id then

         select emp_nombre
           into v_emp_nombre
         from Empresa
         where emp_id = v_emp_id;

         p_editable := 0;

         if p_delete = 0 then
            p_edit_msg := 'El comprobante pertenece a la empresa ' || v_emp_nombre || ', para editarlo debe ingresar al sistema indicando dicha empresa.';
         else
            p_edit_msg := 'El comprobante pertenece a la empresa ' || v_emp_nombre || ', para borrarlo debe ingresar al sistema indicando dicha empresa.';
         end if;

         return;

      end if;

      if v_estado = v_anulado and p_no_anulado = 0 then

         p_editable := 0;
         p_edit_msg := 'El comprobante esta anulado';

         return;

      end if;

      if p_delete = 0 then
         v_pre_id := v_csPreTsrEditMovimientoFondo;
      else
         v_pre_id := v_csPreTsrDeleteMovimientoFondo;
      end if;

      -- Tiene permiso para editar movimientos de fondos
      --
      if not exists ( select per_id
                      from Permiso
                      where pre_id = v_pre_id
                        and ( ( us_id = p_us_id )
                        or exists ( select us_id
                                    from UsuarioRol
                                    where us_id = p_us_id
                                      and rol_id = Permiso.rol_id ) ) ) then
         p_editable := 0;

         if p_delete = 0 then
            p_edit_msg := 'Usted no tiene permiso para editar movimientos de fondo';
         else
            p_edit_msg := 'Usted no tiene permiso para borrar movimientos de fondo';
         end if;

         return;

      end if;

      v_pre_id := null;

      select case
                when p_delete = 0 then pre_id_edit
                else pre_id_delete
             end,
             doc_nombre
        into v_pre_id,
             v_doc_nombre
      from Documento
      where doc_id = v_doc_id;

      if not exists ( select per_id
                      from Permiso
                      where pre_id = v_pre_id
                        and ( ( us_id = p_us_id )
                        or exists ( select us_id
                                    from UsuarioRol
                                    where us_id = p_us_id
                                      and rol_id = Permiso.rol_id ) ) ) then

         p_editable := 0;

         if p_delete = 0 then
            p_edit_msg := 'Usted no tiene permiso para editar ' || v_doc_nombre;
         else
            p_edit_msg := 'Usted no tiene permiso para borrar ' || v_doc_nombre;
         end if;

         return;

      end if;

      -- Fechas de control de Acceso
      select fca_id
        into v_fca_id
      from Documento
      where doc_id = v_doc_id;

      if not v_fca_id is null then

         if not exists ( select fca_id
                         from FechaControlAcceso
                         where fca_id = v_fca_id
                           and v_mf_fecha between fca_fechaDesde and fca_fechaHasta ) then

            select fca_fechaDesde,
                   fca_fechaHasta
              into v_fca_fechaDesde,
                   v_fca_fechaHasta
            from FechaControlAcceso
            where fca_id = v_fca_id;

            p_editable := 0;

            p_edit_msg := 'La fecha del comprobante esta fuera del intervalo definido por las fechas de control de acceso ('
                          || to_char(coalesce(v_fca_fechaDesde, ''), 'dd-mm-yyyy')
                          || ' - '
                          || to_char(coalesce(v_fca_fechaHasta, ''), 'dd-mm-yyyy')
                          || ')';

            return;

         end if;

      end if;

      if v_impreso <> 0 and p_no_anulado = 0 then

         select doc_editarImpresos
           into v_doc_editarImpresos
         from Documento
         where doc_id = v_doc_id;

         if v_doc_editarImpresos = 0 then

            p_editable := 0;

            if p_delete = 0 then
               p_edit_msg := 'El comprobante esta impreso y la definición de su documento no permite la edición de comprobantes impresos.';
            else
               p_edit_msg := 'El comprobante esta impreso y la definición de su documento no permite eliminar comprobantes impresos.';
            end if;

            return;

         end if;

      end if;

   end if;

   p_editable := 1;
   p_edit_msg := '';

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_doc_movimiento_fondo_get(p_emp_id integer, p_mf_id integer, p_us_id integer, OUT rtn refcursor)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
declare
   v_editable integer;
   v_edit_msg varchar(255);
   v_doc_id integer;
   v_ta_id integer;
   v_ta_mascara varchar(100);
   v_ta_propuesto smallint;
   dummyNumber integer;
   dummyCur refcursor;
begin

   rtn := 'rtn';

/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                             TALONARIO Y ESTADO DE EDICION                                                          //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/
   select doc_id
     into v_doc_id
   from MovimientoFondo
   where mf_id = p_mf_id;

   select * from sp_talonario_get_propuesto(v_doc_id, 0, 0) into v_ta_mascara, v_ta_propuesto;

   select * from sp_doc_movimiento_fondo_editable_get(p_emp_id, p_mf_id, p_us_id) into v_editable, v_edit_msg;

/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                             select                                                                                 //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/

   open rtn for

      select MovimientoFondo.*,
             doct_nombre,
             cli_nombre,
             est_nombre,
             ccos_nombre,
             suc_nombre,
             doc_nombre,
             us_nombre,
             case
                  when lgj_titulo <> '' then lgj_titulo
                  else lgj_codigo
             end lgj_codigo,
             v_editable editable,
             v_edit_msg editMsg,
             v_ta_mascara ta_mascara,
             v_ta_propuesto ta_propuesto
      from MovimientoFondo
      join Documento
       on MovimientoFondo.doc_id = Documento.doc_id
      join DocumentoTipo
       on MovimientoFondo.doct_id = DocumentoTipo.doct_id
      join Estado
       on MovimientoFondo.est_id = Estado.est_id
      join Sucursal
       on MovimientoFondo.suc_id = Sucursal.suc_id
      left join Cliente
       on MovimientoFondo.cli_id = Cliente.cli_id
      left join CentroCosto
       on MovimientoFondo.ccos_id = CentroCosto.ccos_id
      left join Usuario
       on MovimientoFondo.us_id = Usuario.us_id
      left join Legajo
       on MovimientoFondo.lgj_id = Legajo.lgj_id
      where mf_id = p_mf_id;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_doc_movimiento_fondo_get_items(p_mf_id integer, p_tipo integer, OUT rtn refcursor)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
declare
   v_MfiTCheques smallint;
   v_MfiTEfectivo smallint;
   v_MfiTChequesT smallint;
   v_MfiTChequesI smallint;
begin

   v_MfiTCheques := 1;
   v_MfiTEfectivo := 2;
   v_MfiTChequesT := 6;
   v_MfiTChequesI := 7;

   rtn := 'rtn';

   if p_tipo = v_MfiTEfectivo then

      open rtn for
         select MovimientoFondoItem.*,
                cdebe.cue_nombre cue_debe_name,
                chaber.cue_nombre cue_haber_name,
                ccos.ccos_nombre,
                mon.mon_nombre,
                mon.mon_id
         from MovimientoFondoItem
         join Cuenta cdebe
          on MovimientoFondoItem.cue_id_debe = cdebe.cue_id
         join Cuenta chaber
          on MovimientoFondoItem.cue_id_haber = chaber.cue_id
         left join CentroCosto ccos
          on MovimientoFondoItem.ccos_id = ccos.ccos_id
         left join Moneda mon
          on cdebe.mon_id = mon.mon_id
         where mf_id = p_mf_id
           and mfi_tipo = v_MfiTEfectivo
         order by mfi_orden;

   else

      if p_tipo = v_mfiTCheques then

         open rtn for

            select MovimientoFondoItem.*,
                   cdebe.cue_nombre cue_debe_name,
                   chaber.cue_nombre cue_haber_name,
                   chq.chq_codigo,
                   cheq.cheq_numero,
                   ccos.ccos_nombre,
                   cheq.bco_id,
                   bco.bco_nombre,
                   cle.cle_nombre,
                   mon.mon_nombre,
                   mon.mon_id,
                   cheq.cheq_numerodoc,
                   bco.bco_id,
                   cle.cle_id,
                   cheq.cheq_fechavto,
                   cheq.cheq_fechacobro
            from MovimientoFondoItem
            join Cheque cheq
             on MovimientoFondoItem.cheq_id = cheq.cheq_id
            join Cuenta cdebe
             on MovimientoFondoItem.cue_id_debe = cdebe.cue_id
            join Cuenta chaber
             on MovimientoFondoItem.cue_id_haber = chaber.cue_id

            -- este Inner join filtra a los cheques de tercero ya que estos no tienen
            -- chequera
            --
            join Chequera chq
             on MovimientoFondoItem.chq_id = chq.chq_id
            left join CentroCosto ccos
             on MovimientoFondoItem.ccos_id = ccos.ccos_id
            left join Banco bco
             on cheq.bco_id = bco.bco_id
            left join Clearing cle
             on cheq.cle_id = cle.cle_id
            left join Moneda mon
             on cheq.mon_id = mon.mon_id
            where MovimientoFondoItem.mf_id = p_mf_id
              and mfi_tipo = v_mfiTCheques
            order by mfi_orden;

      else

         if p_tipo = v_mfiTChequesT then

            open rtn for
               select MovimientoFondoItem.*,
                    cdebe.cue_nombre cue_debe_name,
                    chaber.cue_nombre cue_haber_name,
                    cheq.cheq_numero,
                    ccos.ccos_nombre,
                    cheq.bco_id,
                    bco.bco_nombre,
                    cle.cle_nombre,
                    cheq.cli_id,
                    cli.cli_nombre,
                    mon.mon_nombre,
                    mon.mon_id,
                    cheq.cheq_numerodoc,
                    cheq.cheq_fechavto,
                    cheq.cheq_fechacobro
               from MovimientoFondoItem
               join Cheque cheq
                on MovimientoFondoItem.cheq_id = cheq.cheq_id
               join Cuenta cdebe
                on MovimientoFondoItem.cue_id_debe = cdebe.cue_id
               join Cuenta chaber
                on MovimientoFondoItem.cue_id_haber = chaber.cue_id
               left join Cliente cli
                on cheq.cli_id = cli.cli_id
               left join CentroCosto ccos
                on MovimientoFondoItem.ccos_id = ccos.ccos_id
               left join Banco bco
                on cheq.bco_id = bco.bco_id
               left join Clearing cle
                on cheq.cle_id = cle.cle_id
               left join Moneda mon
                on cheq.mon_id = mon.mon_id
               where MovimientoFondoItem.mf_id = p_mf_id
                 and mfi_tipo = v_mfiTChequesT
               order by mfi_orden;

         else

            if p_tipo = v_mfiTChequesI then

               open rtn for
                  select MovimientoFondoItem.*,
                         cdebe.cue_nombre cue_debe_name,
                         chaber.cue_nombre cue_haber_name,
                         cheq.cheq_numero,
                         ccos.ccos_nombre,
                         cheq.bco_id,
                         bco.bco_nombre,
                         cheq.cle_id,
                         cle.cle_nombre,
                         cheq.cli_id,
                         cli.cli_nombre,
                         mon.mon_nombre,
                         mon.mon_id,
                         cheq.cheq_numerodoc,
                         cheq.cheq_fechavto,
                         cheq.cheq_fechacobro
                  from MovimientoFondoItem
                  join Cheque cheq
                   on MovimientoFondoItem.cheq_id = cheq.cheq_id
                  join Cuenta cdebe
                   on MovimientoFondoItem.cue_id_debe = cdebe.cue_id
                  join Cuenta chaber
                   on MovimientoFondoItem.cue_id_haber = chaber.cue_id
                  left join CentroCosto ccos
                   on MovimientoFondoItem.ccos_id = ccos.ccos_id
                  left join Banco bco
                   on cheq.bco_id = bco.bco_id
                  left join Clearing cle
                   on cheq.cle_id = cle.cle_id
                  left join Moneda mon
                   on cheq.mon_id = mon.mon_id
                  left join Cliente cli
                   on cheq.cli_id = cli.cli_id
                  where MovimientoFondoItem.mf_id = p_mf_id
                    and mfi_tipo = v_mfiTChequesI
                  order by mfi_orden;

            end if;

         end if;

      end if;

   end if;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_doc_movimiento_fondo_item_can_delete(p_mf_id integer, p_mftmp_id integer, p_bisdelete integer, OUT p_message character varying, OUT p_bchequeusado integer, OUT p_bcandelete integer)
 RETURNS record
 LANGUAGE plpgsql
AS $function$
declare
   v_cheque varchar(5000);
   v_cheques varchar(8000);
begin

   v_cheques := '';

   -- controlo que ningun cheque mencionado en
   -- este movimiento de fondos este utilizado
   -- por otro movimiento de fondos o por una
   -- orden de pago ya que si es asi, no puedo
   -- vincular asociar este cheque con la cuenta
   -- mencionada en la cobranza, sino que debo:
   --
   --  1-  dar un error si esta usado en una orden de pago
   --      o un deposito bancario,
   --  2-  dar un error si esta usado en un movimiento
   --      de fondo posterior
   --  3-  asociarlo al movimiento de fondos inmediato anterior
   --      al movimiento que estoy borrando
   --------------------------------------------------------------------------------------------
   --
   --  1-  dar un error si esta usado en una orden de pago
   --      o un deposito bancario,
   --
   if exists ( select cheq.cheq_id
               from Cheque cheq
               join MovimientoFondoItem mfi
                 on cheq.cheq_id = mfi.cheq_id
               where mfi.mf_id = p_mf_id
                 and cheq.opg_id is not null
                 and ( p_bIsDelete <> 0
                       or exists ( select mfi_id
                                   from MovimientoFondoItemBorradoTMP
                                   where mf_id = p_mf_id
                                     and mfTMP_id = p_mfTMP_id
                                     and mfi_id = mfi.mfi_id ) ) ) then

      for v_cheque in
         select 'Cheque: '
                || trim(to_char(cheq.cheq_numero))
                || ' - '
                || cheq.cheq_numerodoc
                || ' - '
                || 'OP: ' || emp.emp_nombre
                || ' - '
                || doc.doc_nombre
                || ' - '
                || trim(to_char(opg.opg_numero))
                || ' - '
                || opg.opg_nrodoc
                || ' - '
                || to_char(opg.opg_fecha, 'dd-mm-yyyy')
                || ' - ' || prov.prov_nombre
         from Cheque cheq
         join MovimientoFondoItem mfi
           on cheq.cheq_id = mfi.cheq_id
         join OrdenPago opg
           on cheq.opg_id = opg.opg_id
         join Documento doc
           on opg.doc_id = doc.doc_id
         join Proveedor prov
           on opg.prov_id = prov.prov_id
         join Empresa emp
           on doc.emp_id = emp.emp_id
         where mfi.mf_id = p_mf_id
           and cheq.opg_id is not null
           and ( p_bIsDelete <> 0
                 or exists ( select mfi_id
                             from MovimientoFondoItemBorradoTMP
                             where mf_id = p_mf_id
                               and mfTMP_id = p_mfTMP_id
                               and mfi_id = mfi.mfi_id ) )
      loop

            v_cheques := v_cheques || v_cheque;

      end loop;

      p_bCanDelete := 0;
      p_Message := '@@ERROR_SP:Existe uno o mas cheques en este movimiento de fondos que han sido utilizados en una orden de pago.;' || v_cheques;
      return;

   end if;

   -- busco cheques de tercero que menciona este movimiento de fondo
   -- y han sido depositados
   --
   -- cheque depositado
   --
   if exists ( select cheq.cheq_id
               from Cheque cheq
               join MovimientoFondoItem mfi
                 on cheq.cheq_id = mfi.cheq_id
               join DepositoBancoItem dbcoi
                 on cheq.cheq_id = dbcoi.cheq_id
               join DepositoBanco dbco
                 on dbcoi.dbco_id = dbco.dbco_id
               where mfi.mf_id = p_mf_id
                 and dbco.est_id <> 7 /*Anulado*/
                 and ( p_bIsDelete <> 0
                       or exists ( select mfi_id
                                   from MovimientoFondoItemBorradoTMP
                                   where mf_id = p_mf_id
                                     and mfTMP_id = p_mfTMP_id
                                     and mfi_id = mfi.mfi_id ) ) ) then

      for v_cheque in
         select 'Cheque: '
                || trim(to_char(cheq.cheq_numero))
                || ' - '
                || cheq.cheq_numerodoc
                || ' - '
                || 'DB: '
                || emp.emp_nombre
                || ' - '
                || doc.doc_nombre
                || ' - '
                || trim(to_char(dbco.dbco_numero))
                || ' - '
                || dbco.dbco_nrodoc
                || ' - '
                || to_char(dbco.dbco_fecha, 'dd-mm-yyyy')
                || ' - '
                || bco.bco_nombre
         from Cheque cheq
         join MovimientoFondoItem mfi
           on cheq.cheq_id = mfi.cheq_id
         join DepositoBancoItem dbcoi
           on cheq.cheq_id = dbcoi.cheq_id
         join DepositoBanco dbco
           on dbcoi.dbco_id = dbco.dbco_id
         join Documento doc
           on dbco.doc_id = doc.doc_id
         join Banco bco
           on dbco.bco_id = bco.bco_id
         join Empresa emp
           on doc.emp_id = emp.emp_id
         where mfi.mf_id = p_mf_id
           and dbco.est_id <> 7
           and ( p_bIsDelete <> 0
                 or exists ( select mfi_id
                             from MovimientoFondoItemBorradoTMP
                             where mf_id = p_mf_id
                               and mfTMP_id = p_mfTMP_id
                               and mfi_id = mfi.mfi_id ) )
      loop

         v_cheques := v_cheques || v_cheque;

      end loop;

      p_bCanDelete := 0;
      p_Message := '@@ERROR_SP:Existe uno o mas cheques en este movimiento de fondos que han sido depoistados.;' || v_cheques;

   end if;

   --------------------------------------------------------------------------------------------
   --
   --  2-  dar un error si esta usado en un movimiento
   --      de fondo posterior
   --
   if exists ( select cheq.cheq_id
               from Cheque cheq
               join MovimientoFondoItem mfi
                 on cheq.cheq_id = mfi.cheq_id
                 and mfi.mf_id = p_mf_id
               where coalesce(cheq.mf_id, 0) > p_mf_id
                 and ( p_bIsDelete <> 0
                       or exists ( select mfi_id
                                   from MovimientoFondoItemBorradoTMP
                                   where mf_id = p_mf_id
                                     and mfTMP_id = p_mfTMP_id
                                     and mfi_id = mfi.mfi_id ) ) ) then

      for v_cheque in

         select 'Cheque: '
                || trim(to_char(cheq.cheq_numero))
                || ' - '
                || cheq.cheq_numerodoc
                || ' - '
                || 'MF: '
                || emp.emp_nombre
                || ' - '
                || doc.doc_nombre
                || ' - '
                || trim(to_char(mf.mf_numero))
                || ' - '
                || mf.mf_nrodoc
                || ' - '
                || to_char(mf.mf_fecha, 'dd-mm-yyyy')
         from
         (
           Cheque cheq
           join MovimientoFondoItem mfi
             on cheq.cheq_id = mfi.cheq_id and mfi.mf_id = p_mf_id
          )
         join MovimientoFondo mf
           on cheq.mf_id = mf.mf_id
         join Documento doc
           on mf.doc_id = doc.doc_id
         join Empresa emp
           on doc.emp_id = emp.emp_id
         where ( p_bIsDelete <> 0
                 or exists ( select mfi_id
                             from MovimientoFondoItemBorradoTMP
                             where mf_id = p_mf_id
                               and mfTMP_id = p_mfTMP_id
                               and mfi_id = mfi.mfi_id ) )
      loop

            v_cheques := v_cheques || v_cheque;

      end loop;

      p_bCanDelete := 0;
      p_Message := '@@ERROR_SP:Existe uno o mas cheques en este movimiento que han sido utilizados en una movimiento de fondos posterior.;' || v_cheques;
      return;

   end if;

   -- uno de los cheques mencionados por este movimiento de fondos esta
   -- cambiando de cuenta en el debe, o cambie el cheque en el item y
   -- este cheque ya fue usado por un movimiento de fondos posterior
   --
   if p_bIsDelete = 0 then

      if exists ( select cheq.cheq_id
                  -- Items del movimiento que estoy modificando
                  -- los necesito para saber si cambio la cuenta
                  -- de este cheque
                  from ( MovimientoFondoItemTMP mfit
                         join MovimientoFondoItem mfi
                           on mfit.mfi_id = mfi.mfi_id
                           and mfit.mfTMP_id = p_mfTMP_id
                           and mfi.mf_id = p_mf_id
                           and ( mfit.cue_id_debe <> mfi.cue_id_debe or mfit.cheq_id = mfi.cheq_id )
                       )
                       join Cheque cheq
                         on mfi.cheq_id = cheq.cheq_id
                  where coalesce(cheq.mf_id, 0) > p_mf_id ) then

         for v_cheque in
            select 'Cheque: '
                   || trim(to_char(cheq.cheq_numero))
                   || ' - '
                   || cheq.cheq_numerodoc
                   || ' - '
                   || 'MF: '
                   || emp.emp_nombre
                   || ' - '
                   || doc.doc_nombre
                   || ' - '
                   || trim(to_char(mf.mf_numero))
                   || ' - '
                   || mf.mf_nrodoc
                   || ' - '
                   || to_char(mf.mf_fecha, 'dd-mm-yyyy')
            from
            (
              MovimientoFondoItemTMP mfit
              join MovimientoFondoItem mfi
                on mfit.mfi_id = mfi.mfi_id
                and mfit.mfTMP_id = p_mfTMP_id
                and mfi.mf_id = p_mf_id
                and ( mfit.cue_id_debe <> mfi.cue_id_debe or mfit.cheq_id = mfi.cheq_id )
            )
            join Cheque cheq
              on mfi.cheq_id = cheq.cheq_id
            join MovimientoFondo mf
              on cheq.mf_id = mf.mf_id
            join Documento doc
              on mf.doc_id = doc.doc_id
            join Empresa emp
              on doc.emp_id = emp.emp_id
            where coalesce(cheq.mf_id, 0) > p_mf_id
              and ( p_bIsDelete <> 0
                    or exists ( select mfi_id
                                from MovimientoFondoItemBorradoTMP
                                where mf_id = p_mf_id
                                  and mfTMP_id = p_mfTMP_id
                                  and mfi_id = mfi.mfi_id ) )
         loop
            v_cheques := v_cheques || v_cheque;
         end loop;

         p_bCanDelete := 0;
         p_Message := '@@ERROR_SP:Existe uno o mas cheques en este movimiento que han sido utilizados en una movimiento de fondos posterior.;' || v_cheques;
         return;

      end if;

   end if;

   --------------------------------------------------------------------------------------------
   --
   --  3-  asociarlo al movimiento de fondos inmediato anterior
   --      al movimiento que estoy borrando
   --
   if exists ( select cheq.cheq_id
               from Cheque cheq
               join MovimientoFondoItem mfi
                 on cheq.cheq_id = mfi.cheq_id
               where mfi.mf_id = p_mf_id
                 and ( p_bIsDelete <> 0
                       or exists ( select mfi_id
                                   from MovimientoFondoItemBorradoTMP
                                   where mf_id = p_mf_id
                                     and mfTMP_id = p_mfTMP_id
                                     and mfi_id = mfi.mfi_id ) )
                                     and exists ( select mfi.mfi_id
                                                  from MovimientoFondoItem mfi
                                                  join MovimientoFondo mf
                                                    on mfi.mf_id = mf.mf_id
                                                  where mfi.cheq_id = cheq.cheq_id
                                                    and mfi.mf_id <> p_mf_id
                                                    and mf.est_id <> 7 /* Anulado */ ) ) then
      p_bChequeUsado := 1;
   else
      p_bChequeUsado := 0;
   end if;

   p_bCanDelete := 1;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_doc_movimiento_fondo_item_delete(p_mf_id integer, p_mftmp_id integer, p_bisdelete integer, p_bchequeusado integer)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
declare
  v_mf_id    integer;
  v_cheq_id  integer;
begin

   create temporary table tt_t_mfi_cheque (cheq_id integer) on commit drop;

   if p_bIsDelete = 0 then
      if not exists ( select 1
                      from MovimientoFondoItemBorradoTMP
                      where mf_id    = p_mf_id
                        and mfTMP_id = p_mfTMP_id ) then
         return;
      end if;
   end if;

   --------------------------------------------------------------------------------------------
   --  3-  asociarlo al movimiento de fondos inmediato anterior
   --      al movimiento que estoy borrando
   --
   if p_bChequeUsado <> 0 then

    for v_cheq_id in
        select cheq_id
        from MovimientoFondoItem mfi
        where mf_id = p_mf_id
          and cheq_id is not null
          and ( p_bIsDelete <> 0
                or exists (select mfi_id
                           from MovimientoFondoItemBorradoTMP
                           where mf_id = p_mf_id
                             and mfTMP_id = p_mfTMP_id
                             and mfi_id = mfi.mfi_id
                  )
              )
    loop

     v_mf_id := null;

     -- busco un movimiento de fondos anterior al que estoy borrando
     -- que mencione al cheque
     --
     select max(mfi.mf_id)
       into v_mf_id
     from Cheque cheq
     inner join MovimientoFondoItem mfi on cheq.cheq_id = mfi.cheq_id
     inner join MovimientoFondo mf      on mfi.mf_id    = mf.mf_id
     where cheq.cheq_id = v_cheq_id
       and mfi.mf_id <> p_mf_id
       and mf.est_id <> 7; /* Anulado */

     -- hay un movimiento de fondos que mueve el cheque
     --
     if v_mf_id is not null then

         -- devuelvo el cheque a la cuenta indicada por el ultimo movimiento de fondos
         -- anterior al que estoy borrando y lo vinculo con dicho movimiento
         --
         update Cheque
             set cue_id = (select mfi.cue_id_debe
                           from MovimientoFondoItem mfi
                           where  Cheque.cheq_id = mfi.cheq_id
                               and mfi.mf_id     = v_mf_id
                           ),
                 mf_id = v_mf_id
         where Cheque.cheq_id = v_cheq_id;

     else

        -- si el cheque entro por una cobranza
        --
        if exists ( select 1
                    from cheque
                    where cheq_id = v_cheq_id
                      and cobz_id is not null ) then

           -- devuelvo a documentos en cartera los cheques de tercero y
           -- los desvinculo de este movimiento de fondos
           --
           update Cheque
               set cue_id = (select cobzi.cue_id
                             from CobranzaItem cobzi
                             where Cheque.cheq_id  = cobzi.cheq_id
                             ),
                   mf_id = null
           where Cheque.mf_id = p_mf_id
             and Cheque.cheq_id = v_cheq_id;

        -- si no entro por una cobranza y no hay
        -- movimientos anteriores al que estoy borrando
        -- es por que entro en este movimiento y por ende solo
        -- queda borrarlo. Esto incluye propios y de terceros.
        --
        else

           -- desvinculo el cheque del item para poder borrarlo
           update MovimientoFondoItem set cheq_id = null
           where mf_id = p_mf_id
             and cheq_id = v_cheq_id;

           -- desvinculo el cheque de cualquier AsientoItem que lo mencione
           --
           update AsientoItem set cheq_id = null where cheq_id = v_cheq_id;

           -- borro los cheques de tercero que entraron por este movimiento de fondos
           delete from Cheque where cheq_id = v_cheq_id;

        end if;

     end if;

    end loop;

   end if;

   --------------------------------------------------------------------------------------------

   insert into tt_t_mfi_cheque (cheq_id)
   select cheq_id
   from MovimientoFondoItem mfi
   where mf_id = p_mf_id
     and cheq_id is not null
     and ( p_bIsDelete <> 0
           or exists (select mfi_id
                      from MovimientoFondoItemBorradoTMP
                      where mf_id   = p_mf_id
                        and mfTMP_id  = p_mfTMP_id
                        and mfi_id   = mfi.mfi_id
                     )
         );

   --------------------------------------------------------------------------------------------

   delete from MovimientoFondoItem
   where mf_id = p_mf_id
     and ( p_bIsDelete <> 0
           or exists ( select mfi_id
                       from MovimientoFondoItemBorradoTMP
                       where mf_id   = p_mf_id
                         and mfTMP_id  = p_mfTMP_id
                         and mfi_id   = MovimientoFondoItem.mfi_id
                      )
         );

   --------------------------------------------------------------------------------------------
   --
   if p_bChequeUsado = 0 then

      -- desvinculo el cheque de cualquier AsientoItem que lo mencione
      --
      update AsientoItem set cheq_id = null
      where cheq_id in (
                          select cheq_id
                          from Cheque
                          where mf_id = p_mf_id
                            and cobz_id is null
                            and chq_id is null
                            and exists (select cheq_id from tt_t_mfi_cheque where cheq_id = Cheque.cheq_id)
                        );

      -- borro los cheques de tercero que entraron por este movimiento de fondos
      --
      delete from Cheque
      where mf_id = p_mf_id
        and cobz_id is null
        and chq_id is null
        and exists (select cheq_id from tt_t_mfi_cheque where cheq_id = Cheque.cheq_id);


      -- desvinculo el cheque de cualquier AsientoItem que lo mencione
      --
      update AsientoItem set cheq_id = null
      where cheq_id in (
                          select cheq_id
                          from Cheque
                          where mf_id = p_mf_id
                            and chq_id is not null -- solo los cheques propios tienen chequera (chq_id)
                            and exists (select cheq_id from tt_t_mfi_cheque where cheq_id = Cheque.cheq_id)
                        );


      -- borro los cheques propios utilizados por el movimiento de fondos
      --
      delete from Cheque
      where mf_id = p_mf_id
        and chq_id is not null -- solo los cheques propios tienen chequera (chq_id)
        and exists (select cheq_id from tt_t_mfi_cheque where cheq_id = Cheque.cheq_id);

      -- devuelvo a documentos en cartera los cheques de tercero y los
      -- desvinculo de este movimiento de fondos
      --
      update Cheque
          set cue_id = ( select cobzi.cue_id
                         from CobranzaItem cobzi
                         where cobzi.cheq_id = Cheque.cheq_id
                           and Cheque.mf_id = p_mf_id
                        ),
              mf_id = null
      where  Cheque.mf_id = p_mf_id
        and exists ( select cheq_id
                     from tt_t_mfi_cheque
                     where cheq_id = Cheque.cheq_id);

   end if;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_doc_movimiento_fondo_save(p_us_id integer, p_mftmp_id integer)
 RETURNS SETOF row_result
 LANGUAGE plpgsql
AS $function$
declare
   rtn row_result;

   v_success integer;
   v_error smallint;
   v_error_msg varchar(5000);
   v_cfg_valor varchar(5000);

   v_is_new integer;

   v_mf_id integer;
   v_mfi_id integer;

   v_orden smallint;
   v_doct_id integer;
   v_doc_id integer;

   v_emp_id integer;
   v_est_id integer;
   v_suc_id integer;
   v_ta_id integer;
   v_cli_id integer;
   v_ccos_id integer;
   v_lgj_id integer;
   v_us_id integer;
   v_mon_id integer;

   v_mf_fecha date;
   v_mf_nrodoc varchar(50);
   v_mf_numero integer;
   v_mf_descrip varchar(5000);
   v_mf_totalOrigen decimal(18,6);
   v_mf_cotizacion decimal(18,6);
   v_mf_pendiente decimal(18,6);
   v_mf_grabarAsiento smallint;
   v_mf_total decimal(18,6);
   
   v_creado date;
   v_modificado date;
   v_modifico integer;
   
   v_mfi_orden smallint;
   v_mfi_descrip varchar(5000);
   v_mfi_importe decimal(18,6);
   v_mfi_importeOrigen decimal(18,6);
   v_mfi_importeOrigenHaber decimal(18,6);
   v_mfi_tipo smallint;
   
   v_cue_id_debe integer;
   v_cue_id_haber integer;
   v_chq_id integer;
   v_cheq_id integer;
   v_cheq_numerodoc varchar(100);
   v_cheq_fechaCobro date;
   v_cheq_fechaVto date;
   v_cheq_fecha2 date;
   v_cle_id integer;
   v_bco_id integer;

   v_ta_propuesto smallint;
   v_ta_tipo smallint;
   v_ta_nrodoc varchar(100);

   v_as_id integer;

   v_message varchar(8000);
   v_chequeUsado smallint;
   v_canDelete smallint;

   v_MfiTChequesI smallint;
   v_CheqTercero smallint;
   v_cheq_numero integer;

   dummyChar varchar(255);

begin

   -- si no existe chau
   --
   if not exists ( select mfTMP_id
                   from MovimientoFondoTMP
                   where mfTMP_id = p_mfTMP_id ) then
      return query select * from result_failed();
      return;

   end if;

   select sp_cfg_getValor('Tesoreria-General', 'Exigir Centro Costo') into v_cfg_valor;

   v_cfg_valor := coalesce(v_cfg_valor, '0');

   if to_number(v_cfg_valor) <> 0 then

      if exists ( select ccos_id
                  from MovimientoFondoTMP
                  where ccos_id is null
                    and mfTMP_id = p_mfTMP_id ) then

         if exists ( select ccos_id
                     from MovimientoFondoItemTMP
                     where ccos_id is null
                       and mfTMP_id = p_mfTMP_id
                       and mfi_tipo in ( 1,2,3,4 ) ) then

            raise exception '@@ERROR_SP: %',
                'Debe indicar un centro de costo en cada item o un centro de costo en la cabecera del documento.';

         end if;

      end if;

   end if;

   select mf_id
     into v_mf_id
   from MovimientoFondoTMP
   where mfTMP_id = p_mfTMP_id;
         
   v_mf_id := coalesce(v_mf_id, 0);

   select mon_id,
          Documento.ta_id,
          Documento.doct_id,
          Documento.emp_id,
          MovimientoFondoTMP.mf_total,
          MovimientoFondoTMP.mf_fecha,
          mf_nrodoc,
          MovimientoFondoTMP.doc_id
     into v_mon_id,
          v_ta_id,
          v_doct_id,
          v_emp_id,
          v_mf_total,
          v_mf_fecha,
          v_mf_nrodoc,
          v_doc_id
   from MovimientoFondoTMP
   join Documento
     on MovimientoFondoTMP.doc_id = Documento.doc_id
   where mfTMP_id = p_mfTMP_id;

   v_error_msg := '';

   SET TRANSACTION READ WRITE;

/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                                        insert                                                                      //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/
   if v_mf_id = 0 then

      v_is_new := -1;

      select sp_dbGetNewId('MovimientoFondo', 'mf_id') into v_mf_id;
      select sp_dbGetNewId('MovimientoFondo', 'mf_numero') into v_mf_numero;

      select * from sp_talonario_get_propuesto(v_doc_id) into dummyChar, v_ta_propuesto, v_ta_id, v_ta_tipo;

      if v_ta_propuesto = 0 then

         if v_ta_tipo = 3 then /*Auto Impresor*/

            select sp_talonario_get_next_number(v_ta_id) into v_ta_nrodoc;

            -- con esto evitamos que dos tomen el mismo Numero
            --
            perform sp_talonario_set(v_ta_id, v_ta_nrodoc);

            v_mf_nrodoc := v_ta_nrodoc;

         end if;

      end if;

      insert into MovimientoFondo
           ( mf_id, mf_numero, mf_nrodoc, mf_descrip, mf_fecha, mf_total, mf_totalOrigen, mf_grabarAsiento, mf_cotizacion, mon_id, est_id, suc_id, cli_id, doc_id, doct_id, ccos_id, lgj_id, us_id, modifico )
           ( select v_mf_id,
                    v_mf_numero,
                    v_mf_nrodoc,
                    mf_descrip,
                    mf_fecha,
                    mf_total,
                    mf_totalOrigen,
                    mf_grabarAsiento,
                    mf_cotizacion,
                    v_mon_id,
                    est_id,
                    suc_id,
                    cli_id,
                    doc_id,
                    v_doct_id,
                    ccos_id,
                    lgj_id,
                    us_id,
                    modifico
             from MovimientoFondoTMP
             where mfTMP_id = p_mfTMP_id );

      select doc_id,
             mf_nrodoc
        into v_doc_id,
             v_mf_nrodoc
      from MovimientoFondo
      where mf_id = v_mf_id;

/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                                        update                                                                      //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/
   else

      -- controlo que ningun cheque eliminado de
      -- este movimiento de fondos este utilizado
      -- por otro movimiento de fondos o por una
      -- orden de pago ya que si es asi, no puedo
      -- vincular este cheque con la cuenta
      -- mencionada en la cobranza, sino que debo:
      --
      --  1-  dar un error si esta usado en una orden de pago,
      --  2-  dar un error si esta usado en un movimiento
      --      de fondo posterior,
      --  3-  asociarlo al movimiento de fondos inmediato anterior
      --      al movimiento que estoy borrando
      --
      select * from sp_doc_movimiento_fondo_item_can_delete(
                                             v_mf_id,
                                             p_mfTMP_id,
                                             0)-- bIsDelete = False
                                             into
                                             v_message,
                                             v_chequeUsado,
                                             v_canDelete;

      if v_canDelete = 0 then
         raise exception '@@ERROR_SP: %', v_message;
      end if;

      --------------------------------------------------------------------------------------------

      v_is_new := 0;

      select mf_nrodoc,
             mf_descrip,
             mf_totalOrigen,
             mf_cotizacion,
             mf_grabarAsiento,
             est_id,
             suc_id,
             cli_id,
             doc_id,
             ccos_id,
             lgj_id,
             us_id,
             modifico,
             modificado
        into v_mf_nrodoc,
             v_mf_descrip,
             v_mf_totalOrigen,
             v_mf_cotizacion,
             v_mf_grabarAsiento,
             v_est_id,
             v_suc_id,
             v_cli_id,
             v_doc_id,
             v_ccos_id,
             v_lgj_id,
             v_us_id,
             v_modifico,
             v_modificado
      from MovimientoFondoTMP
      where mfTMP_id = p_mfTMP_id;

      update MovimientoFondo
         set mf_nrodoc = v_mf_nrodoc,
             mf_descrip = v_mf_descrip,
             mf_fecha = v_mf_fecha,
             mf_total = v_mf_total,
             mf_totalOrigen = v_mf_totalOrigen,
             mf_cotizacion = v_mf_cotizacion,
             mf_grabarAsiento = v_mf_grabarAsiento,
             mon_id = v_mon_id,
             est_id = v_est_id,
             suc_id = v_suc_id,
             cli_id = v_cli_id,
             doc_id = v_doc_id,
             doct_id = v_doct_id,
             lgj_id = v_lgj_id,
             us_id = v_us_id,
             ccos_id = v_ccos_id,
             modifico = v_modifico,
             modificado = v_modificado
      where mf_id = v_mf_id;

   end if;

/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                                        items                                                                       //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/
   v_orden := 1;

  while exists(select 1 from MovimientoFondoItemTMP where mfTMP_id = p_mfTMP_id and mfi_orden = v_orden)
  loop

     -- cargo todo el registro de movimiento de fondo item en variables
     --
     select mfi_id,
            mfi_orden,
            mfi_descrip,
            mfi_importe,
            mfi_importeOrigen,
            mfi_importeOrigenHaber,
            ccos_id,
            cue_id_debe,
            cue_id_haber,
            mfi_tipo,
            chq_id,
            cheq_id,
            mfiTMP_cheque,
            mfiTMP_fechaCobro,
            mfiTMP_fechaVto,
            cle_id,
            bco_id
       into v_mfi_id,
            v_mfi_orden,
            v_mfi_descrip,
            v_mfi_importe,
            v_mfi_importeOrigen,
            v_mfi_importeOrigenHaber,
            v_ccos_id,
            v_cue_id_debe,
            v_cue_id_haber,
            v_mfi_tipo,
            v_chq_id,
            v_cheq_id,
            v_cheq_numerodoc,
            v_cheq_fechaCobro,
            v_cheq_fechaVto,
            v_cle_id,
            v_bco_id
     from MovimientoFondoItemTMP
     where mfTMP_id = p_mfTMP_id
       and mfi_orden = v_orden;

     v_MfiTChequesI := 7;
     v_CheqTercero := 2;

         -- si este renglon es un ingreso de cheque
         -- de tercero lo doy de alta en la tabla Cheque
         --
         if v_mfi_tipo = v_MfiTChequesI then

            -- si es nuevo insert
            --
            if v_cheq_id is null then

               select sp_dbGetNewId('Cheque', 'cheq_id') into  v_cheq_id;
               select sp_dbGetNewId('Cheque', 'cheq_numero') into v_cheq_numero;

               select sp_doc_get_fecha2(v_cheq_fechaCobro, 1, v_cle_id) into v_cheq_fecha2;

               insert into Cheque
                        ( cheq_id, cheq_numero, cheq_numerodoc, cheq_importe, cheq_importeOrigen, cheq_tipo, cheq_fechaCobro, cheq_fechaVto, cheq_fecha2, cheq_descrip, mf_id, cle_id, bco_id, cli_id, cue_id, mon_id, emp_id )
                 values ( v_cheq_id, v_cheq_numero, v_cheq_numerodoc, v_mfi_importe, v_mfi_importeOrigen, v_CheqTercero, v_cheq_fechaCobro, v_cheq_fechaVto, v_cheq_fecha2, v_mfi_descrip, v_mf_id, v_cle_id, v_bco_id, v_cli_id, v_cue_id_debe, v_mon_id, v_emp_id );

            else

               select sp_doc_get_fecha2(v_cheq_fechaCobro, 1, v_cle_id) into v_cheq_fecha2;

               -- sino update
               --
               update Cheque
                  set cheq_numerodoc = v_cheq_numerodoc,
                      cheq_importe = v_mfi_importe,
                      cheq_importeOrigen = v_mfi_importeOrigen,
                      cheq_tipo = v_CheqTercero,
                      cheq_fechaCobro = v_cheq_fechaCobro,
                      cheq_fechaVto = v_cheq_fechaVto,
                      cheq_fecha2 = v_cheq_fecha2,
                      cheq_descrip = v_mfi_descrip,
                      mf_id = v_mf_id,
                      cle_id = v_cle_id,
                      bco_id = v_bco_id,
                      cli_id = v_cli_id,
                      mon_id = v_mon_id
                  where cheq_id = v_cheq_id;

            end if;

         end if;

         -- cheques
         --
         select sp_doc_op_mf_cheque_save(v_mfi_tipo,
                                         v_cheq_numerodoc,
                                         v_mfi_importe,
                                         v_mfi_importeOrigen,
                                         v_cheq_fechaCobro,
                                         v_cheq_fechaVto,
                                         v_mfi_descrip,
                                         v_chq_id,
                                         null,
                                         v_mf_id,
                                         null,
                                         v_cle_id,
                                         v_mon_id,
                                         null,
                                         v_cue_id_debe)
         into v_cheq_id;

         if v_is_new <> 0 or v_mfi_id = 0 then

            select sp_dbGetNewId('MovimientoFondoItem', 'mfi_id') into v_mfi_id;

            insert into MovimientoFondoItem
                      ( mf_id, mfi_id, mfi_orden, mfi_descrip, mfi_importe, mfi_importeOrigen, mfi_importeOrigenHaber, ccos_id, cue_id_debe, cue_id_haber, mfi_tipo, cheq_id, chq_id )
               values ( v_mf_id, v_mfi_id, v_mfi_orden, v_mfi_descrip, v_mfi_importe, v_mfi_importeOrigen, v_mfi_importeOrigenHaber, v_ccos_id, v_cue_id_debe, v_cue_id_haber, v_mfi_tipo, v_cheq_id, v_chq_id );

         else

            update MovimientoFondoItem
               set mf_id = v_mf_id,
                   mfi_orden = v_mfi_orden,
                   mfi_descrip = v_mfi_descrip,
                   mfi_importe = v_mfi_importe,
                   mfi_importeOrigen = v_mfi_importeOrigen,
                   mfi_importeOrigenHaber = v_mfi_importeOrigenHaber,
                   ccos_id = v_ccos_id,
                   cue_id_debe = v_cue_id_debe,
                   cue_id_haber = v_cue_id_haber,
                   mfi_tipo = v_mfi_tipo,
                   chq_id = v_chq_id,
                   cheq_id = v_cheq_id
            where mf_id = v_mf_id
              and mfi_id = v_mfi_id;

         end if;

         v_orden := v_orden + 1;

   end loop;

/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                                     items borrados                                                                 //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/

   -- hay que borrar los items borrados del movimiento de fondos solo si este no es nuevo
   --
   if v_is_new = 0 then

      perform sp_doc_movimiento_fondo_item_delete(v_mf_id, p_mfTMP_id, 0 /* bIsDelete = False */, v_chequeUsado);

      delete from MovimientoFondoItemBorradoTMP
      where mf_id = v_mf_id
        and mfTMP_id = p_mfTMP_id;

   end if;

/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                                     borrar temporales                                                              //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/

   delete from MovimientoFondoItemTMP
   where mfTMP_id = p_mfTMP_id;

   delete from MovimientoFondoTMP
   where mfTMP_id = p_mfTMP_id;

/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                                     talonarios                                                                     //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/

   perform sp_talonario_set(v_ta_id, v_mf_nrodoc);

/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                                        estado                                                                      //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/

   perform sp_doc_movimiento_fondo_set_estado(v_mf_id);

/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                                     asiento                                                                        //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/
   select sp_cfg_getValor('Tesoreria-General', 'MovimientoFondo-Grabar Asiento') into v_cfg_valor;

   v_cfg_valor := coalesce(v_cfg_valor, '0');

   if to_number(v_cfg_valor) <> 0 then

      select * from sp_doc_movimiento_fondo_asiento_save(v_mf_id,0) into v_error, v_error_msg;

   else

      if not exists ( select mf_id
                      from MovimientoFondoAsiento
                      where mf_id = v_mf_id ) then

         insert into MovimientoFondoAsiento
           ( mf_id, mf_fecha )
           ( select mf_id,
                    mf_fecha
             from MovimientoFondo
             where mf_grabarAsiento <> 0
               and mf_id = v_mf_id );

      end if;

   end if;

/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                                     historial de modificaciones                                                    //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/
   select modifico into v_modifico from MovimientoFondo where mf_id = v_mf_id;

   if v_is_new <> 0 then
      perform sp_historia_update(18006, v_mf_id, v_modifico, 1);
   else
      perform sp_historia_update(18006, v_mf_id, v_modifico, 3);
   end if;

/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                                     fin                                                                            //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/

   rtn.type := 'mf_id';
   rtn.id := v_mf_id;

   return next rtn;

exception
   when others then

     raise exception 'Ha ocurrido un error al grabar el movimiento de fondos. sp_doc_movimiento_fondo_save. %. %.',
                      sqlstate, sqlerrm;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_doc_orden_cpra_set_item_pendiente(p_oc_id integer)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
declare

   v_oci_id integer;
   v_doct_id integer;
   v_est_id integer;

   v_aplicadoPedido decimal(18,6);
   v_aplicadoFactura decimal(18,6);
   v_aplicadoRemito decimal(18,6);
   v_aplicadoOrden decimal(18,6);

begin

   select doct_id,
          est_id
     into v_doct_id,
          v_est_id
   from OrdenCompra
   where oc_id = p_oc_id;

   SET TRANSACTION READ WRITE;

   if v_est_id <> 7 then

      for v_oci_id in
         select oci_id
         from OrdenCompraItem
         where oc_id = p_oc_id
      loop

         if v_doct_id = 35 then

            select coalesce(sum(pcoc_cantidad), 0)
              into v_aplicadoPedido
            from PedidoOrdenCompra
            where oci_id = v_oci_id;

            select coalesce(sum(ocrc_cantidad), 0)
              into v_aplicadoRemito
            from OrdenRemitoCompra
            where oci_id = v_oci_id;

            select coalesce(sum(ocfc_cantidad), 0)
              into v_aplicadoFactura
            from OrdenFacturaCompra
            where oci_id = v_oci_id;

            select v_aplicadoOrden + coalesce(sum(ocdc_cantidad), 0)
              into v_aplicadoOrden
            from OrdenDevolucionCompra
            where oci_id_Orden = v_oci_id;

         else

            v_aplicadoPedido := 0;
            v_aplicadoFactura := 0;
            v_aplicadoRemito := 0;

            select v_aplicadoOrden + coalesce(sum(ocdc_cantidad), 0)
              into v_aplicadoOrden
            from OrdenDevolucionCompra
            where oci_id_devolucion = v_oci_id;

         end if;

         v_aplicadoPedido := coalesce(v_aplicadoPedido, 0);
         v_aplicadoFactura := coalesce(v_aplicadoFactura, 0);
         v_aplicadoRemito := coalesce(v_aplicadoRemito, 0);
         v_aplicadoOrden := coalesce(v_aplicadoOrden, 0);

         update OrdenCompraItem
            set oci_pendientefac = oci_cantidadaremitir - v_aplicadoFactura - v_aplicadoRemito - v_aplicadoOrden,
                oci_pendiente = oci_cantidad - v_aplicadoPedido
         where oci_id = v_oci_id;

      end loop;

   else

      update OrdenCompraItem
         set oci_pendiente = 0,
             oci_pendientefac = 0
      where oc_id = p_oc_id;

   end if;

exception
   when others then

   raise exception 'Ha ocurrido un error al actualizar el pendiente de la Orden de compra. sp_doc_orden_cpra_set_item_pendientente. %. %.',
                   sqlstate, sqlerrm;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_doc_movimiento_fondo_set_estado(p_mf_id integer, OUT p_est_id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
declare
   v_est_id integer;
   v_cli_id integer;
   v_llevaFirma smallint;
   v_firmado smallint;
   v_doc_id integer;
   v_doc_llevaFirma smallint;

   v_estado_pendiente integer := 1;
   v_estado_pendienteCredito integer := 3;
   v_estado_pendienteFirma integer := 4;
   v_estado_finalizado integer := 5;
   v_estado_anulado integer := 7;
begin

   if p_mf_id = 0 then
      return;
   end if;

   select cli_id,
          mf_firmado,
          est_id,
          doc_id
     into v_cli_id,
          v_firmado,
          v_est_id,
          v_doc_id
   from MovimientoFondo
   where mf_id = p_mf_id;

   select doc_llevafirma
     into v_doc_llevaFirma
   from Documento
   where doc_id = v_doc_id;

   if v_est_id <> v_estado_anulado then

      -- si el documento requiere firma y el comprobante no esta firmado
      -- y no esta finalizado (puede ser que se finalizo y luego se modifico el documento
      -- para que requiera firma en cuyo caso no se exige firma para documentos finalizados)
      --
      if v_firmado = 0 and v_doc_llevaFirma <> 0 and v_est_id <> v_estado_finalizado then

         v_est_id := v_estado_pendienteFirma;

      else

         v_est_id := v_estado_finalizado;

      end if;

      update MovimientoFondo
         set est_id = v_est_id
      where mf_id = p_mf_id;

   end if;

   p_est_id := v_est_id;

exception
   when others then

   raise exception 'Ha ocurrido un error al actualizar el estado de la cobranza. sp_doc_movimiento_fondo_set_estado. %. %.',
                   sqlstate, sqlerrm;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_doc_op_mf_cheque_save(p_tipo integer, p_cheq_numerodoc character varying, p_importe numeric, p_importeorigen numeric, p_cheq_fechacobro date, p_cheq_fechavto date, p_descrip character varying, p_chq_id integer, p_opg_id integer, ip_mf_id integer, p_dbco_id integer, p_cle_id integer, p_mon_id integer, p_prov_id integer, ip_cue_id integer, OUT p_cheq_id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
declare
   p_cue_id integer := ip_cue_id;
   p_mf_id integer := ip_mf_id;
   v_opgit_cheques smallint := 1;
   v_opgit_chequesT smallint := 6;
   v_cheq_propio smallint := 1;
   v_bco_id integer;
   v_cheq_numero integer;
   v_emp_id integer;
   v_cheq_fecha2 date;
begin

   -- obtengo la empresa de este cheque
   --
   if coalesce(p_opg_id, 0) <> 0 then

      select doc.emp_id
        into v_emp_id
      from OrdenPago opg
      join Documento doc
        on opg.doc_id = doc.doc_id
      where opg.opg_id = p_opg_id;

   else

      if coalesce(p_mf_id, 0) <> 0 then

         select doc.emp_id
           into v_emp_id
         from MovimientoFondo mf
         join Documento doc
           on mf.doc_id = doc.doc_id
         where mf.mf_id = p_mf_id;

      else

         if coalesce(p_dbco_id, 0) <> 0 then

            select doc.emp_id
              into v_emp_id
            from DepositoBanco dbco
            join Documento doc
              on dbco.doc_id = doc.doc_id
            where dbco.dbco_id = p_dbco_id;

         end if;
      end if;
   end if;

   -- esto es aproposito, ya que los cheques propios que se utilizan para
   -- pagar a proveedores no estan asociados a ninguna cuenta contable
   --
   if exists ( select *
               from Cheque
               where cheq_id = p_cheq_id
                 and p_opg_id is not null ) then

      p_cue_id := null;

   else

      if exists ( select *
                  from Cheque
                  where cheq_id = p_cheq_id
                    and coalesce(mf_id, 0) > coalesce(p_mf_id, 0) ) then

         select cue_id,
                mf_id
           into p_cue_id,
                p_mf_id
         from Cheque
         where cheq_id = p_cheq_id;

      end if;

   end if;

   -- si este renglon es un cheque lo doy de alta en la tabla Cheque
   --
   if p_tipo = v_opgit_cheques or p_tipo = v_opgit_chequesT then

      -- obtengo el banco
      --
      select bco_id
        into v_bco_id
      from Cuenta
      join Chequera
        on Cuenta.cue_id = Chequera.cue_id
      where chq_id = p_chq_id;

      -- si es nuevo insert
      --
      if p_cheq_id is null then

         select sp_dbGetNewId('Cheque', 'cheq_id') into p_cheq_id;
         select sp_dbGetNewId('Cheque', 'cheq_numero') into v_cheq_numero;

         select sp_doc_get_fecha2(p_cheq_fechaCobro, 1, p_cle_id) into v_cheq_fecha2;

         insert into Cheque( cheq_id, cheq_numero, cheq_numerodoc, cheq_importe, cheq_importeOrigen, cheq_tipo,
                             cheq_fechaCobro, cheq_fechaVto, cheq_fecha2, cheq_descrip, chq_id, opg_id, mf_id, dbco_id,
                             cle_id, bco_id, cue_id, mon_id, prov_id, emp_id )
         values ( p_cheq_id, v_cheq_numero, p_cheq_numerodoc, p_importe, p_importeOrigen, v_cheq_propio,
                  p_cheq_fechaCobro, p_cheq_fechaVto, v_cheq_fecha2, p_descrip, p_chq_id, p_opg_id, p_mf_id, p_dbco_id,
                  p_cle_id, v_bco_id, p_cue_id, p_mon_id, p_prov_id, v_emp_id );

         perform sp_chequera_set(p_chq_id, p_cheq_numerodoc);

      else

         -- cheque de tercero ya que no tiene chequera
         --
         if p_chq_id is null then

            update Cheque
               set opg_id = coalesce(p_opg_id, opg_id),
                   mf_id = coalesce(p_mf_id, mf_id),
                   dbco_id = coalesce(p_dbco_id, dbco_id),
                   cue_id = p_cue_id,
                   prov_id = coalesce(p_prov_id, prov_id)
            where cheq_id = p_cheq_id;

         -- cheque propio
         --
         else

            select sp_doc_get_fecha2(p_cheq_fechaCobro, 1, p_cle_id) into v_cheq_fecha2;

            -- sino update
            --
            update Cheque
               set cheq_numerodoc = p_cheq_numerodoc,
                   cheq_importe = p_importe,
                   cheq_importeOrigen = p_importeOrigen,
                   cheq_tipo = v_cheq_propio,
                   cheq_fechaCobro = p_cheq_fechaCobro,
                   cheq_fechaVto = p_cheq_fechaVto,
                   cheq_fecha2 = v_cheq_fecha2,
                   cheq_descrip = p_descrip,
                   chq_id = p_chq_id,
                   opg_id = coalesce(p_opg_id, opg_id),
                   mf_id = coalesce(p_mf_id, mf_id),
                   dbco_id = coalesce(p_dbco_id, dbco_id),
                   cle_id = p_cle_id,
                   bco_id = v_bco_id,
                   cue_id = p_cue_id,
                   mon_id = p_mon_id,
                   prov_id = coalesce(p_prov_id, prov_id)
            where cheq_id = p_cheq_id;

         end if;

      end if;

   end if;

exception
   when others then

      raise exception '%. %.', sqlstate, sqlerrm;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_doc_orden_compra_set_credito(p_oc_id integer, p_borrar integer DEFAULT 0)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
declare
   v_pendiente decimal(18,6);
   v_prov_id integer;
   v_doct_id integer;
   v_emp_id integer;
   v_cotizacion decimal(18,6);
   v_mon_id integer;
   v_fecha date;
   v_desc1 decimal(18,6);
   v_desc2 decimal(18,6);

   v_doct_ordenCompra integer := 35;

   v_old_prov_ids integer[];
   i integer;
begin

   -- si no hay documento adios
   --
   if p_oc_id = 0 then
      return;
   end if;

   SET TRANSACTION READ WRITE;

   select oc.prov_id,
          round(oc.oc_pendiente, 2),
          oc.doct_id,
          doc.emp_id,
          doc.mon_id,
          oc.oc_descuento1,
          oc.oc_descuento2
     into v_prov_id,
          v_pendiente,
          v_doct_id,
          v_emp_id,
          v_mon_id,
          v_desc1,
          v_desc2
   from OrdenCompra oc
   join Documento doc
     on oc.doc_id = doc.doc_id
   where oc.oc_id = p_oc_id;

   v_fecha := CURRENT_TIMESTAMP;

   select sp_moneda_get_cotizacion(v_mon_id, v_fecha) into v_cotizacion;

   if not exists ( select *
                   from Moneda
                   where mon_id = v_mon_id
                     and mon_legal <> 0 ) then

      if v_cotizacion > 0 then
         v_pendiente := v_pendiente * v_cotizacion;
      end if;

   end if;

   v_pendiente := coalesce(v_pendiente, 0) - (coalesce(v_pendiente, 0) * v_desc1 / 100);
   v_pendiente := coalesce(v_pendiente, 0) - (coalesce(v_pendiente, 0) * v_desc2 / 100);


   -- borrar referencias a este documento por otro proveedor
   --

   -- siempre borro cualquier mencion a este documento en el cache de cualquier
   -- proveedor que no sea el indicado por el documento
   --
   if exists ( select prov_id
               from ProveedorCacheCredito
               where prov_id <> v_prov_id
                 and doct_id = v_doct_ordenCompra
                 and id = p_oc_id ) then

      select into v_old_prov_ids prov_id
      from ProveedorCacheCredito
      where prov_id <> v_prov_id
        and doct_id = v_doct_ordenCompra
        and id = p_oc_id;

      delete from ProveedorCacheCredito
      where prov_id <> v_prov_id
        and doct_id = v_doct_ordenCompra
        and id = p_oc_id;

      for i in 1 .. array_upper(v_old_prov_ids, 1)
      loop

         perform sp_proveedor_update_orden_cpra_credito(v_old_prov_ids[i], v_emp_id);

      end loop;

   end if;

   -- borrar
   --
   if p_borrar <> 0 then

      delete from ProveedorCacheCredito
      where prov_id = v_prov_id
        and doct_id = v_doct_ordenCompra
        and id = p_oc_id;

   -- insert - update
   --
   else

      if v_doct_id = 36 then /* cancelacion */
         v_pendiente := -v_pendiente;
      end if;

      if exists ( select id
                  from ProveedorCacheCredito
                  where prov_id = v_prov_id
                    and doct_id = v_doct_ordenCompra
                    and id = p_oc_id ) then

         if abs(v_pendiente) >= 0.01 then

            update ProveedorCacheCredito
               set provcc_importe = v_pendiente
            where prov_id = v_prov_id
              and doct_id = v_doct_ordenCompra
              and id = p_oc_id;

         -- si no hay nada pendiente lo saco del cache
         --
         else

            delete from ProveedorCacheCredito
            where prov_id = v_prov_id
              and doct_id = v_doct_ordenCompra
              and id = p_oc_id;

         end if;

      else

         -- solo si hay algo pendiente
         --
         if abs(v_pendiente) >= 0.01 then

            insert into ProveedorCacheCredito( prov_id, doct_id, id, provcc_importe, emp_id )
            values ( v_prov_id, v_doct_ordenCompra, p_oc_id, v_pendiente, v_emp_id );

         end if;

      end if;

   end if;

   -- deuda en cache
   --

   -- actualizo la deuda en la tabla proveedor
   --
   perform sp_proveedor_update_orden_cpra_credito(v_prov_id, v_emp_id);

exception
   when others then

   raise exception 'Ha ocurrido un error al actualizar el estado de la orden de compra. sp_doc_orden_compra_set_credito. %. %.',
                   sqlstate, sqlerrm;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_doc_orden_compra_set_estado(p_oc_id integer, OUT p_est_id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
declare
   v_est_id integer;
   v_prov_id integer;
   v_pendiente decimal(18,6);
   v_creditoTotal decimal(18,6);
   v_llevaFirma smallint;
   v_firmado smallint;
   v_deuda decimal(18,6);
   v_doc_id integer;
   v_doc_llevafirma smallint;

   v_estado_pendiente integer := 1;
   v_estado_pendienteCredito integer := 3;
   v_estado_pendienteFirma integer := 4;
   v_estado_finalizado integer := 5;
   v_estado_anulado integer := 7;
begin

   if p_oc_id = 0 then
      return;
   end if;

   select prov_id,
          oc_firmado,
          est_id,
          doc_id
     into v_prov_id,
          v_firmado,
          v_est_id,
          v_doc_id
   from OrdenCompra
   where oc_id = p_oc_id;

   select doc_llevafirma
     into v_doc_llevafirma
   from Documento
   where doc_id = v_doc_id;

   if v_est_id <> v_estado_anulado then

      -- si el documento requiere firma y el comprobante no esta firmado
      -- y no esta finalizado (puede ser que se finalizo y luego se modifico el documento
      -- para que requiera firma en cuyo caso no se exige firma para documentos finalizados)
      --
      if v_firmado = 0 and v_doc_llevafirma <> 0 and v_est_id <> v_estado_finalizado then

         v_est_id := v_estado_pendienteFirma;

      else

         -- se obtiene la deuda del comprobante
         --
         select round(sum(oci_pendientefac), 2)
           into v_deuda
         from OrdenCompraItem
         where oc_id = p_oc_id;

         -- si el comprobante no tiene deuda se finaliza
         --
         if coalesce(v_deuda, 0) <= 0 then

            v_est_id := v_estado_finalizado;

         else

            -- se obtiene la deuda del Proveedor
            --
            select sum(provcc_importe)
              into v_pendiente
            from ProveedorCacheCredito
            where prov_id = v_prov_id;

            -- se obtiene el credito del Proveedor
            --
            select prov_creditototal
              into v_creditoTotal
            from Proveedor
            where prov_id = v_prov_id;

            -- si debe mas que el credito concedido al Proveedor
            --
            if v_pendiente > v_creditoTotal then

               v_est_id := v_estado_pendienteCredito;

            -- sino solo pendiente
            --
            else

               v_est_id := v_estado_pendiente;

            end if;

         end if;

      end if;

      update OrdenCompra
         set est_id = v_est_id
      where oc_id = p_oc_id;

   end if;

   p_est_id := v_est_id;

exception
   when others then

   raise exception 'Ha ocurrido un error al actualizar el estado de la orden de compra. sp_doc_orden_compra_set_estado. %. %.',
                   sqlstate, sqlerrm;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_doc_orden_compra_set_pendiente(p_oc_id integer)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
declare
   v_oc_pendiente decimal(18,6);
begin

   SET TRANSACTION READ WRITE;

   perform sp_doc_orden_cpra_set_item_pendiente(p_oc_id);

   select sum(oci_pendientefac * (oci_importe / oci_cantidad))
     into v_oc_pendiente
   from OrdenCompraItem
   where oc_id = p_oc_id;

   v_oc_pendiente := coalesce(v_oc_pendiente, 0);

   update OrdenCompra
      set oc_pendiente = round(v_oc_pendiente, 2)
   where oc_id = p_oc_id;

exception
   when others then

   raise exception 'Ha ocurrido un error al actualizar el pendiente del Orden de compra. sp_doc_orden_compra_set_pendiente. %. %.',
                   sqlstate, sqlerrm;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_doc_orden_pago_cheque_set_credito(p_opg_id integer, p_borrar integer DEFAULT 0)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
declare
   v_pendiente decimal(18,6);
   v_prov_id integer;
   v_emp_id integer;

   v_doct_ordenpagochq integer := 1016;

   v_old_prov_ids integer[];
   i integer;
begin

   -- Si no hay documento adios
   --
   if p_opg_id = 0 then
      return;
   end if;

   SET TRANSACTION READ WRITE;

   -- Datos del documento
   --
   select prov_id,
          emp_id
     into v_prov_id,
          v_emp_id
   from OrdenPago
   where opg_id = p_opg_id;


   -- Borrar referencias a este documento por otro proveedor
   --

   -- Siempre borro cualquier mencion a este documento en el cache de cualquier
   -- proveedor que no sea el indicado por el documento
   --
   if exists ( select prov_id
               from ProveedorCacheCredito
               where prov_id <> v_prov_id
                 and doct_id = v_doct_ordenpagochq
                 and id = p_opg_id ) then


        select into v_old_prov_ids prov_id
        from ProveedorCacheCredito
        where prov_id <> v_prov_id
         and doct_id = v_doct_ordenpagochq
         and id = p_opg_id;

        delete from ProveedorCacheCredito
        where prov_id <> v_prov_id
          and doct_id = v_doct_ordenpagochq
          and id = p_opg_id;

        for i in 1 .. array_upper(v_old_prov_ids, 1)
        loop

          perform sp_proveedor_update_credito(v_old_prov_ids[i], v_emp_id);

        end loop;

   end if;

   -- Borrar
   --
   if p_borrar <> 0 then

      delete from ProveedorCacheCredito
      where prov_id = v_prov_id
        and doct_id = v_doct_ordenpagochq
        and id = p_opg_id;

   else

      select sum(cheq_importe)
        into v_pendiente
      from Cheque
      where opg_id = p_opg_id
        and cheq_fechacobro > CURRENT_TIMESTAMP
        and cheq_anulado = 0
        and cheq_rechazado = 0;

      v_pendiente := round(coalesce(v_pendiente, 0), 2);

      if exists ( select id
                  from ProveedorCacheCredito
                  where prov_id = v_prov_id
                    and doct_id = v_doct_ordenpagochq
                    and id = p_opg_id ) then

         if abs(v_pendiente) >= 0.01 then

            update ProveedorCacheCredito
               set provcc_importe = v_pendiente
            where prov_id = v_prov_id
              and doct_id = v_doct_ordenpagochq
              and id = p_opg_id;

         -- Si no hay nada pendiente lo saco del cache
         else

            delete from ProveedorCacheCredito
            where prov_id = v_prov_id
              and doct_id = v_doct_ordenpagochq
              and id = p_opg_id;

         end if;

      else

         -- Solo si hay algo pendiente
         if abs(v_pendiente) >= 0.01 then

            insert into ProveedorCacheCredito( prov_id, doct_id, id, provcc_importe, emp_id )
            values ( v_prov_id, v_doct_ordenpagochq, p_opg_id, v_pendiente, v_emp_id );

         end if;

      end if;

   end if;

   -- Actualizo la deuda en la tabla proveedor
   --
   perform sp_proveedor_update_credito(v_prov_id, v_emp_id);

   return;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_doc_orden_pago_delete(p_opg_id integer, p_emp_id integer, p_us_id integer)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
declare
   v_editable integer;
   v_edit_msg varchar(255);
   v_as_id integer;
begin

  if coalesce(p_opg_id, 0) = 0 then
     return;
  end if;

  select * from sp_doc_orden_pago_editable_get(p_emp_id, p_opg_id, p_us_id, 0, 1) into v_editable, v_edit_msg;

  if v_editable = 0 then

     raise exception '@@ERROR_SP: %', v_edit_msg;

  end if;

  SET TRANSACTION READ WRITE;

  select as_id
    into v_as_id
  from OrdenPago
  where opg_id = p_opg_id;

  begin

    update OrdenPago set as_id = null where opg_id = p_opg_id;

    perform sp_doc_asiento_delete(v_as_id, p_emp_id, p_us_id, 1);-- No check access

    perform sp_doc_orden_pago_set_credito(p_opg_id, 1);

    delete from OrdenPagoItem where opg_id = p_opg_id;

    ---------------------------------------------------------
    -- Hay tres situaciones a resolver con los cheques
    --
    -- 1- Borrar los cheques propios emitidos por esta orden
    --
    -- 2- Devolver a la cuenta mencionada en el ultimo
    --    movimiento de fondos que menciono al cheque
    --
    -- 3- Devolver a documentos en cartera los cheques
    --    ingresados por una cobranza

    -- Borro los cheques propios entregados al proveedor

    delete from Cheque
    where opg_id = p_opg_id
      and chq_id is not null-- solo los cheques propios tienen chequera (chq_id)
      and mf_id is null;-- no entraron por movimiento de fondos

    -- Devuelvo a documentos en cartera los cheques de tercero y los desvinculo de esta orden de pago

    update Cheque
       set cue_id = (select cue_id_debe
                     from MovimientoFondoitem
                     where cheq_id = Cheque.cheq_id
                       and mf_id = Cheque.mf_id),
           opg_id = null
    where exists (select cue_id_debe
                  from MovimientoFondoitem
                  where cheq_id = Cheque.cheq_id
                    and mf_id = Cheque.mf_id)
      and Cheque.opg_id = p_opg_id;

    -- Devuelvo a documentos en cartera los cheques de tercero y los desvinculo de esta orden de pago

    update Cheque
       set cue_id = (select cue_id
                     from CobranzaItem
                     where cheq_id = Cheque.cheq_id),
           opg_id = null
    where exists (select cue_id
                  from CobranzaItem
                  where cheq_id = Cheque.cheq_id)
      and Cheque.opg_id = p_opg_id
      and mf_id is null;

    perform sp_doc_orden_pago_cheque_set_credito(p_opg_id, 1);

    delete from OrdenPago where opg_id = p_opg_id;

  exception
     when others then
       raise exception 'Ha ocurrido un error al borrar la Orden de Pago. sp_doc_orden_pago_delete. %. %.',
                        sqlstate, sqlerrm;
  end;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_doc_orden_pago_editable_get(p_emp_id integer, p_opg_id integer, p_us_id integer, p_no_anulado integer DEFAULT 0, p_delete integer DEFAULT 0, OUT p_editable integer, OUT p_edit_msg character varying)
 RETURNS record
 LANGUAGE plpgsql
AS $function$
declare

   v_doc_id integer;
   v_opg_fecha date;
   v_estado integer;

   v_firmado integer;
   v_emp_id integer;
   v_emp_nombre varchar(255);
   v_impreso smallint;

   v_pre_id integer;
   v_doc_nombre varchar(255);
   v_fca_id integer;

   v_anulado integer := 7;
   v_csPreTsrEditOrdenPago integer := 18015;
   v_csPreTsrDeleteOrdenPago integer := 18016;

   v_fca_fechaDesde date;
   v_fca_fechaHasta date;

   v_doc_editarImpresos smallint;

begin


   if p_opg_id <> 0 then
      
      select d.doc_id,
             d.emp_id,
             c.opg_fecha,
             c.est_id,
             c.impreso
        into v_doc_id,
             v_emp_id,
             v_opg_fecha,
             v_estado,
             v_impreso
      from OrdenPago c
      join Documento d
        on c.doc_id = d.doc_id
      where c.opg_id = p_opg_id;

      if v_emp_id is null then

         p_editable := 0;
         p_edit_msg := 'No existe un comprobante con id: ' || p_opg_id::varchar;

         return;

      end if;

      if p_emp_id <> v_emp_id then

         select emp_nombre
           into v_emp_nombre
         from Empresa
         where emp_id = v_emp_id;

         p_editable := 0;

         if p_delete = 0 then
            p_edit_msg := 'El comprobante pertenece a la empresa ' || v_emp_nombre || ', para editarlo debe ingresar al sistema indicando dicha empresa.';
         else
            p_edit_msg := 'El comprobante pertenece a la empresa ' || v_emp_nombre || ', para borrarlo debe ingresar al sistema indicando dicha empresa.';
         end if;

         return;

      end if;

      if v_estado = v_anulado and p_no_anulado = 0 then

         p_editable := 0;
         p_edit_msg := 'El comprobante esta anulado';

         return;

      end if;

      if p_delete = 0 then
         v_pre_id := v_csPreTsrEditOrdenPago;
      else
         v_pre_id := v_csPreTsrDeleteOrdenPago;
      end if;

      -- Tiene permiso para editar ordenes de pago
      --
      if not exists ( select per_id
                      from Permiso
                      where pre_id = v_pre_id
                        and ( ( us_id = p_us_id )
                               or exists ( select us_id
                                           from UsuarioRol
                                           where us_id = p_us_id
                                             and rol_id = Permiso.rol_id ) ) ) then
         p_editable := 0;

         if p_delete = 0 then
            p_edit_msg := 'Usted no tiene permiso para editar ordenes de pago';
         else
            p_edit_msg := 'Usted no tiene permiso para borrar ordenes de pago';
         end if;

         return;

      end if;

      v_pre_id := null;

      select case
                when p_delete = 0 then pre_id_edit
                else pre_id_delete
             end,
             doc_nombre
        into v_pre_id,
             v_doc_nombre
      from Documento
      where doc_id = v_doc_id;

      if not exists ( select per_id
                  from Permiso
                  where pre_id = v_pre_id
                    and ( ( us_id = p_us_id )
                          or exists ( select us_id
                                      from UsuarioRol
                                      where us_id = p_us_id
                                        and rol_id = Permiso.rol_id ) ) ) then
         p_editable := 0;

         if p_delete = 0 then
            p_edit_msg := 'Usted no tiene permiso para editar ' || v_doc_nombre;
         else
            p_edit_msg := 'Usted no tiene permiso para borrar ' || v_doc_nombre;
         end if;

         return;

      end if;

      -- Fechas de control de Acceso
      select fca_id
        into v_fca_id
      from Documento
      where doc_id = v_doc_id;

      if not v_fca_id is null then

         if not exists ( select fca_id
                         from FechaControlAcceso
                         where fca_id = v_fca_id
                           and v_opg_fecha between fca_fechaDesde and fca_fechaHasta ) then

            select fca_fechaDesde,
                   fca_fechaHasta
              into v_fca_fechaDesde,
                   v_fca_fechaHasta
            from FechaControlAcceso
            where fca_id = v_fca_id;

            p_editable := 0;
            p_edit_msg := 'La fecha del comprobante esta fuera del intervalo definido por las fechas de control de acceso ('
                          || to_char(coalesce(v_fca_fechaDesde, ''), 'dd-mm-yyyy')
                          || ' - '
                          || to_char(coalesce(v_fca_fechaHasta, ''), 'dd-mm-yyyy')
                          || ')';

            return;

         end if;

      end if;

      if exists ( select fc_id
                  from OrdenPago
                  where opg_id = p_opg_id
                    and fc_id is not null ) then

         p_editable := 0;
         p_edit_msg := 'El comprobante fue generado automaticamente por una factura de compra. No se puede editar manualmente.';

         return;

      end if;

      if exists ( select fcopg_id
                  from FacturaCompraOrdenPago
                  where opg_id = p_opg_id ) then

         p_editable := 0;
         p_edit_msg := 'El comprobante se encuentra aplicado. Antes de poder modificarlo debe eliminar las aplicaciones.';

         return;

      end if;

      if v_impreso <> 0 and p_no_anulado = 0 then

         select doc_editarImpresos
           into v_doc_editarImpresos
         from Documento
         where doc_id = v_doc_id;

         if v_doc_editarImpresos = 0 then

            p_editable := 0;

            if p_delete = 0 then
               p_edit_msg := 'El comprobante esta impreso y la definición de su documento no permite la edición de comprobantes impresos.';
            else
               p_edit_msg := 'El comprobante esta impreso y la definición de su documento no permite eliminar comprobantes impresos.';
            end if;

            return;

         end if;

      end if;

   end if;

   p_editable := 1;
   p_edit_msg := '';

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_doc_orden_pago_get(p_emp_id integer, p_opg_id integer, p_us_id integer, OUT rtn refcursor)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
declare
   v_editable integer;
   v_edit_msg varchar(255);
   v_doc_id integer;
   v_ta_mascara varchar(100);
   v_ta_propuesto smallint;
begin

   rtn := 'rtn';



/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                             TALONARIO Y ESTADO DE EDICION                                                          //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/
   select doc_id
     into v_doc_id
   from OrdenPago
   where opg_id = p_opg_id;

   select * from sp_talonario_get_propuesto(v_doc_id, 0, 0) into v_ta_mascara, v_ta_propuesto;

   select * from sp_doc_orden_pago_editable_get(p_emp_id, p_opg_id, p_us_id) into v_editable, v_edit_msg;

/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                             select                                                                                 //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/

   open rtn for

      select OrdenPago.*,
             doct_nombre,
             prov_nombre,
             est_nombre,
             ccos_nombre,
             suc_nombre,
             doc_nombre,
             case
                when lgj_titulo <> '' then lgj_titulo
                else lgj_codigo
             end lgj_codigo,
             v_editable editable,
             v_edit_msg editMsg,
             v_ta_mascara ta_mascara,
             v_ta_propuesto ta_propuesto
      from OrdenPago
      join Documento
       on OrdenPago.doc_id = Documento.doc_id
      join DocumentoTipo
       on OrdenPago.doct_id = DocumentoTipo.doct_id
      join Estado
       on OrdenPago.est_id = Estado.est_id
      join Sucursal
       on OrdenPago.suc_id = Sucursal.suc_id
      join Proveedor
       on OrdenPago.prov_id = Proveedor.prov_id
      left join CentroCosto
       on OrdenPago.ccos_id = CentroCosto.ccos_id
      left join Legajo
       on OrdenPago.lgj_id = Legajo.lgj_id
      where opg_id = p_opg_id;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_doc_orden_pago_get_cuenta_deudor(p_strids character varying, OUT rtn refcursor)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
declare
   v_cue_acreedoresXcpra integer := 8;
   v_timeCode timestamp with time zone;
begin

   v_timeCode := CURRENT_TIMESTAMP;

   perform sp_str_string_to_table(v_timeCode, p_strIds, ',');

   rtn := 'rtn';

   open rtn for
      select fc_id,
             c.cue_id,
             c.cue_nombre
      from AsientoItem
      join FacturaCompra
        on AsientoItem.as_id = FacturaCompra.as_id
      join TmpStringToTable
        on FacturaCompra.fc_id = cast(TmpStringToTable.tmpstr2tbl_campo as integer)
      join Cuenta c
        on AsientoItem.cue_id = c.cue_id
      where asi_haber <> 0
        and tmpstr2tbl_id = v_timeCode
        and c.cuec_id = v_cue_acreedoresXcpra
      group by fc_id,c.cue_id,c.cue_nombre;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_doc_orden_pago_get_data_from_aplic(p_doct_id integer, p_strids character varying, OUT rtn refcursor)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
declare
   v_timeCode timestamp with time zone;
begin

   v_timeCode := CURRENT_TIMESTAMP;

   perform sp_str_string_to_table(v_timeCode, p_strIds, ',');

   rtn := 'rtn';

   if p_doct_id = 1 then

      open rtn for

         select distinct fc.suc_id,
                       fc.lgj_id,
                       fc.cpg_id,
                       fc.ccos_id,
                       suc.suc_nombre,
                       lgj.lgj_titulo,
                       cpg.cpg_nombre,
                       ccos.ccos_nombre
         from ( FacturaCompra fc
                join TmpStringToTable
                 on fc.fc_id = cast(TmpStringToTable.tmpstr2tbl_campo as integer)
                and tmpstr2tbl_id = v_timeCode
                 )
         left join Sucursal suc
                on suc.suc_id = fc.suc_id
         left join CondicionPago cpg
                on cpg.cpg_id = fc.cpg_id
         left join CentroCosto ccos
                on ccos.ccos_id = fc.ccos_id
         left join Legajo lgj
                on lgj.lgj_id = fc.lgj_id

         where tmpstr2tbl_id = v_timeCode;

   else

      open rtn for

         -- devolvemos un recordset vacio para que el que llama
         -- no falle el preguntar por eof
         --
         select 0 dummy from OrdenPago where 1 = 2;

   end if;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_doc_orden_pago_get_facturas(p_emp_id integer, p_prov_id integer, p_bsolovencidos integer DEFAULT 1, p_bagrupado integer DEFAULT 0, OUT rtn refcursor, OUT rtnrates refcursor)
 RETURNS record
 LANGUAGE plpgsql
AS $function$
begin

   select * from sp_doc_orden_pago_get_facturas_cliente(
                    p_emp_id,
                    p_prov_id,
                    p_bSoloVencidos,
                    p_bAgrupado)
   into rtn, rtnRates;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_doc_orden_pago_get_facturas_cairo(p_emp_id integer, p_prov_id integer, p_bsolovencidos integer DEFAULT 1, p_bagrupado integer DEFAULT 0, OUT rtn refcursor, OUT rtnrates refcursor)
 RETURNS record
 LANGUAGE plpgsql
AS $function$
declare
   v_doct_factura integer;
   v_doct_notadebito integer;
   v_mon_id_default integer;
begin

   v_doct_factura := 1;
   v_doct_notadebito := 9;

   rtn := 'rtn';

   if p_bAgrupado = 0 then

      open rtn for
         select f.fc_id,
                fd.fcd_id,
                d.doc_nombre,
                f.fc_numero,
                f.fc_nrodoc,
                f.fc_fecha,
                f.fc_total,

                case f.fc_cotizacion
                   when 0 then 0
                   else fd.fcd_pendiente / f.fc_cotizacion
                end fc_totalorigen,

                f.fc_pendiente,
                f.fc_cotizacion,
                M.mon_nombre,
                f.mon_id,
                f.fc_descrip,
                fd.fcd_fecha,
                fd.fcd_pendiente

         from FacturaCompra f
         join Documento d
          on f.doc_id = d.doc_id
         join FacturaCompraDeuda fd
          on f.fc_id = fd.fc_id
         join Moneda M
          on f.mon_id = M.mon_id

         where f.prov_id = p_prov_id
           and ( fd.fcd_fecha <= CURRENT_TIMESTAMP or p_bSoloVencidos = 0 )
           and f.fc_pendiente > 0
           and f.doct_id <> 8
           and d.emp_id = p_emp_id

         order by f.fc_nrodoc,
                  f.fc_fecha;

   else

      open rtn for
         select f.fc_id,
                0 fcd_id,
                d.doc_nombre,
                f.fc_numero,
                f.fc_nrodoc,
                f.fc_fecha,
                f.fc_total,
                f.fc_totalorigen,
                f.fc_pendiente,
                f.fc_cotizacion,
                M.mon_nombre,
                f.mon_id,
                f.fc_descrip,
                min(fd.fcd_fecha) fcd_fecha,
                0 fcd_pendiente

         from FacturaCompra f
         join Documento d
          on f.doc_id = d.doc_id
         join FacturaCompraDeuda fd
          on f.fc_id = fd.fc_id
         join Moneda M
          on f.mon_id = M.mon_id

         where f.prov_id = p_prov_id
           and ( f.doct_id = v_doct_factura or f.doct_id = v_doct_notadebito )
           and f.fc_pendiente > 0
           and f.doct_id <> 8
           and d.emp_id = p_emp_id

         group by f.fc_id,d.doc_nombre,f.fc_numero,f.fc_nrodoc,f.fc_fecha,f.fc_total,f.fc_totalorigen,f.fc_pendiente,
                  f.fc_cotizacion,M.mon_nombre,f.mon_id,f.fc_descrip

         order by f.fc_nrodoc,
                  f.fc_fecha;

   end if;

   select mon_id into v_mon_id_default from Moneda where mon_legal <> 0;

   rtnRates := 'rtn_rates';

   open rtnRates for
      select f.mon_id,
             m.mon_nombre,
             sp_moneda_get_cotizacion(f.mon_id, CURRENT_TIMESTAMP::date) as mon_precio

      from FacturaCompra f
      join Documento d
        on f.doc_id = d.doc_id
      join FacturaCompraDeuda fd
        on f.fc_id = fd.fc_id
      join Moneda m
        on f.mon_id = m.mon_id

      where f.prov_id = p_prov_id
        and ( fd.fcd_fecha <= CURRENT_TIMESTAMP or p_bSoloVencidos = 0 )
        and fd.fcd_pendiente > 0
        and f.doct_id <> 8
        and d.emp_id = p_emp_id
        and f.mon_id <> v_mon_id_default
      group by f.mon_id, m.mon_nombre
      order by f.mon_id;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_doc_orden_pago_get_facturas_cliente(p_emp_id integer, p_prov_id integer, p_bsolovencidos integer DEFAULT 1, p_bagrupado integer DEFAULT 0, OUT rtn refcursor, OUT rtnrates refcursor)
 RETURNS record
 LANGUAGE plpgsql
AS $function$
begin

   select * from sp_doc_orden_pago_get_facturas_cairo(
                    p_emp_id,
                    p_prov_id,
                    p_bSoloVencidos,
                    p_bAgrupado)
   into rtn, rtnRates;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_doc_orden_pago_get_items(p_opg_id integer, p_tipo integer, OUT rtn refcursor)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
declare
   v_OpgiTCheques smallint;
   v_OpgiTEfectivo smallint;
   v_OpgiTOtros smallint;
   v_OpgiTCtaCte smallint;
   v_OpgiTChequesT smallint;
begin

   v_OpgiTCheques := 1;
   v_OpgiTEfectivo := 2;
   v_OpgiTOtros := 4;
   v_OpgiTCtaCte := 5;
   v_OpgiTChequesT := 6;

   rtn := 'rtn';

   if p_tipo = v_OpgiTCheques then

      open rtn for
         select OrdenPagoItem.*,
                chq.chq_codigo,
                cheq.cheq_numero,
                ccos.ccos_nombre,
                cue.cue_nombre,
                bco.bco_nombre,
                cle.cle_nombre,
                mon.mon_nombre,
                mon.mon_id,
                cheq.cheq_numerodoc,
                bco.bco_id,
                cle.cle_id,
                cheq.cheq_fechavto,
                cheq.cheq_fechacobro
         from OrdenPagoItem
         join Cheque cheq
          on OrdenPagoItem.cheq_id = cheq.cheq_id
         -- Este Inner join filtra a los cheques de tercero ya que estos no tienen
         -- chequera
         --
         join Chequera chq
          on OrdenPagoItem.chq_id = chq.chq_id
         left join CentroCosto ccos
          on OrdenPagoItem.ccos_id = ccos.ccos_id
         left join Banco bco
          on cheq.bco_id = bco.bco_id
         left join Clearing cle
          on cheq.cle_id = cle.cle_id
         left join Cuenta cue
          on OrdenPagoItem.cue_id = cue.cue_id
         left join Moneda mon
          on cheq.mon_id = mon.mon_id

         where OrdenPagoItem.opg_id = p_opg_id
           and opgi_tipo = v_OpgiTCheques

         order by opgi_orden;

   else

      if p_tipo = v_OpgiTEfectivo then

         open rtn for
            select OrdenPagoItem.*,
                   ccos.ccos_nombre,
                   cue.cue_nombre,
                   mon.mon_nombre,
                   mon.mon_id
            from OrdenPagoItem
            join Cuenta cue
             on OrdenPagoItem.cue_id = cue.cue_id
            join Moneda mon
             on cue.mon_id = mon.mon_id
            left join CentroCosto ccos
             on OrdenPagoItem.ccos_id = ccos.ccos_id

            where OrdenPagoItem.opg_id = p_opg_id
              and opgi_tipo = v_OpgiTEfectivo

            order by opgi_orden;

      else

         if p_tipo = v_OpgiTOtros then

            open rtn for
               select OrdenPagoItem.*,
                      ccos.ccos_nombre,
                      cue.cue_nombre,
                      ret.ret_nombre,
                      fc.fc_nrodoc,
                      mon.mon_nombre,
                      mon.mon_id
               from OrdenPagoItem
               left join CentroCosto ccos
                on OrdenPagoItem.ccos_id = ccos.ccos_id
               left join Cuenta cue
                on OrdenPagoItem.cue_id = cue.cue_id
               left join Moneda mon
                on cue.mon_id = mon.mon_id
               left join Retencion ret
                on OrdenPagoItem.ret_id = ret.ret_id
               left join FacturaCompra fc
                on OrdenPagoItem.fc_id_ret = fc.fc_id

               where OrdenPagoItem.opg_id = p_opg_id
                 and opgi_tipo = v_OpgiTOtros

               order by opgi_orden;

         else

            if p_tipo = v_OpgiTCtaCte then

               open rtn for
                  select OrdenPagoItem.*,
                         ccos.ccos_nombre,
                         cue.cue_nombre,
                         mon.mon_nombre,
                         mon.mon_id
                  from OrdenPagoItem
                  left join CentroCosto ccos
                   on OrdenPagoItem.ccos_id = ccos.ccos_id
                  left join Cuenta cue
                   on OrdenPagoItem.cue_id = cue.cue_id
                  left join Moneda mon
                   on cue.mon_id = mon.mon_id

                  where OrdenPagoItem.opg_id = p_opg_id
                    and opgi_tipo = v_OpgiTCtaCte

                  order by opgi_orden;

            else

               if p_tipo = v_OpgiTChequesT then

                  open rtn for
                     select OrdenPagoItem.*,
                            cheq.cheq_numero,
                            ccos.ccos_nombre,
                            cue.cue_nombre,
                            cheq.bco_id,
                            cheq.cle_id,
                            cheq.cli_id,                            
                            bco.bco_nombre,
                            cle.cle_nombre,
                            cli.cli_nombre,
                            mon.mon_nombre,
                            mon.mon_id,
                            cheq.cheq_numerodoc,
                            cheq.cheq_fechavto,
                            cheq.cheq_fechacobro
                     from OrdenPagoItem
                     join Cheque cheq
                      on OrdenPagoItem.cheq_id = cheq.cheq_id
                     left join Cliente cli
                      on cheq.cli_id = cli.cli_id
                     left join CentroCosto ccos
                      on OrdenPagoItem.ccos_id = ccos.ccos_id
                     left join Banco bco
                      on cheq.bco_id = bco.bco_id
                     left join Clearing cle
                      on cheq.cle_id = cle.cle_id
                     left join Cuenta cue
                      on OrdenPagoItem.cue_id = cue.cue_id
                     left join Moneda mon
                      on cheq.mon_id = mon.mon_id

                     where OrdenPagoItem.opg_id = p_opg_id
                       and opgi_tipo = v_OpgiTChequesT
                     order by opgi_orden;

               end if;

            end if;

         end if;

      end if;

   end if;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_doc_orden_pago_get_retencion(p_us_id integer, p_fdesde date, p_fhasta date, p_prov_id character varying, p_emp_id character varying, p_ret_id character varying, p_pago numeric, p_facturas character varying, p_isforopg integer DEFAULT 0, OUT rtn refcursor)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
declare
   v_sys_error varchar := '';
   v_error_msg_aux varchar(5000);

   v_prov_id integer;
   v_emp_id integer;
   v_ret_id integer;
   v_ram_id_proveedor integer;
   v_ram_id_empresa integer;
   v_ram_id_Retencion integer;
   v_noAplica integer;
   v_pro_id integer;
   v_tipoMinimo smallint;
   v_minimoImponible decimal(18,6);
   v_baseNoImponible decimal(18,6);
   v_minimoRet decimal(18,6);
   v_tasa decimal(18,6);
   v_ret decimal(18,6);
   v_totalPago decimal(18,6);
   v_opg_total decimal(18,6);
   v_base decimal(18,6);
   v_percepcion decimal(18,6);
   v_acumulaPor smallint;
   v_ibc_id smallint;
   v_catf_id integer;
   v_tipoBase smallint;

   v_codigo timestamp with time zone;
   v_pagoParcial decimal(18,6);
   v_txt varchar(5000);
   v_fc_numero integer;
   v_fc_id integer;
   v_pago_ibc decimal(18,6);
   v_desc1 decimal(18,6);
   v_desc2 decimal(18,6);
   v_ya_pagado decimal(18,6);

   v_aplicado decimal(18,6);
   v_anticipo decimal(18,6);

   -- el pago segun la categoria de ingresos brutos
   --
   v_nuevoPago decimal(18,6);

   -- el iva del pago segun la categoria de ingresos brutos
   --
   v_nuevoPagoIva decimal(18,6);

   v_minimoDesde decimal(18,6);

   -- finalmente solo nos falta la tasa que esta en relacion con el monto a pagar
   --
   v_minimoTasa decimal(18,6);

   v_montoFijo decimal(18,6);

   v_yaRetenido decimal(18,6);

   v_descrip varchar(5000);
   v_fc_base decimal(18,6);

   v_ta_id integer;
   v_ta_nrodoc varchar(100);

begin

   rtn := 'rtn';

   create temporary table tt_nuevoPago
   (
     fc_numero integer  not null,
     pago decimal(18,6)  not null,
     esparcial integer default (0) not null,
     pago_base decimal(18,6) default (0) not null,
     iva decimal(18,6) default (0) not null,
     percepcion decimal(18,6) default (0) not null,
     base decimal(18,6) default (0) not null
   ) on commit drop;

   -- solo convierto los ids
   --
   select * from sp_ArbConvertId(p_prov_id) into v_prov_id, v_ram_id_proveedor;
   select * from sp_ArbConvertId(p_emp_id)  into v_emp_id,  v_ram_id_empresa;
   select * from sp_ArbConvertId(p_ret_id)  into v_ret_id,  v_ram_id_Retencion;

   select ret_acumulapor,
          ibc_id,
          ret_tipominimo
     into v_acumulaPor,
          v_ibc_id,
          v_tipoMinimo
   from Retencion
   where ret_id = v_ret_id;

   --/////////////////////////////////////////////////////////////////////////////////////////////////////
   --
   --	definimos si esta retencion es aplicable a este proveedor
   --
   --/////////////////////////////////////////////////////////////////////////////////////////////////////

   -- si la retencion indica explicitamente al menos una categoria fiscal
   -- comprobamos que la categoria del proveedor este asociada a la retencion
   --
   if exists ( select * from RetencionCategoriaFiscal where ret_id = v_ret_id ) then

      select prov_catFiscal
        into v_catf_id
      from Proveedor
      where prov_id = v_prov_id;

      select retcatf_base
        into v_tipoBase
      from RetencionCategoriaFiscal
      where ret_id = v_ret_id
        and catf_id = v_catf_id;

      -- si tipoBase es null es por que esta retencion
      -- no incluye la categoria fiscal del proveedor
      --
      if v_tipoBase is null then
         v_noAplica := 1;
      else
         v_noAplica := 0;
      end if;

   else

      -- si no hay categorias explicitas para esta retencion
      -- se calcula para todos los proveedores
      --
      v_noAplica := 0;
      v_tipoBase := 1;-- Neto


   end if;

   -- validamos la provincia
   --
   if v_noAplica = 0 then

      -- si la retencion indica explicitamente al menos una provincia
      -- comprobamos que la provincia del proveedor este asociada a la retencion
      --
      if exists ( select * from RetencionProvincia where ret_id = v_ret_id ) then

         select pro_id
           into v_pro_id
         from Proveedor
         where prov_id = v_prov_id;

         if not exists ( select *
                         from RetencionProvincia
                         where ret_id = v_ret_id
                           and pro_id = v_pro_id ) then

            v_noAplica := 1;

         else

            v_noAplica := 0;

         end if;

         -- si la retencion tiene una provincia diferente, pero esta
         -- indicada explicitamente la traemos igual
         --
         if v_noAplica <> 0 then

            if exists ( select *
                        from ProveedorRetencion
                        where prov_id = v_prov_id
                          and ret_id = v_ret_id ) then

               v_noAplica := 0;

            end if;

         end if;

      else

         -- si no hay provincias explicitas para esta retencion
         -- se calcula para todos los proveedores
         --
         v_noAplica := 0;

      end if;

   end if;

   --/////////////////////////////////////////////////////////////////////////////////////////////////////
   --
   --	calculo de la retencion
   --
   --/////////////////////////////////////////////////////////////////////////////////////////////////////

   if v_noAplica = 0 then

      --/////////////////////////////////////////////////////////////////////////////////////////////////////
      --
      --	obtengo el pago de esta op sin impuestos (ni iva ni percepciones)
      --
      --/////////////////////////////////////////////////////////////////////////////////////////////////////

      -- ok ahora obtengo el iva de lo que estoy por pagar
      --
      -- paso a una temporal las facturas indicadas
      --

      --/////////////////////////////////////////////////////////////////////////////////////////////////////
      --
      --	pagos en el periodo (si correponde)
      --
      --/////////////////////////////////////////////////////////////////////////////////////////////////////

      if v_acumulaPor = 2 then-- Mensual

         -- NOTA: como la unica percepcion que incluye montos en el periodo es la de ganancias
         --       y por lo que hasta ahora sabemos, se aplica sobre el neto y para todas las
         --       categorias, no vamos a complicarnos discriminando si el producto es una cosa mueble
         --       o es un servicio, ya que no afecta a esta retencion
         --
         --       :( si cambian las reglas (y seguro lo haran) nos encargaremos
         --
         -- obtengo cuanto le pague en este periodo sin el iva
         --
         -- los anticipos no tienen iva
         --

         select sum(fcopg.fcopg_importe
                    - (fc.fc_ivari * (fcopg.fcopg_importe / fc.fc_total))
                    - (fc.fc_ivarni * (fcopg.fcopg_importe / fc.fc_total))
                    )
           into v_aplicado

         from FacturaCompraOrdenPago fcopg
         join FacturaCompra fc
          on fcopg.fc_id = fc.fc_id
         join OrdenPago opg
          on fcopg.opg_id = opg.opg_id
         join Documento d
          on fc.doc_id = d.doc_id

         where opg.opg_fecha between p_fdesde and p_fhasta
           and opg.prov_id = v_prov_id
           and d.emp_id = v_emp_id

           -- esto no me gusta, pero no lo vamos a tocar por ahora.
           --
           -- supuestamente es para notas de debito por cheque rechazado
           -- pero no estoy muy conforme con esta solucion,
           -- ya que si la factura contiene varios items y uno solo es
           -- exento de retenciones, no la tomo en cuenta en su totalidad
           -- y eso no esta bien.
           --
           -- ademas, ibc es ingresos brutos categoria, y lo estamos usando
           -- para las retenciones de ganancias, asi que no esta para nada
           -- prolijo, ya veremos si lo cambiamos
           --
           and not exists ( select *
                            from FacturaCompraItem fci
                            join Producto pr
                              on fci.pr_id = pr.pr_id
                            where pr.ibc_id = 1-- Exento
                              and fci.fc_id = fc.fc_id );

         v_aplicado := coalesce(v_aplicado, 0);

         -- obtengo cuanto hay de percepciones en estas facturas
         --
         select
                sum(fcp.fcperc_importe * (fcopg.fcopg_importe / fc.fc_total))
           into v_percepcion

         from FacturaCompraOrdenPago fcopg
         join FacturaCompra fc
           on fcopg.fc_id = fc.fc_id
         join OrdenPago opg
           on fcopg.opg_id = opg.opg_id
         join Documento d
           on fc.doc_id = d.doc_id
         join FacturaCompraPercepcion fcp
           on fc.fc_id = fcp.fc_id

         where opg.opg_fecha between p_fdesde and p_fhasta
           and opg.prov_id = v_prov_id
           and d.emp_id = v_emp_id

           -- esto no me gusta, pero no lo vamos a tocar por ahora.
           --
           -- supuestamente es para notas de debito por cheque rechazado
           -- pero no estoy muy conforme con esta solucion,
           -- ya que si la factura contiene varios items y uno solo es
           -- exento de retenciones, no la tomo en cuenta en su totalidad
           -- y eso no esta bien.
           --
           -- ademas, ibc es ingresos brutos categoria, y lo estamos usando
           -- para las retenciones de ganancias, asi que no esta para nada
           -- prolijo, ya veremos si lo cambiamos
           --
           and not exists ( select *
                            from FacturaCompraItem fci
                            join Producto pr
                              on fci.pr_id = pr.pr_id
                            where pr.ibc_id = 1-- Exento
                              and fci.fc_id = fc.fc_id );

         v_percepcion := coalesce(v_percepcion, 0);

         select
                sum(c.opg_pendiente)
           into v_anticipo

         from OrdenPago c
         join Documento d
           on c.doc_id = d.doc_id

         where c.opg_fecha between p_fdesde and p_fhasta
           and c.prov_id = v_prov_id
           and d.emp_id = v_emp_id
           and c.est_id <> 7;

         v_anticipo := coalesce(v_anticipo, 0);
         v_opg_total := v_aplicado + v_anticipo - v_percepcion;
         v_opg_total := coalesce(v_opg_total, 0);

      end if;

      v_percepcion := coalesce(v_percepcion, 0);
      v_opg_total := coalesce(v_opg_total, 0);

      -- pasamos las facturas de string a temporal
      --
      v_codigo := CURRENT_TIMESTAMP;

      perform sp_str_string_to_table(v_codigo, p_facturas, '*');

      for v_txt in

          select tmpstr2tbl_campo from TmpStringToTable where tmpstr2tbl_id = v_codigo

      loop

            if isnumeric(v_txt) <> 0 then

               select fc_id
                 into v_fc_id
               from FacturaCompra
               where fc_numero = to_number(v_txt);

               -- esto no me gusta, pero no lo vamos a tocar por ahora.
               --
               -- supuestamente es para notas de debito por cheque rechazado
               -- pero no estoy muy conforme con esta solucion,
               -- ya que si la factura contiene varios items y uno solo es
               -- exento de retenciones, no la tomo en cuenta en su totalidad
               -- y eso no esta bien.
               --
               -- ademas, ibc es ingresos brutos categoria, y lo estamos usando
               -- para las retenciones de ganancias, asi que no esta para nada
               -- prolijo, ya veremos si lo cambiamos
               --
               if not exists ( select *
                               from FacturaCompraItem fci
                               join Producto pr
                                 on fci.pr_id = pr.pr_id
                               where pr.ibc_id = 1-- Exento
                                 and fci.fc_id = v_fc_id ) then

                  -- si la retencion no tiene definido un ibc_id aplicamos todo el pago
                  --
                  if v_ibc_id is null then

                     insert into tt_nuevoPago ( fc_numero, pago ) values ( to_number(v_txt), 0 );

                  else

                     -- para descontar anticipos sobre esta factura
                     --
                     v_ya_pagado := 0;

                     -- tenemos que obtener el monto de la suma de los productos cuyo
                     -- ibc_id = al de la retencion
                     --
                     select sum(fci.fci_importe)
                       into v_pago_ibc
                     from FacturaCompraItem fci
                     join Producto pr
                       on fci.pr_id = pr.pr_id
                     where fci.fc_id = v_fc_id
                       and pr.ibc_id = v_ibc_id;

                     v_pago_ibc := coalesce(v_pago_ibc, 0);

                     select fc_descuento1,
                            fc_descuento2
                       into v_desc1,
                            v_desc2
                     from FacturaCompra
                     where fc_id = v_fc_id;

                     v_pago_ibc := v_pago_ibc - (v_pago_ibc * v_desc1 / 100) - ((v_pago_ibc * v_desc1 / 100) * v_desc2 / 100);

                     select coalesce(sum(fcopg_importe), 0)
                       into v_ya_pagado
                     from FacturaCompraOrdenPago
                     where fc_id = v_fc_id;

                     select coalesce(v_ya_pagado, 0) + coalesce(sum(fcnc_importe), 0)
                       into v_ya_pagado
                     from FacturaCompraNotaCredito
                     where fc_id_factura = v_fc_id;

                     -- le tengo que sacar a ya_pagado el % de las retenciones ya pagadas
                     --
                     select v_ya_pagado - v_ya_pagado * (fc_totalpercepciones / fc_total)
                       into v_ya_pagado
                     from FacturaCompra
                     where fc_id = v_fc_id;

                     v_pago_ibc := v_pago_ibc - coalesce(v_ya_pagado, 0);

                     if v_pago_ibc > 0 then

                        insert into tt_nuevoPago ( fc_numero, pago ) values ( to_number(v_txt), v_pago_ibc );

                     end if;

                  end if;

               end if;

            else

               if instr(v_txt, '-') <> 0 then

                  v_fc_numero := to_number(substr(v_txt, 1, instr(v_txt, '-') - 1));
                  v_pagoParcial := cast(substr(v_txt, instr(v_txt, '-') || 1, length(v_txt)) as decimal(18,6));

                  select fc_id
                    into v_fc_id
                  from FacturaCompra
                  where fc_numero = v_fc_numero;

                  -- esto no me gusta, pero no lo vamos a tocar por ahora.
                  --
                  -- supuestamente es para notas de debito por cheque rechazado
                  -- pero no estoy muy conforme con esta solucion,
                  -- ya que si la factura contiene varios items y uno solo es
                  -- exento de retenciones, no la tomo en cuenta en su totalidad
                  -- y eso no esta bien.
                  --
                  -- ademas, ibc es ingresos brutos categoria, y lo estamos usando
                  -- para las retenciones de ganancias, asi que no esta para nada
                  -- prolijo, ya veremos si lo cambiamos
                  --
                  if not exists ( select *
                                  from FacturaCompraItem fci
                                  join Producto pr
                                    on fci.pr_id = pr.pr_id
                                  where pr.ibc_id = 1-- Exento
                                    and fci.fc_id = v_fc_id ) then

                     -- si ibc_id es null no hay problema
                     --
                     if v_ibc_id is null then

                        insert into tt_nuevoPago ( fc_numero, pago, esparcial )
                                          values ( v_fc_numero, v_pagoParcial, 1 );

                     else

                        -- si la factura tiene items con ibc_id = @ibc_id y
                        -- tengo que asegurarme que no tenga otros items
                        -- con ibc_id <> @ibc_id
                        --
                        if exists ( select *
                                    from FacturaCompraItem fci
                                    join Producto pr
                                      on fci.pr_id = pr.pr_id
                                    where fci.fc_id = v_fc_id
                                      and pr.ibc_id = v_ibc_id ) then

                           -- como dije antes, verifico que no exista mezcla de
                           -- categorias de ingresos brutos en la factura
                           --
                           if exists ( select *
                                       from FacturaCompraItem fci
                                       join Producto pr
                                         on fci.pr_id = pr.pr_id
                                       where fci.fc_id = v_fc_id
                                         and pr.ibc_id <> v_ibc_id ) then

                              -- se pudrio todo, yo no se como resolver esto asi que se lo dejo al usuario
                              --
                              /*+'(sepa disculpar la ignorancia de nuestros programadores :)'*/
                              v_error_msg_aux := '@@ERROR_SP:Esta orden de pago esta cancelando '
                                                 || 'una factura que incluye productos con diferentes '
                                                 || 'categorias de ingresos brutos (Gravado Cosas Muebles, '
                                                 || 'Gravado Servicios, etc.), con un pago parcial, y esta '
                                                 || 'combinanción no esta soportada por el algoritmo de '
                                                 || 'calculo de retenciones.'
                                                 || CHR(13) || CHR(13)
                                                 || 'Ud. debera realizar el calculo manualmente.';

                              raise exception '@@ERROR_SP: %', v_error_msg_aux;-- :) sefini

                              return;

                           else

                              -- tomo el pago parcial ya que aqui no ha pasado nada :)
                              --
                              insert into tt_nuevoPago ( fc_numero, pago, esparcial )
                                                values ( v_fc_numero, v_pagoParcial, 1 );

                           end if;

                        end if;

                     end if;

                  end if;

               end if;

            end if;

            -- por si no lo notaron, si la factura no tiene
            -- items con ibc_id = @ibc_id, no me interesa el pago
            -- que se le halla aplicado

      end loop;

      -- obtengo lo pagado sobre cada factura
      --
      update tt_nuevoPago
      set pago_base = case when pago <> 0 then pago else fc_pendiente end
      from FacturaCompra fc inner join Documento d on fc.doc_id = d.doc_id
      where prov_id = v_prov_id
        and d.emp_id = v_emp_id
        and tt_nuevoPago.fc_numero = fc.fc_numero;

      -- el pago segun la categoria de ingresos brutos
      --
      select sum(case when pago <> 0 then pago else fc.fc_pendiente end)
             into v_nuevoPago
      from FacturaCompra fc
      join Documento d
        on fc.doc_id = d.doc_id
      join tt_nuevoPago t
        on fc.fc_numero = t.fc_numero
      where fc.prov_id = v_prov_id
        and d.emp_id = v_emp_id;

      -- obtengo el iva de lo pagado sobre cada factura
      --
      update tt_nuevoPago
         set iva = case
                      when esparcial <> 0 then
                                          (fc_ivari  * (pago / fc_total))
                                        + (fc_ivarni * (pago / fc_total))
                      when pago <> 0 then
                                          (fc_ivari  * (pago / (fc_total-fc_totalpercepciones)))
                                        + (fc_ivarni * (pago / (fc_total-fc_totalpercepciones)))
                      else
                                          (fc_ivari  * (fc_pendiente / fc_total))
                                        + (fc_ivarni * (fc_pendiente / fc_total))
                      end
      from FacturaCompra fc inner join Documento d  on fc.doc_id    = d.doc_id
      where prov_id  = v_prov_id
        and d.emp_id = v_emp_id
      and tt_nuevoPago.fc_numero = fc.fc_numero;

      if v_tipoBase <> 3 then

         select sum(case
                       when esparcial <> 0 then (fc.fc_ivari * (pago / fc.fc_total))
                                              + (fc.fc_ivarni * (pago / fc.fc_total))

                       when pago <> 0      then (fc.fc_ivari * (pago / (fc.fc_total - fc.fc_totalpercepciones)))
                                              + (fc.fc_ivarni * (pago / (fc.fc_total - fc.fc_totalpercepciones)))

                       else                     (fc.fc_ivari * (fc.fc_pendiente / fc.fc_total))
                                              + (fc.fc_ivarni * (fc.fc_pendiente / fc.fc_total))
                    end)
         into v_nuevoPagoIva
         from FacturaCompra fc
         join Documento d
           on fc.doc_id = d.doc_id
         join tt_nuevoPago t
           on fc.fc_numero = t.fc_numero
         where fc.prov_id = v_prov_id
           and d.emp_id = v_emp_id;

      -- si la percepcion es sobre el total
      -- no le descuento el IVA
      --
      else

         v_nuevoPagoIva := 0;

      end if;

      -- obtengo las percepciones de lo pagado sobre cada factura
      --
      update tt_nuevoPago
         set percepcion = case
                            when esparcial <> 0 then (fcperc_importe  * (pago / fc_total))
                            when pago <> 0      then 0
                            else                     (fcperc_importe  * (fc_pendiente / fc_total))
                          end
      from FacturaCompra fc
      inner join Documento d
              on fc.doc_id = d.doc_id
      inner join FacturaCompraPercepcion fcp
              on fc.fc_id = fcp.fc_id
      where prov_id  = v_prov_id
        and d.emp_id = v_emp_id
      and tt_nuevoPago.fc_numero = fc.fc_numero;

      -- ahora la percepcion de lo que estoy pagando
      --
      v_percepcion := 0;

      select sum(case
                    when esparcial <> 0 then (fcp.fcperc_importe * (pago / fc.fc_total))
                    when pago <> 0      then 0
                    else                     (fcp.fcperc_importe * (fc.fc_pendiente / fc.fc_total))
                 end)
        into v_percepcion
      from FacturaCompra fc
      join Documento d
        on fc.doc_id = d.doc_id
      join tt_nuevoPago t
        on fc.fc_numero = t.fc_numero
      join FacturaCompraPercepcion fcp
        on fc.fc_id = fcp.fc_id
      where fc.prov_id = v_prov_id
        and d.emp_id = v_emp_id;

      v_percepcion := coalesce(v_percepcion, 0);

      if v_tipoBase <> 3 then

         update tt_nuevoPago set base = pago_base - iva - percepcion;

      else

         update tt_nuevoPago set base = pago_base - percepcion;

      end if;

      -- ahora obtengo el pago sin el iva ni las percepciones
      -- de lo que estoy por pagar
      --
      v_nuevoPago := coalesce(v_nuevoPago, 0) - coalesce(v_nuevoPagoIva, 0) - v_percepcion;

      --/////////////////////////////////////////////////////////////////////////////////////////////////////
      --
      --	otros datos de la retencion (base no imponible, minimo a retener, etc.)
      --
      --/////////////////////////////////////////////////////////////////////////////////////////////////////

      -- vamos por la base no imponible
      --
      -- si no tiene minimos
      --
      select min(reti_importedesde)
        into v_minimoImponible
      from RetencionItem
      where ret_id = v_ret_id;

      v_minimoImponible := coalesce(v_minimoImponible, 0);

      -- vamos por el minimo a retener
      --
      select ret_importeminimo
        into v_minimoRet
      from Retencion
      where ret_id = v_ret_id;

      select min(reti_importeDesde)
        into v_minimoDesde
      from RetencionItem
      where ret_id = v_ret_id;

      v_minimoDesde := coalesce(v_minimoDesde, 0);

      if not exists ( select *
                      from RetencionItem
                      where ret_id = v_ret_id
                        and reti_importefijo <> 0 ) then

         select reti_porcentaje / 100,
                reti_importeDesde,
                reti_importefijo
           into v_tasa,
                v_minimoTasa,
                v_montoFijo
         from RetencionItem
         where ret_id = v_ret_id
           and (v_opg_total + v_nuevoPago) between reti_importeDesde and reti_importeHasta;

      else

         select reti_porcentaje / 100,
                reti_importeDesde,
                reti_importefijo
           into v_tasa,
                v_minimoTasa,
                v_montoFijo
         from RetencionItem
         where ret_id = v_ret_id
           and (v_opg_total + v_nuevoPago - v_minimoDesde) between reti_importeDesde and reti_importeHasta;

      end if;

      --/////////////////////////////////////////////////////////////////////////////////////////////////////
      --
      --	otros datos de la retencion (base no imponible, minimo a retener, etc.)
      --
      --/////////////////////////////////////////////////////////////////////////////////////////////////////


      -- ahora vemos si tiene que pagar y cuanto
      --
      if v_tipoMinimo = 1 then /* NoImponible */

         v_baseNoImponible := v_minimoImponible;

      else /* Imponible */

         v_baseNoImponible := 0;

      end if;

      -- si lo que se pago hasta ahora es mayor a la base (ej. > 12000)
      --
      if v_opg_total > v_baseNoImponible then

         -- si lo que se pago hasta ahora por la tasa no supera el minimo a retener (ej < 20)
         --
         if (v_opg_total - v_baseNoImponible) * v_tasa < v_minimoRet then

            -- la base imponible es el nuevo pago mas lo pagado anteriormente
            -- y que no sufrio retencion
            --
            v_base := v_opg_total + v_nuevoPago - v_baseNoImponible;

         -- la base es unicamente el nuevo pago
         --
         else

            v_base := v_nuevoPago;

         end if;

      else

         -- si lo que pague hasta ahora es menor a la base no imponible
         -- entonces la base imponible es lo que pague hasta ahora mas
         -- el nuevo pago
         --
         if v_opg_total + v_nuevoPago - v_baseNoImponible > 0 then

            v_base := v_opg_total + v_nuevoPago - v_baseNoImponible;

         end if;

      end if;

      v_base := coalesce(v_base, 0);

      if v_montoFijo <> 0 then

         v_ret := ((v_opg_total + v_nuevoPago - v_minimoTasa - v_minimoDesde) * v_tasa) + v_montoFijo;

         select sum(opgi.opgi_importe)
           into v_yaRetenido
         from OrdenPago opg
         join OrdenPagoItem opgi
           on opg.opg_id = opgi.opg_id
         where opg.prov_id = v_prov_id
           and opg.opg_fecha between p_fdesde and p_fhasta
           and opgi.ret_id = v_ret_id;

         v_yaRetenido := coalesce(v_yaRetenido, 0);

         v_ret := v_ret - v_yaRetenido;

      else

         v_ret := v_base * v_tasa;

      end if;

      --/////////////////////////////////////////////////////////////////////////////////////////////////////
      --
      --	validamos que la retencion pase el minimo
      --
      --/////////////////////////////////////////////////////////////////////////////////////////////////////

      v_ret := coalesce(v_ret, 0);

      if v_ret < 0 then

         v_ret := 0;

      end if;

      if v_ret < v_minimoRet and ( (v_opg_total - v_baseNoImponible) * v_tasa < v_minimoRet ) then

         v_ret := 0;

      end if;

   end if;

   --/////////////////////////////////////////////////////////////////////////////////////////////////////
   --
   --	fin calculo
   --
   --/////////////////////////////////////////////////////////////////////////////////////////////////////

   --/////////////////////////////////////////////////////////////////////////////////////////////////////
   --
   --	select de retorno
   --
   --/////////////////////////////////////////////////////////////////////////////////////////////////////

   -- si me llamo cairo desde el asistente de op para que calcule el monto
   --
   --
   if p_IsForOPG <> 0 then

      v_ret := coalesce(v_ret, 0);

      if v_ret > 0 then

         select ta_id
           into v_ta_id
         from Retencion
         where ret_id = v_ret_id;

         select sp_talonario_get_next_number(v_ta_id) into v_ta_nrodoc;

      end if;

      v_descrip := '';

      for v_fc_numero,v_fc_base in

          select fc_numero, base from tt_nuevoPago

      loop

            v_descrip := v_descrip
                         || 'FV:' || CAST(v_fc_numero as varchar)
                         || ' - ' || CAST(v_fc_base as varchar) || ',';

      end loop;

      open rtn for

         select v_ret retencion,
                v_tasa * 100 porcentaje,
                v_ta_nrodoc comprobante,
                v_base base;

   -- si me llamo un reporte para imprimir el comprobante de retencion
   --
   else

      select sp_doc_orden_pago_get_retencion_rpt(
                p_fdesde,
                p_fhasta,
                p_prov_id,
                p_emp_id,
                v_nuevoPago,
                v_opg_total,
                v_nuevoPago,
                v_base,
                v_tasa,
                v_ret)
      into rtn;

   end if;

   --/////////////////////////////////////////////////////////////////////////////////////////////////////
   --
   --
   --	se termino :)
   --
   --
   --/////////////////////////////////////////////////////////////////////////////////////////////////////

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_doc_orden_pago_get_retencion_rpt(p_fdesde date, p_fhasta date, p_prov_id integer, p_emp_id character varying, p_pago numeric, p_opg_total numeric, p_nuevopago numeric, p_base numeric, p_tasa numeric, p_ret numeric, OUT rtn refcursor)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
begin

   rtn := 'rtn';

   open rtn for
      select 0 orden,
             p_opg_total Pagado_sin_IVA,
             p_nuevoPago Nuevo_pago_sin_IVA,
             p_base Base_Imponible,
             p_tasa Tasa,
             p_ret Importe_a_retener,
             p_pago - p_ret Total_a_pagar,
             null fc_fecha,
             null fc_numero,
             null fc_nrodoc,
             null fc_total,
             null Pagado,
             null fc_pendiente,
             null fc_ivari,
             null fc_ivarni,
             null IVA_pagado,
             null IVA_pendiente,
             null opg_fecha,
             null opg_numero,
             null opg_nrodoc,
             null opg_total,
             null opg_pendiente

      union

      select 1 orden,
             null Pagado_sin_IVA,
             null Nuevo_pago_sin_IVA,
             null Base_Imponible,
             null Tasa,
             null Importe_a_retener,
             null Total_a_pagar,
             fc_fecha,
             fc.fc_numero,
             fc_nrodoc,
             fc_total,
             fc_total - fc_pendiente Pagado,
             null fc_pendiente,
             fc_ivari,
             fc_ivarni,
             fc_ivari - (fc_ivari * (fc_pendiente / fc_total)) + fc_ivarni - (fc_ivarni * (fc_pendiente / fc_total)) IVA_pagado,
             null IVA_pendiente,
             null opg_fecha,
             null opg_numero,
             null opg_nrodoc,
             null opg_total,
             null opg_pendiente

      from FacturaCompraOrdenPago fcopg
      join FacturaCompra fc
        on fcopg.fc_id = fc.fc_id
      join OrdenPago opg
        on fcopg.opg_id = opg.opg_id
      join Documento d
        on fc.doc_id = d.doc_id

      where opg_fecha between p_fdesde and p_fhasta
        and opg.prov_id = p_prov_id
        and d.emp_id = p_emp_id
        and not exists ( select *
                         from FacturaCompraItem fci
                         join Producto pr
                           on fci.pr_id = pr.pr_id
                         where pr.ibc_id = 1-- Exento
                           and fci.fc_id = fc.fc_id )
      union

      select 2 orden,
             null Pagado_sin_IVA,
             null Nuevo_pago_sin_IVA,
             null Base_Imponible,
             null Tasa,
             null Importe_a_retener,
             null Total_a_pagar,
             null fc_fecha,
             null fc_numero,
             null fc_nrodoc,
             null fc_total,
             null Pagado,
             null fc_pendiente,
             null fc_ivari,
             null fc_ivarni,
             null IVA_pagado,
             null IVA_pendiente,
             opg_fecha,
             opg_numero,
             opg_nrodoc,
             opg_total,
             opg_pendiente

      from OrdenPago c
      join Documento d
        on c.doc_id = d.doc_id

      where opg_fecha between p_fdesde and p_fhasta
        and prov_id = p_prov_id
        and d.emp_id = p_emp_id
        and opg_pendiente > 0-- Solo anticipos

      union

      select 3 orden,
             null Pagado_sin_IVA,
             null Nuevo_pago_sin_IVA,
             null Base_Imponible,
             null Tasa,
             null Importe_a_retener,
             null Total_a_pagar,
             fc_fecha,
             fc.fc_numero,
             fc_nrodoc,
             fc_total,
             fc_total - fc_pendiente Pagado,
             fc_pendiente,
             fc_ivari,
             fc_ivarni,
             null IVA_pagado,
             (fc_ivari * (fc_pendiente / fc_total)) + (fc_ivarni * (fc_pendiente / fc_total)) IVA_pendiente,
             null opg_fecha,
             null opg_numero,
             null opg_nrodoc,
             null opg_total,
             null opg_pendiente

      from FacturaCompra fc
      join Documento d
        on fc.doc_id = d.doc_id
      join tt_nuevoPago t
        on fc.fc_numero = t.fc_numero

      where prov_id = p_prov_id
        and d.emp_id = p_emp_id;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_doc_orden_pago_save(p_us_id integer, p_opgtmp_id integer, p_no_raise_error integer DEFAULT 0, p_fc_id integer DEFAULT NULL::integer)
 RETURNS SETOF row_result
 LANGUAGE plpgsql
AS $function$
declare
  rtn row_result;
  
  v_opg_id integer;
  v_opgi_id integer;
  v_is_new integer;
  v_orden smallint;
  v_opg_fecha date;
  v_prov_id integer;
  v_doc_id integer;
  v_doct_id integer;
  v_opg_nrodoc varchar(50);
  v_emp_id integer;

  v_opg_numero integer;
  v_opg_descrip varchar(5000);
  v_opg_neto decimal(18,6);
  v_opg_total decimal(18,6);
  v_opg_pendiente decimal(18,6);
  v_opg_cotizacion decimal(18,6);
  v_opg_otros decimal(18,6);
  v_opg_grabarAsiento smallint;

  v_est_id integer;
  v_suc_id integer;
  v_ta_id integer;
  v_ccos_id integer;
  v_lgj_id integer;
  v_creado date;
  v_modificado date;
  v_modifico integer;

  v_opgi_orden smallint;
  v_opgi_descrip varchar(5000);
  v_opgi_descuento varchar(100);
  v_opgi_neto decimal(18,6);
  v_opgi_importe decimal(18,6);
  v_opgi_importeorigen decimal(18,6);
  v_opgi_otroTipo smallint;
  v_opgi_porcRetencion decimal(18,6);
  v_opgi_fechaRetencion date;
  v_opgi_nroRetencion varchar(100);
  v_opgi_tipo smallint;

  v_cheq_id integer;
  v_cue_id integer;
  v_cle_id integer;
  v_chq_id integer;
  v_bco_id integer;
  v_mon_id integer;
  v_ret_id integer;
  v_fc_id_ret integer;

  v_cheq_numerodoc varchar(100);
  v_cheq_fechaCobro date;
  v_cheq_fechaVto date;
  v_tjcc_numero integer;
  v_tjcc_numerodoc varchar(100);

  v_opgiTMP_fechaVto date;
  v_opgiTMP_nroTarjeta varchar(50);
  v_opgiTMP_nroAutorizacion varchar(50);
  v_opgiTMP_titular varchar(255);
  v_opgiTCheques smallint;
  v_opgiTEfectivo smallint;
  v_opgiTTarjeta smallint;
  v_opgiTOtros smallint;
  v_opgiTCtaCte smallint;
  v_opgiTChequesT smallint;

  v_cheque_propio smallint;

  v_fc_id integer;
  v_fcd_id integer;
  v_doct_id_ncnd integer;
  v_fcopg_id integer;
  v_fcopg_importe decimal(18,6);
  v_fcd_pendiente decimal(18,6);
  v_fcp_id integer;
  v_fcopg_importeOrigen decimal(18,6);
  v_fcopg_cotizacion decimal(18,6);
  v_fcd_fecha date;

  v_pago decimal(18,6);
  v_pagoOrigen decimal(18,6);

  v_cfg_valor varchar(5000);

  v_success integer;
  v_error smallint;
  v_error_msg varchar;

  v_ta_propuesto smallint;
  v_ta_tipo smallint;
  v_ta_nrodoc varchar(100);
  v_ta_id_ret integer;

  v_as_id integer;

  dummyChar varchar;

begin

   -- si no existe chau
   --
   if not exists ( select opgTMP_id
               from OrdenPagoTMP
               where opgTMP_id = p_opgTMP_id ) then

      return query select * from result_failed();
      return;

   end if;

   select sp_cfg_getValor('Tesoreria-General', 'Exigir Centro Costo OPG') into v_cfg_valor;

   v_cfg_valor := coalesce(v_cfg_valor, '0');

   if to_number(v_cfg_valor) <> 0 then

      if exists ( select ccos_id
                  from OrdenPagoTMP
                  where ccos_id is null
                    and opgTMP_id = p_opgTMP_id ) then

         if exists ( select ccos_id
                     from OrdenPagoItemTMP
                     where ccos_id is null
                       and opgTMP_id = p_opgTMP_id
                       and opgi_tipo in ( 1,2,4,6 ) ) then

            raise exception '@@ERROR_SP:Debe indicar un centro de costo en cada item o un centro de costo en la cabecera del documento.';

         end if;
      end if;
   end if;

   v_error_msg := '';

   select opg_id,
          opg_fecha,
          prov_id,
          Documento.doc_id,
          doct_id,
          opg_nrodoc,
          emp_id
     into v_opg_id,
          v_opg_fecha,
          v_prov_id,
          v_doc_id,
          v_doct_id,
          v_opg_nrodoc,
          v_emp_id
   from OrdenPagoTMP
   join Documento
     on OrdenPagoTMP.doc_id = Documento.doc_id
   where opgTMP_id = p_opgTMP_id;

   v_opg_id := coalesce(v_opg_id, 0);

   v_opgiTCheques := 1;
   v_opgiTEfectivo := 2;
   v_opgiTTarjeta := 3;
   v_opgiTOtros := 4;
   v_opgiTCtaCte := 5;
   v_opgiTChequesT := 6;
   v_cheque_propio := 1;

   SET TRANSACTION READ WRITE;

/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                                        insert                                                                      //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/

   -- si es una nueva OrdenPago
   --
   if v_opg_id = 0 then

      -- este flag es para cuando grabe los items
      --
      v_is_new := -1;

      -- obtengo id y numero para la OrdenPago
      --
      select sp_dbGetNewId('OrdenPago', 'opg_id') into v_opg_id;
      select sp_dbGetNewId('OrdenPago', 'opg_numero') into v_opg_numero;

      select * from sp_talonario_get_propuesto(v_doc_id) into dummyChar, v_ta_propuesto, v_ta_id, v_ta_tipo;

      if v_ta_propuesto = 0 then

         if v_ta_tipo = 3 /* auto impresor */ then

            select sp_talonario_get_next_number(v_ta_id) into v_ta_nrodoc;

            -- con esto evitamos que dos tomen el mismo numero
            --
            perform sp_talonario_set(v_ta_id, v_ta_nrodoc);

            v_opg_nrodoc := v_ta_nrodoc;

         end if;

      end if;

      insert into OrdenPago( opg_id, opg_numero, opg_nrodoc, opg_descrip, opg_fecha, opg_neto, opg_otros, opg_total,
                             opg_cotizacion, opg_grabarAsiento, est_id, suc_id, prov_id, emp_id, doc_id, doct_id,
                             ccos_id, lgj_id, modifico )
           ( select v_opg_id,
                    v_opg_numero,
                    v_opg_nrodoc,
                    opg_descrip,
                    opg_fecha,
                    opg_neto,
                    opg_otros,
                    opg_total,
                    opg_cotizacion,
                    opg_grabarAsiento,
                    est_id,
                    suc_id,
                    prov_id,
                    v_emp_id,
                    doc_id,
                    v_doct_id,
                    ccos_id,
                    lgj_id,
                    modifico
             from OrdenPagoTMP
             where opgTMP_id = p_opgTMP_id );

      select opg_nrodoc
        into v_opg_nrodoc
      from OrdenPago
      where opg_id = v_opg_id;

/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                                        update                                                                      //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/
   else

      v_is_new := 0;

      select opg_id,
             opg_nrodoc,
             opg_descrip,
             opg_fecha,
             opg_neto,
             opg_otros,
             opg_total,
             opg_cotizacion,
             opg_grabarAsiento,
             est_id,
             suc_id,
             prov_id,
             ccos_id,
             lgj_id,
             modifico,
             modificado
        into v_opg_id,
             v_opg_nrodoc,
             v_opg_descrip,
             v_opg_fecha,
             v_opg_neto,
             v_opg_otros,
             v_opg_total,
             v_opg_cotizacion,
             v_opg_grabarAsiento,
             v_est_id,
             v_suc_id,
             v_prov_id,
             v_ccos_id,
             v_lgj_id,
             v_modifico,
             v_modificado
      from OrdenPagoTMP
      where opgTMP_id = p_opgTMP_id;


      update OrdenPago
         set opg_nrodoc = v_opg_nrodoc,
             opg_descrip = v_opg_descrip,
             opg_fecha = v_opg_fecha,
             opg_neto = v_opg_neto,
             opg_otros = v_opg_otros,
             opg_total = v_opg_total,
             opg_cotizacion = v_opg_cotizacion,
             opg_grabarAsiento = v_opg_grabarAsiento,
             est_id = v_est_id,
             suc_id = v_suc_id,
             prov_id = v_prov_id,
             doc_id = v_doc_id,
             doct_id = v_doct_id,
             ccos_id = v_ccos_id,
             lgj_id = v_lgj_id,
             modifico = v_modifico,
             modificado = v_modificado
      where opg_id = v_opg_id;

   end if;

/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                                        items                                                                       //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/

   -- recorro con un while que es mas rapido que un cursor. uso opgi_orden como puntero.
   --
   v_orden := 1;

   while exists(
                select opgi_orden
                from OrdenPagoItemTMP
                where opgTMP_id = p_opgTMP_id
                  and opgi_orden = v_orden
               )
   loop
      -- cargo todo el registro de OrdenPagos en variables
      --
      select opgi_id,
             opgi_orden,
             opgi_descrip,
             opgi_importe,
             opgi_importeorigen,
             ccos_id,
             opgi_otroTipo,
             opgi_porcRetencion,
             opgi_fechaRetencion,
             opgi_nroRetencion,
             opgi_tipo,
             chq_id,
             cheq_id,
             cue_id,
             bco_id,
             cle_id,
             opgiTMP_cheque,
             opgiTMP_fechaCobro,
             opgiTMP_fechaVto,
             opgiTMP_cupon,
             opgiTMP_fechaVto,
             opgiTMP_nroTarjeta,
             opgiTMP_autorizacion,
             opgiTMP_titular,
             mon_id,
             ret_id,
             fc_id_ret
        into v_opgi_id,
             v_opgi_orden,
             v_opgi_descrip,
             v_opgi_importe,
             v_opgi_importeorigen,
             v_ccos_id,
             v_opgi_otroTipo,
             v_opgi_porcRetencion,
             v_opgi_fechaRetencion,
             v_opgi_nroRetencion,
             v_opgi_tipo,
             v_chq_id,
             v_cheq_id,
             v_cue_id,
             v_bco_id,
             v_cle_id,
             v_cheq_numerodoc,
             v_cheq_fechaCobro,
             v_cheq_fechaVto,
             v_tjcc_numerodoc,
             v_opgiTMP_fechaVto,
             v_opgiTMP_nroTarjeta,
             v_opgiTMP_nroAutorizacion,
             v_opgiTMP_titular,
             v_mon_id,
             v_ret_id,
             v_fc_id_ret
      from OrdenPagoItemTMP
      where opgTMP_id = p_opgTMP_id
        and opgi_orden = v_orden;

         -- cheques
         --
      select sp_doc_op_mf_cheque_save(v_opgi_tipo,
                                      v_cheq_numerodoc,
                                      v_opgi_importe,
                                      v_opgi_importeOrigen,
                                      v_cheq_fechaCobro,
                                      v_cheq_fechaVto,
                                      v_opgi_descrip,
                                      v_chq_id,
                                      v_opg_id,
                                      null,
                                      null,
                                      v_cle_id,
                                      v_mon_id,
                                      v_prov_id,
                                      null)
      into v_cheq_id;

/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                                        insert                                                                      //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/

      -- si es un renglon nuevo o una OrdenPago nueva
      --
      if v_is_new <> 0 or v_opgi_id = 0 then

         select sp_dbGetNewId('OrdenPagoItem', 'opgi_id') into v_opgi_id;

         insert into OrdenPagoItem( opg_id, opgi_id, opgi_orden, opgi_descrip, opgi_importe, opgi_importeorigen,
                                    ccos_id, opgi_otroTipo, opgi_porcRetencion, opgi_fechaRetencion, opgi_nroRetencion,
                                    opgi_tipo, cheq_id, chq_id, cue_id, ret_id, fc_id_ret )
         values ( v_opg_id, v_opgi_id, v_opgi_orden, v_opgi_descrip, v_opgi_importe, v_opgi_importeorigen, v_ccos_id,
                  v_opgi_otroTipo, v_opgi_porcRetencion, v_opgi_fechaRetencion, v_opgi_nroRetencion, v_opgi_tipo,
                  v_cheq_id, v_chq_id, v_cue_id, v_ret_id, v_fc_id_ret );

         v_ta_id_ret := null;

         select ta_id
            into v_ta_id_ret
         from Retencion
         where ret_id = v_ret_id;

         if v_ta_id_ret is not null then

            perform sp_talonario_set(v_ta_id_ret, v_opgi_nroRetencion);

         end if;
/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                                        update                                                                      //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/
      else

         update OrdenPagoItem
            set opg_id = v_opg_id,
                opgi_orden = v_opgi_orden,
                opgi_descrip = v_opgi_descrip,
                opgi_importe = v_opgi_importe,
                opgi_importeorigen = v_opgi_importeorigen,
                ccos_id = v_ccos_id,
                opgi_otroTipo = v_opgi_otroTipo,
                opgi_porcRetencion = v_opgi_porcRetencion,
                opgi_fechaRetencion = v_opgi_fechaRetencion,
                opgi_nroRetencion = v_opgi_nroRetencion,
                opgi_tipo = v_opgi_tipo,
                chq_id = v_chq_id,
                cheq_id = v_cheq_id,
                cue_id = v_cue_id,
                ret_id = v_ret_id,
                fc_id_ret = v_fc_id_ret
         where opg_id = v_opg_id
           and opgi_id = v_opgi_id;

      end if;

      v_orden := v_orden + 1;

   end loop;


   -- cuenta en OrdenPagoItem para cheques propios
   --
   update OrdenPagoItem
       set cue_id = (select chq.cue_id
                     from Chequera chq inner join Cheque cheq
                       on chq.chq_id = cheq.chq_id
                     where cheq_id = OrdenPagoItem.cheq_id)

   where opgi_tipo = 1
     and exists (select 1
                 from Chequera chq inner join Cheque cheq
                   on chq.chq_id = cheq.chq_id
                 where cheq_id = OrdenPagoItem.cheq_id);

  for v_fcopg_id,v_fc_id,v_fcd_id,v_fcopg_importe,v_fcopg_importeOrigen,v_fcopg_cotizacion in
     select fcopg_id,
            fc_id,
            fcd_id,
            fcopg_importe,
            fcopg_importeOrigen,
            fcopg_cotizacion
     from FacturaCompraOrdenPagoTMP
     where opgTMP_id = p_opgTMP_id   
  loop

     -- este es el while de pago agrupado. abajo esta la explicacion
     --
     while v_fcopg_importe > 0
     loop
        
        -- obtengo el monto de la deuda
        --
        -- la OrdenPago permite cobrar sobre toda la deuda de la factura o sobre cada uno de sus vencimientos.
        -- esto complica un poco la cosa para el programador. Si en la info de aplicacion (registro de la tabla
        -- FacturaCompraOrdenPagoTMP no tengo un fcd_id (id del vencimiento), es por que se efectuo la OrdenPago
        -- sobre toda la deuda de la factura. Esto se entiende con un ejemplo:
        --        Supongamos una factura con vtos. 30, 60 y 90 dias. Tiene 3 vtos, pero el usuario decide
        --        aplicar sobre los tres agrupados un importe dado, para el ejemplo supongamos que los vtos
        --        son todos de 30 pesos o sea 90 pesos el total, y el usuario aplica 80 pesos. El sistema tiene
        --        que aplicar 30 al primer vto, 30 al segundo y 20 al tercero. Para poder hacer esto es que utiliza
        --        el while que esta arriba (while de pago agrupado).
        --
        -- observen el If, si no hay fcd_id tomo el primero con el select que ordena por fcd_fecha
        --
        if coalesce(v_fcd_id, 0) = 0 then

           select fcd_id,
                  fcd_pendiente
             into v_fcd_id,
                  v_fcd_pendiente
           from ( select fcd_id,
                         fcd_pendiente
                  from FacturaCompraDeuda
                  where fc_id = v_fc_id
                  order by fcd_fecha DESC ) t
                  limit 1;

        -- si hay info de deuda (fcd_id <> 0) todo es mas facil
        --
        else

           select fcd_pendiente
             into v_fcd_pendiente
           from FacturaCompraDeuda
           where fcd_id = v_fcd_id;

        end if;

        -- si el pago no cancela el pendiente
        --
        if v_fcd_pendiente - v_fcopg_importe >= 0.01 then

           -- no hay pago
           --
           v_fcp_id := null;
           v_pago := v_fcopg_importe;
           v_pagoOrigen := v_fcopg_importeOrigen;

        -- si el pago cancela la deuda cargo un nuevo pago
        -- y luego voy a borrar la deuda
        --
        else

           if coalesce(v_fcopg_cotizacion, 0) <> 0 then
              v_pagoOrigen := v_fcd_pendiente / v_fcopg_cotizacion;
           else
              v_pagoOrigen := 0;
           end if;

           -- acumulo en el pago toda la deuda para pasar de la tabla FacturaCompraDeuda a FacturaCompraPago
           -- ojo: uso la variable pago para acumular toda la deuda, pero despues de insertar el pago
           --      le asigno a esta variable solo el monto de deuda pendiente que cancele con este pago
           --
           v_pago := 0;

           select fcd_fecha,
                  fcd_pendiente
             into v_fcd_fecha,
                  v_pago
           from FacturaCompraDeuda
           where fcd_id = v_fcd_id;

           select v_pago + coalesce(sum(fcopg_importe), 0)
             into v_pago
           from FacturaCompraOrdenPago
           where fcd_id = v_fcd_id;

           select v_pago + coalesce(sum(fcnc_importe), 0)
             into v_pago
           from FacturaCompraNotaCredito
           where fcd_id_factura = v_fcd_id;

           select sp_dbGetNewId('FacturaCompraPago', 'fcp_id') into  v_fcp_id;

           insert into FacturaCompraPago( fcp_id, fcp_fecha, fcp_importe, fc_id )
           values ( v_fcp_id, v_fcd_fecha, v_pago, v_fc_id );

           -- como explique mas arriba:
           -- esta variable se usa para vincular el pago con la OrdenPago
           -- asi que la actualizo a la deuda que esta OrdenPago cancela
           --
           v_pago := v_fcd_pendiente;

        end if;

        -- si hay pago borro la/s deudas
        --
        if coalesce(v_fcp_id, 0) <> 0 then

           -- primero actualizo las referencias pasando de deuda a pago
           --
           update FacturaCompraOrdenPago
              set fcd_id = null,
                  fcp_id = v_fcp_id
           where fcd_id = v_fcd_id;

           update FacturaCompraNotaCredito
              set fcd_id_factura = null,
                  fcp_id_factura = v_fcp_id
           where fcd_id_factura = v_fcd_id;

           -- ahora si borro
           --
           delete from FacturaCompraDeuda
           where fc_id = v_fc_id
             and ( fcd_id = v_fcd_id or coalesce(v_fcd_id, 0) = 0 );

           -- no hay mas deuda
           --
           v_fcd_id := null;

        end if;

        -- finalmente grabo la vinculacion que puede estar asociada a una deuda o a un pago
        --
        select sp_dbGetNewId('FacturaCompraOrdenPago', 'fcopg_id') into v_fcopg_id;

        insert into FacturaCompraOrdenPago( fcopg_id, fcopg_importe, fcopg_importeOrigen, fcopg_cotizacion, fc_id,
                                            fcd_id, fcp_id, opg_id )
        values ( v_fcopg_id, v_pago, v_pagoOrigen, v_fcopg_cotizacion,
                 v_fc_id, v_fcd_id,     --> uno de estos dos es null
                 v_fcp_id, v_opg_id );  -->  "       "        "

        -- si no hay un pago actualizo la deuda decrementandola
        --
        if coalesce(v_fcp_id, 0) = 0 then

           update FacturaCompraDeuda
              set fcd_pendiente = fcd_pendiente - v_pago
           where fcd_id = v_fcd_id;

        end if;

        -- voy restando al pago el importe aplicado
        --
        v_fcopg_importe := v_fcopg_importe - v_pago;

     end loop;

  end loop;


/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                                        item's borrados                                                             //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/

   -- hay que borrar los items borrados de la ordenpago solo si esta no es nueva
   --
   if v_is_new = 0 then


      -- antes que nada voy a tener que desvincular los cheques de los
      -- asientoitem vinculados a esta OP
      --

      select as_id
        into v_as_id
      from OrdenPago
      where opg_id = v_opg_id;

      if v_as_id is not null then

         update AsientoItem
            set cheq_id = null
         where as_id = v_as_id;

      end if;

      -- hay tres situaciones a resolver con los cheques
      --
      -- 1- borrar los cheques propios emitidos por esta orden
      --
      -- 2- devolver a la cuenta mencionada en el ultimo
      --    movimiento de fondos que menciono al cheque
      --
      -- 3- devolver a documentos en cartera los cheques
      --    ingresados por una cobranza
      --
      insert into tt_cheques_a_borrar( cheq_id, opgi_id )
        ( select cheq_id,
                 opgi_id
          from OrdenPagoItem
          where opgi_id in ( select opgit.opgi_id
                             from OrdenPagoItemBorradoTMP opgit
                             where opgTMP_id = p_opgTMP_id )
            and cheq_id is not null );

      update OrdenPagoItem
         set cheq_id = null
      where opgi_id in ( select opgit.opgi_id
                         from OrdenPagoItemBorradoTMP opgit
                         where opgTMP_id = p_opgTMP_id );

      -- borro los cheques propios entregados al proveedor
      --
      delete from Cheque
      where opg_id = v_opg_id
        and chq_id is not null-- solo los cheques propios tienen chequera (chq_id)
        and mf_id is null-- no entraron por movimiento de fondos
        and exists ( select opgit.opgi_id
                     from OrdenPagoItemBorradoTMP opgit
                     join OrdenPagoItem opgi
                       on opgit.opgi_id = opgi.opgi_id
                     join tt_cheques_a_borrar b
                       on opgit.opgi_id = b.opgi_id
                     where opgit.opg_id = v_opg_id
                       and opgit.opgTMP_id = p_opgTMP_id
                       and Cheque.cheq_id = b.cheq_id );

      -- devuelvo a documentos en cartera los cheques de tercero y los desvinculo de esta orden de pago
      --
      update Cheque
         set cue_id = (select cue_id_debe
                       from MovimientoFondoItem
                       where cheq_id = Cheque.cheq_id
                         and mf_id = Cheque.mf_id),
             opg_id = null
      where exists(select cue_id_debe
                   from MovimientoFondoItem
                   where cheq_id = Cheque.cheq_id
                     and mf_id = Cheque.mf_id)
        and Cheque.opg_id = v_opg_id
        and exists ( select opgit.opgi_id
                     from OrdenPagoItemBorradoTMP opgit
                     join OrdenPagoItem opgi
                       on opgit.opgi_id = opgi.opgi_id
                     where opgit.opg_id = v_opg_id
                       and opgit.opgTMP_id = p_opgTMP_id
                       and Cheque.cheq_id = opgi.cheq_id );

      -- devuelvo a documentos en cartera los cheques de tercero y los desvinculo de esta orden de pago
      --
      update Cheque
         set cue_id = (select cue_id
                       from CobranzaItem
                       where cheq_id = Cheque.cheq_id),
             opg_id = null
      where exists(select cue_id
                   from CobranzaItem
                   where cheq_id = Cheque.cheq_id)
        and Cheque.opg_id = v_opg_id
        and mf_id is null
        and exists ( select opgit.opgi_id
                     from OrdenPagoItemBorradoTMP opgit
                     join OrdenPagoItem opgi
                       on opgit.opgi_id = opgi.opgi_id
                     where opgit.opg_id = v_opg_id
                       and opgit.opgTMP_id = p_opgTMP_id
                       and Cheque.cheq_id = opgi.cheq_id );

      -- finalmente borro los items
      --
      delete from OrdenPagoItem
      where exists ( select opgi_id
                     from OrdenPagoItemBorradoTMP
                     where opg_id = v_opg_id
                       and opgTMP_id = p_opgTMP_id
                       and opgi_id = OrdenPagoItem.opgi_id );

      -- chau temporal
      --
      delete from OrdenPagoItemBorradoTMP
      where opg_id = v_opg_id
        and opgTMP_id = p_opgTMP_id;

   end if;

/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                                        cheques                                                                     //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/

   -- valido que no use un cheque dos veces en una misma op
   --
   if exists ( select cheq_id
               from OrdenPagoItem
               where opg_id = v_opg_id
                 and cheq_id is not null
               group by cheq_id
               having count(*) > 1 ) then

      raise exception '@@ERROR_SP:Esta orden de pago menciona uno o varios cheques mas de una vez.';

   end if;


/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                                        temporales                                                                  //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/

   delete from FacturaCompraOrdenPagoTMP where opgTMP_id = p_opgTMP_id;
   delete from OrdenPagoItemTMP where opgTMP_id = p_opgTMP_id;
   delete from OrdenPagoTMP where opgTMP_id = p_opgTMP_id;

/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                                        pendiente                                                                   //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/

   select sum(fcopg_importe)
     into v_opg_pendiente
   from FacturaCompraOrdenPago
   where opg_id = v_opg_id;

   update OrdenPago
      set opg_pendiente = opg_total - coalesce(v_opg_pendiente, 0)
   where opg_id = v_opg_id;

   for v_fc_id in
      select distinct fc_id
      from FacturaCompraOrdenPago
      where opg_id = v_opg_id
   loop

      -- actualizo la deuda de la factura
      --
      perform sp_doc_factura_compra_set_pendiente(v_fc_id);

      -- estado
      --
      perform sp_doc_factura_compra_set_credito(v_fc_id);

      perform sp_doc_factura_compra_set_estado(v_fc_id);

      -- validaciones
      --
      -- estado
      --
      select * from sp_auditoria_estado_check_doc_fc(v_fc_id) into v_success, v_error_msg;

      -- si el documento no es valido
      --
      if coalesce(v_success, 0) = 0 then
         raise exception '%', v_error_msg;
      end if;

      -- vtos
      --
      select * from sp_auditoria_vto_check_doc_fc(v_fc_id) into v_success, v_error_msg;

      -- si el documento no es valido
      --
      if coalesce(v_success, 0) = 0 then
         raise exception '%', v_error_msg;
      end if;

      -- credito
      --
      select * from sp_auditoria_credito_check_doc_fc(v_fc_id) into v_success, v_error_msg;

      -- Si el documento no es valido
      if coalesce(v_success, 0) = 0 then
         raise exception '%', v_error_msg;
      end if;

   end loop;


/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                                        talonario                                                                   //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/
   select ta_id
     into v_ta_id
   from Documento
   where doc_id = v_doc_id;

   perform sp_talonario_set(v_ta_id, v_opg_nrodoc);

/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                                        estado                                                                      //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/
   perform sp_doc_orden_pago_set_credito(v_opg_id);

   perform sp_doc_orden_pago_set_estado(v_opg_id);

   perform sp_doc_orden_pago_cheque_set_credito(v_opg_id);

   select sp_cfg_getValor('Tesoreria-General', 'OrdenPago-Grabar Asiento') into v_cfg_valor;

   v_cfg_valor := coalesce(v_cfg_valor, '0');

   if to_number(v_cfg_valor) <> 0 then

      select * from sp_doc_orden_pago_asiento_save(v_opg_id, 0, p_fc_id) into v_error, v_error_msg;

      if v_error <> 0 then
         raise exception '%', v_error_msg;
      end if;

   else

      if not exists ( select opg_id
                      from OrdenPagoAsiento
                      where opg_id = v_opg_id ) then

         insert into OrdenPagoAsiento( opg_id, opg_fecha )
           ( select opg_id,
                    opg_fecha
             from OrdenPago
             where opg_grabarAsiento <> 0
               and opg_id = v_opg_id );

      end if;

   end if;

/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                                     validaciones al documento                                                      //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/
   -- estado
   --
   select * from sp_auditoria_estado_check_doc_opg(v_opg_id) into v_success, v_error_msg;

   -- si el documento no es valido
   --
   if coalesce(v_success, 0) = 0 then
      raise exception '%', v_error_msg;
   end if;

   -- totales
   --
   select * from sp_auditoria_totales_check_doc_opg(v_opg_id) into v_success, v_error_msg;

   -- si el documento no es valido
   --
   if coalesce(v_success, 0) = 0 then
      raise exception '%', v_error_msg;
   end if;

   -- credito
   --
   select * from sp_auditoria_credito_check_doc_opg(v_opg_id) into v_success, v_error_msg;

   -- si el documento no es valido
   --
   if coalesce(v_success, 0) = 0 then
      raise exception '%', v_error_msg;
   end if;

/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                                     historial de modificaciones                                                    //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/
   select modifico into v_modifico from OrdenPago where opg_id = v_opg_id;

   if v_is_new <> 0 then
      perform sp_historia_update(18005, v_opg_id, v_modifico, 1);
   else
      perform sp_historia_update(18005, v_opg_id, v_modifico, 3);
   end if;

/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                                     fin                                                                            //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/

   rtn.type := 'opg_id';
   rtn.id := v_opg_id;

   return next rtn;

exception
   when others then

      if p_no_raise_error = 0 then

         raise exception 'Ha ocurrido un error al grabar la Orden de Pago. sp_doc_orden_pago_save. %. %.',
                         sqlstate, sqlerrm;
      else

         v_error_msg := sqlerrm || '. sqlstate: ' || sqlstate;
         return query select result_error(v_error_msg);

      end if;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_doc_orden_pago_save_aplic(p_us_id integer, p_opgtmp_id integer, p_delete integer DEFAULT 1, OUT p_opg_id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
declare
   v_success integer;
   v_sys_error varchar := '';
   v_error_msg varchar(5000);
   v_fcopg_id integer;
   v_fcopg_importe decimal(18,6);
   v_fcopg_importeOrigen decimal(18,6);
   v_fcopg_cotizacion decimal(18,6);
   v_fcd_pendiente decimal(18,6);
   v_fcd_importe decimal(18,6);
   v_fcd_id integer;
   v_fcp_id integer;
   v_fc_id integer;
   v_pago decimal(18,6);
   v_aplic decimal(18,6);
   v_fcp_fecha date;
   v_fcd_fecha date;
   v_fcd_fecha2 date;
   v_opg_id integer;
   v_modifico integer;
   v_bSuccess smallint;
   v_orden smallint;
   v_opgi_id integer;
   v_opgi_orden smallint;
   v_opgi_importe decimal(18,6);
   v_opgi_importeorigen decimal(18,6);
   v_aplicOrigen decimal(18,6);
   v_total decimal(18,6);
   v_cotiz decimal(18,6);
   v_cue_id integer;
   v_cue_id_anticipo integer;
   v_mon_id integer;
   v_mon_default integer;
   v_opgiTCtaCte smallint;
   v_cue_acreedoresXCpra integer;
   v_error smallint;

   v_c_pagos varchar(4000);
   v_c_aplic varchar(4000);
begin

   select opg_id,
          modifico
     into v_opg_id,
          v_modifico
   from OrdenPagoTMP
   where opgTMP_id = p_opgTMP_id;

   ---------------------------------
   -- si no hay cobranza no hago nada
   --
   if v_opg_id is null then
      return;
   end if;

/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                                        validaciones a la aplicacion                                                //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/

   delete from FacturaCompraOrdenPagoTMP
   where opgTMP_id = p_opgTMP_id
     and fcd_id is null
     and fcp_id is null;

/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                                        aplicacion-previa                                                           //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/

/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                                        actualizo la deuda                                                          //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/

   create temporary table tt_FacturasCpra (fc_id integer not null) on commit drop;

   -- sumo a la deuda pendiente de las facturas aplicadas a esta OrdenPago
   -- los importe cancelados por la misma
   --
   if p_delete = 0 then -- (este if esta varias veces por que se dio prioridad a la legibilidad del codigo)

      -- inserto en #FacturasCpra solo las facturas mencionadas en la TMP
      --
      insert into tt_FacturasCpra
        ( fc_id )
        ( select distinct fc_id
          from FacturaCompraOrdenPagoTMP
          where opg_id = v_opg_id );

   else
      -- inserto en #FacturasCpra todas las facturas vinculadas con esta OrdenPago
      --
      insert into tt_FacturasCpra
        ( fc_id )
        ( select distinct fc_id
          from FacturaCompraOrdenPago
             where opg_id = v_opg_id );

   end if;

   SET TRANSACTION READ WRITE;

   -- tengo que eliminar la aplicacion anterior si es que existe
   --
   if exists ( select fcopg_id
               from FacturaCompraOrdenPago
               where opg_id = v_opg_id ) then
   /*
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
   //                                                                                                               //
   //                                        pagos                                                                  //
   //                                                                                                               //
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
   */
      -- tengo que convertir los pagos en deuda
      --
      -- el cursor tiene dos formas:
      --                             1- si se trata de una aplicacion desde factura de compra
      --                                solo se cargan las vinculaciones que estan en la tabla
      --                                temporal ya que una factura no modifica toda la aplicacion
      --                                de una orden de pago.
      --
      --               2- si se trata de una aplicacion desde ordenes de pago
      --                                se carga toda la aplicacion de la orden de pago en cuestion
      --
      if p_delete = 0 then

         v_c_pagos := 'select fcp.fc_id,
                              fcp.fcp_id,
                              fcp.fcp_fecha,
                              fcp.fcp_importe,
                              sum(fco.fcopg_importe)
                        from FacturaCompraOrdenPago fco
                        join FacturaCompraPago fcp
                          on fco.fcp_id = fcp.fcp_id
                        join FacturaCompraOrdenPagoTMP fcot
                          on fco.fcopg_id = fcot.fcopg_id
                        where fcot.opgTMP_id = $1
                        group by fcp.fc_id,fcp.fcp_id,fcp.fcp_fecha,fcp.fcp_importe';

      -- sumo todas las aplicaciones de esta
      -- OrdenPago sobre el pago para obtener
      -- el pendiente de la deuda
      --
      else

         v_c_pagos := 'select fcp.fc_id,
                              fcp.fcp_id,
                              fcp.fcp_fecha,
                              fcp.fcp_importe,
                              sum(fco.fcopg_importe)
                       from FacturaCompraOrdenPago fco
                       join FacturaCompraPago fcp
                         on fco.fcp_id = fcp.fcp_id
                       where fco.opg_id = v_opg_id
                       group by fcp.fc_id,fcp.fcp_id,fcp.fcp_fecha,fcp.fcp_importe';
      end if;

      -- sumo todas las aplicaciones de esta
      -- OrdenPago sobre el pago para obtener
      -- el pendiente de la deuda
      --
      for v_fc_id,v_fcp_id,v_fcp_fecha,v_fcd_importe,v_fcd_pendiente in
         execute v_c_pagos using p_opgTMP_id
      loop
         -- creo la deuda
         --
         select sp_dbGetNewId('FacturaCompraDeuda', 'fcd_id') into v_fcd_id;

         select sp_doc_get_fecha2(v_fcp_fecha, 0, null) into v_fcd_fecha2;

         insert into FacturaCompraDeuda
           ( fcd_id, fcd_fecha, fcd_fecha2, fcd_importe, fcd_pendiente, fc_id )
           values ( v_fcd_id, v_fcp_fecha, v_fcd_fecha2, v_fcd_importe, v_fcd_pendiente, v_fc_id );

         -- ahora que converti el pago en deuda borro las
         -- aplicaciones asociadas a este pago
         --
         if p_delete = 0 then
            delete from FacturaCompraOrdenPago
            where fcopg_id in ( select fcopg_id
                                from FacturaCompraOrdenPagoTMP
                                where opgTMP_id = p_opgTMP_id )
              and fcp_id = v_fcp_id;

            -- borro la aplicacion
            --
            delete from FacturaCompraOrdenPago
            where fcp_id is null
              and fcd_id is null
              and fc_id in ( select fc_id
                             from FacturaCompraOrdenPagoTMP
                             where opgTMP_id = p_opgTMP_id );
         else
            -- borro todas las aplicaciones que apuntaban al pago
            --
            delete from FacturaCompraOrdenPago
            where fcp_id = v_fcp_id
              and opg_id = v_opg_id;

         end if;

         -- actualizo todas las aplicaciones que no han sido modificadas por esta
         -- aplicacion y que apuntaban al pago para que apunten a la deuda
         --
         update FacturaCompraOrdenPago
            set fcd_id = v_fcd_id,
                fcp_id = null
         where fcp_id = v_fcp_id;

         -- actualizo las aplicaciones entre facturas y notas de credito
         --
         update FacturaCompraNotaCredito
            set fcd_id_factura = v_fcd_id,
                fcp_id_factura = null
         where fcp_id_factura = v_fcp_id;

         -- actualizo la nueva aplicacion para que pase de la deuda al pago
         --
         update FacturaCompraOrdenPagoTMP
            set fcd_id = v_fcd_id
         where fcp_id = v_fcp_id;

         -- borro el pago que acabo de convertir en deuda
         --
         delete from FacturaCompraPago where fcp_id = v_fcp_id;

      end loop;

   /*
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
   //                                                                                                               //
   //                                        actualizo la deuda                                                     //
   //                                                                                                               //
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
   */
      -- sumo a la deuda pendiente de las facturas aplicadas a esta OrdenPago
      -- los importe cancelados por la misma
      --
      -- el cursor tiene dos formas:
      --                             1- si se trata de una aplicacion desde factura de compra
      --                                solo se cargan las vinculaciones que estan en la tabla
      --                                temporal ya que una factura no modifica toda la aplicacion
      --                                de una OrdenPago.
      --
      --                             2- si se trata de una aplicacion desde OrdenPagos
      --                                se carga toda la aplicacion de la OrdenPago en cuestion
      --
      if p_delete = 0 then

         v_c_aplic := 'select fco.fcopg_id,
                              fco.fcd_id,
                              fco.fcopg_importe
                       from FacturaCompraOrdenPago fco
                       join FacturaCompraOrdenPagoTMP fcot
                         on fco.fcopg_id = fcot.fcopg_id
                       where fco.fcd_id is not null
                         and fcot.opgTMP_id = $1';


      else

         v_c_aplic := 'select fcopg_id,
                              fcd_id,
                              fcopg_importe
                       from FacturaCompraOrdenPago
                       where fcd_id is not null
                         and opg_id = v_opg_id';

      end if;


      for v_fcopg_id,v_fcd_id,v_fcopg_importe in
         execute v_c_aplic using p_opgTMP_id
      loop

         -- incremento la deuda
         --
         update FacturaCompraDeuda set fcd_pendiente = fcd_pendiente + v_fcopg_importe where fcd_id = v_fcd_id;

         -- borro la aplicacion
         --
         delete from FacturaCompraOrdenPago where fcopg_id = v_fcopg_id;

      end loop;

   end if;

   -- borro la aplicacion de esta OrdenPago
   -- solo si se trata de una aplicacion generada por una OrdenPago
   --
   if p_delete <> 0 then

      delete from FacturaCompraOrdenPago where opg_id = v_opg_id;

   end if;

   for v_fcopg_id,v_fc_id,v_fcd_id,v_fcopg_importe,v_fcopg_importeOrigen,v_fcopg_cotizacion in
      select fcopg_id,
             fc_id,
             fcd_id,
             fcopg_importe,
             fcopg_importeOrigen,
             fcopg_cotizacion
      from FacturaCompraOrdenPagoTMP
      where opgTMP_id = p_opgTMP_id
        and fcopg_importe <> 0
   loop

      -- este es el while de pago agrupado. Abajo esta la explicacion
      --
      while v_fcopg_importe > 0
      loop

         -- obtengo el monto de la deuda
         --
         -- la OrdenPago permite cobrar sobre toda la deuda de la factura o sobre cada uno de sus vencimientos.
         -- esto complica un poco la cosa para el programador. Si en la info de aplicacion (registro de la tabla
         -- FacturaCompraOrdenPagoTMP no tengo un fcd_id (id del vencimiento), es por que se efectuo la OrdenPago
         -- sobre toda la deuda de la factura. Esto se entiende con un ejemplo:
         --        Supongamos una factura con vtos. 30, 60 y 90 dias. Tiene 3 vtos, pero el usuario decide
         --        aplicar sobre los tres agrupados un importe dado, para el ejemplo supongamos que los vtos
         --        son todos de 30 pesos o sea 90 pesos el total, y el usuario aplica 80 pesos. El sistema tiene
         --        que aplicar 30 al primer vto, 30 al segundo y 20 al tercero. Para poder hacer esto es que utiliza
         --        el while que esta arriba (while de pago agrupado).
         --
         -- observen el If, si no hay fcd_id tomo el primero con el select que ordena por fcd_fecha
         --
         if coalesce(v_fcd_id, 0) = 0 then

            select *
              into v_fcd_id,
                   v_fcd_pendiente
            from ( select fcd_id,
                          fcd_pendiente
                   from FacturaCompraDeuda
                   where fc_id = v_fc_id
                   order by fcd_fecha DESC ) t
              LIMIT 1;


         -- si hay info de deuda (fcd_id <> 0) todo es mas facil
         --
         else

            select fcd_pendiente
              into v_fcd_pendiente
            from FacturaCompraDeuda
            where fcd_id = v_fcd_id;

         end if;

         -- si el pago no cancela el pendiente
         --
         if v_fcd_pendiente - v_fcopg_importe >= 0.01 then

            -- No hay pago
            v_fcp_id := null;

            v_aplic := v_fcopg_importe;


         -- si el pago cancela la deuda cargo un nuevo pago
         -- y luego voy a borrar la deuda
         --
         else

            -- acumulo en el pago toda la deuda para pasar de la tabla FacturaCompraDeuda a FacturaCompraPago
            --
            v_aplic := v_fcd_pendiente;

            v_pago := 0;

            select fcd_fecha,
                   fcd_pendiente
              into v_fcd_fecha,
                   v_pago
            from FacturaCompraDeuda
            where fcd_id = v_fcd_id;

            select v_pago + coalesce(sum(fcopg_importe), 0)
              into v_pago
            from FacturaCompraOrdenPago
            where fcd_id = v_fcd_id;

            select v_pago + coalesce(sum(fcnc_importe), 0)
              into v_pago
            from FacturaCompraNotaCredito
            where fcd_id_factura = v_fcd_id;

            select sp_dbGetNewId('FacturaCompraPago', 'fcp_id') into v_fcp_id;

            insert into FacturaCompraPago
              ( fcp_id, fcp_fecha, fcp_importe, fc_id )
              values ( v_fcp_id, v_fcd_fecha, v_pago, v_fc_id );

         end if;

         -- si hay pago borro la/s deudas
         --
         if coalesce(v_fcp_id, 0) <> 0 then

            -- primero actualizo las referencias pasando de deuda a pago
            --
            update FacturaCompraOrdenPago
               set fcd_id = null,
                   fcp_id = v_fcp_id
            where fcd_id = v_fcd_id;

            update FacturaCompraNotaCredito
               set fcd_id_factura = null,
                   fcp_id_factura = v_fcp_id
            where fcd_id_factura = v_fcd_id;

            -- ahora si borro
            --
            delete from FacturaCompraDeuda
            where fc_id = v_fc_id
              and ( fcd_id = v_fcd_id or coalesce(v_fcd_id, 0) = 0 );

            -- actualizo la nueva aplicacion para que pase de la deuda al pago
            --
            update FacturaCompraOrdenPagoTMP
               set fcp_id = v_fcp_id
            where fcd_id = v_fcd_id;

            -- no hay mas deuda
            --
            v_fcd_id := null;

         end if;

         -- finalmente grabo la vinculacion que puede estar asociada a una deuda o a un pago
         --
         select sp_dbGetNewId('FacturaCompraOrdenPago', 'fcopg_id') into v_fcopg_id;

         insert into FacturaCompraOrdenPago
                ( fcopg_id, fcopg_importe, fcopg_importeOrigen, fcopg_cotizacion, fc_id, fcd_id, fcp_id, opg_id )
         values ( v_fcopg_id, v_aplic, v_fcopg_importeOrigen, v_fcopg_cotizacion, v_fc_id,
                  v_fcd_id, --> uno de estos dos es null
                  v_fcp_id, -->  "       "        "
                  v_opg_id );

         -- si no hay un pago actualizo la deuda decrementandola
         --
         if coalesce(v_fcp_id, 0) = 0 then

            update FacturaCompraDeuda
               set fcd_pendiente = fcd_pendiente - v_aplic
            where fcd_id = v_fcd_id;

         end if;

         -- voy restando al pago el importe aplicado
         --
         v_fcopg_importe := v_fcopg_importe - v_aplic;

      end loop;

   end loop;

   -- si es una vinculacion por OrdenPago puede haber nuevas facturas
   --
   if p_delete <> 0 then

      -- completo la tabla de facturas con las nuevas aplicaciones
      --
      insert into tt_FacturasCpra
        ( fc_id )
        ( select distinct fc_id
          from FacturaCompraOrdenPagoTMP
          where opgTMP_id = p_opgTMP_id );

   end if;

   for v_fc_id in
      select distinct fc_id from tt_FacturasCpra
   loop

      -- actualizo la deuda de la factura
      --
      perform sp_doc_factura_compra_set_pendiente(v_fc_id);

      perform sp_doc_factura_compra_set_credito(v_fc_id);

      -- estado
      --
      perform sp_doc_factura_compra_set_estado(v_fc_id);

      --/////////////////////////////////////////////////////////////////////////////////////////////////
      --
      -- validaciones
      --
      --/////////////////////////////////////////////////////////////////////////////////////////////////

      -- estado
      --
      select * from sp_auditoria_estado_check_doc_fc(v_fc_id) into v_success, v_error_msg;
      if coalesce(v_success, 0) = 0 then
         raise exception '%', v_error_msg;
      end if;

      -- vtos
      --
      select * from sp_auditoria_vto_check_doc_fc(v_fc_id) into v_success, v_error_msg;
      if coalesce(v_success, 0) = 0 then
         raise exception '%', v_error_msg;
      end if;

      -- credito
      --
      select * from sp_auditoria_credito_check_doc_fc(v_fc_id) into v_success, v_error_msg;
      if coalesce(v_success, 0) = 0 then
         raise exception '%', v_error_msg;
      end if;

      --
      --/////////////////////////////////////////////////////////////////////////////////////////////////

   end loop;

   -- ahora el pendiente de la OrdenPago
   --
   perform sp_doc_orden_pago_set_pendiente(v_opg_id);

   -- estado
   --
   perform sp_doc_orden_pago_set_credito(v_opg_id);
   perform sp_doc_orden_pago_set_estado(v_opg_id);

   v_opgiTCtaCte := 5;

   -- guardo un id de cuenta para anticipos.
   -- esto funciona asi: si despues de aplicar queda plata pendiente
   --                    la asigno a la cuenta anticipo
   select cue_id
     into v_cue_id_anticipo
   from OrdenPagoItem
   where opg_id = v_opg_id
     and opgi_tipo = v_opgiTCtaCte
     and opgi_orden = ( select min(opgi_orden)
                        from OrdenPagoItem
                        where opg_id = v_opg_id
                          and opgi_tipo = v_opgiTCtaCte );

   -- borro la info de cuenta corriente para esta OrdenPago
   --
   delete from OrdenPagoItem
   where opg_id = v_opg_id
     and opgi_tipo = v_opgiTCtaCte;

   v_cue_acreedoresXCpra := 8;
   v_opgi_orden := 0;
   v_aplic := 0;

   for v_cue_id,v_opgi_importe,v_opgi_importeorigen in
      select c.cue_id,
             sum(fcopg.fcopg_importe),
             sum(fcopg.fcopg_importeOrigen)
      from FacturaCompraOrdenPago fcopg
      join FacturaCompra fc
        on fcopg.fc_id = fc.fc_id
      join AsientoItem asi
        on asi.as_id = fc.as_id
      join Cuenta c
        on asi.cue_id = c.cue_id
      where fcopg.opg_id = v_opg_id
        and asi.asi_haber <> 0
        and c.cuec_id = v_cue_acreedoresXCpra
      group by c.cue_id
   loop

      v_opgi_orden := v_opgi_orden + 1;

      -- creo un nuevo registro de OrdenPagoItem
      --
      select sp_dbGetNewId('OrdenPagoItem', 'opgi_id') into v_opgi_id;

      insert into OrdenPagoItem
             ( opg_id, opgi_id, opgi_orden, opgi_importe, opgi_importeorigen, opgi_tipo, cue_id )
      values ( v_opg_id, v_opgi_id, v_opgi_orden, v_opgi_importe, v_opgi_importeorigen, v_opgiTCtaCte, v_cue_id );

      v_aplic := v_aplic + v_opgi_importe;

   end loop;

   select opg_total,
          opg_cotizacion
     into v_total,
          v_cotiz
   from OrdenPago
   where opg_id = v_opg_id;

   v_total := coalesce(v_total, 0);
   v_aplic := coalesce(v_aplic, 0);
   v_cotiz := coalesce(v_cotiz, 0);

   if v_aplic < v_total then

      v_aplic := v_total - v_aplic;

      select mon_id
        into v_mon_id
      from Cuenta
      where cue_id = v_cue_id_anticipo;

      if exists ( select * from Moneda where mon_id = v_mon_id and mon_legal <> 0 ) then
         v_cotiz := 0;
      end if;

      if v_cotiz > 0 then
         v_aplicOrigen := v_aplic / v_cotiz;
      else
         v_aplicOrigen := 0;
      end if;

      v_opgi_orden := v_opgi_orden + 1;

      -- creo un nuevo registro de OrdenPago item
      --
      select sp_dbGetNewId('OrdenPagoItem', 'opgi_id') into v_opgi_id;

      insert into OrdenPagoItem
             ( opg_id, opgi_id, opgi_orden, opgi_importe, opgi_importeorigen, opgi_tipo, cue_id )
      values ( v_opg_id, v_opgi_id, v_opgi_orden, v_aplic, v_aplicOrigen, v_opgiTCtaCte, v_cue_id_anticipo );

   end if;

   select * from sp_doc_orden_pago_asiento_save(v_opg_id, 0) into v_error, v_error_msg;

/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                                     historial de modificaciones                                                    //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/

   perform sp_historia_update(18005, v_opg_id, v_modifico, 6);

/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                                        temporales                                                                  //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/

   delete from FacturaCompraOrdenPagoTMP where opgTMP_id = p_opgTMP_id;
   delete from OrdenPagoItemTMP where opgTMP_id = p_opgTMP_id;
   delete from OrdenPagoTMP where opgTMP_id = p_opgTMP_id;

   drop table tt_FacturasCpra;

   return;

exception
   when others then

     raise exception 'Ha ocurrido un error al grabar la aplicación de la Orden de Pago. sp_doc_orden_pago_save_aplic. %. %.',
                      sqlstate, sqlerrm;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_doc_pedido_venta_set_credito(p_pv_id integer, p_borrar integer DEFAULT 0)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
begin

   perform sp_doc_pedido_vta_set_credito_cairo(p_pv_id, p_borrar);

exception
   when others then

   raise exception 'Ha ocurrido un error al actualizar el estado de la orden de compra. sp_doc_pedido_venta_set_credito. %. %.',
                   sqlstate, sqlerrm;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_proveedor_get_dptos(p_prov_id integer, OUT rtn refcursor)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$

begin   

   rtn := 'rtn';

   open rtn for
      ----------------------------------------------------------------------------------------------
      select
             dptoprov_id,
             dptoprov.dpto_id,
             dpto_nombre
      from DepartamentoProveedor dptoprov
      inner join Departamento dpto on dptoprov.dpto_id = dpto.dpto_id
      where dptoprov.prov_id = p_prov_id;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_doc_orden_pago_set_credito(p_opg_id integer, p_borrar integer DEFAULT 0)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
declare
   v_pendiente decimal(18,6);
   v_prov_id integer;
   v_emp_id integer;

   v_doct_orden_pago integer := 16;

   v_old_prov_ids integer[];
   i integer;
begin

   -- Si no hay documento adios
   --
   if p_opg_id = 0 then
      return;
   end if;

   SET TRANSACTION READ WRITE;

   -- Datos del documento
   --
   select round(opg_pendiente, 2),
          prov_id,
          emp_id
     into v_pendiente,
          v_prov_id,
          v_emp_id
   from OrdenPago opg
   where opg_id = p_opg_id;

   -- Borrar referencias a este documento por otro proveedor
   --
   
   -- Siempre borro cualquier mencion a este documento en el cache de cualquier
   -- proveedor que no sea el indicado por el documento
   --
   if exists ( select prov_id
               from ProveedorCacheCredito
               where prov_id <> v_prov_id
                 and doct_id = v_doct_orden_pago
                 and id = p_opg_id ) then

        select into v_old_prov_ids prov_id
        from ProveedorCacheCredito
        where prov_id <> v_prov_id
         and doct_id = v_doct_orden_pago
         and id = p_opg_id;

        delete from ProveedorCacheCredito
        where prov_id <> v_prov_id
          and doct_id = v_doct_orden_pago
          and id = p_opg_id;

        for i in 1 .. array_upper(v_old_prov_ids, 1)
        loop

            perform sp_proveedor_update_credito(v_old_prov_ids[i], v_emp_id);

        end loop;

   end if;

   -- Borrar
   --
   if p_borrar <> 0 then

      delete from ProveedorCacheCredito
      where prov_id = v_prov_id
        and doct_id = v_doct_orden_pago
        and id = p_opg_id;

   -- Insert - Update
   --
   else

      if exists ( select id
                  from ProveedorCacheCredito
                  where prov_id = v_prov_id
                    and doct_id = v_doct_orden_pago
                    and id = p_opg_id ) then

         if abs(v_pendiente) >= 0.01 then

            update ProveedorCacheCredito
               set provcc_importe = v_pendiente
            where prov_id = v_prov_id
              and doct_id = v_doct_orden_pago
              and id = p_opg_id;

         -- Si no hay nada pendiente lo saco del cache
         else

            delete from ProveedorCacheCredito
            where prov_id = v_prov_id
              and doct_id = v_doct_orden_pago
              and id = p_opg_id;

         end if;

      else
         -- Solo si hay algo pendiente
         if abs(v_pendiente) >= 0.01 then

            insert into ProveedorCacheCredito ( prov_id, doct_id, id, provcc_importe, emp_id )
                                       values ( v_prov_id, v_doct_orden_pago, p_opg_id, v_pendiente, v_emp_id );

         end if;

      end if;

   end if;

   -- Actualizo la deuda en la tabla Proveedor
   --
   perform sp_proveedor_update_credito(v_prov_id, v_emp_id);

   return;

exception
    when others then
        raise exception 'Ha ocurrido un error al actualizar el estado de la orden de pago. sp_doc_orden_pago_set_credito. %. %.',
                            sqlstate, sqlerrm;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_doc_orden_pago_set_estado(p_opg_id integer, OUT p_est_id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
declare
   v_est_id integer;
   v_prov_id integer;
   v_pendiente decimal(18,6);
   v_llevaFirma smallint;
   v_firmado smallint;
   v_doc_id integer;
   v_doc_llevafirma smallint;

   v_estado_pendiente integer := 1;
   v_estado_pendienteFirma integer := 4;
   v_estado_finalizado integer := 5;
   v_estado_anulado integer := 7;
begin

   if p_opg_id = 0 then
      return;
   end if;

   select prov_id,
          opg_firmado,
          est_id,
          round(opg_pendiente, 2),
          doc_id
     into v_prov_id,
          v_firmado,
          v_est_id,
          v_pendiente,
          v_doc_id
   from OrdenPago
   where opg_id = p_opg_id;

   select doc_llevafirma
     into v_doc_llevafirma
   from Documento
   where doc_id = v_doc_id;

   if v_est_id <> v_estado_anulado then

      -- si el documento requiere firma y el comprobante no esta firmado
      -- y no esta finalizado (puede ser que se finalizo y luego se modifico el documento
      -- para que requiera firma en cuyo caso no se exige firma para documentos finalizados)
      --
      if v_firmado = 0 and v_doc_llevafirma <> 0 and v_est_id <> v_estado_finalizado then

         v_est_id := v_estado_pendienteFirma;

      else

         -- si el comprobante no tiene pendiente se finaliza
         --
         if coalesce(v_pendiente, 0) <= 0 then

            v_est_id := v_estado_finalizado;

         else

            v_est_id := v_estado_pendiente;

         end if;

      end if;

      update OrdenPago
         set est_id = v_est_id
      where opg_id = p_opg_id;

   end if;

   p_est_id := v_est_id;

exception
   when others then

   raise exception 'Ha ocurrido un error al actualizar el estado de la orden de pago. sp_doc_orden_pago_set_estado. %. %.',
                   sqlstate, sqlerrm;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_doc_orden_pago_set_pendiente(p_opg_id integer)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
declare
   v_aplicado decimal(18,6);
begin

   SET TRANSACTION READ WRITE;

   select sum(fcopg_importe)
     into v_aplicado
   from FacturaCompraOrdenPago
   where opg_id = p_opg_id;

   v_aplicado := round(coalesce(v_aplicado, 0), 2);

   update OrdenPago set opg_pendiente = round(opg_total - v_aplicado, 2) where opg_id = p_opg_id;

   return;

exception
   when others then

      raise exception 'Ha ocurrido un error al actualizar el pendiente de la Orden de Pago. sp_doc_orden_pago_set_pendiente. %. %.',
                      sqlstate, sqlerrm;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_doc_pedido_venta_editable_get(p_emp_id integer, p_pv_id integer, p_us_id integer, p_no_anulado integer DEFAULT 0, p_delete integer DEFAULT 0, OUT p_editable integer, OUT p_edit_msg character varying)
 RETURNS record
 LANGUAGE plpgsql
AS $function$
declare
   v_doc_id integer;
   v_pv_fecha date;
   v_estado integer;
   v_anulado integer;
   v_firmado integer;
   v_emp_id integer;
   v_emp_nombre varchar(255);
   v_impreso smallint;

   v_csPrePVEditPedidoVta integer;
   v_csPrePVDeletePedidoVta integer;

   v_pre_id integer;
   v_doc_nombre varchar(255);
   v_fca_id integer;

   v_fca_fechaDesde date;
   v_fca_fechaHasta date;

   v_doc_editarimpresos smallint;
begin

   v_anulado := 7;

   v_csPrePVEditPedidoVta := 3001;

   v_csPrePVDeletePedidoVta := 3002;

   if p_pv_id <> 0 then

      select d.doc_id,
             c.emp_id,
             c.pv_fecha,
             c.est_id,
             c.impreso
        into v_doc_id,
             v_emp_id,
             v_pv_fecha,
             v_estado,
             v_impreso
      from PedidoVenta c
             join Documento d
              on c.doc_id = d.doc_id
      where c.pv_id = p_pv_id;

      if p_emp_id <> v_emp_id then

         select emp_nombre
           into v_emp_nombre
         from Empresa
         where emp_id = v_emp_id;

         p_editable := 0;

         if p_delete = 0 then
            p_edit_msg := 'El comprobante pertenece a la empresa ' || v_emp_nombre || ', para editarlo debe ingresar al sistema indicando dicha empresa.';
         else
            p_edit_msg := 'El comprobante pertenece a la empresa ' || v_emp_nombre || ', para borrarlo debe ingresar al sistema indicando dicha empresa.';
         end if;

         return;

      end if;

      if v_estado = v_anulado and p_no_anulado = 0 then

         p_editable := 0;
         p_edit_msg := 'El comprobante esta anulado';

         return;

      end if;

      if p_delete = 0 then
         v_pre_id := v_csPrePVEditPedidoVta;
      else
         v_pre_id := v_csPrePVDeletePedidoVta;
      end if;

      -- Tiene permiso para editar pedidos de venta
      --
      if not exists ( select per_id
                      from Permiso
                      where pre_id = v_pre_id
                        and ( ( us_id = p_us_id )
                             or exists ( select us_id
                                         from UsuarioRol
                                         where us_id = p_us_id
                                           and rol_id = Permiso.rol_id))) then
         p_editable := 0;

         if p_delete = 0 then
            p_edit_msg := 'Usted no tiene permiso para editar pedidos de venta';
         else
            p_edit_msg := 'Usted no tiene permiso para borrar pedidos de venta';
         end if;

         return;

      end if;

      v_pre_id := null;

      select case
               when p_delete = 0 then pre_id_edit
               else pre_id_delete
             end,
             doc_nombre
        into v_pre_id,
             v_doc_nombre
      from Documento
      where doc_id = v_doc_id;

      if not exists ( select per_id
                             from Permiso
                             where pre_id = v_pre_id
                               and ( ( us_id = p_us_id )
                                      or exists ( select us_id
                                                  from UsuarioRol
                                                  where us_id = p_us_id
                                                    and rol_id = Permiso.rol_id))) then
         p_editable := 0;

         if p_delete = 0 then
            p_edit_msg := 'Usted no tiene permiso para editar ' || v_doc_nombre;
         else
            p_edit_msg := 'Usted no tiene permiso para borrar ' || v_doc_nombre;
         end if;

         return;

      end if;

      -- Fechas de control de Acceso
      select fca_id
        into v_fca_id
      from Documento
      where doc_id = v_doc_id;

      if not v_fca_id is null then

         if not exists ( select fca_id
                         from FechaControlAcceso
                         where fca_id = v_fca_id
                           and v_pv_fecha between fca_fechaDesde and fca_fechaHasta ) then

            select fca_fechaDesde,
                   fca_fechaHasta
              into v_fca_fechaDesde,
                   v_fca_fechaHasta
            from FechaControlAcceso
            where fca_id = v_fca_id;

            p_editable := 0;

            p_edit_msg := 'La fecha del comprobante esta fuera del intervalo definido por las fechas de control de acceso (' || CAST(coalesce(v_fca_fechaDesde, '') as varchar(20)) || ' - ' || CAST(coalesce(v_fca_fechaHasta, '') as varchar(20)) || ')';

            return;

         end if;

      end if;

      if exists ( select pvi.pv_id
                  from PresupuestoPedidoVenta f
                  join PedidoVentaItem pvi
                    on f.pvi_id = pvi.pvi_id
                  where pvi.pv_id = p_pv_id ) then

         p_editable := 0;
         p_edit_msg := 'El comprobante esta vinculado a un presupuesto';

         return;

      end if;

      if exists ( select pvi.pv_id
                  from PedidoFacturaVenta f
                  join PedidoVentaItem pvi
                    on f.pvi_id = pvi.pvi_id
                  where pvi.pv_id = p_pv_id ) then

         p_editable := 0;
         p_edit_msg := 'El comprobante esta vinculado a una factura';

         return;

      end if;

      if exists ( select pvi.pv_id
                  from PedidoRemitoVenta r
                  join PedidoVentaItem pvi
                    on r.pvi_id = pvi.pvi_id
                  where pvi.pv_id = p_pv_id ) then

         p_editable := 0;
         p_edit_msg := 'El comprobante esta vinculado a un remito';

         return;

      end if;

      if exists ( select *
                  from PedidoDevolucionVenta p
                  join PedidoVentaItem pvi
                    on p.pvi_id_pedido = pvi.pvi_id
                        or p.pvi_id_devolucion = pvi.pvi_id
                  where pvi.pv_id = p_pv_id ) then

         p_editable := 0;
         p_edit_msg := 'El comprobante esta vinculado a una devolución';

         return;

      end if;

      if v_impreso <> 0 and p_no_anulado = 0 then

         select doc_editarimpresos
           into v_doc_editarimpresos
         from Documento
         where doc_id = v_doc_id;

         if v_doc_editarimpresos = 0 then

            p_editable := 0;

            if p_delete = 0 then
               p_edit_msg := 'El comprobante esta impreso y la definición de su documento no permite la edición de comprobantes impresos.';
            else
               p_edit_msg := 'El comprobante esta impreso y la definición de su documento no permite eliminar comprobantes impresos.';
            end if;

            return;

         end if;

      end if;

   end if;

   p_editable := 1;
   p_edit_msg := '';

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_doc_pedido_venta_get(p_emp_id integer, p_pv_id integer, p_us_id integer, OUT rtn refcursor)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
declare
   v_editable integer;
   v_edit_msg varchar(255);
   v_doc_id integer;
   v_ta_mascara varchar(100);
   v_ta_propuesto smallint;
   v_bIvari smallint;
   v_bIvarni smallint;
   v_cli_id integer;
   v_ram_id_stock varchar(50);
   v_RamaStock varchar(50);
   v_ram_id integer;
begin

   rtn := 'rtn';

/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                             TALONARIO Y ESTADO DE EDICION                                                          //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/
   select cli_id,
          doc_id
   into v_cli_id,
          v_doc_id
   from PedidoVenta
   where pv_id = p_pv_id;

   select * from sp_talonario_get_propuesto(v_doc_id, v_cli_id, 0) into  v_ta_mascara, v_ta_propuesto;

   select * from sp_cliente_get_iva(v_cli_id) into v_bIvari, v_bIvarni;

   select * from sp_doc_pedido_venta_editable_get(p_emp_id, p_pv_id, p_us_id) into v_editable, v_edit_msg;


   select ram_id_stock
     into v_ram_id_stock
   from PedidoVenta
   where pv_id = p_pv_id;

   if coalesce(v_ram_id_stock, '') <> '' then
      if substr(v_ram_id_stock, 1, 1) = 'N' then
         v_ram_id := CAST(substr(v_ram_id_stock, 2, 50) as integer);

         select ram_nombre
           into v_RamaStock
         from Rama
         where ram_id = v_ram_id;

      else
         if isnumeric(v_ram_id_stock) <> 0 then
            select depl_nombre
              into v_RamaStock
            from DepositoLogico
            where depl_id = CAST(v_ram_id_stock as integer);

         end if;
      end if;
   end if;

   v_RamaStock := coalesce(v_RamaStock, '');

/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                             select                                                                                 //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/
   open rtn for

      select pv.*,
             doct_nombre,
             doc.mon_id,
             mon_nombre,

             case 
               when doc_pv_desde_prv <> 0 then 1 
               else 0 
             end doc_tipopedido,
             
             v_RamaStock RamaStock,
             cli_nombre,
             lp_nombre,
             ld_nombre,
             cpg_nombre,
             est_nombre,
             ccos_nombre,
             suc_nombre,
             doc_nombre,
             ven_nombre,

             case
               when lgj_titulo <> '' then lgj_titulo
               else lgj_codigo
             end lgj_codigo,

             pOrigen.pro_nombre  ProOrigen,
             pDestino.pro_nombre ProDestino,

             trans_nombre,
             chof.chof_nombre,
             cam.cam_patente,

             case semi.cam_essemi
                when 0 then semi.cam_patentesemi
                else semi.cam_patente
             end cam_patentesemi,

             clis_nombre,

             v_bIvari    bIvaRi,
             v_bIvarni   bIvaRni,

             v_editable  editable,
             v_edit_msg  editMsg,

             v_ta_propuesto ta_propuesto,
             v_ta_mascara   ta_mascara

      from PedidoVenta pv
             join Documento doc
              on pv.doc_id = doc.doc_id
             join DocumentoTipo
              on pv.doct_id = DocumentoTipo.doct_id
             join Moneda mon
              on doc.mon_id = mon.mon_id
             join CondicionPago
              on pv.cpg_id = CondicionPago.cpg_id
             join Estado
              on pv.est_id = Estado.est_id
             join Sucursal
              on pv.suc_id = Sucursal.suc_id
             join Cliente
              on pv.cli_id = Cliente.cli_id
             left join CentroCosto
              on pv.ccos_id = CentroCosto.ccos_id
             left join ListaPrecio
              on pv.lp_id = ListaPrecio.lp_id
             left join ListaDescuento
              on pv.ld_id = ListaDescuento.ld_id
             left join Vendedor
              on pv.ven_id = Vendedor.ven_id
             left join Legajo
              on pv.lgj_id = Legajo.lgj_id
             left join Provincia pOrigen
              on pv.pro_id_origen = pOrigen.pro_id
             left join Provincia pDestino
              on pv.pro_id_destino = pDestino.pro_id
             left join Transporte
              on pv.trans_id = Transporte.trans_id
             left join Chofer chof
              on pv.chof_id = chof.chof_id
             left join Camion cam
              on pv.cam_id = cam.cam_id
             left join Camion semi
              on pv.cam_id_semi = semi.cam_id
             left join ClienteSucursal
              on pv.clis_id = ClienteSucursal.clis_id
       where pv_id = p_pv_id;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_doc_pedido_venta_get_deuda_cliente(p_cli_id integer, OUT p_deuda numeric, OUT p_deudadoc numeric)
 RETURNS record
 LANGUAGE plpgsql
AS $function$
begin

   select sum(clicc_importe)
     into p_deuda
   from ClienteCacheCredito
   where cli_id = p_cli_id
     and doct_id <> 1013;

   select sum(clicc_importe)
     into p_deudadoc
   from ClienteCacheCredito
   where cli_id = p_cli_id
     and doct_id = 1013;

   p_deuda := coalesce(p_deuda, 0);
   p_deudadoc := coalesce(p_deudadoc, 0);

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_doc_pedido_venta_get_items(p_pv_id integer, OUT rtn refcursor)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
begin

   rtn := 'rtn';

   open rtn for
      select PedidoVentaItem.*,
             pr_nombreventa,
             tri.ti_porcentaje iva_ri_porcentaje,
             trni.ti_porcentaje iva_rni_porcentaje,
             ccos.ccos_nombre,
             un_nombre
      from PedidoVentaItem
      join Producto
        on PedidoVentaItem.pr_id = Producto.pr_id
      join Unidad
        on Producto.un_id_venta = Unidad.un_id
      left join TasaImpositiva tri
        on Producto.ti_id_ivariventa = tri.ti_id
      left join TasaImpositiva trni
        on Producto.ti_id_ivarniventa = trni.ti_id
      left join CentroCosto ccos
        on PedidoVentaItem.ccos_id = ccos.ccos_id
      where pv_id = p_pv_id
      order by pvi_orden;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_doc_pedido_venta_save(p_us_id integer, p_pvtmp_id integer)
 RETURNS SETOF row_result
 LANGUAGE plpgsql
AS $function$
declare
   rtn row_result;

   v_success integer;
   v_error integer;
   v_error_msg varchar(5000);
   v_cfg_valor varchar(5000);
   v_doc_llevafirmacredito smallint;
   
   v_is_new integer;

   v_pv_id integer;
   v_pvi_id integer;
   
   v_orden smallint;
   v_doct_id integer;
   
   v_emp_id integer;
   v_doc_id integer;
   v_est_id integer;
   v_suc_id integer;
   v_cli_id integer;
   v_ta_id integer;
   v_lp_id integer;
   v_ld_id integer;
   v_cpg_id integer;
   v_ccos_id integer;
   v_lgj_id integer;
   v_ven_id integer;
   v_pro_id_origen integer;
   v_pro_id_destino integer;
   v_trans_id integer;
   v_chof_id integer;
   v_cam_id integer;
   v_cam_id_semi integer;
   v_clis_id integer;

   v_pv_nrodoc varchar(50);
   v_pv_numero integer;
   v_pv_descrip varchar(5000);
   v_pv_fecha date;
   v_pv_fechaentrega date;
   v_pv_neto decimal(18,6);
   v_pv_ivari decimal(18,6);
   v_pv_ivarni decimal(18,6);
   v_pv_total decimal(18,6);
   v_pv_subtotal decimal(18,6);
   v_pv_descuento1 decimal(18,6);
   v_pv_descuento2 decimal(18,6);
   v_pv_importedesc1 decimal(18,6);
   v_pv_importedesc2 decimal(18,6);
   v_pv_destinatario varchar(1000);
   v_pv_ordencompra varchar(255);
   v_ram_id_stock varchar(50);
   
   v_creado date;
   v_modificado date;
   v_modifico integer;
      
   v_pvi_orden smallint;
   v_pvi_cantidad decimal(18,6);
   v_pvi_cantidadaremitir decimal(18,6);
   v_pvi_pendiente decimal(18,6);
   v_pvi_pendientepklst decimal(18,6);
   v_pvi_descrip varchar(5000);
   v_pvi_precio decimal(18,6);
   v_pvi_precioUsr decimal(18,6);
   v_pvi_precioLista decimal(18,6);
   v_pvi_descuento varchar(100);
   v_pvi_neto decimal(18,6);
   v_pvi_ivari decimal(18,6);
   v_pvi_ivarni decimal(18,6);
   v_pvi_ivariporc decimal(18,6);
   v_pvi_ivarniporc decimal(18,6);
   v_pvi_importe decimal(18,6);

   v_pr_id integer;

   v_ta_propuesto smallint;
   v_ta_tipo smallint;
   v_ta_nrodoc varchar(100);
   dummyChar varchar(255) := '';

begin

   -- si no existe chau
   --
   if not exists ( select pvTMP_id
                   from PedidoVentaTMP
                   where pvTMP_id = p_pvTMP_id ) then
      return query select * from result_failed();
      return;

   end if;

   v_error_msg := '';

   select pv_id,
          doct_id,
          Documento.doc_id,
          pv_nrodoc,
          emp_id
     into v_pv_id,
          v_doct_id,
          v_doc_id,
          v_pv_nrodoc,
          v_emp_id
   from PedidoVentaTMP
   join Documento
     on PedidoVentaTMP.doc_id = Documento.doc_id
   where pvTMP_id = p_pvTMP_id;

   v_pv_id := coalesce(v_pv_id, 0);   

   SET TRANSACTION READ WRITE;

/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                                        insert                                                                      //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/
   if v_pv_id = 0 then

      v_is_new := -1;

      select sp_dbGetNewId('PedidoVenta', 'pv_id') into v_pv_id;
      select sp_dbGetNewId('PedidoVenta', 'pv_numero') into v_pv_numero;

      select * from sp_talonario_get_propuesto(v_doc_id, v_cli_id, 0) into dummyChar, v_ta_propuesto, v_ta_id, v_ta_tipo;

      if v_ta_propuesto = 0 then
         if v_ta_tipo = 3 then /*Auto Impresor*/

            select sp_talonario_get_next_number(v_ta_id) into v_ta_nrodoc;

            -- con esto evitamos que dos tomen el mismo numero
            --
            perform sp_talonario_set(v_ta_id, v_ta_nrodoc);

            v_pv_nrodoc := v_ta_nrodoc;

         end if;
      end if;

      insert into pedidoventa
           ( pv_id, pv_numero, pv_nrodoc, pv_descrip, pv_fecha, pv_fechaentrega, pv_neto, pv_ivari, pv_ivarni,
             pv_total, pv_subtotal, pv_descuento1, pv_descuento2, pv_importedesc1, pv_importedesc2, pv_destinatario,
             pv_ordencompra, est_id, suc_id, cli_id, emp_id, doc_id, doct_id, ram_id_stock, lp_id, ld_id, cpg_id,
             ccos_id, lgj_id, ven_id, pro_id_origen, pro_id_destino, trans_id, chof_id, cam_id, cam_id_semi,
             clis_id, modifico )
           ( select v_pv_id,
                    v_pv_numero,
                    v_pv_nrodoc,
                    pv_descrip,
                    pv_fecha,
                    pv_fechaentrega,
                    pv_neto,
                    pv_ivari,
                    pv_ivarni,
                    pv_total,
                    pv_subtotal,
                    pv_descuento1,
                    pv_descuento2,
                    pv_importedesc1,
                    pv_importedesc2,
                    pv_destinatario,
                    pv_ordencompra,
                    est_id,
                    suc_id,
                    cli_id,
                    v_emp_id,
                    doc_id,
                    v_doct_id,
                    ram_id_stock,
                    lp_id,
                    ld_id,
                    cpg_id,
                    ccos_id,
                    lgj_id,
                    ven_id,
                    pro_id_origen,
                    pro_id_destino,
                    trans_id,
                    chof_id,
                    cam_id,
                    cam_id_semi,
                    clis_id,
                    modifico
             from PedidoVentaTMP
             where pvTMP_id = p_pvTMP_id );

/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                                        update                                                                      //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/
   else

      v_is_new := 0;

      select pv_id,
             pv_nrodoc,
             pv_descrip,
             pv_fecha,
             pv_fechaentrega,
             pv_neto,
             pv_ivari,
             pv_ivarni,
             pv_total,
             pv_descuento1,
             pv_descuento2,
             pv_subtotal,
             pv_importedesc1,
             pv_importedesc2,
             pv_destinatario,
             pv_ordencompra,
             est_id,
             suc_id,
             cli_id,
             doc_id,
             ram_id_stock,
             lp_id,
             ld_id,
             cpg_id,
             ccos_id,
             lgj_id,
             ven_id,
             pro_id_origen,
             pro_id_destino,
             trans_id,
             chof_id,
             cam_id,
             cam_id_semi,
             clis_id,
             modifico,
             modificado
        into v_pv_id,
             v_pv_nrodoc,
             v_pv_descrip,
             v_pv_fecha,
             v_pv_fechaentrega,
             v_pv_neto,
             v_pv_ivari,
             v_pv_ivarni,
             v_pv_total,
             v_pv_descuento1,
             v_pv_descuento2,
             v_pv_subtotal,
             v_pv_importedesc1,
             v_pv_importedesc2,
             v_pv_destinatario,
             v_pv_ordencompra,
             v_est_id,
             v_suc_id,
             v_cli_id,
             v_doc_id,
             v_ram_id_stock,
             v_lp_id,
             v_ld_id,
             v_cpg_id,
             v_ccos_id,
             v_lgj_id,
             v_ven_id,
             v_pro_id_origen,
             v_pro_id_destino,
             v_trans_id,
             v_chof_id,
             v_cam_id,
             v_cam_id_semi,
             v_clis_id,
             v_modifico,
             v_modificado
      from PedidoVentaTMP
      where pvTMP_id = p_pvTMP_id;

      update PedidoVenta
            set pv_nrodoc = v_pv_nrodoc,
                pv_descrip = v_pv_descrip,
                pv_fecha = v_pv_fecha,
                pv_fechaentrega = v_pv_fechaentrega,
                pv_neto = v_pv_neto,
                pv_ivari = v_pv_ivari,
                pv_ivarni = v_pv_ivarni,
                pv_total = v_pv_total,
                pv_descuento1 = v_pv_descuento1,
                pv_descuento2 = v_pv_descuento2,
                pv_subtotal = v_pv_subtotal,
                pv_importedesc1 = v_pv_importedesc1,
                pv_importedesc2 = v_pv_importedesc2,
                pv_destinatario = v_pv_destinatario,
                pv_ordencompra = v_pv_ordencompra,
                est_id = v_est_id,
                suc_id = v_suc_id,
                cli_id = v_cli_id,
                emp_id = v_emp_id,
                doc_id = v_doc_id,
                doct_id = v_doct_id,
                ram_id_stock = v_ram_id_stock,
                lp_id = v_lp_id,
                ld_id = v_ld_id,
                cpg_id = v_cpg_id,
                ccos_id = v_ccos_id,
                lgj_id = v_lgj_id,
                ven_id = v_ven_id,
                pro_id_origen = v_pro_id_origen,
                pro_id_destino = v_pro_id_destino,
                trans_id = v_trans_id,
                chof_id = v_chof_id,
                cam_id = v_cam_id,
                cam_id_semi = v_cam_id_semi,
                clis_id = v_clis_id,
                modifico = v_modifico,
                modificado = v_modificado,
                --
                -- firma (cuando se modifica se elimina la firma)
                --
                pv_firmado = 0
      where pv_id = v_pv_id;

   end if;

/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                                        items                                                                       //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/
   v_orden := 1;

   while exists(select 1 from PedidoVentaItemTMP where pvTMP_id = p_pvTMP_id and pvi_orden = v_orden)
   loop

      select pvi_id,
             pvi_orden,
             pvi_cantidad,
             pvi_cantidadaremitir,
             pvi_descrip,
             pvi_precio,
             pvi_precioUsr,
             pvi_precioLista,
             pvi_descuento,
             pvi_neto,
             pvi_ivari,
             pvi_ivarni,
             pvi_ivariporc,
             pvi_ivarniporc,
             pvi_importe,
             pr_id,
             ccos_id
        into v_pvi_id,
             v_pvi_orden,
             v_pvi_cantidad,
             v_pvi_cantidadaremitir,
             v_pvi_descrip,
             v_pvi_precio,
             v_pvi_precioUsr,
             v_pvi_precioLista,
             v_pvi_descuento,
             v_pvi_neto,
             v_pvi_ivari,
             v_pvi_ivarni,
             v_pvi_ivariporc,
             v_pvi_ivarniporc,
             v_pvi_importe,
             v_pr_id,
             v_ccos_id
        from PedidoVentaItemTMP
        where pvTMP_id = p_pvTMP_id
          and pvi_orden = v_orden;

         -- cuando se inserta se indica
         -- como cantidad a remitir la cantidad (por ahora)
         --
         v_pvi_cantidadaremitir := v_pvi_cantidad;

      if v_is_new <> 0 or v_pvi_id = 0 then

          -- cuando se inserta se toma la cantidad a remitir
          -- como el pendiente
          --
          v_pvi_pendiente := v_pvi_cantidadaremitir;

          v_pvi_pendientepklst := v_pvi_cantidadaremitir;

          select sp_dbGetNewId('PedidoVentaItem', 'pvi_id') into v_pvi_id;

          insert into pedidoventaItem
            ( pv_id, pvi_id, pvi_orden, pvi_cantidad, pvi_cantidadaremitir, pvi_pendiente, pvi_pendientepklst,
              pvi_descrip, pvi_precio, pvi_precioUsr, pvi_precioLista, pvi_descuento, pvi_neto, pvi_ivari, pvi_ivarni,
              pvi_ivariporc, pvi_ivarniporc, pvi_importe, pr_id, ccos_id )
          values ( v_pv_id, v_pvi_id, v_pvi_orden, v_pvi_cantidad, v_pvi_cantidadaremitir, v_pvi_pendiente,
                   v_pvi_pendientepklst, v_pvi_descrip, v_pvi_precio, v_pvi_precioUsr, v_pvi_precioLista,
                   v_pvi_descuento, v_pvi_neto, v_pvi_ivari, v_pvi_ivarni, v_pvi_ivariporc, v_pvi_ivarniporc,
                   v_pvi_importe, v_pr_id, v_ccos_id );

      else

          -- cuando se modifica se encarga el sp sp_doc_pedido_venta_set_pendiente de actualizar
          -- pvi_pendiente, pvi_pendientepklst, y pv_pendiente
          --
          update PedidoVentaItem
             set pv_id = v_pv_id,
                 pvi_orden = v_pvi_orden,
                 pvi_cantidad = v_pvi_cantidad,
                 pvi_cantidadaremitir = v_pvi_cantidadaremitir,
                 pvi_descrip = v_pvi_descrip,
                 pvi_precio = v_pvi_precio,
                 pvi_precioUsr = v_pvi_precioUsr,
                 pvi_precioLista = v_pvi_precioLista,
                 pvi_descuento = v_pvi_descuento,
                 pvi_neto = v_pvi_neto,
                 pvi_ivari = v_pvi_ivari,
                 pvi_ivarni = v_pvi_ivarni,
                 pvi_ivariporc = v_pvi_ivariporc,
                 pvi_ivarniporc = v_pvi_ivarniporc,
                 pvi_importe = v_pvi_importe,
                 pr_id = v_pr_id,
                 ccos_id = v_ccos_id
          where pv_id = v_pv_id
            and pvi_id = v_pvi_id;

      end if;

      v_orden := v_orden + 1;

   end loop;


/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                                        items borrados                                                              //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/

   if v_is_new = 0 then

      delete from PedidoVentaItem
      where exists ( select pvi_id
                     from PedidoVentaItemBorradoTMP
                     where pv_id = v_pv_id
                       and pvTMP_id = p_pvTMP_id
                       and pvi_id = PedidoVentaItem.pvi_id );

      delete from PedidoVentaItemBorradoTMP
      where pv_id = v_pv_id
        and pvTMP_id = p_pvTMP_id;

   end if;

/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                             aplicacion presupuesto - pedido                                                        //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/
   perform sp_doc_pedido_vta_save_aplic(v_pv_id, p_pvTMP_id, 0);

/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                                     talonarios                                                                     //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/
   select ta_id into v_ta_id from Documento where doc_id = v_doc_id;

   perform sp_talonario_set(v_ta_id, v_pv_nrodoc);

/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                                     firma                                                                          //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/

   select sp_cfg_getValor('Ventas-Config', 'Borrar firma al modificar el pedido') into v_cfg_valor;

   v_cfg_valor := coalesce(v_cfg_valor, '0');

   if to_number(v_cfg_valor) <> 0 then

      update PedidoVenta
         set pv_firmado = 0
      where pv_id = v_pv_id;

   end if;

   -- actualizo la deuda del pedido
   --
   perform sp_doc_pedido_venta_set_pendiente(v_pv_id);

   perform sp_doc_pedido_venta_set_credito(v_pv_id);

   perform sp_doc_pedido_venta_set_estado(v_pv_id);

/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                                     validaciones al documento                                                      //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/
   -- estado
   --
   select * from sp_auditoria_estado_check_doc_pv(v_pv_id) into v_success, v_error_msg;
   if coalesce(v_success, 0) = 0 then
      raise exception '%', v_error_msg;
   end if;

   -- totales
   --
   select * from sp_auditoria_totales_check_doc_pv(v_pv_id) into v_success, v_error_msg;
   if coalesce(v_success, 0) = 0 then
      raise exception '%', v_error_msg;
   end if;

   -- credito
   --
   select * from sp_auditoria_credito_check_doc_pv(v_pv_id) into v_success, v_error_msg;
   if coalesce(v_success, 0) = 0 then
      raise exception '%', v_error_msg;
   end if;

/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                                     borrar temporales                                                              //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/
   delete from PedidoVentaItemTMP where pvTMP_ID = p_pvTMP_id;
   delete from PedidoVentaTMP where pvTMP_ID = p_pvTMP_id;

/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                                     historial de modificaciones                                                    //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/

   select modifico into v_modifico from PedidoVenta where pv_id = v_pv_id;

   if v_is_new <> 0 then
      perform sp_historia_update(16003, v_pv_id, v_modifico, 1);
   else
      perform sp_historia_update(16003, v_pv_id, v_modifico, 3);
   end if;

/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                                     fin                                                                            //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/

   select sp_cfg_getValor('Ventas-Config', 'Informar Pedido sin Precio Vta') into v_cfg_valor;

   v_cfg_valor := coalesce(v_cfg_valor, '0');

   if to_number(v_cfg_valor) <> 0 then

      if exists ( select 1
                  from PedidoVentaItem
                  where round(pvi_importe, 2) = 0
                    and pv_id = v_pv_id ) then

         return query select * from result_info('Este pedido posee items sin precio.');

      end if;

   end if;

   select sp_cfg_getValor('Ventas-Config', 'Informar Pedido sin Firma') into v_cfg_valor;

   v_cfg_valor := coalesce(v_cfg_valor, '0');

   select doc_llevafirmacredito
     into v_doc_llevafirmacredito
   from Documento
   where doc_id = v_doc_id;

   if to_number(v_cfg_valor) <> 0 and v_doc_llevafirmacredito <> 0 then

      select est_id
        into v_est_id
      from PedidoVenta
      where pv_id = v_pv_id;

      if v_est_id = 4 /*Pendiente de Firma*/ then

         return query select * from result_info('Este pedido esta pendiente de firma y no puede ser despachado hasta que no lo apruebe un supervisor.');

      end if;

   end if;

/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                                     fin                                                                            //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/

   rtn.type := 'pv_id';
   rtn.id := v_pv_id;

   return next rtn;

exception
   when others then

     raise exception 'Ha ocurrido un error al grabar el pedido de venta. sp_doc_pedido_venta_save. %. %.',
                      sqlstate, sqlerrm;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_doc_pedido_venta_set_estado(p_pv_id integer, OUT p_est_id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
declare
   v_est_id integer;
   v_cli_id integer;
   v_pendiente decimal(18,6);
   v_pendientedoc decimal(18,6);
   v_creditoTotal decimal(18,6);
   v_creditoCtaCte decimal(18,6);
   v_llevaFirma smallint;
   v_firmado smallint;
   v_deuda decimal(18,6);
   v_doc_id integer;
   v_doc_llevafirma smallint;
   v_doc_llevafirmaCredito smallint;

   v_estado_pendienteDespacho integer := 2;
   v_estado_pendienteCredito integer := 3;
   v_estado_pendienteFirma integer := 4;
   v_estado_finalizado integer := 5;
   v_estado_anulado integer := 7;
   v_estado_pendienteStock integer := 8;

   v_bStock smallint;
   v_cfg_valor varchar(5000);

begin

   if p_pv_id = 0 then
      return;
   end if;

   select cli_id,
          pv_firmado,
          est_id,
          doc_id
     into v_cli_id,
          v_firmado,
          v_est_id,
          v_doc_id
   from PedidoVenta
   where pv_id = p_pv_id;

   select doc_llevafirma,
          doc_llevafirmaCredito
     into v_doc_llevafirma,
          v_doc_llevafirmaCredito
   from Documento
   where doc_id = v_doc_id;

   if v_est_id <> v_estado_anulado then

      -- si el documento requiere firma y el comprobante no esta firmado
      -- y no esta finalizado (puede ser que se finalizo y luego se modifico el documento
      -- para que requiera firma en cuyo caso no se exige firma para documentos finalizados)
      --
      if v_firmado = 0 and v_doc_llevafirma <> 0 and v_est_id <> v_estado_finalizado then

         v_est_id := v_estado_pendienteFirma;

      else

         -- se obtiene la deuda del comprobante
         --
         select round(sum(pvi_pendiente), 2)
           into v_deuda
         from PedidoVentaItem
         where pv_id = p_pv_id;

         -- si el comprobante no tiene deuda se finaliza
         --
         if coalesce(v_deuda, 0) <= 0 then

            v_est_id := v_estado_finalizado;

         else

            -- se obtiene la deuda del cliente
            --
            select * from sp_doc_pedido_venta_get_deuda_cliente(v_cli_id) into v_pendiente, v_pendientedoc;

            -- se obtiene el credito del cliente
            --
            select cli_creditototal,
                   cli_creditoctacte
              into v_creditoTotal,
                   v_creditoCtaCte
            from Cliente
            where cli_id = v_cli_id;

            -- si debe mas que el credito concedido al cliente
            --
            if v_pendiente + v_pendientedoc > v_creditoTotal or v_pendiente > v_creditoCtaCte then

               if v_firmado = 0 and v_doc_llevafirmaCredito <> 0 then

                  v_est_id := v_estado_pendienteFirma;

               else

                  if v_firmado <> 0 and v_doc_llevafirmaCredito <> 0 then

                     v_est_id := v_estado_pendienteDespacho;

                  else

                     v_est_id := v_estado_pendienteCredito;

                  end if;

                  -- averiguo si valida stock
                  --
                  select sp_cfg_getValor('Stock-General', 'Stock en Pedido de Venta') into v_cfg_valor;

                  if v_cfg_valor is null then

                     v_bStock := 0;

                  else

                     if isnumeric(v_cfg_valor) = 0 then

                        v_bStock := 0;

                     else

                        v_bStock := to_number(v_cfg_valor);

                     end if;

                  end if;

                  if v_bStock <> 0 then

                     select sp_doc_pedido_venta_stock_validate(p_pv_id) into v_bStock;

                     -- sino hay stock
                     --
                     if v_bStock = 0 then

                        v_est_id := v_estado_pendienteStock;

                     end if;

                  end if;

               end if;

            -- sino solo pendiente
            --
            else

               select sp_cfg_getValor('Stock-General', 'Stock en Pedido de Venta') into v_cfg_valor;

               if v_cfg_valor is null then

                  v_bStock := 0;

               else

                  if isnumeric(v_cfg_valor) = 0 then

                     v_bStock := 0;

                  else

                     v_bStock := to_number(v_cfg_valor);

                  end if;

               end if;

               v_est_id := v_estado_pendienteDespacho;

               if v_bStock <> 0 then

                  select sp_doc_pedido_ventaStockValidate(p_pv_id) into v_bStock;

                  -- sino hay stock
                  --
                  if v_bStock = 0 then

                     v_est_id := v_estado_pendienteStock;

                  end if;

               end if;               

            end if;

         end if;

      end if;

      update PedidoVenta
         set est_id = v_est_id
      where pv_id = p_pv_id;

   end if;

   p_est_id := v_est_id;

exception
   when others then

   raise exception 'Ha ocurrido un error al actualizar el estado del pedido de venta. sp_doc_pedido_venta_set_estado. %. %.',
                   sqlstate, sqlerrm;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_doc_pedido_venta_set_item_stock(p_pv_id integer, OUT p_success integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
declare
   v_sys_error varchar := '';
   v_est_id integer;

   v_pr_id integer;
   v_pvi_pendiente decimal(18,6);
   v_pr_id_kit integer;
   v_cantidad decimal(18,6);
   v_pvist_id integer;
   v_pr_id_kit_padre integer;

begin

   select est_id
     into v_est_id
   from PedidoVenta
   where pv_id = p_pv_id;

   p_success := 0;

   SET TRANSACTION READ WRITE;

   if not table_exists('tt_KitItems') then
      create temporary table tt_KitItems
      (
         pr_id integer    not null,
         nivel integer    not null
      ) on commit drop;
   end if;

   if not table_exists('tt_kit_item_serie') then
      create temporary table tt_kit_item_serie
      (
         pr_id_kit_padre     integer,
         pr_id_kit           integer,
         cantidad            decimal(18,6) not null,
         cant_kits           integer default (0) not null,
         faltante            integer default (0) not null,
         pr_id               integer not null,
         prk_id              integer not null,
         costo               decimal(18,6) default (0) not null,
         costo_x_insumos     decimal(18,6) default (0) not null,
         col_order           integer default (3) not null,
         nivel               smallint default (0) not null
      ) on commit drop;
   end if;

   delete from PedidoVentaItemStock where pv_id = p_pv_id;

   if v_est_id not in ( 5,7,6 ) then

      for v_pvi_pendiente,v_pr_id in
           select i.pvi_pendiente, i.pr_id
           from PedidoVentaItem i
           join Producto p
             on i.pr_id = p.pr_id
           where i.pv_id = p_pv_id
             and i.pvi_pendiente > 0
             and ( p.pr_eskit = 0 or p.pr_kitResumido <> 0 )
      loop

         select sp_dbGetNewId('PedidoVentaItemStock', 'pvist_id') into v_pvist_id;

         insert into PedidoVentaItemStock( pv_id, pvist_id, pvi_pendiente, pr_id )
         values ( p_pv_id, v_pvist_id, v_pvi_pendiente, v_pr_id );

      end loop;

      -- ahora los kits
      --

      -- id del kit solicitado en el PedidoVentaItem

      -- debe ser un kit
      --

      for v_pr_id,v_pvi_pendiente in
           select p.pr_id, sum(i.pvi_pendiente)
           from PedidoVentaItem i
           join Producto p
             on i.pr_id = p.pr_id
           where i.pv_id = p_pv_id
             and ( p.pr_eskit <> 0
             and p.pr_kitResumido = 0 )
             and i.pvi_pendiente > 0
           group by p.pr_id
      loop

         delete from tt_KitItems;

         perform sp_stock_producto_get_kit_info(
                                                  v_pr_id,
                                                  0,
                                                  1 -- solo quiero aquellos productos que llevan el stock por item
                                                );

         -- asocio los items con el kit padre
         --
         update tt_kit_item_serie
            set pr_id_kit_padre = v_pr_id
         where pr_id_kit_padre is null;

      end loop;

      -- actualizo la tabla #KitItemsSerie cargando los items que deben estar asociados a un kit
      --
      update tt_kit_item_serie set pr_id_kit = 0; -- para discriminar las nuevas filas

      -- debe ser un kit
      --
      for v_pr_id,v_pvi_pendiente,v_pr_id_kit_padre in
           select p.pr_id, sum(cantidad), i.pr_id_kit_padre
           from tt_kit_item_serie i
           join Producto p
             on i.pr_id = p.pr_id
           where ( p.pr_eskit <> 0
             and p.pr_kitResumido = 0 )
           group by p.pr_id,i.pr_id_kit_padre
      loop

         delete from tt_KitItems;

         perform sp_stock_producto_get_kit_info(
                                                   v_pr_id,
                                                   0,
                                                   0 -- ahora quiero todos los componentes
                                                );

         -- asocio los items con el kit
         --
         update tt_kit_item_serie
            set pr_id_kit = v_pr_id
         where pr_id_kit is null;

         -- asocio los items con el kit padre
         --
         update tt_kit_item_serie
            set pr_id_kit_padre = v_pr_id_kit_padre
         where pr_id_kit_padre is null;

         if exists ( select *
                     from Producto
                     where pr_id = v_pr_id_kit_padre
                       and pr_eskit <> 0
                       and pr_kitStkItem = 0 ) then

            update tt_kit_item_serie
               set pr_id_kit = v_pr_id_kit_padre
            where pr_id_kit_padre = v_pr_id_kit_padre;

         end if;

         -- borro la fila que mensionaba al kit
         --
         delete from tt_kit_item_serie where pr_id = v_pr_id;

      end loop;

      -- lo mismo para el Pedido de Venta en cuestion
      --
      for v_pr_id,v_pr_id_kit,v_cantidad,v_pr_id_kit_padre in
           select k.pr_id,
                  k.pr_id_kit,
                  i.pvi_pendiente * cantidad,
                  k.pr_id_kit_padre
           from PedidoVentaItem i
                    join Producto p
                          on i.pr_id = p.pr_id
                    join tt_kit_item_serie k
                          on k.pr_id_kit_padre = i.pr_id
           where i.pv_id = p_pv_id
              and ( p.pr_eskit <> 0
              and p.pr_kitResumido = 0 )
      loop

         select sp_dbGetNewId('PedidoVentaItemStock', 'pvist_id') into v_pvist_id;

         if v_pr_id_kit = 0 then

            v_pr_id_kit := null;

         end if;

         -- inserto la demanda de stock desagregada para este kit
         --
         insert into PedidoVentaItemStock( pv_id, pvist_id, pvi_pendiente, pr_id, pr_id_kit, pr_id_kitpadre )
         values ( p_pv_id, v_pvist_id, v_cantidad, v_pr_id, v_pr_id_kit, v_pr_id_kit_padre );

      end loop;

   end if;

   p_success := 1;

exception
   when others then

   raise exception 'Ha ocurrido un error al actualizar el pendiente del pedido de venta. sp_doc_pedido_venta_set_item_stock. %. %.',
                   sqlstate, sqlerrm;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_doc_pedido_venta_set_pendiente(v_pv_id integer)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
declare
   v_pv_pendiente decimal(18,6);
begin

   SET TRANSACTION READ WRITE;

   perform sp_doc_pedido_vta_set_item_pendiente(v_pv_id);

   select sum(pvi_pendiente * (pvi_importe / pvi_cantidad))
     into v_pv_pendiente
   from PedidoVentaItem
   where pv_id = v_pv_id;

   v_pv_pendiente := coalesce(v_pv_pendiente, 0);

   update PedidoVenta
      set pv_pendiente = round(v_pv_pendiente, 2)
   where pv_id = v_pv_id;

   perform sp_doc_pedido_venta_set_item_stock(v_pv_id);

exception
   when others then

   raise exception 'Ha ocurrido un error al actualizar el pendiente del pedido de venta. sp_doc_pedido_venta_set_pendiente. %. %.',
                   sqlstate, sqlerrm;
                   
end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_doc_pedido_venta_stock_validate(p_pv_id integer, OUT p_bstock integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
declare
   v_pr_id integer;
   v_pvi_pendiente decimal(18,6);
   v_pr_id_kit integer;
   v_cantidad decimal(18,6);
   v_ram_id_stock varchar(255);
   v_depl_id integer;
   v_ram_id_DepositoLogico integer;
   v_clienteID integer;
   v_IsRaiz smallint;
   v_cfg_valor varchar(255);
   v_depf_id integer;
begin

   /*
     1) Voy a ver si hay stock para cada uno de los items del pedido de venta
       Lo mas complicado es la existencia de Kits, ya que estos consumen productos que
           ya estan en un kit, y productos que pueden ser utilizados para producir nuevos kits.
       Esto significa que a los kits debo descomponerlos en sus items y analizar cuanto stock
           demandan. Primero debo comprometer el stock asociado al kit y luego si no alcanza
           debo comprometer los items del kit.
       Para aquellos kits que estan compuestos por otros kits, debo desagregarlo en sus items
       solo hasta el nivel que permita controlar stock por items, ya que hay kits que llevan un
           proceso de preparacion de varios dias y por tanto no importa si existen componentes para
           producirlo.
     1.1) Los divido en dos grupos A) los que no son Kits y B) los que son Kits
       1.2) Agrupo todos los productos ambos grupos por pr_id
       1.3) Los del grupo A son los mas simples, si no hay stock para estos no analizo mas
     1.4) Con los kits tengo que descomponerlos, ver cuantos kits hay preparados, y si no alcanza
            debo descontar insumos no asociados a los kits que puedo producir rapidamente.
            Para aquellos insumos que son kits y no controlan stock por items debo tener stock de kits
            ya preparados
     1.5) La demanda de stock es la suma de todos los pendientes de :
          - productos que no son kits
                 - productos que son kits y no hay suficientes kits preparados y controlan stock por item
     1.4) Ahora recorro cada uno de los articulos del grupo B, y pido la info del kit
       1.5) Por cada componente que es kit y permite controlar stock por items voy cargando
            esos items en la tabla temporal
       1.6) Ahora analizo los items del grupo B y listo. Tengo que tener encuenta aquellos items
            que son kits y no permiten controlar stock por items ya que su preparacion es muy
            compleja y lleva varios dias.
   */

   create temporary table tt_pedido_venta_stock
   (
     pr_id integer,
     pr_id_kit integer,
     pr_id_kitpadre integer,
     pvi_pendiente decimal(18,6)
   ) on commit drop;

   -- obtengo la lista de depositos permitidos
   --
   select ram_id_stock
     into v_ram_id_stock
   from PedidoVenta
   where pv_id = p_pv_id;

   select * from  sp_GetRptId() into v_clienteID;

   select * from sp_ArbConvertId(v_ram_id_stock) into v_depl_id, v_ram_id_DepositoLogico;

   if v_ram_id_DepositoLogico <> 0 then

      select sp_ArbIsRaiz(v_ram_id_DepositoLogico) into v_IsRaiz;

      if v_IsRaiz = 0 then

         perform sp_ArbGetAllHojas(v_ram_id_DepositoLogico, v_clienteID);

      else

         v_ram_id_DepositoLogico := 0;

      end if;

   else

      -- tengo que validar segun lo que indique la configuracion de stock
      --
      select sp_cfg_getValor('Stock-General', 'Tipo Control Stock') into v_cfg_valor;

      v_cfg_valor := coalesce(v_cfg_valor, '0');

      -- csEStockFisico
      --
      if to_number(v_cfg_valor) = 4 then

         select depf_id
           into v_depf_id
         from DepositoLogico
         where depl_id = v_depl_id;

         insert into rptArbolRamaHoja( rptarb_cliente, rptarb_hojaid, tbl_id )
         ( select v_clienteID, depl_id, 11 from DepositoLogico where depf_id = v_depf_id );

         v_depl_id := 0;

      end if;

   end if;

   insert into tt_pedido_venta_stock
     ( pr_id, pr_id_kit, pr_id_kitpadre, pvi_pendiente )
     ( select i.pr_id,
              i.pr_id_kit,
              i.pr_id_kitpadre,
              sum(i.pvi_pendiente)
       from PedidoVentaItemStock i
              join PedidoVenta v
               on i.pv_id = v.pv_id
          where v.ram_id_stock = v_ram_id_stock
         group by i.pr_id,i.pr_id_kit,i.pr_id_kitpadre );

   -- para debug
   -- select p.pr_nombrecompra, s.* from #PedidoVtaStock s inner join Producto p on s.pr_id = p.pr_id

   -- somos pesismistas
   --
   p_bStock := 0;

   -- para debug
   -- i.pr_id, pr_nombrecompra, IsNull(sum(stc_cantidad),0), max(i.pvi_pendiente), i.pr_id_kit, i.pr_id_kitpadre

   if exists ( select i.pr_id
               from tt_pedido_venta_stock i
               left join StockCache S
                on i.pr_id = S.pr_id
                and ( i.pr_id_kit = S.pr_id_kit
                      or ( i.pr_id_kit is null and S.pr_id_kit is null )
                      or i.pr_id_kitpadre = S.pr_id_kit
                    )
               join Producto p
                on i.pr_id = p.pr_id
                and ( ( S.depl_id <> -1 and S.depl_id <> -2 )
                     or S.depl_id is null
                    )

               and ( S.depl_id = v_depl_id or v_depl_id = 0 or S.depl_id is null )
               and ( ( exists ( select rptarb_hojaid
                                from rptArbolRamaHoja
                                where rptarb_cliente = v_clienteID
                                  and tbl_id = 11-- tbl_id de DepositoLogico
                                  and ( rptarb_hojaid = S.depl_id or S.depl_id is null ) )
                     )
                     or ( v_ram_id_DepositoLogico = 0 )
                   )
               group by i.pr_id,p.pr_nombrecompra,i.pr_id_kit,i.pr_id_kitpadre
               having coalesce(sum(S.stc_cantidad), 0) < max(i.pvi_pendiente)
             ) then

      -- no hay stock
      return;

   end if;

   -- si llegue hasta aqui entonces hay stock suficiente
   --
   p_bStock := 1;

exception
   when others then

   raise exception 'Ha ocurrido un error al actualizar el estado del pedido de venta. sp_doc_pedido_venta_stock_validate. %. %.',
                   sqlstate, sqlerrm;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_doc_pedido_vta_devolucion_set_pendiente(p_pv_id integer)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
declare
   v_success integer;
   v_error_msg varchar(5000);
   v_pv_id integer;
   v_doct_id integer;

   c_pendiente refcursor;
begin

   select doct_id
   into v_doct_id
   from PedidoVenta
   where pv_id = p_pv_id;

   if v_doct_id = 5 then

      open c_pendiente for
         select distinct pvi.pv_id
         from PedidoDevolucionVenta pvdv
         join PedidoVentaItem pvi
           on pvdv.pvi_id_devolucion = pvi.pvi_id
         join PedidoVentaItem pvir
           on pvdv.pvi_id_pedido = pvir.pvi_id
         where pvir.pv_id = p_pv_id
         union
         select pv_id
         from tt_PedidoDevolucionVenta;

   else

      open c_pendiente for
         select distinct pvi.pv_id
         from PedidoDevolucionVenta pvdv
         join PedidoVentaItem pvi
           on pvdv.pvi_id_pedido = pvi.pvi_id
         join PedidoVentaItem pvid
           on pvdv.pvi_id_devolucion = pvid.pvi_id
         where pvid.pv_id = p_pv_id
         union
         select pv_id
         from tt_PedidoDevolucionVenta;

   end if;

   loop

      fetch c_pendiente into v_pv_id;
      exit when not found;

      -- actualizo la deuda del pedido
      --
      perform sp_doc_pedido_venta_set_pendiente(v_pv_id);

      -- credito
      --
      perform sp_doc_pedido_venta_set_credito(v_pv_id);

      -- estado
      --
      perform sp_doc_pedido_venta_set_estado(v_pv_id);

      -- validaciones
      --

      -- estado
      --
      select * from sp_auditoria_estado_check_doc_pv(v_pv_id) into v_success, v_error_msg;
      if coalesce(v_success, 0) = 0 then
         raise exception '%', v_error_msg;
      end if;

      -- credito
      --
      select * from sp_auditoria_credito_check_doc_pv(v_pv_id) into v_success, v_error_msg;
      if coalesce(v_success, 0) = 0 then
         raise exception '%', v_error_msg;
      end if;

   end loop;

   close c_pendiente;

exception
   when others then

      raise exception 'Ha ocurrido un error al actualizar el pendiente del pedido de venta. sp_doc_pedido_vta_devolucion_set_pendiente. %. %.',
                      sqlstate, sqlerrm;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_doc_pedido_vta_factura_set_pendiente(p_pv_id integer)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
declare
   v_success integer;
   v_error_msg varchar(5000);
   v_fv_id integer;
begin

   for v_fv_id in
        select distinct fv_id
        from PedidoFacturaVenta pvfv
        join PedidoVentaItem pvi
          on pvfv.pvi_id = pvi.pvi_id
        join FacturaVentaItem fvi
          on pvfv.fvi_id = fvi.fvi_id
        where pv_id = p_pv_id
        union
        select fv_id
        from tt_PedidoVentaFactura
   loop

      -- actualizo la deuda de la factura
      --
      perform sp_doc_factura_vta_set_item_pendiente(v_fv_id);

      -- validaciones
      --

      -- estado
      --
      select * from sp_auditoria_credito_check_doc_fv(v_fv_id) into v_success, v_error_msg;
      if coalesce(v_success, 0) = 0 then
         raise exception '%', v_error_msg;
      end if;

   end loop;

exception
   when others then

      raise exception 'Ha ocurrido un error al actualizar el pendiente del pedido de venta. sp_doc_pedido_vta_factura_set_pendiente. %. %.',
                      sqlstate, sqlerrm;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_proveedor_get_cuentas_grupo(p_prov_id integer, OUT rtn refcursor)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$

begin   

   rtn := 'rtn';

   open rtn for
      ----------------------------------------------------------------------------------------------
      select
             provcueg_id,
             provcueg.cueg_id,
             provcueg.cue_id,
             cueg_nombre,
             cue_nombre
      from ProveedorCuentaGrupo provcueg
      inner join CuentaGrupo cueg on provcueg.cueg_id = cueg.cueg_id
      inner join Cuenta cue on provcueg.cue_id = cue.cue_id
      where provcueg.prov_id = p_prov_id;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_doc_pedido_vta_packing_set_pendiente(p_pv_id integer)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
declare
   v_pklst_id integer;
begin

   for v_pklst_id in
        select distinct pklst_id
        from PedidoPackingList pvpklst
        join PedidoVentaItem pvi
          on pvpklst.pvi_id = pvi.pvi_id
        join PackingListItem pklsti
          on pvpklst.pklsti_id = pklsti.pklsti_id
        where pv_id = p_pv_id
        union
        select pklst_id
        from tt_PedidoPackingList
   loop

         -- actualizo la deuda del pedido
         --
         perform sp_doc_packlist_set_item_pendiente(v_pklst_id);

         -- TODO: VALIDACION
         --

   end loop;

exception
   when others then

      raise exception 'Ha ocurrido un error al actualizar el pendiente del pedido de venta. sp_doc_pedido_vta_packing_set_pendiente. %. %.',
                      sqlstate, sqlerrm;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_doc_pedido_vta_presupuesto_set_pendiente(p_pv_id integer)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
declare
   v_success integer;
   v_error_msg varchar(5000);
   v_prv_id integer;
begin

   for v_prv_id in
        select distinct prv_id
        from PresupuestoPedidoVenta prvpv
        join PedidoVentaItem pvi
          on prvpv.pvi_id = pvi.pvi_id
        join PresupuestoVentaItem prvi
          on prvpv.prvi_id = prvi.prvi_id
        where pv_id = p_pv_id
        union
        select prv_id
        from tt_PresupuestoVtaPedido
   loop

       -- actualizo la deuda del pedido de venta
       --
       perform sp_doc_presupuesto_venta_set_pendiente(v_prv_id);

       -- estado
       --
       perform sp_doc_presupuesto_venta_set_estado(v_prv_id);

       -- validaciones
       --

       -- estado
       --
       select * from sp_auditoria_credito_check_doc_prv(v_prv_id) into v_success, v_error_msg;
       if coalesce(v_success, 0) = 0 then
          raise exception '%', v_error_msg;
       end if;

   end loop;

exception
   when others then

      raise exception 'Ha ocurrido un error al actualizar el pendiente del presupuesto de venta. sp_doc_pedido_vta_presupuesto_set_pendiente. %. %.',
                      sqlstate, sqlerrm;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_doc_pedido_vta_remito_set_pendiente(p_pv_id integer)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
declare
   v_success integer;
   v_error_msg varchar(5000);
   v_rv_id integer;
begin

   for v_rv_id in
        select distinct rv_id
        from PedidoRemitoVenta pvrv
        join PedidoVentaItem pvi
          on pvrv.pvi_id = pvi.pvi_id
        join RemitoVentaItem rvi
          on pvrv.rvi_id = rvi.rvi_id
        where pv_id = p_pv_id
        union
        select rv_id
        from tt_PedidoVentaRemito
   loop

      -- actualizo la deuda del remito
      --
      perform sp_doc_remito_vta_set_item_pendiente(v_rv_id);

      -- validaciones
      --

      -- estado
      --
      select * from sp_auditoria_credito_check_doc_rv(v_rv_id) into v_success, v_error_msg;
      if coalesce(v_success, 0) = 0 then
         raise exception '%', v_error_msg;
      end if;

   end loop;

exception
   when others then

      raise exception 'Ha ocurrido un error al actualizar el pendiente del pedido de venta. sp_doc_pedido_vta_remito_set_pendiente. %. %.',
                      sqlstate, sqlerrm;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_doc_pedido_vta_save_aplic(p_pv_id integer, p_pvtmp_id integer, p_bisaplic integer DEFAULT 0)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
declare
   v_error_msg varchar(5000);
   v_pvi_id integer;
   v_orden integer;
   v_doct_id integer;

   v_prvpv_id integer;
   v_prvpv_cantidad decimal(18,6);
   v_prvi_id integer;

   v_pvpk_id integer;
   v_pvpk_cantidad decimal(18,6);
   v_pklsti_id integer;

   v_pvfv_id integer;
   v_pvfv_cantidad decimal(18,6);
   v_fvi_id integer;

   v_pvrv_id integer;
   v_pvrv_cantidad decimal(18,6);
   v_rvi_id integer;

   v_pvdv_id integer;
   v_pvdv_cantidad decimal(18,6);
   v_pvi_id_pedido integer;
   v_pvi_id_devolucion integer;
   v_c_aplicPedido varchar(4000);
begin

   v_error_msg := '';

   select doct_id
     into v_doct_id
   from PedidoVenta
   where pv_id = p_pv_id;

/*
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                               //
//                                        aplicacion presupuesto                                                 //
//                                                                                                               //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/

   v_orden := 0;

   create temporary table tt_PresupuestoVtaPedido (prv_id integer) on commit drop;

   insert into tt_PresupuestoVtaPedido
     ( prv_id )
     ( select distinct prvi.prv_id
       from PresupuestoPedidoVenta pvrpv
       join PresupuestoVentaItem prvi
         on pvrpv.prvi_id = prvi.prvi_id
       join PedidoVentaItem pvi
         on pvrpv.pvi_id = pvi.pvi_id
       where not exists ( select *
                          from PresupuestoPedidoVentaTMP
                          where pvTMP_id = p_pvTMP_id
                            and prvi_id = pvrpv.prvi_id )
                            and pvi.pv_id = p_pv_id );

   -- borro toda la aplicacion actual de este pedido con presupuestos
   --
   delete from PresupuestoPedidoVenta
   where pvi_id in ( select pvi_id
                     from PedidoVentaItem
                     where pv_id = p_pv_id );

   for v_prvpv_id, v_pvi_id, v_prvi_id, v_prvpv_cantidad in
        select prvpv_id,
               pvi_id,
               prvi_id,
               prvpv_cantidad
        from PresupuestoPedidoVentaTMP
        where pvTMP_id = p_pvTMP_id
   loop

      -- obtengo por el orden el pvi que le corresponde a este prvi
      --
      if p_bIsAplic = 0 then

         v_orden := v_orden + 1;

         select pvi_id
           into v_pvi_id
         from PedidoVentaItem
         where pv_id = p_pv_id
           and pvi_orden = v_orden;

      end if;

      -- finalmente grabo la vinculacion
      --
      select sp_dbGetNewId('PresupuestoPedidoVenta', 'prvpv_id') into v_prvpv_id;

      insert into PresupuestoPedidoVenta( prvpv_id, prvpv_cantidad, pvi_id, prvi_id )
                                 values ( v_prvpv_id, v_prvpv_cantidad, v_pvi_id, v_prvi_id );
   end loop;

/*
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                               //
//                                        update pendiente en presupuesto                                        //
//                                                                                                               //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/

   perform sp_doc_pedido_vta_presupuesto_set_pendiente(p_pv_id);


/*
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                               //
//                                        aplicacion packinglist                                                 //
//                                                                                                               //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/

   v_orden := 0;

   create temporary table tt_PedidoPackingList(pklst_id integer) on commit drop;

   insert into tt_PedidoPackingList
     ( pklst_id )
     ( select distinct pvi.pv_id
       from PedidoPackingList pvpk
       join PackingListItem pklsti
         on pvpk.pklsti_id = pklsti.pklsti_id
       join PedidoVentaItem pvi
         on pvpk.pvi_id = pvi.pvi_id
       where not exists ( select *
                          from PedidoPackingListTMP
                          where pvTMP_id = p_pvTMP_id
                            and pklsti_id = pvpk.pklsti_id )
                            and pvi.pv_id = p_pv_id );

   -- borro toda la aplicacion actual de este pedido con packinglist
   --
   delete from PedidoPackingList
   where pvi_id in ( select pvi_id
                     from PedidoVentaItem
                     where pv_id = p_pv_id );

   for v_pvpk_id, v_pvi_id, v_pklsti_id, v_pvpk_cantidad in
        select pvpklst_id,
               pvi_id,
               pklsti_id,
               pvpklst_cantidad
        from PedidoPackingListTMP
        where pvTMP_id = p_pvTMP_id
   loop

      -- obtengo por el orden el pvi que le corresponde a este pklsti
      --
      if p_bIsAplic = 0 then

         v_orden := v_orden + 1;

         select pvi_id
           into v_pvi_id
         from PedidoVentaItem
         where pv_id = p_pv_id
           and pvi_orden = v_orden;

      end if;

      -- finalmente grabo la vinculacion
      --
      select sp_dbGetNewId('PedidoPackingList', 'pvpklst_id') into v_pvpk_id;

      insert into PedidoPackingList( pvpklst_id, pvpklst_cantidad, pvi_id, pklsti_id )
                            values ( v_pvpk_id, v_pvpk_cantidad, v_pvi_id, v_pklsti_id );
   end loop;

/*
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                               //
//                                        update pendiente en packinglist                                        //
//                                                                                                               //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/

   perform sp_doc_pedido_vta_packing_set_pendiente(p_pv_id);

/*
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                               //
//                                        aplicacion factura                                                     //
//                                                                                                               //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/

   v_orden := 0;

   create temporary table tt_PedidoVentaFactura(fv_id integer) on commit drop;

   insert into tt_PedidoVentaFactura
     ( fv_id )
     ( select distinct fvi.fv_id
       from PedidoFacturaVenta pvfv
       join FacturaVentaItem fvi
         on pvfv.fvi_id = fvi.fvi_id
       join PedidoVentaItem pvi
         on pvfv.pvi_id = pvi.pvi_id
       where not exists ( select *
                          from PedidoFacturaVentaTMP
                          where pvTMP_id = p_pvTMP_id
                            and fvi_id = pvfv.fvi_id )
                            and pvi.pv_id = p_pv_id );

   -- borro toda la aplicacion actual de esta factura con pedidos
   --
   delete from PedidoFacturaVenta
   where pvi_id in ( select pvi_id
                     from PedidoVentaItem
                     where pv_id = p_pv_id );

   for v_pvfv_id, v_pvi_id, v_fvi_id, v_pvfv_cantidad in
        select pvfv_id,
               pvi_id,
               fvi_id,
               pvfv_cantidad
        from PedidoFacturaVentaTMP
        where pvTMP_id = p_pvTMP_id
   loop

      -- obtengo por el orden el pvi que le corresponde a este fvi
      --
      if p_bIsAplic = 0 then

         v_orden := v_orden + 1;

         select pvi_id
           into v_pvi_id
         from PedidoVentaItem
         where pv_id = p_pv_id
           and pvi_orden = v_orden;

      end if;

      -- finalmente grabo la vinculacion que puede estar asociada a una deuda o a un pago
      --
      select sp_dbGetNewId('PedidoFacturaVenta', 'pvfv_id') into v_pvfv_id;

      insert into PedidoFacturaVenta( pvfv_id, pvfv_cantidad, pvi_id, fvi_id )
                             values ( v_pvfv_id, v_pvfv_cantidad, v_pvi_id, v_fvi_id );
   end loop;

/*
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                               //
//                                        update pendiente en facturas                                           //
//                                                                                                               //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/

   perform sp_doc_pedido_vta_factura_set_pendiente(p_pv_id);

/*
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                               //
//                                        aplicacion remito                                                      //
//                                                                                                               //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/

   v_orden := 0;

   create temporary table tt_PedidoVentaRemito(rv_id integer) on commit drop;

   insert into tt_PedidoVentaRemito
     ( rv_id )
     ( select distinct rvi.rv_id
       from PedidoRemitoVenta pvrv
       join RemitoVentaItem rvi
         on pvrv.rvi_id = rvi.rvi_id
       join PedidoVentaItem pvi
         on pvrv.pvi_id = pvi.pvi_id
       where not exists ( select *
                          from PedidoRemitoVentaTMP
                          where pvTMP_id = p_pvTMP_id
                            and rvi_id = pvrv.rvi_id )
                            and pvi.pv_id = p_pv_id );

   -- borro toda la aplicacion actual de esta remito con pedidos
   --
   delete from PedidoRemitoVenta
   where pvi_id in ( select pvi_id
                     from PedidoVentaItem
                     where pv_id = p_pv_id );

   for v_pvrv_id, v_pvi_id, v_rvi_id, v_pvrv_cantidad in
       select pvrv_id,
              pvi_id,
              rvi_id,
              pvrv_cantidad
       from PedidoRemitoVentaTMP
       where pvTMP_id = p_pvTMP_id
   loop

         -- obtengo por el orden el pvi que le corresponde a este rvi
         --
         if p_bIsAplic = 0 then

            v_orden := v_orden + 1;

            select pvi_id
              into v_pvi_id
            from PedidoVentaItem
            where pv_id = p_pv_id
              and pvi_orden = v_orden;

         end if;

         -- finalmente grabo la vinculacion que puede estar asociada a una deuda o a un pago
         --
         select sp_dbGetNewId('PedidoRemitoVenta', 'pvrv_id') into v_pvrv_id;

         insert into PedidoRemitoVenta( pvrv_id, pvrv_cantidad, pvi_id, rvi_id )
                               values ( v_pvrv_id, v_pvrv_cantidad, v_pvi_id, v_rvi_id );
   end loop;

/*
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                               //
//                                        update pendiente en remitos                                            //
//                                                                                                               //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/

   perform sp_doc_pedido_vta_remito_set_pendiente(p_pv_id);

/*
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                               //
//                                        aplicacion devolucion                                                  //
//                                                                                                               //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/

   v_orden := 0;

   create temporary table tt_PedidoDevolucionVenta(pv_id integer) on commit drop;

   if v_doct_id = 5 then

      insert into tt_PedidoDevolucionVenta
        ( pv_id )
        ( select distinct pvi.pv_id
          from PedidoDevolucionVenta pvdv
          join PedidoVentaItem pvi
            on pvdv.pvi_id_devolucion = pvi.pvi_id
          join PedidoVentaItem pvir
            on pvdv.pvi_id_pedido = pvir.pvi_id
          where not exists ( select *
                             from PedidoDevolucionVentaTMP
                             where pvTMP_id = p_pvTMP_id
                               and pvi_id_devolucion = pvdv.pvi_id_devolucion )
                               and pvir.pv_id = p_pv_id );

      -- borro toda la aplicacion actual de este pedido con devoluciones
      --
      delete from PedidoDevolucionVenta
      where pvi_id_pedido in ( select pvi_id
                               from PedidoVentaItem
                               where pv_id = p_pv_id );

      for v_pvdv_id, v_pvi_id_pedido, v_pvi_id_devolucion, v_pvdv_cantidad in
           select pvdv_id,
                  pvi_id_pedido,
                  pvi_id_devolucion,
                  pvdv_cantidad
           from PedidoDevolucionVentaTMP
           where pvTMP_id = p_pvTMP_id
      loop

          -- obtengo por el orden el pvi_pedido que le corresponde a este pvi_devolucion
          --
          if p_bIsAplic = 0 then

             v_orden := v_orden + 1;

             select pvi_id
               into v_pvi_id_pedido
             from PedidoVentaItem
             where pv_id = p_pv_id
               and pvi_orden = v_orden;

          end if;

          -- finalmente grabo la vinculacion
          --
          select sp_dbGetNewId('PedidoDevolucionVenta', 'pvdv_id') into v_pvdv_id;

          insert into PedidoDevolucionVenta( pvdv_id, pvdv_cantidad, pvi_id_pedido, pvi_id_devolucion )
                                    values ( v_pvdv_id, v_pvdv_cantidad, v_pvi_id_pedido, v_pvi_id_devolucion );
      end loop;

/*
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                               //
//                                        update pendiente en pedidos                                            //
//                                                                                                               //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/

      perform sp_doc_pedido_vta_devolucion_set_pendiente(p_pv_id);

   else

      insert into tt_PedidoDevolucionVenta
        ( pv_id )
        ( select distinct pvi.pv_id
          from PedidoDevolucionVenta pvdv
          join PedidoVentaItem pvi
            on pvdv.pvi_id_pedido = pvi.pvi_id
          join PedidoVentaItem pvid
            on pvdv.pvi_id_devolucion = pvid.pvi_id
          where not exists ( select *
                             from PedidoDevolucionVentaTMP
                             where pvTMP_id = p_pvTMP_id
                               and pvi_id_pedido = pvdv.pvi_id_pedido )
                               and pvid.pv_id = p_pv_id );

      -- borro toda la aplicacion actual de esta devolucion con pedidos
      --
      delete from PedidoDevolucionVenta
      where pvi_id_devolucion in ( select pvi_id
                                   from PedidoVentaItem
                                   where pv_id = p_pv_id );

      for v_pvdv_id, v_pvi_id_devolucion, v_pvi_id_pedido, v_pvdv_cantidad in
          select pvdv_id,
                 pvi_id_devolucion,
                 pvi_id_pedido,
                 pvdv_cantidad
          from PedidoDevolucionVentaTMP
          where pvTMP_id = p_pvTMP_id
      loop

         -- obtengo por el orden el pvi_devolucion que le corresponde a este pvi_pedido
         --
         if p_bIsAplic = 0 then

            v_orden := v_orden + 1;

            select pvi_id
              into v_pvi_id_devolucion
            from PedidoVentaItem
            where pv_id = p_pv_id
              and pvi_orden = v_orden;

         end if;

         -- finalmente grabo la vinculacion
         --
         select sp_dbGetNewId('PedidoDevolucionVenta', 'pvdv_id') into v_pvdv_id;

         insert into PedidoDevolucionVenta( pvdv_id, pvdv_cantidad, pvi_id_devolucion, pvi_id_pedido )
                                   values ( v_pvdv_id, v_pvdv_cantidad, v_pvi_id_devolucion, v_pvi_id_pedido );
      end loop;

/*
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                               //
//                                        update pendiente en pedidos                                            //
//                                                                                                               //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/
      perform sp_doc_pedido_vta_devolucion_set_pendiente(p_pv_id);

   end if;

/*
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                               //
//                                        update pendiente en items                                              //
//                                                                                                               //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/
   perform sp_doc_pedido_venta_set_pendiente(p_pv_id);

exception
   when others then

      raise exception 'Ha ocurrido un error al grabar la vinculación del pedido de venta con los remitos, facturas, devoluciones y packing list. sp_doc_pedido_vta_save_aplic. %. %.',
                      sqlstate, sqlerrm;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_doc_pedido_vta_set_credito_cairo(p_pv_id integer, p_borrar integer DEFAULT 0)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
declare
   v_pendiente decimal(18,6);
   v_cli_id integer;
   v_doct_id integer;
   v_emp_id integer;
   v_cotizacion decimal(18,6);
   v_mon_id integer;
   v_fecha date;
   v_desc1 decimal(18,6);
   v_desc2 decimal(18,6);

   v_doct_pedidoVenta integer := 5;
   
   v_old_cli_ids integer[];
   i integer;
begin

   -- si no hay documento adios
   --
   if p_pv_id = 0 then
      return;
   end if;

   SET TRANSACTION READ WRITE;

   select pv.cli_id,
          round(pv.pv_pendiente, 2),
          pv.doct_id,
          doc.emp_id,
          doc.mon_id,
          pv.pv_descuento1,
          pv.pv_descuento2
     into v_cli_id,
          v_pendiente,
          v_doct_id,
          v_emp_id,
          v_mon_id,
          v_desc1,
          v_desc2
   from PedidoVenta pv
   join Documento doc
     on pv.doc_id = doc.doc_id
   where pv.pv_id = p_pv_id;

   v_fecha := CURRENT_TIMESTAMP;

   select sp_moneda_get_cotizacion(v_mon_id, v_fecha) into v_cotizacion;

   if not exists ( select *
                   from Moneda
                   where mon_id = v_mon_id
                     and mon_legal <> 0 ) then

      if v_cotizacion > 0 then
         v_pendiente := v_pendiente * v_cotizacion;
      end if;

   end if;

   v_pendiente := coalesce(v_pendiente, 0) - (coalesce(v_pendiente, 0) * v_desc1 / 100);
   v_pendiente := coalesce(v_pendiente, 0) - (coalesce(v_pendiente, 0) * v_desc2 / 100);


   -- borrar referencias a este documento por otro cliente
   --
   -- siempre borro cualquier mencion a este documento en el cache de cualquier
   -- cliente que no sea el indicado por el documento
   --
   if exists ( select cli_id
               from ClienteCacheCredito
               where cli_id <> v_cli_id
                 and doct_id = v_doct_PedidoVenta
                 and id = p_pv_id ) then

      select into v_old_cli_ids cli_id
      from ClienteCacheCredito
      where cli_id <> v_cli_id
        and doct_id = v_doct_PedidoVenta
        and id = p_pv_id;

      delete from ClienteCacheCredito
      where cli_id <> v_cli_id
        and doct_id = v_doct_PedidoVenta
        and id = p_pv_id;

      for i in 1 .. array_upper(v_old_cli_ids, 1)
      loop

         perform sp_cliente_update_pedido_credito(v_old_cli_ids[i], v_emp_id);

      end loop;

   end if;

   -- borrar
   --
   if p_borrar <> 0 then

      delete from ClienteCacheCredito
      where cli_id = v_cli_id
        and doct_id = v_doct_pedidoVenta
        and id = p_pv_id;

   -- insert - update
   --
   else

      if v_doct_id = 22 then /* devolucion */
         v_pendiente := -v_pendiente;
      end if;

      if exists ( select id
                  from ClienteCacheCredito
                  where cli_id = v_cli_id
                    and doct_id = v_doct_pedidoVenta
                    and id = p_pv_id ) then

         if abs(v_pendiente) >= 0.01 then

            update ClienteCacheCredito
               set clicc_importe = v_pendiente
            where cli_id = v_cli_id
              and doct_id = v_doct_pedidoVenta
              and id = p_pv_id;


         -- si no hay nada pendiente lo saco del cache
         --
         else

            delete from ClienteCacheCredito
            where cli_id = v_cli_id
              and doct_id = v_doct_pedidoVenta
              and id = p_pv_id;

         end if;

      else

         -- solo si hay algo pendiente
         --
         if abs(v_pendiente) >= 0.01 then

            insert into ClienteCacheCredito( cli_id, doct_id, id, clicc_importe, emp_id )
            values ( v_cli_id, v_doct_pedidoVenta, p_pv_id, v_pendiente, v_emp_id );

         end if;

      end if;

   end if;

   -- deuda en cache
   --

   -- actualizo la deuda en la tabla cliente
   --
   perform sp_cliente_update_pedido_credito(v_cli_id, v_emp_id);

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_doc_pedido_vta_set_item_pendiente(p_pv_id integer)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
declare
   v_pvi_id integer;
   v_doct_id integer;
   v_est_id integer;

   v_aplicadoPresupuesto decimal(18,6);
   v_aplicadoPacking decimal(18,6);
   v_aplicadoFactura decimal(18,6);
   v_aplicadoRemito decimal(18,6);
   v_aplicadoPedido decimal(18,6);
begin

   select doct_id,
          est_id
     into v_doct_id,
          v_est_id
   from PedidoVenta
   where pv_id = p_pv_id;

   SET TRANSACTION READ WRITE;

   if v_est_id <> 7 then

      for v_pvi_id in
           select pvi_id
           from PedidoVentaItem
           where pv_id = p_pv_id
      loop

         if v_doct_id = 5 then

            select coalesce(sum(prvpv_cantidad), 0)
              into v_aplicadoPresupuesto
            from PresupuestoPedidoVenta
            where pvi_id = v_pvi_id;

            select coalesce(sum(pvrv_cantidad), 0)
              into v_aplicadoRemito
            from PedidoRemitoVenta
            where pvi_id = v_pvi_id;

            select coalesce(sum(pvfv_cantidad), 0)
              into v_aplicadoFactura
            from PedidoFacturaVenta
            where pvi_id = v_pvi_id;

            select v_aplicadoPedido + coalesce(sum(pvdv_cantidad), 0)
              into v_aplicadoPedido
            from PedidoDevolucionVenta
            where pvi_id_pedido = v_pvi_id;

            select coalesce(sum(pvpklst_cantidad), 0)
              into v_aplicadoPacking
            from PedidoPackingList
            where pvi_id = v_pvi_id;

         else

            v_aplicadoPresupuesto := 0;
            v_aplicadoFactura := 0;
            v_aplicadoRemito := 0;
            v_aplicadoPacking := 0;

            select v_aplicadoPedido + coalesce(sum(pvdv_cantidad), 0)
              into v_aplicadoPedido
            from PedidoDevolucionVenta
            where pvi_id_devolucion = v_pvi_id;

         end if;

         v_aplicadoPresupuesto := coalesce(v_aplicadoPresupuesto, 0);
         v_aplicadoFactura := coalesce(v_aplicadoFactura, 0);
         v_aplicadoRemito := coalesce(v_aplicadoRemito, 0);
         v_aplicadoPedido := coalesce(v_aplicadoPedido, 0);
         v_aplicadoPacking := coalesce(v_aplicadoPacking, 0);

         update PedidoVentaItem
            set pvi_pendiente = pvi_cantidadaremitir - v_aplicadoFactura - v_aplicadoRemito - v_aplicadoPedido,
                pvi_pendientepklst = pvi_cantidad - v_aplicadoPacking,
                pvi_pendienteprv = pvi_cantidad - v_aplicadoPresupuesto
         where pvi_id = v_pvi_id;

      end loop;

   else

      update PedidoVentaItem
         set pvi_pendiente = 0,
             pvi_pendientepklst = 0,
             pvi_pendienteprv = 0
      where pv_id = p_pv_id;

   end if;

exception
   when others then

   raise exception 'Ha ocurrido un error al actualizar el pendiente del pedido de venta. sp_doc_pedido_vta_set_item_pendientente. %. %.',
                   sqlstate, sqlerrm;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_doc_remito_vta_set_item_pendiente(p_rv_id integer)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
declare
   v_rvi_id integer;
   v_est_id integer;
   v_doct_id integer;
   v_rv_desde_os smallint;
   v_pr_esrepuesto smallint;

   v_aplicadoPedido decimal(18,6);
   v_aplicadoRemito decimal(18,6);
begin

   select rv.doct_id,
          rv.est_id,
          doc.doc_rv_desde_os
     into v_doct_id,
          v_est_id,
          v_rv_desde_os
   from RemitoVenta rv
   join Documento doc
     on rv.doc_id = doc.doc_id
   where rv.rv_id = p_rv_id;

   SET TRANSACTION READ WRITE;

   if v_est_id <> 7 then

      if v_rv_desde_os <> 0 then

         update RemitoVentaItem
            set rvi_pendiente = 0
         where rv_id = p_rv_id
           and exists( select 1
                       from Producto
                       where pr_id = RemitoVentaItem.pr_id
                         and pr_esrepuesto <> 0
                     );

      end if;

      for v_rvi_id,v_pr_esrepuesto in
           select rvi.rvi_id,
                  pr.pr_esrepuesto
           from RemitoVentaItem rvi
           join Producto pr
             on rvi.pr_id = pr.pr_id
           where rvi.rv_id = p_rv_id
      loop

            if ( v_pr_esrepuesto = 0 or v_rv_desde_os = 0 ) then

               select coalesce(sum(pvrv_cantidad), 0)
                 into v_aplicadoPedido
               from PedidoRemitoVenta
               where rvi_id = v_rvi_id;

               select coalesce(v_aplicadoPedido, 0) + coalesce(sum(osrv_cantidad), 0)
                 into v_aplicadoPedido
               from OrdenRemitoVenta
               where rvi_id = v_rvi_id;

            end if;

            select coalesce(sum(rvfv_cantidad), 0)
              into v_aplicadoRemito
            from RemitoFacturaVenta
            where rvi_id = v_rvi_id;

            if v_doct_id = 3 then

               select coalesce(v_aplicadoRemito, 0) + coalesce(sum(rvdv_cantidad), 0)
                 into v_aplicadoRemito
               from RemitoDevolucionVenta
               where rvi_id_remito = v_rvi_id;

            else

               select coalesce(v_aplicadoRemito, 0) + coalesce(sum(rvdv_cantidad), 0)
                 into v_aplicadoRemito
               from RemitoDevolucionVenta
               where rvi_id_devolucion = v_rvi_id;

            end if;

            v_aplicadoPedido := coalesce(v_aplicadoPedido, 0);
            v_aplicadoRemito := coalesce(v_aplicadoRemito, 0);

            if ( v_pr_esrepuesto = 0 or v_rv_desde_os = 0 ) then

               update RemitoVentaItem
                  set rvi_pendiente = rvi_cantidad - v_aplicadoPedido,
                      rvi_pendientefac = rvi_cantidadaremitir - v_aplicadoRemito
               where rvi_id = v_rvi_id;

            else

               update RemitoVentaItem
                  set rvi_pendientefac = rvi_cantidadaremitir - v_aplicadoRemito
               where rvi_id = v_rvi_id;

            end if;

      end loop;

   else

         update RemitoVentaItem
            set rvi_pendiente = 0,
                rvi_pendientefac = 0
         where rv_id = p_rv_id;

   end if;

exception
   when others then

   raise exception 'Ha ocurrido un error al actualizar el pendiente del remito de venta. sp_doc_remito_vta_set_item_pendiente. %. %.',
                   sqlstate, sqlerrm;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_doc_remito_compra_set_credito(p_rc_id integer, p_borrar integer DEFAULT 0)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
declare
   v_pendiente decimal(18,6);
   v_prov_id integer;
   v_doct_id integer;
   v_emp_id integer;
   v_desc1 decimal(18,6);
   v_desc2 decimal(18,6);
   v_doct_remitocompra integer := 4;

   v_old_prov_ids integer[];
   i integer;
begin

   -- si no hay documento adios
   --
   if p_rc_id = 0 then
      return;
   end if;

   select rc.prov_id,
          case
             when rc.rc_cotizacion > 0 then round(rc.rc_pendiente, 2) * rc.rc_cotizacion
             else round(rc.rc_pendiente, 2)
          end,
          rc.doct_id,
          doc.emp_id,
          rc.rc_descuento1,
          rc.rc_descuento2
     into v_prov_id,
          v_pendiente,
          v_doct_id,
          v_emp_id,
          v_desc1,
          v_desc2
   from RemitoCompra rc
   join Documento doc
     on rc.doc_id = doc.doc_id
   where rc.rc_id = p_rc_id;

   v_pendiente := coalesce(v_pendiente, 0) - (coalesce(v_pendiente, 0) * v_desc1 / 100);
   v_pendiente := coalesce(v_pendiente, 0) - (coalesce(v_pendiente, 0) * v_desc2 / 100);

   -- borrar referencias a este documento por otro cliente
   --
   -- siempre borro cualquier mencion a este documento en el cache de cualquier
   -- proveedor que no sea el indicado por el documento
   --
   if exists ( select prov_id
               from ProveedorCacheCredito
               where prov_id <> v_prov_id
                 and doct_id = v_doct_remitocompra
                 and id = p_rc_id ) then

      select into v_old_prov_ids prov_id
      from ProveedorCacheCredito
      where prov_id <> v_prov_id
        and doct_id = v_doct_remitocompra
        and id = p_rc_id;

      delete from ProveedorCacheCredito
      where prov_id <> v_prov_id
        and doct_id = v_doct_remitocompra
        and id = p_rc_id;

      for i in 1 .. array_upper(v_old_prov_ids, 1)
      loop

         perform sp_proveedor_update_remito_credito(v_old_prov_ids[i], v_emp_id);

      end loop;

   end if;

   -- borrar
   --
   if p_borrar <> 0 then

      delete from ProveedorCacheCredito
      where prov_id = v_prov_id
        and doct_id = v_doct_remitocompra
        and id = p_rc_id;

   -- insert - update
   --
   else

      if v_doct_id = 25 then /* devolucion */
         v_pendiente := -v_pendiente;
      end if;

      if exists ( select id
                  from ProveedorCacheCredito
                  where prov_id = v_prov_id
                    and doct_id = v_doct_remitocompra
                    and id = p_rc_id ) then

         if abs(v_pendiente) >= 0.01 then

            update ProveedorCacheCredito
               set provcc_importe = v_pendiente
            where prov_id = v_prov_id
              and doct_id = v_doct_remitocompra
              and id = p_rc_id;

         -- si no hay nada pendiente lo saco del cache
         --
         else

            delete from ProveedorCacheCredito
            where prov_id = v_prov_id
              and doct_id = v_doct_remitocompra
              and id = p_rc_id;

         end if;

      else

         -- solo si hay algo pendiente
         --
         if abs(v_pendiente) >= 0.01 then

            insert into ProveedorCacheCredito( prov_id, doct_id, id, provcc_importe, emp_id )
            values ( v_prov_id, v_doct_remitocompra, p_rc_id, v_pendiente, v_emp_id );

         end if;

      end if;

   end if;

   -- deuda en cache
   --

   -- actualizo la deuda en la tabla cliente
   --
   perform sp_proveedor_update_remito_credito(v_prov_id, v_emp_id);

exception
   when others then

      raise exception 'Ha ocurrido un error al actualizar el estado del remito de compra. sp_doc_remito_compra_set_credito. %. %.',
                      sqlstate, sqlerrm;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_doc_remito_compra_set_estado(p_rc_id integer, OUT p_est_id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
declare
   v_est_id integer;
   v_prov_id integer;
   v_pendiente decimal(18,6);
   v_creditoTotal decimal(18,6);
   v_llevaFirma smallint;
   v_firmado smallint;
   v_deuda decimal(18,6);
   v_doc_id integer;
   v_doc_llevafirma smallint;

   v_estado_pendiente integer := 1;
   v_estado_pendienteCredito integer := 3;
   v_estado_pendienteFirma integer := 4;
   v_estado_finalizado integer := 5;
   v_estado_anulado integer := 7;
begin

   if p_rc_id = 0 then
      return;
   end if;

   select prov_id,
          rc_firmado,
          est_id,
          doc_id
     into v_prov_id,
          v_firmado,
          v_est_id,
          v_doc_id
   from RemitoCompra
   where rc_id = p_rc_id;

   select doc_llevafirma
     into v_doc_llevafirma
   from Documento
   where doc_id = v_doc_id;

   if v_est_id <> v_estado_anulado then

      -- si el documento requiere firma y el comprobante no esta firmado
      -- y no esta finalizado (puede ser que se finalizo y luego se modifico el documento
      -- para que requiera firma en cuyo caso no se exige firma para documentos finalizados)
      --
      if v_firmado = 0 and v_doc_llevafirma <> 0 and v_est_id <> v_estado_finalizado then

         v_est_id := v_estado_pendienteFirma;

      else

         -- se obtiene la deuda del comprobante
         --
         select round(sum(rci_pendientefac), 2)
           into v_deuda
         from RemitoCompraItem
         where rc_id = p_rc_id;

         -- si el comprobante no tiene deuda se finaliza
         --
         if coalesce(v_deuda, 0) <= 0 then

            v_est_id := v_estado_finalizado;

         else

            -- se obtiene la deuda del proveedor
            --
            select sum(provcc_importe)
              into v_pendiente
            from ProveedorCacheCredito
            where prov_id = v_prov_id;

            -- se obtiene el credito del proveedor
            --
            select prov_creditototal
              into v_creditoTotal
            from Proveedor
            where prov_id = v_prov_id;

            -- si debe mas que el credito concedido al proveedor
            --
            if v_pendiente > v_creditoTotal then

               v_est_id := v_estado_pendienteCredito;

            -- sino solo pendiente
            --
            else

               v_est_id := v_estado_pendiente;

            end if;

         end if;

      end if;

      update RemitoCompra
         set est_id = v_est_id
      where rc_id = p_rc_id;

   end if;

   p_est_id := v_est_id;

exception
   when others then

   raise exception 'Ha ocurrido un error al actualizar el estado del Remito de compra. sp_doc_remito_compra_set_estado. %. %.',
                   sqlstate, sqlerrm;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_doc_remito_compra_set_pendiente(p_rc_id integer)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
declare
   v_rc_pendiente decimal(18,6);
begin

   SET TRANSACTION READ WRITE;

   perform sp_doc_remito_cpra_set_item_pendiente(p_rc_id);

   select sum(rci_pendientefac * (rci_importe / rci_cantidadaremitir))
     into v_rc_pendiente
   from RemitoCompraItem
   where rc_id = p_rc_id;

   v_rc_pendiente := coalesce(v_rc_pendiente, 0);

   update RemitoCompra
      set rc_pendiente = round(v_rc_pendiente, 2)
   where rc_id = p_rc_id;

exception
   when others then

      raise exception 'Ha ocurrido un error al actualizar el pendiente del remito de compra. sp_doc_remito_compra_set_pendiente. %. %.',
                      sqlstate, sqlerrm;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_doc_remito_cpra_set_item_pendiente(p_rc_id integer)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
declare
   v_rci_id integer;
   v_doct_id integer;
   v_est_id integer;
   v_aplicadoOrden decimal(18,6);
   v_aplicadoRemito decimal(18,6);
begin

   select doct_id,
          est_id
     into v_doct_id,
          v_est_id
   from RemitoCompra
   where rc_id = p_rc_id;

   SET TRANSACTION READ WRITE;

   if v_est_id <> 7 then

      for v_rci_id in
         select rci_id
         from RemitoCompraItem
         where rc_id = p_rc_id
      loop

         select coalesce(sum(ocrc_cantidad), 0)
           into v_aplicadoOrden
         from OrdenRemitoCompra
         where rci_id = v_rci_id;

         select coalesce(sum(rcfc_cantidad), 0)
           into v_aplicadoRemito
         from RemitoFacturaCompra
         where rci_id = v_rci_id;

         if v_doct_id = 4 then

            select coalesce(v_aplicadoRemito, 0) + coalesce(sum(rcdc_cantidad), 0)
              into v_aplicadoRemito
            from RemitoDevolucionCompra
            where rci_id_remito = v_rci_id;

         else

            select coalesce(v_aplicadoRemito, 0) + coalesce(sum(rcdc_cantidad), 0)
              into v_aplicadoRemito
            from RemitoDevolucionCompra
            where rci_id_devolucion = v_rci_id;

         end if;

         v_aplicadoOrden := coalesce(v_aplicadoOrden, 0);
         v_aplicadoRemito := coalesce(v_aplicadoRemito, 0);

         update RemitoCompraItem
            set rci_pendiente = rci_cantidad - v_aplicadoOrden,
                rci_pendientefac = rci_cantidadaremitir - v_aplicadoRemito
         where rci_id = v_rci_id;

      end loop;

   else

      update RemitoCompraItem
         set rci_pendiente = 0,
             rci_pendientefac = 0
      where rc_id = p_rc_id;

   end if;


exception
   when others then

      raise exception 'Ha ocurrido un error al actualizar el pendiente del remito de compra. sp_doc_remito_cpra_set_item_pendiente.%. %.',
                      sqlstate, sqlerrm;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_doc_remito_venta_set_credito(p_rv_id integer, p_borrar integer DEFAULT 0)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
begin

   perform sp_doc_remito_venta_set_credito_cairo(p_rv_id, p_borrar);

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_doc_remito_venta_set_credito_cairo(p_rv_id integer, p_borrar integer DEFAULT 0)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
declare
   v_pendiente decimal(18,6);
   v_doct_remitoventa integer := 3;
   v_cli_id integer;
   v_doct_id integer;
   v_emp_id integer;
   v_desc1 decimal(18,6);
   v_desc2 decimal(18,6);

   v_old_cli_ids integer[];
   i integer;
begin

   -- si no hay documento adios
   --
   if p_rv_id = 0 then
      return;
   end if;

   SET TRANSACTION READ WRITE;

   select rv.cli_id,
          case
             when rv.rv_cotizacion > 0 then round(rv.rv_pendiente, 2) * rv.rv_cotizacion
             else round(rv.rv_pendiente, 2)
          end,
          rv.doct_id,
          doc.emp_id,
          rv.rv_descuento1,
          rv.rv_descuento2
     into v_cli_id,
          v_pendiente,
          v_doct_id,
          v_emp_id,
          v_desc1,
          v_desc2
   from RemitoVenta rv
   join Documento doc
     on rv.doc_id = doc.doc_id
   where rv.rv_id = p_rv_id;

   v_pendiente := coalesce(v_pendiente, 0) - (coalesce(v_pendiente, 0) * v_desc1 / 100);
   v_pendiente := coalesce(v_pendiente, 0) - (coalesce(v_pendiente, 0) * v_desc2 / 100);

   -- borrar referencias a este documento por otro cliente
   --
   -- siempre borro cualquier mencion a este documento en el cache de cualquier
   -- cliente que no sea el indicado por el documento
   --
   if exists ( select cli_id
               from ClienteCacheCredito
               where cli_id <> v_cli_id
                 and doct_id = v_doct_remitoVenta
                 and id = p_rv_id ) then

      select into v_old_cli_ids cli_id
      from ClienteCacheCredito
      where cli_id <> v_cli_id
        and doct_id = v_doct_remitoVenta
        and id = p_rv_id;

      delete from ClienteCacheCredito
      where cli_id <> v_cli_id
        and doct_id = v_doct_remitoVenta
        and id = p_rv_id;

      for i in 1 .. array_upper(v_old_cli_ids, 1)
      loop

         perform sp_cliente_update_remito_credito(v_old_cli_ids[i], v_emp_id);

      end loop;

   end if;

   -- borrar
   --
   if p_borrar <> 0 then

      delete from ClienteCacheCredito
      where cli_id = v_cli_id
        and doct_id = v_doct_remitoventa
        and id = p_rv_id;

   -- insert - update
   --
   else

      if v_doct_id = 24 then /* devolucion */
         v_pendiente := -v_pendiente;
      end if;

      if exists ( select id
                  from ClienteCacheCredito
                  where cli_id = v_cli_id
                    and doct_id = v_doct_remitoventa
                    and id = p_rv_id ) then

         if abs(v_pendiente) >= 0.01 then

            update ClienteCacheCredito
               set clicc_importe = v_pendiente
            where cli_id = v_cli_id
              and doct_id = v_doct_remitoventa
              and id = p_rv_id;


         -- si no hay nada pendiente lo saco del cache
         --
         else

            delete from ClienteCacheCredito
            where cli_id = v_cli_id
              and doct_id = v_doct_remitoventa
              and id = p_rv_id;

         end if;

      else

         -- solo si hay algo pendiente
         --
         if abs(v_pendiente) >= 0.01 then

            insert into ClienteCacheCredito( cli_id, doct_id, id, clicc_importe, emp_id )
            values ( v_cli_id, v_doct_remitoventa, p_rv_id, v_pendiente, v_emp_id );

         end if;

      end if;

   end if;

   -- deuda en cache
   --

   -- actualizo la deuda en la tabla Cliente
   --
   perform sp_cliente_update_remito_credito(v_cli_id, v_emp_id);

exception
   when others then

      raise exception 'Ha ocurrido un error al actualizar el estado del remito de venta. sp_doc_remito_venta_set_credito_cairo. %. %.',
                      sqlstate, sqlerrm;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_doc_remito_venta_set_pendiente(p_rv_id integer)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
declare
   v_rv_pendiente decimal(18,6);
   v_success integer;
   v_error_msg varchar(5000);
begin

   SET TRANSACTION READ WRITE;

   perform sp_doc_remito_vta_set_item_pendiente(p_rv_id);

   select sum(rvi_pendientefac * (rvi_importe / rvi_cantidad))
     into v_rv_pendiente
   from RemitoVentaItem
   where rv_id = p_rv_id;

   v_rv_pendiente := coalesce(v_rv_pendiente, 0);

   update RemitoVenta
      set rv_pendiente = round(v_rv_pendiente, 2)
   where rv_id = p_rv_id;

   v_success := 0;
   v_error_msg := '';

   select * from sp_doc_remito_vta_set_pendiente_cliente(p_rv_id) into v_success, v_error_msg;

   -- si el documento no es valido
   --
   if coalesce(v_success, 0) = 0 then

      raise exception '%', v_error_msg;

   end if;

exception
   when others then

   raise exception 'Ha ocurrido un error al actualizar el pendiente del remito de venta. sp_doc_remito_venta_set_pendiente. %. %.',
                   sqlstate, sqlerrm;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_doc_stock_cache_update(p_st_id integer, p_restar integer, p_not_update_prns integer DEFAULT 0, OUT p_message character varying, OUT p_success integer)
 RETURNS record
 LANGUAGE plpgsql
AS $function$
begin

   if p_restar <> 0 then

      -- quito de stockcache lo que se movio con los items de este movimiento
      --
      update StockCache
         set stc_cantidad = stc_cantidad
                            - ( select sti_ingreso + sti_salida
                                from StockItem i
                                where i.st_id = p_st_id
                                  and StockCache.pr_id = i.pr_id
                                  and StockCache.depl_id = i.depl_id
                                  and coalesce(StockCache.prns_id, 0) = coalesce(i.prns_id, 0)
                                  and coalesce(StockCache.pr_id_kit, 0) = coalesce(i.pr_id_kit, 0)
                                  and coalesce(StockCache.stl_id, 0) = coalesce(i.stl_id, 0)
                              );

   else

      -- agrego a stockcache lo que se movio con los items de este movimiento
      --
      update StockCache
         set stc_cantidad = stc_cantidad
                            + ( select sti_ingreso - sti_salida
                                from StockItem i
                                where i.st_id = p_st_id
                                  and StockCache.pr_id = i.pr_id
                                  and StockCache.depl_id = i.depl_id
                                  and coalesce(StockCache.prns_id, 0) = coalesce(i.prns_id, 0)
                                  and coalesce(StockCache.pr_id_kit, 0) = coalesce(i.pr_id_kit, 0)
                                  and coalesce(StockCache.stl_id, 0) = coalesce(i.stl_id, 0)
                              );

   end if;

   if p_restar = 0 then

      select * from sp_doc_stock_validate(p_message) into p_success, p_st_id;

   else

      p_success := 1;

   end if;

   if p_not_update_prns = 0 then

      select sp_doc_stock_update_numero_serie(p_st_id) into p_restar;

   end if;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_doc_stock_update_numero_serie(p_st_id integer, p_restar integer)
 RETURNS void
 LANGUAGE plpgsql
AS $function$  
declare
   v_prns_id integer;
   v_depl_id integer;
   v_doct_id_cliente integer;
   v_id_cliente integer;

   v_modificado date;
   v_creado date;

   v_st_id_prns integer;
   v_depl_id_prns integer;
   v_doct_id_cliente_prns integer;
   v_id_cliente_prns integer;
begin

   -- cargamos el deposito destino
   -- desde el movimiento de stock
   -- ya que el 99% de las veces
   -- es un insert
   --
   select doct_id_cliente,
          id_cliente,
          modificado,
          creado,
          depl_id_destino
     into v_doct_id_cliente,
          v_id_cliente,
          v_modificado,
          v_creado,
          v_depl_id
   from Stock
   where st_id = p_st_id;

   /*-------------------------------------------------------------------
     insert
   ---------------------------------------------------------------------*/

   -- solo puedo usarlo si no estoy borrando o anulando
   --
   if v_modificado = v_creado and p_restar = 0 then

      -- actualizamos el deposito siempre y el cliente, el proveedor
      -- y el documento de salida y de ingreso solo si corresponde
      --
      perform sp_doc_stock_update_numero_serie2(
                                        p_st_id,
                                        v_doct_id_cliente,
                                        v_id_cliente,
                                        null,
                                        null,
                                        v_depl_id);

   /*-------------------------------------------------------------------
     update
   ---------------------------------------------------------------------*/

   else

      -- si estoy anulando o borrando
      --
      if p_restar <> 0 then

         for v_prns_id in
            select prns_id
            from StockItem
            where st_id = p_st_id
              and prns_id is not null
              and sti_ingreso > 0
         loop

            v_st_id_prns := null;

            select st_id
              into v_st_id_prns
            from ProductoNumeroSerie
            where prns_id = v_prns_id;

            -- si soy el ultimo movimiento de este numero de serie
            --
            if p_st_id = v_st_id_prns then

               -- obtengo el movimiento anterior a mi
               --
               select max(st_id)
                 into v_st_id_prns
               from StockItem
               where prns_id = v_prns_id
                 and st_id <> v_st_id_prns;

               -- obtengo el deposito del ultimo movimiento
               --
               select doct_id_cliente,
                      id_cliente,
                      depl_id_destino
                 into v_doct_id_cliente_prns,
                      v_id_cliente_prns,
                      v_depl_id_prns
               from Stock
               where st_id = v_st_id_prns;

               perform sp_doc_stock_update_numero_serie3(
                                                 v_prns_id,
                                                 v_st_id_prns,
                                                 v_doct_id_cliente_prns,
                                                 v_id_cliente_prns,
                                                 v_depl_id_prns);

            end if;

         end loop;

      -- sino esta borrando modificamos todos los numeros de serie
      -- cuyo st_id = @@st_id
      --
      else
         perform sp_doc_stock_update_numero_serie4(
                                       p_st_id,
                                       v_doct_id_cliente,
                                       v_id_cliente,
                                       v_depl_id);

      end if;

   end if;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_doc_stock_update_numero_serie2(p_st_id integer, v_doct_id_cliente integer, v_id_cliente integer, iv_cli_id integer, iv_prov_id integer, v_depl_id integer)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
declare  
   v_cli_id integer := iv_cli_id;
   v_prov_id integer := iv_prov_id;
begin

   -- ahora definimos a que proveedor y cliente pertenece
   -- TODO: aca todavia falta una vuelta de tuerca para estar seguro
   -- que no hay otro movimiento posterior que envie el numero de serie
   -- a un cliente, y este movimiento que ahora estamos borrando no
   -- tiene efecto sobre el numero de serie
   --
   /*
                    1	factura de venta
                    3	remito de venta
                    */
   -- cliente
   --
   if v_doct_id_cliente in ( 1,3 ) then

      select case v_doct_id_cliente
                when 1 then ( select cli_id
                              from FacturaVenta
                              where fv_id = v_id_cliente )
                when 3 then ( select cli_id
                              from RemitoVenta
                              where rv_id = v_id_cliente )
                else null
             end
        into v_cli_id;

      update ProductoNumeroSerie
         set depl_id = v_depl_id,
             cli_id = v_cli_id,
             doc_id_salida = v_id_cliente,
             doct_id_salida = v_doct_id_cliente,
             st_id = p_st_id
         where exists ( select StockItem.prns_id
                        from StockItem
                        where StockItem.st_id = p_st_id
                          and StockItem.prns_id = ProductoNumeroSerie.prns_id );

   else

      /*
          7	nota de credito venta
         24	devolucion remito venta
      */
      if v_doct_id_cliente in ( 7,24 ) then

         -- si ya no esta en el deposito de terceros entonces lo desvinculo de cualquier cliente
         --
         update ProductoNumeroSerie
            set depl_id = v_depl_id,
                cli_id = null,
                doc_id_salida = null,
                doct_id_salida = null,
                st_id = p_st_id
            where exists ( select StockItem.prns_id
                           from StockItem
                           where StockItem.st_id = p_st_id
                             and StockItem.prns_id = ProductoNumeroSerie.prns_id );

      -- proveedor
      --
      else

         /*
             2	 factura de compra
             4	 remito de compra
             42 orden de servicio
         */
         -- Nota: Si esta anulando el remito o la factura de compra, no me preocupo ya que
         --       en la anulacion y tambien al borrar el documento, se elimina del stock el
         --       numero de serie
         --
         if v_doct_id_cliente in ( 2,4,42 ) then

            if v_doct_id_cliente in ( 2,4 ) then

               select case v_doct_id_cliente
                         when 2 then ( select prov_id
                                       from FacturaCompra
                                       where fc_id = v_id_cliente )
                         when 4 then ( select prov_id
                                       from RemitoCompra
                                       where rc_id = v_id_cliente )
                      end
                 into v_prov_id
               from DUAL ;

               update ProductoNumeroSerie
                  set depl_id = v_depl_id,
                      prov_id = v_prov_id,
                      doc_id_ingreso = v_id_cliente,
                      doct_id_ingreso = v_doct_id_cliente,
                      st_id = p_st_id
               where exists ( select StockItem.prns_id
                              from StockItem
                              where StockItem.st_id = p_st_id
                                and StockItem.prns_id = ProductoNumeroSerie.prns_id );

            else

               select cli_id
                 into v_cli_id
               from OrdenServicio
               where os_id = v_id_cliente;

               update ProductoNumeroSerie
                  set depl_id = v_depl_id,
                      cli_id = v_cli_id,
                      doc_id_ingreso = v_id_cliente,
                      doct_id_ingreso = v_doct_id_cliente,
                      st_id = p_st_id
               where exists ( select StockItem.prns_id
                              from StockItem
                              where StockItem.st_id = p_st_id
                                and StockItem.prns_id = ProductoNumeroSerie.prns_id );

            end if;

         else

            /*
                8	 nota de credito de compra
                25 devolucion de remito de compra
            */
            if v_doct_id_cliente in ( 8,25 ) then

               update ProductoNumeroSerie
                  set depl_id = v_depl_id,
                      doc_id_salida = v_id_cliente,
                      doct_id_salida = v_doct_id_cliente,
                      st_id = p_st_id
               where exists ( select StockItem.prns_id
                              from StockItem
                              where StockItem.st_id = p_st_id
                                and StockItem.prns_id = ProductoNumeroSerie.prns_id );

            else

               /*
                   28	recuento de stock
                   30	parte de produccion
               */
               if v_doct_id_cliente in ( 28,30 ) then

                  if v_depl_id = -2 then

                     update ProductoNumeroSerie
                        set depl_id = v_depl_id,
                            doc_id_salida = v_id_cliente,
                            doct_id_salida = v_doct_id_cliente,
                            st_id = p_st_id
                     where exists ( select StockItem.prns_id
                                    from StockItem
                                    where StockItem.st_id = p_st_id
                                      and StockItem.prns_id = ProductoNumeroSerie.prns_id );

                  else

                     update ProductoNumeroSerie
                        set depl_id = v_depl_id,
                            doc_id_ingreso = v_id_cliente,
                            doct_id_ingreso = v_doct_id_cliente,
                            st_id = p_st_id
                     where exists ( select StockItem.prns_id
                                    from StockItem
                                    where StockItem.st_id = p_st_id
                                      and StockItem.prns_id = ProductoNumeroSerie.prns_id );

                  end if;

               -- cualquier otro documento (por ejemplo transferencia de stock)
               -- solo modifica el deposito
               --
               else

                  update ProductoNumeroSerie
                     set depl_id = v_depl_id,
                         st_id = p_st_id
                  where exists ( select StockItem.prns_id
                                 from StockItem
                                 where StockItem.st_id = p_st_id
                                   and StockItem.prns_id = ProductoNumeroSerie.prns_id );

               end if;

            end if;

         end if;

      end if;

   end if;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_doc_stock_update_numero_serie3(v_prns_id integer, p_st_id integer, v_doct_id_cliente integer, v_id_cliente integer, v_depl_id integer)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
declare
   v_cli_id integer;
   v_prov_id integer;
begin

   if p_st_id is null then
      return;
   end if;

   -- ahora definimos a que proveedor y cliente pertenece
   -- TODO aca todavia falta una vuelta de tuerca para estar seguro
   -- que no hay otro movimiento posterior que envie el numero de serie
   -- a un cliente, y este movimiento que ahora estamos borrando no
   -- tiene efecto sobre el numero de serie
   --
   /*
       1	factura de venta
       3	remito de venta
   */
   -- cliente
   --
   if v_doct_id_cliente in ( 1,3 ) then

      select case v_doct_id_cliente
                when 1 then ( select cli_id
                              from FacturaVenta
                              where fv_id = v_id_cliente )
                when 3 then ( select cli_id
                              from RemitoVenta
                              where rv_id = v_id_cliente )
                else null
             end
        into v_cli_id;

      update ProductoNumeroSerie
         set depl_id = v_depl_id,
             cli_id = v_cli_id,
             doc_id_salida = v_id_cliente,
             doct_id_salida = v_doct_id_cliente,
             st_id = p_st_id
      where prns_id = v_prns_id;

   else

      /*
          7	nota de credito venta
         24	devolucion remito venta
      */
      if v_doct_id_cliente in ( 7,24 ) then

         -- si ya no esta en el deposito de terceros entonces lo desvinculo de cualquier cliente
         --
         update ProductoNumeroSerie
            set depl_id = v_depl_id,
                cli_id = null,
                doc_id_salida = null,
                doct_id_salida = null,
                st_id = p_st_id
         where prns_id = v_prns_id;

      -- proveedor
      --
      else

         /*
             2	factura de compra
             4	remito de compra
            42 orden de servicio
         */
         -- nota: si esta anulando el remito o la factura de compra, no me preocupo ya que
         --       en la anulacion y tambien al borrar el documento, se elimina del stock el
         --       numero de serie
         --
         if v_doct_id_cliente in ( 2,4,42 ) then

            if v_doct_id_cliente in ( 2,4 ) then

               select case v_doct_id_cliente
                         when 2 then ( select prov_id
                                       from FacturaCompra
                                       where fc_id = v_id_cliente )
                         when 4 then ( select prov_id
                                       from RemitoCompra
                                       where rc_id = v_id_cliente )
                      end
                 into v_prov_id;

               update ProductoNumeroSerie
                  set depl_id = v_depl_id,
                      prov_id = v_prov_id,
                      doc_id_ingreso = v_id_cliente,
                      doct_id_ingreso = v_doct_id_cliente,
                      st_id = p_st_id
               where prns_id = v_prns_id;

            else

               select cli_id
                 into v_cli_id
               from OrdenServicio
               where os_id = v_id_cliente;

               update ProductoNumeroSerie
                  set depl_id = v_depl_id,
                      cli_id = v_cli_id,
                      doc_id_ingreso = v_id_cliente,
                      doct_id_ingreso = v_doct_id_cliente,
                      st_id = p_st_id
               where prns_id = v_prns_id;

            end if;

         else
            /*
                8	 nota de credito de compra
                25 devolucion de remito de compra
            */
            if v_doct_id_cliente in ( 8,25 ) then

               update ProductoNumeroSerie
                  set depl_id = v_depl_id,
                      doc_id_salida = v_id_cliente,
                      doct_id_salida = v_doct_id_cliente,
                      st_id = p_st_id
               where prns_id = v_prns_id;

            else
               /*
                   28	recuento de stock
                   30	parte de produccion
               */
               if v_doct_id_cliente in ( 28,30 ) then

                  if v_depl_id = -2 then

                     update ProductoNumeroSerie
                        set depl_id = v_depl_id,
                            doc_id_salida = v_id_cliente,
                            doct_id_salida = v_doct_id_cliente,
                            st_id = p_st_id
                     where prns_id = v_prns_id;

                  else

                     update ProductoNumeroSerie
                        set depl_id = v_depl_id,
                            doc_id_ingreso = v_id_cliente,
                            doct_id_ingreso = v_doct_id_cliente,
                            st_id = p_st_id
                     where prns_id = v_prns_id;

                  end if;

               -- cualquier otro documento (por ejemplo transferencia de stock)
               -- solo modifica el deposito
               --
               else

                  update ProductoNumeroSerie
                     set depl_id = v_depl_id,
                         st_id = p_st_id
                  where prns_id = v_prns_id;

               end if;

            end if;

         end if;

      end if;

   end if;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_doc_stock_update_numero_serie4(p_st_id integer, v_doct_id_cliente integer, v_id_cliente integer, v_depl_id integer)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
declare
   v_cli_id integer;
   v_prov_id integer;
begin

   -- ahora definimos a que proveedor y cliente pertenece
   -- TODO aca todavia falta una vuelta de tuerca para estar seguro
   -- que no hay otro movimiento posterior que envie el numero de serie
   -- a un cliente, y este movimiento que ahora estamos borrando no
   -- tiene efecto sobre el numero de serie
   --
   /*
       1	factura de venta
       3	remito de venta
   */
   -- cliente
   --
   if v_doct_id_cliente in ( 1,3 ) then

      select case v_doct_id_cliente
                when 1 then ( select cli_id
                              from FacturaVenta
                              where fv_id = v_id_cliente )
                when 3 then ( select cli_id
                              from RemitoVenta
                              where rv_id = v_id_cliente )
                else null
             end
        into v_cli_id;

      update ProductoNumeroSerie
         set depl_id = v_depl_id,
             cli_id = v_cli_id,
             doc_id_salida = v_id_cliente,
             doct_id_salida = v_doct_id_cliente
      where st_id = p_st_id;

   else

      /*
           7	nota de credito venta
          24	devolucion remito venta
      */
      if v_doct_id_cliente in ( 7,24 ) then

         -- si ya no esta en el deposito de terceros entonces lo desvinculo de cualquier cliente
         --
         update ProductoNumeroSerie
            set depl_id = v_depl_id,
                cli_id = null,
                doc_id_salida = null,
                doct_id_salida = null
         where st_id = p_st_id;

      -- proveedor
      --
      else

         /*
               2	factura de compra
               4	remito de compra
              42 orden de servicio
         */
         -- Nota: si esta anulando el remito o la factura de compra, no me preocupo ya que
         --       en la anulacion y tambien al borrar el documento, se elimina del stock el
         --       numero de serie
         --
         if v_doct_id_cliente in ( 2,4,42 ) then

            if v_doct_id_cliente in ( 2,4 ) then

               select case v_doct_id_cliente
                         when 2 then ( select prov_id
                                       from FacturaCompra
                                       where fc_id = v_id_cliente )
                         when 4 then ( select prov_id
                                       from RemitoCompra
                                       where rc_id = v_id_cliente )
                      end
                 into v_prov_id;

               update ProductoNumeroSerie
                  set depl_id = v_depl_id,
                      prov_id = v_prov_id,
                      doc_id_ingreso = v_id_cliente,
                      doct_id_ingreso = v_doct_id_cliente
               where st_id = p_st_id;

            else

               select cli_id
                 into v_cli_id
               from OrdenServicio
               where os_id = v_id_cliente;

               update ProductoNumeroSerie
                  set depl_id = v_depl_id,
                      cli_id = v_cli_id,
                      doc_id_ingreso = v_id_cliente,
                      doct_id_ingreso = v_doct_id_cliente
               where st_id = p_st_id;

            end if;

         else

            /*
                 8	 nota de credito de compra
                 25 devolucion de remito de compra
            */
            if v_doct_id_cliente in ( 8,25 ) then

               update ProductoNumeroSerie
                  set depl_id = v_depl_id,
                      doc_id_salida = v_id_cliente,
                      doct_id_salida = v_doct_id_cliente
               where st_id = p_st_id;

            else

               /*
                    28	recuento de stock
                    30	parte de produccion
               */
               if v_doct_id_cliente in ( 28,30 ) then

                  if v_depl_id = -2 then

                     update ProductoNumeroSerie
                        set depl_id = v_depl_id,
                            doc_id_salida = v_id_cliente,
                            doct_id_salida = v_doct_id_cliente
                     where st_id = p_st_id;

                  else

                     update ProductoNumeroSerie
                        set depl_id = v_depl_id,
                            doc_id_ingreso = v_id_cliente,
                            doct_id_ingreso = v_doct_id_cliente
                     where st_id = p_st_id;

                  end if;

               -- cualquier otro documento (por ejemplo transferencia de stock)
               -- solo modifica el deposito
               --
               else

                  update ProductoNumeroSerie
                     set depl_id = v_depl_id
                  where st_id = p_st_id;

               end if;

            end if;

         end if;

      end if;

   end if;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_doc_stock_validate(p_st_id integer, OUT p_message character varying, OUT p_success integer)
 RETURNS record
 LANGUAGE plpgsql
AS $function$
declare
   v_productos varchar(5000);
   v_pr_nombrecompra varchar(255);
   v_cfg_valor varchar(255);
   v_deposito varchar(255);
   v_cantidad decimal(18,6);
   v_prns_codigo varchar(100);
   v_stl_codigo varchar(100);
   v_2crlf varchar(20);

   c_productos refcursor;
   v_depf_id_origen integer;
   v_depf_id_destino integer;
begin

   v_2crlf := CHR(10) || CHR(13) || CHR(10) || CHR(13);

   create temporary table tt_tmpStock
   (
     pr_id integer,
     depl_id integer,
     prns_id integer,
     pr_id_kit integer,
     stl_id integer
   ) on commit drop;

   /*  Tipos de Stock

											  csENoControlaStock = 2
											  csEStockLogico = 3
											  csEStockFisico = 4
											  csEStockNegativo = 5
   */

   -- agrego al Cache de Stock a todos los productos que no esten
   -- aun cacheados para los depositos y numeros de serie mencionados por
   -- el StockItem
   --
   if exists ( select *
               from StockItem i
               where i.st_id = p_st_id
                 and not exists ( select *
                                  from StockCache
                                  where pr_id = i.pr_id
                                    and depl_id = i.depl_id
                                    and coalesce(prns_id, 0) = coalesce(i.prns_id, 0)
                                    and coalesce(pr_id_kit, 0) = coalesce(i.pr_id_kit, 0)
                                    and coalesce(stl_id, 0) = coalesce(i.stl_id, 0)
                                    and ( depl_id <> -2 and depl_id <> -3 /* los depositos internos no importan */ ) ) )
   then

      insert into tt_tmpStock( pr_id, depl_id, prns_id, pr_id_kit, stl_id )
        ( select distinct i.pr_id,
                          depl_id,
                          prns_id,
                          i.pr_id_kit,
                          i.stl_id
          from StockItem i
          where i.st_id = p_st_id
            and not exists ( select *
                             from StockCache
                             where pr_id = i.pr_id
                               and depl_id = i.depl_id
                               and coalesce(prns_id, 0) = coalesce(i.prns_id, 0)
                               and coalesce(pr_id_kit, 0) = coalesce(i.pr_id_kit, 0)
                               and coalesce(stl_id, 0) = coalesce(i.stl_id, 0)
                               and ( depl_id <> -2 and depl_id <> -3 /* los depositos internos no importan */ ) ) );

      insert into StockCache( stc_cantidad, pr_id, depl_id, prns_id, pr_id_kit, stl_id )
        ( select sum(i.sti_ingreso) - sum(i.sti_salida),
                 i.pr_id,
                 i.depl_id,
                 i.prns_id,
                 i.pr_id_kit,
                 i.stl_id
          from StockItem i
          join tt_tmpStock t
            on i.pr_id = t.pr_id
            and i.depl_id = t.depl_id
            and coalesce(i.prns_id, 0) = coalesce(t.prns_id, 0)
            and coalesce(i.pr_id_kit, 0) = coalesce(t.pr_id_kit, 0)
            and coalesce(i.stl_id, 0) = coalesce(t.stl_id, 0)
          where ( i.depl_id <> -2 and i.depl_id <> -3 /* los depositos internos no importan */ )
            and i.st_id = p_st_id
          group by i.pr_id,i.depl_id,i.prns_id,i.pr_id_kit,i.stl_id );

   end if;


   -- tengo que validar segun lo que indique la configuracion de stock
   --
   select sp_cfg_getValor('Stock-General', 'Tipo Control Stock') into v_cfg_valor;

   v_cfg_valor := coalesce(v_cfg_valor, '0');

   if to_number(v_cfg_valor) = 2 /* csENoControlaStock */ then

      -- no se controla stock asi que todo bien
      --
      p_success := 1;

   else

      if to_number(v_cfg_valor) = 3 /* csEStockLogico */ then

         -- si hay un producto en un deposito con cantidad
         -- en negativo no se puede grabar el movimiento
         --
         if exists ( select *
                     from StockCache s
                     join StockItem i
                       on s.depl_id = i.depl_id
                       and i.st_id = p_st_id
                       and s.pr_id = i.pr_id
                       and coalesce(s.prns_id, 0) = coalesce(i.prns_id, 0)
                       and coalesce(s.pr_id_kit, 0) = coalesce(i.pr_id_kit, 0)
                       and coalesce(s.stl_id, 0) = coalesce(i.stl_id, 0)
                     where i.st_id = p_st_id
                       and ( i.depl_id <> -2 and i.depl_id <> -3 /* los depositos internos no importan */ )
                       and s.stc_cantidad < 0 ) then

            open c_productos for
               select p.pr_nombrecompra,
                     d.depl_nombre,
                     sum(s.stc_cantidad) + ( select sum(i.sti_salida)
                                             from StockItem i
                                             where i.st_id = p_st_id
                                               and s.pr_id = i.pr_id
                                               and coalesce(s.prns_id, 0) = coalesce(i.prns_id, 0)
                                               and coalesce(s.pr_id_kit, 0) = coalesce(i.pr_id_kit, 0)
                                               and coalesce(s.stl_id, 0) = coalesce(i.stl_id, 0)
                                               and ( i.depl_id <> -2 and i.depl_id <> -3 /* los depositos internos no importan */ )
                                               and s.depl_id = i.depl_id ),
                     prns.prns_codigo,
                     stl.stl_codigo
               from ( StockCache s
               join Producto p
                 on s.pr_id = p.pr_id
                 and exists (select *
                             from StockItem i
                             where i.st_id = p_st_id
                               and s.pr_id = i.pr_id
                               and coalesce(s.prns_id, 0) = coalesce(i.prns_id, 0)
                               and coalesce(s.pr_id_kit, 0) = coalesce(i.pr_id_kit, 0)
                               and coalesce(s.stl_id, 0) = coalesce(i.stl_id, 0)
                               and ( i.depl_id <> -2 and i.depl_id <> -3 /* los depositos internos no importan */ )
                               and s.depl_id = i.depl_id )
                            )
               join DepositoLogico d
                 on s.depl_id = d.depl_id
               left join ProductoNumeroSerie prns
                 on s.prns_id = prns.prns_id
               left join StockLote stl
                 on s.stl_id = stl.stl_id
               where ( s.depl_id <> -2
                 and s.depl_id <> -3 )
                 and s.stc_cantidad < 0
               group by p.pr_nombrecompra, s.depl_id, s.pr_id, s.prns_id, s.pr_id_kit, s.stl_id, d.depl_nombre,
                        prns.prns_codigo, stl.stl_codigo;

            v_productos := '';

            loop

               fetch c_productos into v_pr_nombrecompra,v_deposito,v_cantidad,v_prns_codigo,v_stl_codigo;
               exit when not found;

               if v_prns_codigo is null then
                  v_prns_codigo := '';
               else
                  v_prns_codigo := ' (ns: ' || v_prns_codigo || ')';
               end if;

               if v_stl_codigo is null then
                  v_stl_codigo := '';
               else
                  v_stl_codigo := ' (lote: ' || v_stl_codigo || ')';
               end if;

               v_productos := v_productos || v_pr_nombrecompra || v_prns_codigo
                              || v_stl_codigo || ' (' || v_deposito || ' '
                              || to_char(v_cantidad, '9,999,990.00') || '),';

            end loop;

            close c_productos;

            v_productos := substr(v_productos, 1, length(v_productos) - 1);
            p_success := 0;
            p_message := 'No hay stock suficiente para el/los articulo(s):' || v_2crlf || coalesce(v_productos, '');

         else

            p_success := 1;

         end if;

      else

         if to_number(v_cfg_valor) = 4 /* csEStockFisico */ then

            select dl.depf_id,
                   dd.depf_id
              into v_depf_id_origen,
                   v_depf_id_destino
            from Stock st
            join DepositoLogico dl
              on st.depl_id_origen = dl.depl_id
            join DepositoLogico dd
              on st.depl_id_destino = dd.depl_id
            where st.st_id = p_st_id;

            -- si hay un producto en un deposito con cantidad
            -- en negativo no se puede grabar el movimiento
            --
            if exists ( select d.depf_id
                        from ( StockCache s
                               join StockItem i
                                on s.pr_id = i.pr_id
                                 and i.st_id = p_st_id
                                 and coalesce(s.prns_id, 0) = coalesce(i.prns_id, 0)
                                 and coalesce(s.pr_id_kit, 0) = coalesce(i.pr_id_kit, 0)
                                 and coalesce(s.stl_id, 0) = coalesce(i.stl_id, 0)
                         )
                        join DepositoLogico df
                          on i.depl_id = df.depl_id
                        join DepositoLogico d
                          on df.depf_id = d.depf_id
                        where i.st_id = p_st_id
                          and s.depl_id = d.depl_id
                          and ( i.depl_id <> -2 and i.depl_id <> -3 /* los depositos internos no importan */ )
                        group by d.depf_id,i.pr_id
                        having sum(s.stc_cantidad) < 0 ) then

               open c_productos for
                  select p.pr_nombrecompra,
                         f.depf_nombre,
                         sum(s.stc_cantidad) + ( select sum(i.sti_salida)
                                                 from StockItem i
                                                 where i.st_id = p_st_id
                                                   and s.pr_id = i.pr_id
                                                   and coalesce(s.prns_id, 0) = coalesce(i.prns_id, 0)
                                                   and coalesce(s.pr_id_kit, 0) = coalesce(i.pr_id_kit, 0)
                                                   and coalesce(s.stl_id, 0) = coalesce(i.stl_id, 0)
                                                   and ( i.depl_id <> -2 and i.depl_id <> -3
                                                        /* los depositos internos no importan */ ) ),
                         prns.prns_codigo,
                         stl.stl_codigo
                  from ( StockCache s
                  join DepositoLogico d
                    on s.depl_id = d.depl_id
                    and ( d.depf_id = v_depf_id_origen or d.depf_id = v_depf_id_destino )
                    and exists ( select *
                                 from StockItem i
                                 where i.st_id = p_st_id
                                   and s.pr_id = i.pr_id
                                   and coalesce(s.prns_id, 0) = coalesce(i.prns_id, 0)
                                   and coalesce(s.pr_id_kit, 0) = coalesce(i.pr_id_kit, 0)
                                   and coalesce(s.stl_id, 0) = coalesce(i.stl_id, 0)
                                   and ( i.depl_id <> -2 and i.depl_id <> -3 /* los depositos internos no importan */ ) )
                               )
                  join Producto p
                    on s.pr_id = p.pr_id
                  join DepositoFisico f
                    on d.depf_id = f.depf_id
                  left join ProductoNumeroSerie prns
                    on s.prns_id = prns.prns_id
                  left join StockLote stl
                    on s.stl_id = stl.stl_id
                  where ( s.depl_id <> -2 and s.depl_id <> -3 /* los depositos internos no importan */ )
                  group by p.pr_nombrecompra, f.depf_nombre, d.depf_id, s.pr_id, s.prns_id, s.stl_id, s.pr_id_kit,
                           prns.prns_codigo, stl.stl_codigo
                  having sum(s.stc_cantidad) < 0;

               v_productos := '';

               loop

                  fetch c_productos into v_pr_nombrecompra,v_deposito,v_cantidad,v_prns_codigo,v_stl_codigo;
                  exit when not found;

                  if v_prns_codigo is null then
                     v_prns_codigo := '';
                  else
                     v_prns_codigo := ' (ns: ' || v_prns_codigo || ')';
                  end if;

                  if v_stl_codigo is null then
                     v_stl_codigo := '';
                  else
                     v_stl_codigo := ' (lote: ' || v_stl_codigo || ')';
                  end if;

                  v_productos := v_productos || v_pr_nombrecompra || v_prns_codigo || v_stl_codigo
                                 || ' (' || v_deposito || ' ' || to_char(v_cantidad, '9,999,990.00') || '),';

               end loop;

               close c_productos;

               v_productos := substr(v_productos, 1, length(v_productos) - 1);

               p_success := 0;
               p_message := 'No hay stock suficiente para el/los articulo(s):' || v_2crlf || coalesce(v_productos, '');

            else

               p_success := 1;

            end if;

         else

            if to_number(v_cfg_valor) = 5 /* csEStockNegativo */ then

               -- tengo que validar segun lo que indique la configuracion de stock
               --
               select sp_cfg_getValor('Stock-General', 'SP Stock') into v_cfg_valor;

               v_cfg_valor := coalesce(v_cfg_valor, '') || ', ' || to_char(p_st_id);

               execute v_cfg_valor into p_message, p_success;

            end if;

         end if;

      end if;

   end if;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_doc_validate_date(p_doc_id integer, p_fecha date, OUT p_is_valid integer, OUT p_range character varying)
 RETURNS record
 LANGUAGE plpgsql
AS $function$
declare
  v_rango varchar(255);
begin

      if exists ( select fca.fca_id
                  from FechaControlAcceso fca
                  join Documento doc
                    on fca.fca_id = doc.fca_id
                  where doc.doc_id = p_doc_id
                     and p_fecha between fca.fca_fechadesde and fca.fca_fechahasta ) then

         p_is_valid := 1;
         p_range := '';

      else

         select 'Desde el ' || fca.fca_fechadesde::varchar || ' hasta el ' || fca.fca_fechahasta::varchar || ' inclusive.'
           into v_rango
         from FechaControlAcceso fca
         join Documento doc
           on fca.fca_id = doc.fca_id
         where doc.doc_id = p_doc_id;

         p_is_valid := 0;
         p_range := v_rango;

      end if;
end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_documento_get_next_number(p_doc_id integer, OUT p_number integer, OUT p_mask character varying, OUT p_enabled integer)
 RETURNS record
 LANGUAGE plpgsql
AS $function$
declare
    v_ta_id integer;
begin

    select ta_id from documento where doc_id = p_doc_id into v_ta_id;

    if v_ta_id is not null then

        select ta_ultimonro, ta_mascara, ta_tipo
          into p_number, p_mask, p_enabled
        from talonario
        where ta_id = v_ta_id;

    end if;

    p_number := coalesce(p_number, 0) + 1;
    p_mask := coalesce(p_mask, '');
    p_enabled := coalesce(p_enabled, 0);

    if(p_enabled != 1 /* suggested */) then

        p_enabled := 0;

    end if;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_documentohelp(p_emp_id integer, p_us_id integer, p_bforabm integer, p_filter character varying DEFAULT ''::character varying, p_check integer DEFAULT 0, p_doc_id integer DEFAULT 0, p_filter2 character varying DEFAULT ''::character varying, OUT rtn refcursor)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
declare
   v_sqlstmt varchar(8000);
   v_bFilterXEmpresa smallint;
   v_strUsId varchar(10);
   v_permisos varchar(1000);
begin

   /*------------------------------------------
	Este codigo es el que se asigna a @permiso.
	Se asigna en una sola linea para que sea mas rapida la sentencia
	and exists( select * from Permiso
                       where pre_id = Documento.pre_id_list
                         and (
                                  us_id = @@us_id
                              or
                                  exists(select * from UsuarioRol where us_id = @@us_id and rol_id = Permiso.rol_id)
                              )
                    )
	*/

   p_filter := lower(f_unaccent(p_filter));

   if instr(p_filter2, '{emp_id=0}') <> 0 then
      p_filter2 := replace(p_filter2, '{emp_id=0}', '');
      v_bFilterXEmpresa := 0;
   else
      v_bFilterXEmpresa := 1;
   end if;

   if instr(p_filter2, 'emp_id = ') <> 0 then
      v_bFilterXEmpresa := 0;
   end if;

   v_strUsId := p_us_id::varchar;

   v_permisos := ' and exists(select * from Permiso	where pre_id = Documento.pre_id_list and (us_id = ' 
                || v_strUsId
                || ' or exists(select * from UsuarioRol where us_id = ' || v_strUsId
                || ' and rol_id = Permiso.rol_id))) ';

   /*-----------------------------------------*/
   if p_check <> 0 then
      v_sqlstmt := 'select doc_id, '
                || 'doc_nombre as Nombre, '
                || 'doc_codigo as Codigo '
                || 'from Documento '
                || 'where (lower(f_unaccent(doc_nombre)) = ''' || p_filter
                || ''' or lower(f_unaccent(doc_codigo)) = ''' || p_filter || ''') ';

      if p_doc_id <> 0 then
         v_sqlstmt := v_sqlstmt || 'and (doc_id = ' || CAST(p_doc_id as varchar(20)) || ') ';
      end if;

      if p_emp_id <> 0 and v_bFilterXEmpresa <> 0 and p_bForAbm = 0 then
         v_sqlstmt := v_sqlstmt || 'and (emp_id = ' || CAST(p_emp_id as varchar(20)) || ') ';
      end if;

      if p_bForAbm = 0 then
         v_sqlstmt := v_sqlstmt || 'and activo <> 0 ';
      end if;

      if p_filter2 <> '' then
         v_sqlstmt := v_sqlstmt || 'and (' || p_filter2 || ') ';
      end if;

   else

      v_sqlstmt := 'select doc_id, '
                || 'doc_nombre   as Nombre, '
                || 'doc_codigo   as Codigo '
                || 'from Documento '
                || 'where (lower(f_unaccent(doc_codigo)) like ''%' || p_filter
                || '%'' or lower(f_unaccent(doc_nombre)) like ''%' || p_filter
                || '%'' or ''' || p_filter || ''' = '''') ';

      if p_emp_id <> 0 and v_bFilterXEmpresa <> 0 and p_bForAbm = 0 then
         v_sqlstmt := v_sqlstmt || 'and (emp_id = ' || CAST(p_emp_id as varchar(20)) || ') ';
      end if;

      if p_bForAbm = 0 then
         v_sqlstmt := v_sqlstmt || 'and activo <> 0 ';
      end if;

      if p_filter2 <> '' then
         v_sqlstmt := v_sqlstmt || 'and (' || p_filter2 || ') ';
      end if;

   end if;

   if p_bForAbm = 0 then
      v_sqlstmt := v_sqlstmt || v_permisos;
   end if;

   rtn := 'rtn';
      open rtn for execute v_sqlstmt;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_getrptid(OUT p_clienteid integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
DECLARE
BEGIN

   SELECT id_NextId
     INTO p_ClienteID
     FROM Id
      WHERE Id_Tabla = 'rptArbolRamaHoja'
              AND id_CampoId = 'rptarb_cliente';

   IF coalesce(p_ClienteID, 0) = 0 THEN
   BEGIN
      INSERT INTO id
        ( id_NextId, id_Tabla, id_CampoId )
        VALUES ( 0, 'rptArbolRamaHoja', 'rptarb_cliente' );

      p_ClienteID := 1;

   END;
   END IF;

   UPDATE id
      SET id_NextId = p_ClienteID + 1
      WHERE Id_Tabla = 'rptArbolRamaHoja'
     AND id_CampoId = 'rptarb_cliente';

END;
$function$;

CREATE OR REPLACE FUNCTION public.sp_help_get_filter(p_bfiltertype integer, p_filter character varying)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
begin

  /*
  HelpFilterBeginLike = 1
  HelpFilterHaveTo = 2
  HelpFilterWildcard = 3
  HelpFilterEndLike = 4
  HelpFilterIsLike = 5
  */
   case p_bFilterType 
      when 1 then p_filter := p_filter || '%';
      when 3 then p_filter := replace(p_filter, '*', '%');
      when 4 then p_filter := '%' || p_filter;
      when 5 then p_filter := p_filter;
      -- Default
      -- case 2 then '%' + @@filter + '%'
      else p_filter := '%' || p_filter || '%';
   end case;

   return p_filter;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_helpgetfilter(p_bfiltertype integer, p_filter character varying)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
DECLARE
   
BEGIN

  --/////////////////////////////////////////////////////////////////////////////////////
  /*
  Public Const c_HelpFilterBeginLike = 1
  Public Const c_HelpFilterHaveTo = 2
  Public Const c_HelpFilterWildcard = 3
  Public Const c_HelpFilterEndLike = 4
  Public Const c_HelpFilterIsLike = 5
  */
  return CASE p_bFilterType
                 WHEN 1 THEN p_filter || '%'
                 WHEN 3 THEN REPLACE(p_filter, '*', '%')
                 WHEN 4 THEN '%' || p_filter
                 WHEN 5 THEN p_filter
                 -- Default
                 -- case 2 then '%' + @@filter + '%'
                 ELSE '%' || p_filter || '%'
         END;
   --/////////////////////////////////////////////////////////////////////////////////////
           
END;
$function$;

CREATE OR REPLACE FUNCTION public.sp_historia_update(p_tbl_id integer, p_id integer, p_modifico integer, p_hst_operacion integer, p_hst_descrip character varying DEFAULT ''::character varying)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
begin

   if not exists ( select *
                   from Usuario
                   where us_id = p_modifico ) then
      return;

   end if;

   insert into Historia( tbl_id, id, modifico, hst_operacion, hst_descrip )
     values ( p_tbl_id, coalesce(p_id, 0), p_modifico, p_hst_operacion, coalesce(p_hst_descrip, '') );

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_lsdoc_remitos_venta(p_us_id integer, p_fini date, p_ffin date, p_cli_id character varying, p_est_id character varying, p_ccos_id character varying, p_suc_id character varying, p_ven_id character varying, p_doc_id character varying, p_cpg_id character varying, p_emp_id character varying, OUT rtn refcursor)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
begin

   rtn := 'rtn';

   select sp_lsdoc_remitos_venta_cliente(
                                  p_us_id,
                                  p_Fini,
                                  p_Ffin,
                                  p_cli_id,
                                  p_est_id,
                                  p_ccos_id,
                                  p_suc_id,
                                  p_ven_id,
                                  p_doc_id,
                                  p_cpg_id,
                                  p_emp_id) into rtn;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_ld_get_descuento(p_ld_id integer, p_pr_id integer, INOUT p_precio numeric)
 RETURNS numeric
 LANGUAGE plpgsql
AS $function$
declare
   v_ldi_id integer;
   v_ld_porcentaje decimal(18,6);
   v_ld_porcGlobal decimal(18,6);
   v_importe decimal(18,6);
   v_precio decimal(18,6);
   v_ld_id integer;
begin

   v_precio := p_precio;

   -- Valido si me pasaron una lista de descuento
   if p_ld_id is not null then

       if exists ( select ld_id from ListaDescuento where ld_id = p_ld_id ) then

           v_ld_id := p_ld_id;
           v_ld_porcGlobal := 0;

           select ldi_id,
                  ldi_importe,
                  ldi_porcentaje
             into v_ldi_id,
                  v_importe,
                  v_ld_porcentaje
           from ListaDescuentoItem
           where ld_id = v_ld_id
             and pr_id = p_pr_id;

           select ld_porcentaje
             into v_ld_porcGlobal
           from ListaDescuento
           where ld_id = v_ld_id;

           v_ld_porcGlobal := coalesce(v_ld_porcGlobal, 0);
           v_ld_porcentaje := coalesce(v_ld_porcentaje, 0);
           v_importe := coalesce(v_importe, 0);

           v_precio := v_precio - (v_precio * v_ld_porcGlobal / 100);
           v_precio := v_precio - v_importe;
           v_precio := v_precio - (v_precio * v_ld_porcentaje / 100);

           select ld_id_padre
             into v_ld_id
           from ListaDescuento
           where ld_id = v_ld_id;

           if v_ld_id is not null then

              select sp_ld_get_descuento(v_ld_id, p_pr_id, v_precio) into v_precio;

           end if;
       end if;
   end if;

   p_precio := v_precio;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_ld_get_descuento_str(p_ld_id integer, p_pr_id integer, INOUT p_descuento character varying)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
declare
   v_ldi_id integer;
   v_ld_porcentaje decimal(18,6);
   v_ld_porcGlobal decimal(18,6);
   v_importe decimal(18,6);
   v_ld_id integer;
   v_descuento varchar(255);
begin

    v_descuento := p_descuento;

    -- Valido si me pasaron una lista de descuento
    if p_ld_id is not null then

        if exists ( select ld_id from ListaDescuento where ld_id = p_ld_id ) then

            v_ld_id := p_ld_id;
            v_ld_porcGlobal := 0;

            -- Busco un descuento
            select ldi_id,
                   ldi_importe,
                   ldi_porcentaje
             into v_ldi_id,
                  v_importe,
                  v_ld_porcentaje
            from ListaDescuentoItem
            where ld_id = v_ld_id
              and pr_id = p_pr_id;

            select ld_porcentaje
             into v_ld_porcGlobal
            from ListaDescuento
            where ld_id = v_ld_id;

            v_ld_porcGlobal := coalesce(v_ld_porcGlobal, 0);
            v_ld_porcentaje := coalesce(v_ld_porcentaje, 0);
            v_importe := coalesce(v_importe, 0);

            if v_ld_porcGlobal > 0 then
              v_descuento := v_descuento || ' +' || CAST(v_ld_porcGlobal as decimal(18,4))::varchar || '%';
            end if;

            if v_importe > 0 then
              v_descuento := v_descuento || ' + $' || CAST(v_importe as decimal(18,4))::varchar;
            end if;

            if v_ld_porcentaje > 0 then
              v_descuento := v_descuento || ' +' || CAST(v_ld_porcentaje as decimal(18,4))::varchar || '%';
            end if;

            if v_ld_porcGlobal < 0 then
              v_descuento := v_descuento || ' - ' || CAST(v_ld_porcGlobal as decimal(18,4))::varchar || '%';
            end if;

            if v_importe < 0 then
              v_descuento := v_descuento || ' -' || CAST(v_importe as decimal(18,4))::varchar;
            end if;

            if v_ld_porcentaje < 0 then
              v_descuento := v_descuento || ' -' || CAST(v_ld_porcentaje as decimal(18,4))::varchar || '%';
            end if;

            select ld_id_padre
             into v_ld_id
            from ListaDescuento
            where ld_id = v_ld_id;

            if v_ld_id is null then

              select sp_ld_get_descuento_str(v_ld_id, p_pr_id, v_descuento) into v_descuento;

            end if;
        end if;
   end if;

   p_descuento := v_descuento;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_leng_get_text(p_code character varying, p_us_id integer, OUT rtn refcursor)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
DECLARE
   v_leng_id integer;
   v_rtn varchar(5000);
BEGIN

   v_rtn := '';

   SELECT cfg_valor::integer
     INTO v_leng_id
     FROM Configuracion
      WHERE cfg_grupo = 'Usuario-Config'
        AND cfg_aspecto = 'Lenguaje Gral_' || p_us_id::varchar;

   IF coalesce(v_leng_id, 0) = 0 THEN
   BEGIN
      SELECT cfg_valor::integer
        INTO v_leng_id
        FROM Configuracion
         WHERE cfg_grupo = 'general'
           AND cfg_aspecto = 'lenguaje';

   END;
   END IF;

   IF coalesce(v_leng_id, 0) = 0 THEN
      v_leng_id := 1;-- CrowSoft default language (Castellano)
   END IF;

   IF coalesce(v_leng_id, 0) <> 0 THEN
   BEGIN

      SELECT lengi_texto
        INTO v_rtn
        FROM LenguajeItem
         WHERE leng_id = v_leng_id
           AND lengi_codigo = p_code;

      -- Si no lo encuentro veo si el lenguaje tiene un lenguaje padre
      IF coalesce(v_rtn, '') = '' THEN
      BEGIN
         -- Busco el lenguaje tiene un lenguaje padre
         SELECT leng_id_padre
           INTO v_leng_id
           FROM Lenguaje
            WHERE leng_id = v_leng_id;

         -- Si hay un lenguaje padre le pido que me traiga el texto
         IF coalesce(v_leng_id, 0) <> 0 THEN
         BEGIN
            v_rtn := sp_leng_get_text_aux(p_code, v_leng_id);

         END;
         END IF;

      END;
      END IF;

   END;
   END IF;

   rtn := 'rtn';

   OPEN rtn FOR SELECT v_rtn;

END;
$function$;

CREATE OR REPLACE FUNCTION public.sp_leng_get_text_aux(p_code character varying DEFAULT NULL::character varying, p_leng_id integer DEFAULT NULL::integer)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
DECLARE
   v_leng_id integer;
   v_rtn varchar(5000);
BEGIN

   v_leng_id := p_leng_id;

   SELECT lengi_texto
     INTO v_rtn
     FROM LenguajeItem
      WHERE leng_id = v_leng_id
              AND lengi_codigo = p_code;

   -- if this language doesn't contain a definition for this code
   -- and the language is not the main language ( Spanish )
   -- we use the parent language
   --
   IF coalesce(v_rtn, '') = '' and v_leng_id <> 1 THEN

      SELECT leng_id_padre
        INTO v_leng_id
        FROM Lenguaje
         WHERE leng_id = v_leng_id;

      -- if the language doesn't have a parent
      -- we use 1 which is ( Spanish )
      --
      v_leng_id := coalesce(v_leng_id, 1);

      v_rtn := sp_leng_get_text_aux(p_code, v_leng_id);

   END IF;

   return v_rtn;

END;
$function$;

CREATE OR REPLACE FUNCTION public.sp_lista_precio_save_auto(p_doc_id integer, p_doct_id integer, p_is_new integer, p_fecha date)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
declare
  v_us_id integer;
  v_lp_id integer;
  v_lpi_id integer;
  v_pr_id integer;
  v_precio decimal(18,6);
  v_cotiz decimal(18,6);
  v_doc_fecha date;
  v_mon_id_precio integer;
  v_mon_id_legal integer;
  v_mon_id_lista integer;

  c_items refcursor;
  c_listas refcursor;
begin

   if p_doct_id in ( 1,2,3,4 ) then

      if p_doct_id in ( 1,3 ) then

         open c_listas for
            select lp_id
            from ListaPrecio
            where lp_tipo = 1
              and lp_autoXcompra <> 0;

      end if;

      if p_doct_id in ( 2,4 ) then

         open c_listas for
            select lp_id
            from ListaPrecio
            where lp_tipo in ( 2,3 )
              and lp_autoXcompra <> 0;

      end if;

      if p_is_new <> 0 then

         if p_doct_id = 1 then

            select modifico
              into v_us_id
            from FacturaVenta
            where fv_id = p_doc_id;

            open c_items for
               select fvi.pr_id,
                      fvi.fvi_precio,
                      fv.fv_cotizacion,
                      fv.mon_id,
                      fv.fv_fecha
               from FacturaVentaItem fvi
               join FacturaVenta fv
                 on fvi.fv_id = fv.fv_id
               where fvi.fv_id = p_doc_id
                 and round(fvi.fvi_precio, 2) <> 0;

         end if;

         if p_doct_id = 2 then

            select modifico
              into v_us_id
            from FacturaCompra
            where fc_id = p_doc_id;

            open c_items for
               select fci.pr_id,
                      fci.fci_precio,
                      fc.fc_cotizacion,
                      fc.mon_id,
                      fc.fc_fecha
               from FacturaCompraItem fci
               join FacturaCompra fc
                 on fci.fc_id = fc.fc_id
               where fci.fc_id = p_doc_id
                 and round(fci.fci_precio, 2) <> 0;

         end if;

         if p_doct_id = 3 then

            select modifico
              into v_us_id
            from RemitoVenta
            where rv_id = p_doc_id;

            open c_items for
               select rvi.pr_id,
                      rvi.rvi_precio,
                      rv.rv_cotizacion,
                      doc.mon_id,
                      rv.rv_fecha
               from RemitoVentaItem rvi
               join RemitoVenta rv
                 on rvi.rv_id = rv.rv_id
               join Documento doc
                 on rv.doc_id = doc.doc_id
               where rvi.rv_id = p_doc_id
                 and round(rvi.rvi_precio, 2) <> 0;

         end if;

         if p_doct_id = 4 then

            select modifico
              into v_us_id
            from RemitoCompra
            where rc_id = p_doc_id;

            open c_items for
               select rci.pr_id,
                      rci.rci_precio,
                      rc.rc_cotizacion,
                      doc.mon_id,
                      rc.rc_fecha
               from RemitoCompraItem rci
               join RemitoCompra rc
                 on rci.rc_id = rc.rc_id
               join Documento doc
                 on rc.doc_id = doc.doc_id
               where rci.rc_id = p_doc_id
                 and round(rci.rci_precio, 2) <> 0;

         end if;

      else

         if p_doct_id = 1 then

            select modifico
              into v_us_id
            from FacturaVenta
            where fv_id = p_doc_id;

            open c_items for
               select fvi2.pr_id,
                      fvi2.fvi_precio,
                      fv.fv_cotizacion,
                      fv.mon_id,
                      fv.fv_fecha
               from FacturaVentaItem fvi2
               join FacturaVenta fv
                 on fvi2.fv_id = fv.fv_id
               where fvi2.fv_id = p_doc_id
                 and round(fvi2.fvi_precio, 2) <> 0
                 and not exists ( select fv.fv_id
                                  from FacturaVentaItem fvi
                                  join FacturaVenta fv
                                    on fvi.fv_id = fv.fv_id
                                  where fv.fv_id <> p_doc_id
                                    and fvi.fv_fecha > p_fecha
                                    and fvi.pr_id = fvi2.pr_id );

         end if;

         if p_doct_id = 2 then

            select modifico
              into v_us_id
            from FacturaCompra
            where fc_id = p_doc_id;

            open c_items for
               select fci2.pr_id,
                      fci2.fci_precio,
                      fc.fc_cotizacion,
                      fc.mon_id,
                      fc.fc_fecha
               from FacturaCompraItem fci2
               join FacturaCompra fc
                 on fci2.fc_id = fc.fc_id
               where fci2.fc_id = p_doc_id
                 and round(fci2.fci_precio, 2) <> 0
                 and not exists ( select fc.fc_id
                                  from FacturaCompraItem fci
                                  join FacturaCompra fc
                                    on fci.fc_id = fc.fc_id
                                  where fc.fc_id <> p_doc_id
                                    and fc.fc_fecha > p_fecha
                                    and fci.pr_id = fci2.pr_id );

         end if;

         if p_doct_id = 3 then

            select modifico
              into v_us_id
            from RemitoVenta
            where rv_id = p_doc_id;

            open c_items for
               select rvi2.pr_id,
                      rvi2.rvi_precio,
                      rv.rv_cotizacion,
                      doc.mon_id,
                      rv.rv_fecha
               from RemitoVentaItem rvi2
               join RemitoVenta rv
                 on rvi2.rv_id = rv.rv_id
               join Documento doc
                 on rv.doc_id = doc.doc_id
               where rvi2.rv_id = p_doc_id
                 and round(rvi2.rvi_precio, 2) <> 0
                 and not exists ( select rv.rv_id
                                  from RemitoVentaItem rvi
                                  join RemitoVenta rv
                                    on rvi.rv_id = rv.rv_id
                                  where rv.rv_id <> p_doc_id
                                    and rvi.rv_fecha > p_fecha
                                    and rvi.pr_id = rvi2.pr_id );

         end if;

         if p_doct_id = 4 then

            select modifico
              into v_us_id
            from RemitoCompra
            where rc_id = p_doc_id;

            open c_items for
               select rci2.pr_id,
                      rci2.rci_precio,
                      rc.rc_cotizacion,
                      doc.mon_id,
                      rc.rc_fecha
               from RemitoCompraItem rci2
               join RemitoCompra rc
                 on rci2.rc_id = rc.rc_id
               join Documento doc
                 on rc.doc_id = doc.doc_id
               where rci2.rc_id = p_doc_id
                 and round(rci2.rci_precio, 2) <> 0
                 and not exists ( select rc.rc_id
                                  from RemitoCompraItem rci
                                  join RemitoCompra rc
                                    on rci.rc_id = rc.rc_id
                                  where rc.rc_id <> p_doc_id
                                    and rci.rc_fecha > p_fecha
                                    and rci.pr_id = rci2.pr_id );

         end if;

      end if;

      select mon_id
        into v_mon_id_legal
      from Moneda
      where mon_legal <> 0;

      loop

         fetch c_listas into v_lp_id;
         exit when not found;

         select mon_id
           into v_mon_id_lista
         from ListaPrecio
         where lp_id = v_lp_id;

         loop

            fetch c_items into v_pr_id,v_precio,v_cotiz,v_mon_id_precio,v_doc_fecha;
            exit when not found;

            -- calculo el precio segun su moneda y cotizacion
            --
            if v_mon_id_precio <> v_mon_id_lista then

               if v_mon_id_lista = v_mon_id_legal then

                  v_precio := v_precio * v_cotiz;

               else

                  if v_mon_id_precio = v_mon_id_legal then

                     v_cotiz := 0;
                     select sp_moneda_get_cotizacion(v_mon_id_lista, v_doc_fecha) into v_cotiz;

                     if v_cotiz is null then
                        v_cotiz := 0;
                     end if;

                     -- precio en moneda extranjera
                     --
                     if v_cotiz = 0 then
                        v_precio := 0;
                     else
                        v_precio := v_precio / v_cotiz;
                     end if;

                  else

                     -- paso a moneda legal el precio del documento
                     --
                     v_cotiz := 0;

                     select sp_moneda_get_cotizacion(v_mon_id_precio, v_doc_fecha) into v_cotiz;

                     if v_cotiz is null then
                        v_cotiz := 0;
                     end if;

                     -- precio en moneda legal
                     --
                     v_precio := v_precio * v_cotiz;

                     -- paso a la moneda de la lista de precios el precio en moneda legal
                     --
                     v_cotiz := 0;

                     select sp_moneda_get_cotizacion(v_mon_id_lista, v_doc_fecha) into v_cotiz;

                     if v_cotiz is null then
                        v_cotiz := 0;
                     end if;

                     -- precio en moneda extranjera
                     --
                     if v_cotiz = 0 then
                        v_precio := 0;
                     else
                        v_precio := v_precio / v_cotiz;
                     end if;

                  end if;

               end if;

            end if;

            -- actualizo el precio
            --
            v_lpi_id := null;

            select lpi_id
              into v_lpi_id
            from ListaPrecioItem
            where lp_id = v_lp_id
              and pr_id = v_pr_id;

            if v_lpi_id is null then

               select sp_dbGetNewId('ListaPrecioItem', 'lpi_id') into v_lpi_id;

               insert into ListaPrecioItem ( lp_id, lpi_id, lpi_precio, pr_id, modifico )
               values ( v_lp_id, v_lpi_id, v_precio, v_pr_id, v_us_id );

            else

               update ListaPrecioItem
                  set lpi_precio = v_precio,
                      modifico = v_us_id
               where lpi_id = v_lpi_id;

            end if;

         end loop;

         close c_items;

      end loop;

      close c_listas;

   end if;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_lp_get_precio(p_lp_id integer, p_pr_id integer, p_createtable integer DEFAULT 1, p_lp_id_padre integer DEFAULT 0, p_n integer DEFAULT 0, p_nousecache integer DEFAULT 0, ip_lp_id_lpc integer DEFAULT 0, p_isforcompra integer DEFAULT 0, OUT p_precio numeric)
 RETURNS numeric
 LANGUAGE plpgsql
AS $function$
declare
   p_lp_id_lpc integer := ip_lp_id_lpc; -- Este Id de lista de precios
   v_lpi_porcentaje decimal(18,6);
   v_lp_porcglobal decimal(18,6);
   v_precio decimal(18,6);
   v_lp_id integer;
   v_mon_id integer;
   v_mon_id_base integer;
   v_mon_default smallint;
   v_lp_porcentaje decimal(18,6);
   v_lp_enCache smallint;
   v_cfg_valor varchar(5000);
   v_cotiz decimal(18,6);
   v_cotiz2 decimal(18,6);

   v_lpm_id integer; -- lpm_id mencionado en la solapa precios de una lista hija

   v_lpm_id_lista integer; -- lmp_id mencionado en la solapa general de una lista hija

   v_lpm_id_precio integer; -- lpm_id mencionado en la solapa precios de la misma lista

   -- que estoy procesando
   v_fecha date;

   -- Si es la primera llamada a la lista
   -- analizo el uso de ListaPrecioConfig
   --
   v_checkListaPrecioConfig smallint;

   v_isForCompra integer;
   v_n integer;
   v_createTable integer;
begin

   v_isForCompra := p_isForCompra;
   v_n := p_n;
   v_createTable := p_createTable;

   select mon_id,
          lp_porcentaje,
          lp_encache
     into v_mon_id,
          v_lp_porcentaje,
          v_lp_enCache
   from ListaPrecio
   where lp_id = p_lp_id
     and activo <> 0;

   v_fecha := CURRENT_TIMESTAMP;

   if v_n = 0 then
      v_checkListaPrecioConfig := 1;
   else
      v_checkListaPrecioConfig := 0;
   end if;

   -- Si es la primera llamada compruebo si se trata de una lista de compras
   --
   if v_n = 0 then

      if exists ( select *
                  from ListaPrecio
                  where lp_id = p_lp_id
                    and lp_tipo = 2 ) then

         v_isForCompra := 1;
      end if;
   end if;

   v_n := v_n + 1;

   -- Si la lista no existe devuelvo precio 0
   --
   if p_lp_id is null then

      v_precio := 0;

   else

      -- Si la lista no existe devuelvo precio 0
      --
      if not exists ( select lp_id
                      from ListaPrecio
                      where lp_id = p_lp_id
                        and activo <> 0 ) then
         v_precio := 0;

      else
       declare
         v_fromCache smallint;
       begin
         v_fromCache := 0;

         if p_noUseCache = 0 then
            if v_lp_enCache <> 0 then
             declare
               v_cacheActivo integer;
             begin

               select sp_cfg_getValor('Ventas-General', 'Utilizar Cache de Precios') into v_cfg_valor;

               if isnumeric(v_cfg_valor) = 0 then
                  v_cacheActivo := 0;
               else
                  v_cacheActivo := to_number(v_cfg_valor);
               end if;

               if v_cacheActivo <> 0 then
                  v_fromCache := 1;

                  select coalesce(lpp_precio, 0)
                    into v_precio
                  from ListaPrecioPrecio
                  where pr_id = p_pr_id
                    and lp_id = p_lp_id;

               end if;

             end;
            end if;
         end if;

         if v_fromCache = 0 then

            -- Si es la primera llamada a la lista
            -- analizo el uso de ListaPrecioConfig
            --
            if v_checkListaPrecioConfig <> 0 then

               -- Solo si la lista principal no tiene un precio fijo
               --
               if not exists ( select *
                               from ListaPrecioItem
                               where lp_id = p_lp_id
                                 and pr_id = p_pr_id ) then

                  -- Si existen listas definidas para este producto
                  --
                  if exists ( select * from ListaPrecioConfig where pr_id = p_pr_id ) then

                     -- Si existen precios en las listas definidas para este producto
                     --
                     if exists ( select *
                                 from ListaPrecioItem lpi
                                 where pr_id = p_pr_id
                                   and exists ( select *
                                                from ListaPrecioConfig
                                                where pr_id = p_pr_id
                                                  and lp_id = lpi.lp_id )) then
                      declare
                        -- Cargo en una temporal todas las listas
                        -- (la principal y todo sus ancestros)
                        --
                        v_k integer := 1;
                      begin

                        create temporary table tt_listas_padre
                        (
                          lp_id integer ,
                          k integer
                        ) on commit drop;

                        -- La lista principal
                        --
                        insert into tt_listas_padre( lp_id, k ) values ( p_lp_id, 0 );

                        -- La lista padre de la principal (viejo esquema)
                        --
                        insert into tt_listas_padre( lp_id, k )
                          ( select lp_id_padre,
                                   v_k
                            from ListaPrecio
                            where lp_id = p_lp_id
                              and lp_id_padre is not null );

                        -- Las listas padre de la principal (nuevo viejo esquema)
                        --
                        insert into tt_listas_padre( lp_id, k )
                          ( select lp_id_padre,
                                   v_k
                            from ListaPrecioLista lp
                            where lp_id = p_lp_id
                              and lp_id_padre is not null
                              and not exists ( select *
                                               from tt_listas_padre
                                               where lp_id = lp.lp_id_padre ));

                        loop

                            if not exists ( select *
                                            from ListaPrecioLista lp
                                            join tt_listas_padre p
                                              on lp.lp_id = p.lp_id
                                             and p.k = v_k ) then
                               exit;
                            end if;

                            -- La lista padre de los padres (viejo esquema)
                            --
                            insert into tt_listas_padre( lp_id, k )
                            ( select lp.lp_id_padre,
                                     v_k + 1
                              from ListaPrecio lp
                              join tt_listas_padre p
                                on lp.lp_id = p.lp_id
                               and p.k = v_k
                              where lp.lp_id_padre is not null
                                and not exists ( select *
                                                 from tt_listas_padre
                                                 where lp_id = lp.lp_id_padre ));

                            -- Las listas padre de los padres (nuevo viejo esquema)
                            --
                            insert into tt_listas_padre( lp_id, k )
                            ( select lp.lp_id_padre,
                                     v_k + 1
                              from ListaPrecioLista lp
                              join tt_listas_padre p
                                on lp.lp_id = p.lp_id
                               and p.k = v_k
                              where lp.lp_id_padre is not null
                                and not exists ( select *
                                                 from tt_listas_padre
                                                 where lp_id = lp.lp_id_padre ));

                            v_k := v_k + 1;

                        end loop;

                        -- Cargo en una temporal todas las listas
                        -- (la principal y todo sus ancestros)
                        --
                        -- Ahora verifico que almenos una de estas listas
                        -- asociadas al producto en ListaPrecioConfig
                        -- tambien este asociada a la lista principal
                        -- o a uno de sus ancestros
                        --
                        -- Si existen precios en las listas definidas para este producto
                        --

                        if exists ( select 1
                                    from ListaPrecioItem lpi
                                    where pr_id = p_pr_id
                                      and exists ( select 1
                                                   from ListaPrecioConfig lpc
                                                   join tt_listas_padre p
                                                      on lpc.lp_id = p.lp_id
                                                   where lpc.pr_id = p_pr_id
                                                     and lpc.lp_id = lpi.lp_id )) then
                         declare
                           v_lpc_orden integer;
                         begin
                           select min(lpc.lpc_orden)
                             into v_lpc_orden
                           from ListaPrecioConfig lpc
                           join tt_listas_padre p
                             on lpc.lp_id = p.lp_id
                           where lpc.pr_id = p_pr_id
                             and exists ( select *
                                          from ListaPrecioItem lpi
                                          where pr_id = p_pr_id
                                            and lp_id = lpc.lp_id );

                           select lp_id
                             into p_lp_id_lpc
                           from ListaPrecioConfig i
                           where pr_id = p_pr_id
                             and lpc_orden = v_lpc_orden;

                           p_lp_id_lpc := coalesce(p_lp_id_lpc, 0);

                         end;
                        end if;

                      end;
                     end if;

                  end if;

               end if;
            end if;

            -- Busco un precio en esta lista
            --
            select lpi_precio, lpm_id
              into v_precio, v_lpm_id_precio
            from ListaPrecioItem
            where lp_id = p_lp_id
              and pr_id = p_pr_id
              and ( lp_id = p_lp_id_lpc or p_lp_id_lpc = 0 );

            -- Si tengo una lista de marcado
            --
            if coalesce(v_precio, 0) <> 0
               and v_lpm_id_precio is not null
               and v_isForCompra = 0
            then

               select sp_lp_get_precio_marcado(v_lpm_id_precio, v_mon_id) into v_precio;

            end if;

            -- Sino hay precio
            --
            if coalesce(v_precio, 0) = 0 then
               -- Si es la primear llamada creo las tablas
               --
               if v_createTable <> 0 then

                    create temporary table tt_precios
                    (
                      lpi_precio decimal(18,6) ,
                      lpi_porcentaje decimal(18,6) ,
                      lp_id_padre integer ,
                      lp_id integer ,
                      lpm_id integer
                    ) on commit drop;

                    create temporary table tt_listas
                    (
                      lp_id integer  not null,
                      lp_porcglobal decimal(18,6) ,
                      N integer ,
                      mon_id integer ,
                      lpm_id integer
                    ) on commit drop;

                  v_createTable := 0;
               end if;

               -- inserto el porcentaje si lo hay
               -- sobre este articulo
               --
               insert into tt_precios( lpi_precio, lpi_porcentaje, lp_id_padre, lp_id, lpm_id )
                 ( select 0,
                          lpi_porcentaje,
                          p_lp_id_padre,
                          p_lp_id,
                          lpm_id
                   from ListaPrecioItem
                   where lp_id = p_lp_id
                     and pr_id = p_pr_id );

               -------------------------------------------------------------------------------
               -- inserto todas las listas bases de esta lista
               --
               -- viejo esquema
               --
               insert into tt_listas( lp_id, lp_porcglobal, N, mon_id )
                 ( select lp_id,
                          v_lp_porcentaje,
                          v_n,
                          mon_id
                   from ListaPrecio lp
                   where exists ( select *
                                  from ListaPrecio
                                  where lp_id = p_lp_id
                                    and lp_id_padre = lp.lp_id )
                     and activo <> 0 );

               -- nuevo esquema
               --
               insert into tt_listas( lp_id, lp_porcglobal, N, mon_id, lpm_id )
                 ( select lpl.lp_id_padre,
                          lpl.lpl_porcentaje,
                          v_n,
                          lp.mon_id,
                          lpl.lpm_id
                   from ListaPrecioLista lpl
                   join ListaPrecio lp
                     on lpl.lp_id_padre = lp.lp_id
                   where lpl.lp_id = p_lp_id
                     and lp.activo <> 0 );

               loop

                 if not exists ( select * from tt_listas where n = v_n ) then
                   exit;
                 end if;

                 v_lpm_id := null;
                 v_lpm_id_lista := null;
                 v_mon_id_base := null;
                 v_lpi_porcentaje := 0;
                 v_lp_porcglobal := 0;

                 -- Obtengo la primera lista base
                 --
                 select min(lp_id) into v_lp_id from tt_listas where n = v_n;

                 -- obtengo el porcentaje global y el porcentaje sobre articulo para esta lista base
                 --
                 select lpi_porcentaje, lpm_id
                   into v_lpi_porcentaje, v_lpm_id
                 from tt_precios
                 where lp_id = p_lp_id;

                 select lp_porcglobal, mon_id, lpm_id
                   into v_lp_porcglobal, v_mon_id_base, v_lpm_id_lista
                 from tt_listas
                 where lp_id = v_lp_id;

                 -- La saco de la bolsa de listas pendientes
                 --
                 delete from tt_listas where lp_id = v_lp_id;

                 select sp_lp_get_precio(
                              v_lp_id,
                              p_pr_id,
                              0,
                              p_lp_id,
                              v_n,
                              p_noUseCache,
                              p_lp_id_lpc,
                              v_isForCompra)
                 into v_precio;

                 -- Si tengo un precio
                 --
                 if v_precio <> 0 then
                    -- Le aplico los porcentajes
                    --
                    v_precio := v_precio
                                + (v_precio * coalesce(v_lp_porcglobal, 0) / 100)
                                + (v_precio * coalesce(v_lpi_porcentaje, 0) / 100);

                    -- Si tengo una lista de marcado sobre el articulo
                    --
                    if v_lpm_id is not null then

                       select sp_lp_get_precio_marcado(v_lpm_id, v_mon_id_base) into v_precio;

                    end if;

                    -- Si tengo una lista de marcado sobre la lista
                    --
                    if v_lpm_id_lista is not null then

                       select sp_lp_get_precio_marcado(v_lpm_id_lista, v_mon_id_base) into v_precio;

                    end if;

                    -- Si la moneda de la lista es distinta
                    -- a la de la base (es decir a la del precio)
                    --
                    if v_mon_id <> v_mon_id_base then

                       -- Si la moneda de la lista es la moneda default
                       --
                       select mon_legal
                         into v_mon_default
                       from Moneda
                       where mon_id = v_mon_id;

                       -- Voy a tener que pasar a pesos el precio
                       -- de la base ya que encontre un precio en dolares u otra moneda
                       -- distinta a pesos (obvio el ejemplo es pa Argentina che)
                       --
                       if v_mon_default <> 0 then

                          -- Obtengo la cotizacion de la lista base
                          --
                          select sp_moneda_get_cotizacion(v_mon_id_base, v_fecha) into v_cotiz;

                          -- Paso a Pesos el precio (sigo en argentino pue)
                          --
                          v_precio := v_precio * v_cotiz;

                       -- Ahora bien si la moneda de la lista no es la moneda default
                       -- (pesos pa los argentinos {quien sabe por cuanto tiempo no :) })
                       --
                       else

                          -- Veamos si la lista base esta en pesos
                          --
                          select mon_legal
                            into v_mon_default
                          from Moneda
                          where mon_id = v_mon_id_base;

                          if v_mon_default <> 0 then

                             -- Ok la base esta en pesos asi que obtengo la cotizacion de la lista
                             -- para la que se me pidio el precio
                             --
                             select sp_moneda_get_cotizacion(v_mon_id, v_fecha) into v_cotiz;

                             -- Si hay cotizacion, divido el precio y guala, tengo
                             -- el precio expresado en dolares o yerbas similares
                             --
                             if v_cotiz <> 0 then

                                v_precio := v_precio / v_cotiz;

                             else

                                v_precio := 0;-- :( sin cotizacion no hay precio

                             end if;

                          else

                             -- Ok, al chango se le ocurrio comprar en dolares y vender en reales
                             -- entonces paso los dolares a pesos y luego los pesos a reales y listo
                             --
                             select sp_moneda_get_cotizacion(v_mon_id_base, v_fecha) into v_cotiz;

                             select sp_moneda_get_cotizacion(v_mon_id, v_fecha) into v_cotiz2;

                             v_precio := v_precio * v_cotiz;

                             -- Si hay cotizacion, divido el precio y guala, tengo
                             -- el precio expresado en dolares o yerbas similares
                             --
                             if v_cotiz2 <> 0 then

                                v_precio := v_precio / v_cotiz2;

                             else

                                v_precio := 0;-- :( sin cotizacion no hay precio

                             end if;

                          end if;

                       end if;

                    end if;

                    if not exists(select 1 from tt_precios where lp_id = v_lp_id) then

                       insert into tt_precios( lpi_precio, lpi_porcentaje, lp_id_padre, lp_id, lpm_id )
                                      values ( v_precio, 0, p_lp_id, 0, 0 );

                    else
                       -- Aplico al precio de la lista base el porcentaje global y el porcentaje sobre articulo
                       --
                       update tt_precios set lpi_precio = v_precio where lp_id = v_lp_id;

                    end if;

                 end if;
               end loop;

               -----------------------------------------------------------------------------------------
               -- while

               -- Si no encontre precios en esta lista devuelvo 0
               --
               if not exists( select 1 from tt_precios where lpi_precio <> 0) then

                  v_precio := 0;

               else

                  select min(lpi_precio)
                    into v_precio
                  from tt_precios
                  where lp_id_padre = p_lp_id
                    and lpi_precio > 0;

               end if;

            end if;

            --if IsNull(@precio,0) = 0 begin
            -- Ahora aplico las condiciones de redondeo de la lista
            -- solo si estoy en la primera llamada
            --
            if v_n = 1 and v_precio <> 0 then
             declare
               v_pr_noredondeo smallint;
             begin
               select pr_noredondeo
                 into v_pr_noredondeo
               from Producto
               where pr_id = p_pr_id;

               if v_pr_noredondeo = 0 then
                declare
                  v_bRedondear integer;
                begin

                  -- Veo si hay que redondear
                  --
                  select sp_cfg_getValor('Ventas-General', 'Redondear Decimales en Precios') into v_cfg_valor;

                  if isnumeric(v_cfg_valor) = 0 then
                     v_bRedondear := 0;
                  else
                     v_bRedondear := to_number(v_cfg_valor);
                  end if;

                  if v_bRedondear <> 0 and v_isForCompra = 0 then
                   declare
                     v_decimales integer;
                     v_precio_entero integer;
                   begin
                     -- Obtengo la cantidad de decimales
                     --
                     select sp_cfg_getValor('Ventas-General', 'Decimales en Precios') into v_cfg_valor;

                     if isnumeric(v_cfg_valor) <> 0 then
                        v_decimales := to_number(v_cfg_valor);
                     else
                        v_decimales := 0;
                     end if;

                     v_precio := round(v_precio, v_decimales);

                     v_precio_entero := v_precio;

                     -- Solo si el precio es entero
                     --
                     if v_precio_entero = v_precio then
                      declare
                        v_centavos decimal(18,6);
                      begin

                        -- Veo cuantos centavos le quiere restar
                        -- a los importes enteros
                        --
                        select sp_cfg_getValor('Ventas-General', 'Restar a precios enteros') into v_cfg_valor;

                        if isnumeric(v_cfg_valor) <> 0 then
                           v_centavos := to_number(v_cfg_valor);
                        else
                           v_centavos := 0;
                        end if;

                        if v_centavos <> 0 then

                           v_precio := v_precio - v_centavos;

                        end if;

                      end;
                     end if;

                   end;
                  end if;

                end;
               end if;

             end;
            end if;

         end if;

       end;
      end if;

   end if;

   p_precio := coalesce(v_precio, 0);

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_lsdoc_remitos_venta_cliente(p_us_id integer, p_fini date, p_ffin date, p_cli_id character varying, p_est_id character varying, p_ccos_id character varying, p_suc_id character varying, p_ven_id character varying, p_doc_id character varying, p_cpg_id character varying, p_emp_id character varying, OUT rtn refcursor)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
declare
   v_cli_id integer;
   v_ccos_id integer;
   v_suc_id integer;
   v_est_id integer;
   v_ven_id integer;
   v_doc_id integer;
   v_cpg_id integer;
   v_emp_id integer;
   v_ram_id_Cliente integer;
   v_ram_id_CentroCosto integer;
   v_ram_id_sucursal integer;
   v_ram_id_estado integer;
   v_ram_id_vendedor integer;
   v_ram_id_documento integer;
   v_ram_id_CondicionPago integer;
   v_ram_id_empresa integer;
   v_clienteID integer;
   v_IsRaiz smallint;
begin

   rtn := 'rtn';
   
   /*- ///////////////////////////////////////////////////////////////////////
    INICIO PRIMERA PARTE DE ARBOLES
   /////////////////////////////////////////////////////////////////////// */

   select * from sp_ArbConvertId(p_cli_id) into v_cli_id, v_ram_id_Cliente;

   select * from sp_ArbConvertId(p_ccos_id) into v_ccos_id, v_ram_id_CentroCosto;

   select * from sp_ArbConvertId(p_suc_id) into v_suc_id, v_ram_id_sucursal;

   select * from sp_ArbConvertId(p_est_id) into v_est_id, v_ram_id_estado;

   select * from sp_ArbConvertId(p_ven_id) into v_ven_id, v_ram_id_vendedor;

   select * from sp_ArbConvertId(p_doc_id) into v_doc_id, v_ram_id_documento;

   select * from sp_ArbConvertId(p_cpg_id) into v_cpg_id, v_ram_id_CondicionPago;

   select * from sp_ArbConvertId(p_emp_id) into v_emp_id, v_ram_id_empresa;

   select * from  sp_GetRptId() into v_clienteID;

   if v_ram_id_Cliente <> 0 then
   begin
      --	exec sp_ArbGetGroups @ram_id_Cliente, @clienteID, @@us_id
      select sp_ArbIsRaiz(v_ram_id_Cliente) into v_IsRaiz;

      if v_IsRaiz = 0 then
      begin
         perform sp_ArbGetAllHojas(v_ram_id_Cliente,
                           v_clienteID);

      end;
      else
         v_ram_id_Cliente := 0;

      end if;

   end;
   end if;

   if v_ram_id_CentroCosto <> 0 then
   begin
      --	exec sp_ArbGetGroups @ram_id_CentroCosto, @clienteID, @@us_id
      select sp_ArbIsRaiz(v_ram_id_CentroCosto) into v_IsRaiz;

      if v_IsRaiz = 0 then
      begin
         perform sp_ArbGetAllHojas(v_ram_id_CentroCosto,
                           v_clienteID);

      end;
      else
         v_ram_id_CentroCosto := 0;

      end if;

   end;
   end if;

   if v_ram_id_estado <> 0 then
   begin
      --	exec sp_ArbGetGroups @ram_id_Estado, @clienteID, @@us_id
      select sp_ArbIsRaiz(v_ram_id_estado) into v_IsRaiz;

      if v_IsRaiz = 0 then
      begin
         perform sp_ArbGetAllHojas(v_ram_id_estado,
                           v_clienteID);

      end;
      else
         v_ram_id_estado := 0;

      end if;

   end;
   end if;

   if v_ram_id_sucursal <> 0 then
   begin
      --	exec sp_ArbGetGroups @ram_id_Sucursal, @clienteID, @@us_id
      select sp_ArbIsRaiz(v_ram_id_sucursal) into v_IsRaiz;

      if v_IsRaiz = 0 then
      begin
         perform sp_ArbGetAllHojas(v_ram_id_sucursal,
                           v_clienteID);

      end;
      else
         v_ram_id_sucursal := 0;

      end if;

   end;
   end if;

   if v_ram_id_vendedor <> 0 then
   begin
      --	exec sp_ArbGetGroups @ram_id_Vendedor, @clienteID, @@us_id
      select sp_ArbIsRaiz(v_ram_id_vendedor) into v_IsRaiz;

      if v_IsRaiz = 0 then
      begin
         perform sp_ArbGetAllHojas(v_ram_id_vendedor,
                           v_clienteID);

      end;
      else
         v_ram_id_vendedor := 0;

      end if;

   end;
   end if;

   if v_ram_id_documento <> 0 then
   begin
      --	exec sp_ArbGetGroups @ram_id_Documento, @clienteID, @@us_id
      select sp_ArbIsRaiz(v_ram_id_documento) into v_IsRaiz;

      if v_IsRaiz = 0 then
      begin
         perform sp_ArbGetAllHojas(v_ram_id_documento,
                           v_clienteID);

      end;
      else
         v_ram_id_documento := 0;

      end if;

   end;
   end if;

   if v_ram_id_CondicionPago <> 0 then
   begin
      --	exec sp_ArbGetGroups @ram_id_CondicionPago, @clienteID, @@us_id
      select sp_ArbIsRaiz(v_ram_id_CondicionPago) into v_IsRaiz;

      if v_IsRaiz = 0 then
      begin
         perform sp_ArbGetAllHojas(v_ram_id_CondicionPago,
                           v_clienteID);

      end;
      else
         v_ram_id_CondicionPago := 0;

      end if;

   end;
   end if;

   if v_ram_id_empresa <> 0 then
   begin
      --	exec sp_ArbGetGroups @ram_id_empresa, @clienteID, @@us_id
      select sp_ArbIsRaiz(v_ram_id_empresa) into v_IsRaiz;

      if v_IsRaiz = 0 then
      begin
         perform sp_ArbGetAllHojas(v_ram_id_empresa,
                           v_clienteID);

      end;
      else
         v_ram_id_empresa := 0;

      end if;

   end;
   end if;

   /*- ///////////////////////////////////////////////////////////////////////
   FIN PRIMERA PARTE DE ARBOLES
   /////////////////////////////////////////////////////////////////////// */

   open rtn for

      select rv_id,
             '' TypeTask,
             rv_numero N_mero,
             rv_nrodoc Comprobante,
             cli_nombre Cliente,
             doc_nombre Documento,
             est_nombre Estado,
             rv_fecha Fecha,
             rv_fechaentrega Fecha_de_entrega,
             rv_neto Neto,
             rv_ivari IVA_RI,
             rv_ivarni IVA_RNI,
             rv_subtotal Subtotal,
             rv_total Total,
             rv_pendiente Pendiente,
             case rv_firmado
                when 0 then 'No'
                else 'Si'
             end Firmado,
             rv_descuento1 Desc_1,
             rv_descuento2 Desc_2,
             rv_importedesc1 Desc_1,
             rv_importedesc2 Desc_2,
             lp_nombre Lista_de_Precios,
             ld_nombre Lista_de_descuentos,
             cpg_nombre Condicion_de_Pago,
             ccos_nombre Centro_de_costo,
             suc_nombre Sucursal,
             emp_nombre Empresa,
             RemitoVenta.creado,
             RemitoVenta.modificado,
             us_nombre Modifico,
             rv_descrip Observaciones
      from RemitoVenta
      join Documento
        on RemitoVenta.doc_id = Documento.doc_id
      join Empresa
        on Documento.emp_id = Empresa.emp_id
      join Estado
        on RemitoVenta.est_id = Estado.est_id
      join Sucursal
        on RemitoVenta.suc_id = Sucursal.suc_id
      join Cliente
        on RemitoVenta.cli_id = Cliente.cli_id
      join Usuario
        on RemitoVenta.modifico = Usuario.us_id
      left join CondicionPago
        on RemitoVenta.cpg_id = CondicionPago.cpg_id
      left join Vendedor
        on RemitoVenta.ven_id = Vendedor.ven_id
      left join CentroCosto
        on RemitoVenta.ccos_id = CentroCosto.ccos_id
      left join ListaPrecio
        on RemitoVenta.lp_id = ListaPrecio.lp_id
      left join ListaDescuento
        on RemitoVenta.ld_id = ListaDescuento.ld_id
      where p_Fini <= rv_fecha
        and p_Ffin >= rv_fecha

      /* -///////////////////////////////////////////////////////////////////////
      INICIO SEGUNDA PARTE DE ARBOLES
      /////////////////////////////////////////////////////////////////////// */

        and ( Cliente.cli_id = v_cli_id
        or v_cli_id = 0 )
        and ( Estado.est_id = v_est_id
        or v_est_id = 0 )
        and ( Sucursal.suc_id = v_suc_id
        or v_suc_id = 0 )
        and ( Documento.doc_id = v_doc_id
        or v_doc_id = 0 )
        and ( CondicionPago.cpg_id = v_cpg_id
        or v_cpg_id = 0 )
        and ( CentroCosto.ccos_id = v_ccos_id
        or v_ccos_id = 0 )
        and ( Vendedor.ven_id = v_ven_id
        or v_ven_id = 0 )
        and ( Empresa.emp_id = v_emp_id
        or v_emp_id = 0 )
        -- Arboles
        and ( ( exists ( select rptarb_hojaid
                         from rptArbolRamaHoja
                            where rptarb_cliente = v_clienteID
                                    and tbl_id = 28

                                    and rptarb_hojaid = Cliente.cli_id ) )
        or ( v_ram_id_Cliente = 0 ) )
        and ( ( exists ( select rptarb_hojaid
                         from rptArbolRamaHoja
                            where rptarb_cliente = v_clienteID
                                    and tbl_id = 21

                                    and rptarb_hojaid = CentroCosto.ccos_id ) )
        or ( v_ram_id_CentroCosto = 0 ) )
        and ( ( exists ( select rptarb_hojaid
                         from rptArbolRamaHoja
                            where rptarb_cliente = v_clienteID
                                    and tbl_id = 4005

                                    and rptarb_hojaid = Estado.est_id ) )
        or ( v_ram_id_estado = 0 ) )
        and ( ( exists ( select rptarb_hojaid
                         from rptArbolRamaHoja
                            where rptarb_cliente = v_clienteID
                                    and tbl_id = 1007

                                    and rptarb_hojaid = Sucursal.suc_id ) )
        or ( v_ram_id_sucursal = 0 ) )
        and ( ( exists ( select rptarb_hojaid
                         from rptArbolRamaHoja
                            where rptarb_cliente = v_clienteID
                                    and tbl_id = 15

                                    and rptarb_hojaid = Vendedor.ven_id ) )
        or ( v_ram_id_vendedor = 0 ) )
        and ( ( exists ( select rptarb_hojaid
                         from rptArbolRamaHoja
                            where rptarb_cliente = v_clienteID
                                    and tbl_id = 4001

                                    and rptarb_hojaid = Documento.doc_id ) )
        or ( v_ram_id_documento = 0 ) )
        and ( ( exists ( select rptarb_hojaid
                         from rptArbolRamaHoja
                            where rptarb_cliente = v_clienteID
                                    and tbl_id = 1005

                                    and rptarb_hojaid = CondicionPago.cpg_id ) )
        or ( v_ram_id_CondicionPago = 0 ) )
        and ( ( exists ( select rptarb_hojaid
                         from rptArbolRamaHoja
                            where rptarb_cliente = v_clienteID
                                    and tbl_id = 1018

                                    and rptarb_hojaid = Empresa.emp_id ) )
        or ( v_ram_id_empresa = 0 ) )

      order by rv_fecha;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_lp_get_preciomarcado(p_lpm_id integer, p_mon_id integer, OUT p_precio numeric)
 RETURNS numeric
 LANGUAGE plpgsql
AS $function$
declare
   v_mon_default smallint;
   v_cotiz decimal(18,6);
   v_cotiz2 decimal(18,6);
   v_saltos decimal(18,6);
   v_precio2 decimal(18,6);
   v_lpm_base decimal(18,6);
   v_lpm_porcentaje decimal(18,6);
   v_lpm_salto decimal(18,6);
   v_lpm_decremento decimal(18,6);
   v_lpm_porcminimo decimal(18,6);
   v_lpm_porcmaximo decimal(18,6);
   v_lpm_montominimo decimal(18,6);
   v_mon_id_marcado integer;
   v_lpm_activo smallint;
   v_fecha date;
begin

   v_fecha := CURRENT_TIMESTAMP;

   select lpm_base,
          lpm_porcentaje,
          lpm_salto,
          lpm_decremento,
          lpm_porcminimo,
          lpm_porcmaximo,
          lpm_montominimo,
          mon_id,
          activo
     into v_lpm_base,
          v_lpm_porcentaje,
          v_lpm_salto,
          v_lpm_decremento,
          v_lpm_porcminimo,
          v_lpm_porcmaximo,
          v_lpm_montominimo,
          v_mon_id_marcado,
          v_lpm_activo
   from ListaPrecioMarcado
   where lpm_id = p_lpm_id;

   -- Solo operamos si hay salto
   --
   if v_lpm_salto > 0 and v_lpm_activo <> 0 then

      --------------------------------------------------------------------------------
      -- Tratamiento de Monedas entre Listas
      --
      --
      -- Si la moneda de la lista es distinta
      -- a la del marcado de la base (es decir a la del precio)
      --
      if p_mon_id <> v_mon_id_marcado then

         -- Si la moneda de la lista es la moneda default
         --
         select mon_legal
           into v_mon_default
         from Moneda
         where mon_id = p_mon_id;

         -- Voy a tener que pasar a pesos el precio
         -- de la base ya que encontre un precio en dolares u otra moneda
         -- distinta a pesos (obvio el ejemplo es pa Argentina che)
         --
         if v_mon_default <> 0 then

            -- Obtengo la cotizacion de la lista base
            --
            select sp_moneda_get_cotizacion(v_mon_id_marcado, v_fecha) into v_cotiz;

            -- Paso a Pesos el precio (sigo en argentino pue)
            --
            v_lpm_montominimo := v_lpm_montominimo * v_cotiz;

            v_lpm_base := v_lpm_base * v_cotiz;

         -- Ahora bien si la moneda de la lista no es la moneda default
         -- (pesos pa los argentinos {quien sabe por cuanto tiempo no :) })
         --
         else

            -- Veamos si la lista base esta en pesos
            --
            select mon_legal
              into v_mon_default
            from Moneda
            where mon_id = v_mon_id_marcado;

            if v_mon_default <> 0 then

               -- Ok la base esta en pesos asi que obtengo la cotizacion de la lista
               -- para la que se me pidio el precio
               --
               select sp_moneda_get_cotizacion(p_mon_id, v_fecha) into v_cotiz;

               -- Si hay cotizacion, divido el precio y guala, tengo
               -- el precio expresado en dolares o yerbas similares
               --
               if v_cotiz <> 0 then

                  v_lpm_montominimo := v_lpm_montominimo / v_cotiz;
                  v_lpm_base := v_lpm_base / v_cotiz;

               else

                  v_lpm_montominimo := 0;-- :( sin cotizacion no hay precio
                  v_lpm_base := 0;

               end if;

            else

               -- Ok, al chango se le ocurrio comprar en dolares y vender en reales
               -- entonces paso los dolares a pesos y luego los pesos a reales y listo
               --
               select sp_moneda_get_cotizacion(v_mon_id_marcado, v_fecha) into v_cotiz;
               select sp_moneda_get_cotizacion(p_mon_id, v_fecha) into v_cotiz2;

               v_lpm_montominimo := v_lpm_montominimo * v_cotiz;
               v_lpm_base := v_lpm_base * v_cotiz;

               -- Si hay cotizacion, divido el precio y guala, tengo
               -- el precio expresado en dolares o yerbas similares
               --
               if v_cotiz2 <> 0 then

                  v_lpm_montominimo := v_lpm_montominimo / v_cotiz2;
                  v_lpm_base := v_lpm_base / v_cotiz2;

               else

                  v_lpm_montominimo := 0;-- :( sin cotizacion no hay precio
                  v_lpm_base := 0;

               end if;
            end if;
         end if;
      end if;

      --
      -- FIN Tratamiento de Monedas entre Listas
      --------------------------------------------------------------------------------

      -- Obtenemos y aplicamos el porcentaje
      --
      v_saltos := (p_precio - v_lpm_base) / v_lpm_salto;

      v_lpm_porcentaje := v_lpm_porcentaje - (v_lpm_decremento * v_saltos);

      if v_lpm_porcentaje < v_lpm_porcminimo then

         v_lpm_porcentaje := v_lpm_porcminimo;

      end if;

      v_precio2 := p_precio * (1 + v_lpm_porcentaje / 100);

      -- Monto Minimo y Porcentaje Maximo
      --
      if (v_precio2 - p_precio) < v_lpm_montominimo then

         v_precio2 := p_precio + v_lpm_montominimo;

      end if;

      if (((v_precio2 / p_precio) - 1) * 100) > v_lpm_porcmaximo then

         v_precio2 := p_precio * (1 + v_lpm_porcmaximo / 100);

      end if;

      -- Finalmente devolvemos el precio
      --
      p_precio := v_precio2;

   end if;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_lsdoc_asientos(p_us_id integer, p_fini date, p_ffin date, p_doc_id character varying, p_emp_id character varying, OUT rtn refcursor)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
declare
   v_doc_id integer;
   v_emp_id integer;
   v_ram_id_documento integer;
   v_ram_id_empresa integer;
   v_clienteID integer;
   v_IsRaiz smallint;
begin

   rtn := 'rtn';

   /*- ///////////////////////////////////////////////////////////////////////
    INICIO PRIMERA PARTE DE ARBOLES
   /////////////////////////////////////////////////////////////////////// */

   select * from sp_ArbConvertId(p_doc_id) into v_doc_id, v_ram_id_documento;

   select * from sp_ArbConvertId(p_emp_id) into v_emp_id, v_ram_id_empresa;

   select * from  sp_GetRptId() into v_clienteID;

   if v_ram_id_documento <> 0 then
   begin
      --	exec sp_ArbGetGroups @ram_id_Documento, @clienteID, @@us_id
      select sp_ArbIsRaiz(v_ram_id_documento) into v_IsRaiz;

      if v_IsRaiz = 0 then
      begin
         perform sp_ArbGetAllHojas(v_ram_id_documento,
                           v_clienteID);

      end;
      else
         v_ram_id_documento := 0;

      end if;

   end;
   end if;

   if v_ram_id_empresa <> 0 then
   begin
      --	exec sp_ArbGetGroups @ram_id_empresa, @clienteID, @@us_id
      select sp_ArbIsRaiz(v_ram_id_empresa) into v_IsRaiz;

      if v_IsRaiz = 0 then
      begin
         perform sp_ArbGetAllHojas(v_ram_id_empresa,
                           v_clienteID);

      end;
      else
         v_ram_id_empresa := 0;

      end if;

   end;
   end if;

   /*- ///////////////////////////////////////////////////////////////////////
    FIN PRIMERA PARTE DE ARBOLES
   /////////////////////////////////////////////////////////////////////// */

   open rtn for

      select as_id,
             '' TypeTask,
             as_numero as "Número",
             as_nrodoc Comprobante,
             doc_nombre Documento,
             as_fecha Fecha,
             case doct_id_cliente
                when 1  then 'Factura de Venta'
                when 2  then 'Factura de Compra'
                when 7  then 'Nota de Credito Venta'
                when 8  then 'Nota de Credito Compra'
                when 9  then 'Nota de Debito Venta'
                when 10 then 'Nota de Debito Compra'
                when 13 then 'Cobranza'
                when 16 then 'Orden de Pago'
                when 17 then 'Deposito Banco'
                when 26 then 'Movimiento de Fondos'
             end Tipo_Doc,
             as_doc_cliente Documento_Aux,
             emp_nombre Empresa,
             ( select sum(asi_debe)
               from AsientoItem
               where as_id = Asiento.as_id
                 and asi_debe <> 0 ) Total,
             Asiento.creado,
             Asiento.modificado,
             us_nombre Modifico,
             as_descrip Observaciones
        from Asiento
        join Documento
          on Asiento.doc_id = Documento.doc_id
        join Usuario
          on Asiento.modifico = Usuario.us_id
        join Empresa
          on Documento.emp_id = Empresa.emp_id
        where p_Fini <= as_fecha
          and p_Ffin >= as_fecha

        /* -///////////////////////////////////////////////////////////////////////
        INICIO SEGUNDA PARTE DE ARBOLES
        /////////////////////////////////////////////////////////////////////// */
        
          and ( Documento.doc_id = v_doc_id
          or v_doc_id = 0 )
          and ( Empresa.emp_id = v_emp_id
          or v_emp_id = 0 )
          -- Arboles
          and ( ( exists ( select rptarb_hojaid
                           from rptArbolRamaHoja
                              where rptarb_cliente = v_clienteID
                                      and tbl_id = 4001
       
                                      and rptarb_hojaid = Documento.doc_id ) )
          or ( v_ram_id_documento = 0 ) )
          and ( ( exists ( select rptarb_hojaid
                           from rptArbolRamaHoja
                              where rptarb_cliente = v_clienteID
                                      and tbl_id = 1018
       
                                      and rptarb_hojaid = Empresa.emp_id ) )
          or ( v_ram_id_empresa = 0 ) )
          
        order by as_fecha;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_lsdoc_cobranzas(p_us_id integer, p_fini date, p_ffin date, p_cli_id character varying, p_est_id character varying, p_ccos_id character varying, p_suc_id character varying, p_cob_id character varying, p_doc_id character varying, p_emp_id character varying, OUT rtn refcursor)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
declare
   v_cli_id integer;
   v_ccos_id integer;
   v_suc_id integer;
   v_est_id integer;
   v_cob_id integer;
   v_doc_id integer;
   v_emp_id integer;
   v_ram_id_Cliente integer;
   v_ram_id_CentroCosto integer;
   v_ram_id_sucursal integer;
   v_ram_id_estado integer;
   v_ram_id_Cobrador integer;
   v_ram_id_documento integer;
   v_ram_id_CondicionPago integer;
   v_ram_id_empresa integer;
   v_clienteID integer;
   v_IsRaiz smallint;
begin

/*debug
p_us_id := 1;
p_Fini := '20000101'::date;
p_Ffin := '20150101'::date;
p_prov_id := '0';
p_est_id := '0';
p_ccos_id := '0';
p_suc_id := '0';
p_doc_id := '0';
p_cobz_id := '0';
p_emp_id := '0';
end debug*/

   rtn := 'rtn';

   /*- ///////////////////////////////////////////////////////////////////////
    INICIO PRIMERA PARTE DE ARBOLES
   /////////////////////////////////////////////////////////////////////// */

   select * from sp_ArbConvertId(p_cli_id) into v_cli_id, v_ram_id_Cliente;

   select * from sp_ArbConvertId(p_ccos_id) into v_ccos_id, v_ram_id_CentroCosto;

   select * from sp_ArbConvertId(p_suc_id) into v_suc_id, v_ram_id_sucursal;

   select * from sp_ArbConvertId(p_est_id) into v_est_id, v_ram_id_estado;

   select * from sp_ArbConvertId(p_cob_id) into v_cob_id, v_ram_id_Cobrador;

   select * from sp_ArbConvertId(p_doc_id) into v_doc_id, v_ram_id_documento;

   select * from sp_ArbConvertId(p_emp_id) into v_emp_id, v_ram_id_empresa;

   select * from  sp_GetRptId() into v_clienteID;

   if v_ram_id_Cliente <> 0 then
   begin
      --	exec sp_ArbGetGroups @ram_id_Cliente, @clienteID, @@us_id
      select sp_ArbIsRaiz(v_ram_id_Cliente) into v_IsRaiz;

      if v_IsRaiz = 0 then
      begin
         perform sp_ArbGetAllHojas(v_ram_id_Cliente,
                           v_clienteID);

      end;
      else
         v_ram_id_Cliente := 0;

      end if;

   end;
   end if;

   if v_ram_id_CentroCosto <> 0 then
   begin
      --	exec sp_ArbGetGroups @ram_id_CentroCosto, @clienteID, @@us_id
      select sp_ArbIsRaiz(v_ram_id_CentroCosto) into v_IsRaiz;

      if v_IsRaiz = 0 then
      begin
         perform sp_ArbGetAllHojas(v_ram_id_CentroCosto,
                           v_clienteID);

      end;
      else
         v_ram_id_CentroCosto := 0;

      end if;

   end;
   end if;

   if v_ram_id_estado <> 0 then
   begin
      --	exec sp_ArbGetGroups @ram_id_Estado, @clienteID, @@us_id
      select sp_ArbIsRaiz(v_ram_id_estado) into v_IsRaiz;

      if v_IsRaiz = 0 then
      begin
         perform sp_ArbGetAllHojas(v_ram_id_estado,
                           v_clienteID);

      end;
      else
         v_ram_id_estado := 0;

      end if;

   end;
   end if;

   if v_ram_id_sucursal <> 0 then
   begin
      --	exec sp_ArbGetGroups @ram_id_Sucursal, @clienteID, @@us_id
      select sp_ArbIsRaiz(v_ram_id_sucursal) into v_IsRaiz;

      if v_IsRaiz = 0 then
      begin
         perform sp_ArbGetAllHojas(v_ram_id_sucursal,
                           v_clienteID);

      end;
      else
         v_ram_id_sucursal := 0;

      end if;

   end;
   end if;

   if v_ram_id_Cobrador <> 0 then
   begin
      --	exec sp_ArbGetGroups @ram_id_Cobrador, @clienteID, @@us_id
      select sp_ArbIsRaiz(v_ram_id_Cobrador) into v_IsRaiz;

      if v_IsRaiz = 0 then
      begin
         perform sp_ArbGetAllHojas(v_ram_id_Cobrador,
                           v_clienteID);

      end;
      else
         v_ram_id_Cobrador := 0;

      end if;

   end;
   end if;

   if v_ram_id_documento <> 0 then
   begin
      --	exec sp_ArbGetGroups @ram_id_Documento, @clienteID, @@us_id
      select sp_ArbIsRaiz(v_ram_id_documento) into v_IsRaiz;

      if v_IsRaiz = 0 then
      begin
         perform sp_ArbGetAllHojas(v_ram_id_documento,
                           v_clienteID);

      end;
      else
         v_ram_id_documento := 0;

      end if;

   end;
   end if;

   if v_ram_id_CondicionPago <> 0 then
   begin
      --	exec sp_ArbGetGroups @ram_id_CondicionPago, @clienteID, @@us_id
      select sp_ArbIsRaiz(v_ram_id_CondicionPago) into v_IsRaiz;

      if v_IsRaiz = 0 then
      begin
         perform sp_ArbGetAllHojas(v_ram_id_CondicionPago,
                           v_clienteID);

      end;
      else
         v_ram_id_CondicionPago := 0;

      end if;

   end;
   end if;

   if v_ram_id_empresa <> 0 then
   begin
      --	exec sp_ArbGetGroups @ram_id_empresa, @clienteID, @@us_id
      select sp_ArbIsRaiz(v_ram_id_empresa) into v_IsRaiz;

      if v_IsRaiz = 0 then
      begin
         perform sp_ArbGetAllHojas(v_ram_id_empresa,
                           v_clienteID);

      end;
      else
         v_ram_id_empresa := 0;

      end if;

   end;
   end if;

   /*- ///////////////////////////////////////////////////////////////////////
    FIN PRIMERA PARTE DE ARBOLES
   /////////////////////////////////////////////////////////////////////// */

   open rtn for

      select cobz_id,
             '' TypeTask,
             cobz_numero as "Número",
             cobz_nrodoc Comprobante,
             cli_nombre Cliente,
             doc_nombre Documento,
             est_nombre Estado,
             cobz_fecha Fecha,
             cobz_neto Neto,
             cobz_total Total,
             cobz_pendiente Pendiente,
             case cobz_firmado
                when 0 then 'No'
                else 'Si'
             end Firmado,
             ccos_nombre Centro_de_costo,
             suc_nombre Sucursal,
             emp_nombre Empresa,
             Cobranza.creado,
             Cobranza.modificado,
             us_nombre Modifico,
             cobz_descrip Observaciones
        from Cobranza
        join Documento
         on Cobranza.doc_id = Documento.doc_id
        join Empresa
         on Documento.emp_id = Empresa.emp_id
        join Estado
         on Cobranza.est_id = Estado.est_id
        join Sucursal
         on Cobranza.suc_id = Sucursal.suc_id
        join Cliente
         on Cobranza.cli_id = Cliente.cli_id
        join Usuario
         on Cobranza.modifico = Usuario.us_id
        left join Cobrador
         on Cobranza.cob_id = Cobrador.cob_id
        left join CentroCosto
         on Cobranza.ccos_id = CentroCosto.ccos_id
        where p_Fini <= cobz_fecha
          and p_Ffin >= cobz_fecha

        /* -///////////////////////////////////////////////////////////////////////
        INICIO SEGUNDA PARTE DE ARBOLES
        /////////////////////////////////////////////////////////////////////// */

          and ( Cliente.cli_id = v_cli_id
          or v_cli_id = 0 )
          and ( Estado.est_id = v_est_id
          or v_est_id = 0 )
          and ( Sucursal.suc_id = v_suc_id
          or v_suc_id = 0 )
          and ( Documento.doc_id = v_doc_id
          or v_doc_id = 0 )
          and ( CentroCosto.ccos_id = v_ccos_id
          or v_ccos_id = 0 )
          and ( Cobrador.cob_id = v_cob_id
          or v_cob_id = 0 )
          and ( Empresa.emp_id = v_emp_id
          or v_emp_id = 0 )
          -- Arboles
          and ( ( exists ( select rptarb_hojaid
                           from rptArbolRamaHoja
                              where rptarb_cliente = v_clienteID
                                      and tbl_id = 28

                                      and rptarb_hojaid = Cliente.cli_id ) )
          or ( v_ram_id_Cliente = 0 ) )
          and ( ( exists ( select rptarb_hojaid
                           from rptArbolRamaHoja
                              where rptarb_cliente = v_clienteID
                                      and tbl_id = 21

                                      and rptarb_hojaid = CentroCosto.ccos_id ) )
          or ( v_ram_id_CentroCosto = 0 ) )
          and ( ( exists ( select rptarb_hojaid
                           from rptArbolRamaHoja
                              where rptarb_cliente = v_clienteID
                                      and tbl_id = 4005

                                      and rptarb_hojaid = Estado.est_id ) )
          or ( v_ram_id_estado = 0 ) )
          and ( ( exists ( select rptarb_hojaid
                           from rptArbolRamaHoja
                              where rptarb_cliente = v_clienteID
                                      and tbl_id = 1007

                                      and rptarb_hojaid = Sucursal.suc_id ) )
          or ( v_ram_id_sucursal = 0 ) )
          and ( ( exists ( select rptarb_hojaid
                           from rptArbolRamaHoja
                              where rptarb_cliente = v_clienteID
                                      and tbl_id = 25

                                      and rptarb_hojaid = Cobrador.cob_id ) )
          or ( v_ram_id_Cobrador = 0 ) )
          and ( ( exists ( select rptarb_hojaid
                           from rptArbolRamaHoja
                              where rptarb_cliente = v_clienteID
                                      and tbl_id = 4001

                                      and rptarb_hojaid = Documento.doc_id ) )
          or ( v_ram_id_documento = 0 ) )
          and ( ( exists ( select rptarb_hojaid
                           from rptArbolRamaHoja
                              where rptarb_cliente = v_clienteID
                                      and tbl_id = 1018

                                      and rptarb_hojaid = Empresa.emp_id ) )
          or ( v_ram_id_empresa = 0 ) )

        order by cobz_fecha;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_lsdoc_facturas_compra(p_us_id integer, p_fini date, p_ffin date, p_prov_id character varying, p_est_id character varying, p_ccos_id character varying, p_suc_id character varying, p_doc_id character varying, p_cpg_id character varying, p_emp_id character varying, OUT rtn refcursor)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
declare
   v_prov_id integer;
   v_ccos_id integer;
   v_suc_id integer;
   v_est_id integer;
   v_doc_id integer;
   v_cpg_id integer;
   v_emp_id integer;
   v_ram_id_proveedor integer;
   v_ram_id_CentroCosto integer;
   v_ram_id_sucursal integer;
   v_ram_id_estado integer;
   v_ram_id_vendedor integer;
   v_ram_id_documento integer;
   v_ram_id_CondicionPago integer;
   v_ram_id_empresa integer;
   v_clienteID integer;
   v_IsRaiz smallint;
begin

/*debug
p_us_id := 1;
p_Fini := '20000101'::date;
p_Ffin := '20150101'::date;
p_prov_id := '0';
p_est_id := '0';
p_ccos_id := '0';
p_suc_id := '0';
p_doc_id := '0';
p_cpg_id := '0';
p_emp_id := '0';
end debug*/

   rtn := 'rtn';

   /*- ///////////////////////////////////////////////////////////////////////
    INICIO PRIMERA PARTE DE ARBOLES
   /////////////////////////////////////////////////////////////////////// */

   select * from sp_ArbConvertId(p_prov_id) into v_prov_id, v_ram_id_proveedor;

   select * from sp_ArbConvertId(p_ccos_id) into v_ccos_id, v_ram_id_CentroCosto;

   select * from  sp_ArbConvertId(p_suc_id) into v_suc_id, v_ram_id_sucursal;

   select * from  sp_ArbConvertId(p_est_id) into v_est_id, v_ram_id_estado;

   select * from  sp_ArbConvertId(p_doc_id) into v_doc_id, v_ram_id_documento;

   select * from  sp_ArbConvertId(p_cpg_id) into v_cpg_id, v_ram_id_CondicionPago;

   select * from  sp_ArbConvertId(p_emp_id) into v_emp_id, v_ram_id_empresa;

   select * from  sp_GetRptId() into v_clienteID;

   if v_ram_id_proveedor <> 0 then
   begin
      --	exec sp_ArbGetGroups @ram_id_Proveedor, @clienteID, @@us_id
      select sp_ArbIsRaiz(v_ram_id_proveedor) into v_IsRaiz;

      if v_IsRaiz = 0 then
      begin
         perform sp_ArbGetAllHojas(v_ram_id_proveedor,
                           v_clienteID);

      end;
      else
         v_ram_id_proveedor := 0;

      end if;

   end;
   end if;

   if v_ram_id_CentroCosto <> 0 then
   begin
      --	exec sp_ArbGetGroups @ram_id_CentroCosto, @clienteID, @@us_id
      select sp_ArbIsRaiz(v_ram_id_CentroCosto) into v_IsRaiz;

      if v_IsRaiz = 0 then
      begin
         perform sp_ArbGetAllHojas(v_ram_id_CentroCosto,
                           v_clienteID);

      end;
      else
         v_ram_id_CentroCosto := 0;

      end if;

   end;
   end if;

   if v_ram_id_estado <> 0 then
   begin
      --	exec sp_ArbGetGroups @ram_id_Estado, @clienteID, @@us_id
      select sp_ArbIsRaiz(v_ram_id_estado) into v_IsRaiz;

      if v_IsRaiz = 0 then
      begin
         perform sp_ArbGetAllHojas(v_ram_id_estado,
                           v_clienteID);

      end;
      else
         v_ram_id_estado := 0;

      end if;

   end;
   end if;

   if v_ram_id_sucursal <> 0 then
   begin
      --	exec sp_ArbGetGroups @ram_id_Sucursal, @clienteID, @@us_id
      select sp_ArbIsRaiz(v_ram_id_sucursal) into v_IsRaiz;

      if v_IsRaiz = 0 then
      begin
         perform sp_ArbGetAllHojas(v_ram_id_sucursal,
                           v_clienteID);

      end;
      else
         v_ram_id_sucursal := 0;

      end if;

   end;
   end if;

   if v_ram_id_vendedor <> 0 then
   begin
      --	exec sp_ArbGetGroups @ram_id_Vendedor, @clienteID, @@us_id
      select sp_ArbIsRaiz(v_ram_id_vendedor) into v_IsRaiz;

      if v_IsRaiz = 0 then
      begin
         perform sp_ArbGetAllHojas(v_ram_id_vendedor,
                           v_clienteID);

      end;
      else
         v_ram_id_vendedor := 0;

      end if;

   end;
   end if;

   if v_ram_id_documento <> 0 then
   begin
      --	exec sp_ArbGetGroups @ram_id_Documento, @clienteID, @@us_id
      select sp_ArbIsRaiz(v_ram_id_documento) into v_IsRaiz;

      if v_IsRaiz = 0 then
      begin
         perform sp_ArbGetAllHojas(v_ram_id_documento,
                           v_clienteID);

      end;
      else
         v_ram_id_documento := 0;

      end if;

   end;
   end if;

   if v_ram_id_CondicionPago <> 0 then
   begin
      --	exec sp_ArbGetGroups @ram_id_CondicionPago, @clienteID, @@us_id
      select sp_ArbIsRaiz(v_ram_id_CondicionPago) into v_IsRaiz;

      if v_IsRaiz = 0 then
      begin
         perform sp_ArbGetAllHojas(v_ram_id_CondicionPago,
                           v_clienteID);

      end;
      else
         v_ram_id_CondicionPago := 0;

      end if;

   end;
   end if;

   if v_ram_id_empresa <> 0 then
   begin
      --	exec sp_ArbGetGroups @ram_id_Empresa, @clienteID, @@us_id
      select sp_ArbIsRaiz(v_ram_id_empresa) into v_IsRaiz;

      if v_IsRaiz = 0 then
      begin
         perform sp_ArbGetAllHojas(v_ram_id_empresa,
                           v_clienteID);

      end;
      else
         v_ram_id_empresa := 0;

      end if;

   end;
   end if;

   /*- ///////////////////////////////////////////////////////////////////////
    FIN PRIMERA PARTE DE ARBOLES
   /////////////////////////////////////////////////////////////////////// */

   open rtn for

      select fc_id,
             '' TypeTask,
             fc_numero as "Número",
             fc_nrodoc Comprobante,
             prov_nombre Proveedor,
             doc_nombre Documento,
             est_nombre Estado,
             case fc_tipocomprobante
                when 1 then 'Original'
                when 2 then 'Fax'
                when 3 then 'Fotocopia'
                when 4 then 'Duplicado'
             end Tipo_Comprobante,
             fc_fecha Fecha,
             fc_fechaentrega Fecha_de_entrega,
             fc_fechaiva Fecha_IVA,
             fc_neto Neto,
             fc_ivari IVA_RI,
             fc_ivarni IVA_RNI,
             fc_totalotros Otros,
             fc_subtotal Subtotal,
             fc_total Total,
             fc_pendiente Pendiente,
             case fc_firmado
                when 0 then 'No'
                else 'Si'
             end Firmado,
             fc_descuento1 Desc_1,
             fc_descuento2 Desc_2,
             fc_importedesc1 Desc_1,
             fc_importedesc2 Desc_2,
             lp_nombre Lista_de_Precios,
             ld_nombre Lista_de_descuentos,
             cpg_nombre Condicion_de_Pago,
             ccos_nombre Centro_de_costo,
             suc_nombre Sucursal,
             emp_nombre Empresa,
             FacturaCompra.creado,
             FacturaCompra.modificado,
             us_nombre Modifico,
             fc_descrip Observaciones
        from FacturaCompra
        join Documento
          on FacturaCompra.doc_id = Documento.doc_id
        join Empresa
          on Documento.emp_id = Empresa.emp_id
        join CondicionPago
          on FacturaCompra.cpg_id = CondicionPago.cpg_id
        join Estado
          on FacturaCompra.est_id = Estado.est_id
        join Sucursal
          on FacturaCompra.suc_id = Sucursal.suc_id
        join Proveedor
          on FacturaCompra.prov_id = Proveedor.prov_id
        join Usuario
          on FacturaCompra.modifico = Usuario.us_id
        left join CentroCosto
          on FacturaCompra.ccos_id = CentroCosto.ccos_id
        left join ListaPrecio
          on FacturaCompra.lp_id = ListaPrecio.lp_id
        left join ListaDescuento
          on FacturaCompra.ld_id = ListaDescuento.ld_id
        where p_Fini <= fc_fecha
          and p_Ffin >= fc_fecha

        /* -///////////////////////////////////////////////////////////////////////
        INICIO SEGUNDA PARTE DE ARBOLES
        /////////////////////////////////////////////////////////////////////// */

          and ( Proveedor.prov_id = v_prov_id
          or v_prov_id = 0 )
          and ( Estado.est_id = v_est_id
          or v_est_id = 0 )
          and ( Sucursal.suc_id = v_suc_id
          or v_suc_id = 0 )
          and ( Documento.doc_id = v_doc_id
          or v_doc_id = 0 )
          and ( CondicionPago.cpg_id = v_cpg_id
          or v_cpg_id = 0 )
          and ( FacturaCompra.ccos_id = v_ccos_id
          or v_ccos_id = 0
          or exists ( select *
                      from FacturaCompraItem fci
                         where fci.fc_id = FacturaCompra.fc_id
                                 and fci.ccos_id = v_ccos_id ) )
          and ( Empresa.emp_id = v_emp_id
          or v_emp_id = 0 )
          -- Arboles
          and ( ( exists ( select rptarb_hojaid
                           from rptArbolRamaHoja
                              where rptarb_cliente = v_clienteID
                                      and tbl_id = 29
                                      and rptarb_hojaid = Proveedor.prov_id ) )
          or ( v_ram_id_proveedor = 0 ) )
          and ( ( exists ( select rptarb_hojaid
                           from rptArbolRamaHoja
                              where rptarb_cliente = v_clienteID
                                      and tbl_id = 21
                                      and ( rptarb_hojaid = FacturaCompra.ccos_id
                                      or exists ( select *
                                                  from FacturaCompraItem fci
                                                     where fci.fc_id = FacturaCompra.fc_id
                                                             and fci.ccos_id = rptarb_hojaid ) ) ) )
          or ( v_ram_id_CentroCosto = 0 ) )
          and ( ( exists ( select rptarb_hojaid
                           from rptArbolRamaHoja
                              where rptarb_cliente = v_clienteID
                                      and tbl_id = 4005
                                      and rptarb_hojaid = Estado.est_id ) )
          or ( v_ram_id_estado = 0 ) )
          and ( ( exists ( select rptarb_hojaid
                           from rptArbolRamaHoja
                              where rptarb_cliente = v_clienteID
                                      and tbl_id = 1007
                                      and rptarb_hojaid = Sucursal.suc_id ) )
          or ( v_ram_id_sucursal = 0 ) )
          and ( ( exists ( select rptarb_hojaid
                           from rptArbolRamaHoja
                              where rptarb_cliente = v_clienteID
                                      and tbl_id = 4001
                                      and rptarb_hojaid = Documento.doc_id ) )
          or ( v_ram_id_documento = 0 ) )
          and ( ( exists ( select rptarb_hojaid
                           from rptArbolRamaHoja
                              where rptarb_cliente = v_clienteID
                                      and tbl_id = 1005
                                      and rptarb_hojaid = CondicionPago.cpg_id ) )
          or ( v_ram_id_CondicionPago = 0 ) )
          and ( ( exists ( select rptarb_hojaid
                           from rptArbolRamaHoja
                              where rptarb_cliente = v_clienteID
                                      and tbl_id = 1018
                                      and rptarb_hojaid = Empresa.emp_id ) )
          or ( v_ram_id_empresa = 0 ) )

        order by fc_fecha;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_lsdoc_facturas_venta(p_us_id integer, p_fini date, p_ffin date, p_cli_id character varying, p_est_id character varying, p_ccos_id character varying, p_suc_id character varying, p_ven_id character varying, p_doc_id character varying, p_cpg_id character varying, p_emp_id character varying, OUT rtn refcursor)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
declare
   v_cli_id integer;
   v_ccos_id integer;
   v_suc_id integer;
   v_est_id integer;
   v_ven_id integer;
   v_doc_id integer;
   v_cpg_id integer;
   v_emp_id integer;
   v_ram_id_Cliente integer;
   v_ram_id_CentroCosto integer;
   v_ram_id_sucursal integer;
   v_ram_id_estado integer;
   v_ram_id_vendedor integer;
   v_ram_id_documento integer;
   v_ram_id_CondicionPago integer;
   v_ram_id_empresa integer;
   v_clienteID integer;
   v_IsRaiz smallint;
begin

   rtn := 'rtn';
   
   /*- ///////////////////////////////////////////////////////////////////////
    INICIO PRIMERA PARTE DE ARBOLES
   /////////////////////////////////////////////////////////////////////// */
      
   select * from sp_ArbConvertId(p_cli_id) into v_cli_id, v_ram_id_Cliente;

   select * from sp_ArbConvertId(p_ccos_id) into v_ccos_id, v_ram_id_CentroCosto;

   select * from sp_ArbConvertId(p_suc_id) into v_suc_id, v_ram_id_sucursal;

   select * from sp_ArbConvertId(p_est_id) into v_est_id, v_ram_id_estado;

   select * from sp_ArbConvertId(p_ven_id) into v_ven_id, v_ram_id_vendedor;

   select * from sp_ArbConvertId(p_doc_id) into v_doc_id, v_ram_id_documento;

   select * from sp_ArbConvertId(p_cpg_id) into v_cpg_id, v_ram_id_CondicionPago;

   select * from sp_ArbConvertId(p_emp_id) into v_emp_id, v_ram_id_empresa;

   select * from  sp_GetRptId() into v_clienteID;

   if v_ram_id_Cliente <> 0 then
   begin
      --	exec sp_ArbGetGroups @ram_id_Cliente, @clienteID, @@us_id
      select sp_ArbIsRaiz(v_ram_id_Cliente) into v_IsRaiz;

      if v_IsRaiz = 0 then
      begin
         perform sp_ArbGetAllHojas(v_ram_id_Cliente,
                           v_clienteID);

      end;
      else
         v_ram_id_Cliente := 0;

      end if;

   end;
   end if;

   if v_ram_id_CentroCosto <> 0 then
   begin
      --	exec sp_ArbGetGroups @ram_id_CentroCosto, @clienteID, @@us_id
      select sp_ArbIsRaiz(v_ram_id_CentroCosto) into v_IsRaiz;

      if v_IsRaiz = 0 then
      begin
         perform sp_ArbGetAllHojas(v_ram_id_CentroCosto,
                           v_clienteID);

      end;
      else
         v_ram_id_CentroCosto := 0;

      end if;

   end;
   end if;

   if v_ram_id_estado <> 0 then
   begin
      --	exec sp_ArbGetGroups @ram_id_Estado, @clienteID, @@us_id
      select sp_ArbIsRaiz(v_ram_id_estado) into v_IsRaiz;

      if v_IsRaiz = 0 then
      begin
         perform sp_ArbGetAllHojas(v_ram_id_estado,
                           v_clienteID);

      end;
      else
         v_ram_id_estado := 0;

      end if;

   end;
   end if;

   if v_ram_id_sucursal <> 0 then
   begin
      --	exec sp_ArbGetGroups @ram_id_Sucursal, @clienteID, @@us_id
      select sp_ArbIsRaiz(v_ram_id_sucursal) into v_IsRaiz;

      if v_IsRaiz = 0 then
      begin
         perform sp_ArbGetAllHojas(v_ram_id_sucursal,
                           v_clienteID);

      end;
      else
         v_ram_id_sucursal := 0;

      end if;

   end;
   end if;

   if v_ram_id_vendedor <> 0 then
   begin
      --	exec sp_ArbGetGroups @ram_id_Vendedor, @clienteID, @@us_id
      select sp_ArbIsRaiz(v_ram_id_vendedor) into v_IsRaiz;

      if v_IsRaiz = 0 then
      begin
         perform sp_ArbGetAllHojas(v_ram_id_vendedor,
                           v_clienteID);

      end;
      else
         v_ram_id_vendedor := 0;

      end if;

   end;
   end if;

   if v_ram_id_documento <> 0 then
   begin
      --	exec sp_ArbGetGroups @ram_id_Documento, @clienteID, @@us_id
      select sp_ArbIsRaiz(v_ram_id_documento) into v_IsRaiz;

      if v_IsRaiz = 0 then
      begin
         perform sp_ArbGetAllHojas(v_ram_id_documento,
                           v_clienteID);

      end;
      else
         v_ram_id_documento := 0;

      end if;

   end;
   end if;

   if v_ram_id_CondicionPago <> 0 then
   begin
      --	exec sp_ArbGetGroups @ram_id_CondicionPago, @clienteID, @@us_id
      select sp_ArbIsRaiz(v_ram_id_CondicionPago) into v_IsRaiz;

      if v_IsRaiz = 0 then
      begin
         perform sp_ArbGetAllHojas(v_ram_id_CondicionPago,
                           v_clienteID);

      end;
      else
         v_ram_id_CondicionPago := 0;

      end if;

   end;
   end if;

   if v_ram_id_empresa <> 0 then
   begin
      --	exec sp_ArbGetGroups @ram_id_Empresa, @clienteID, @@us_id
      select sp_ArbIsRaiz(v_ram_id_empresa) into v_IsRaiz;

      if v_IsRaiz = 0 then
      begin
         perform sp_ArbGetAllHojas(v_ram_id_empresa,
                           v_clienteID);

      end;
      else
         v_ram_id_empresa := 0;

      end if;

   end;
   end if;

   /*- ///////////////////////////////////////////////////////////////////////
   FIN PRIMERA PARTE DE ARBOLES
   /////////////////////////////////////////////////////////////////////// */

   open rtn for
   
      select fv_id,
             '' TypeTask,
             fv_numero as "Numero",
             fv_nrodoc Comprobante,
             cli_nombre Cliente,
             doc_nombre Documento,
             est_nombre Estado,
             fv_fecha Fecha,
             fv_fechaentrega Fecha_de_entrega,
             fv_neto Neto,
             fv_ivari IVA_RI,
             fv_ivarni IVA_RNI,
             fv_subtotal Subtotal,
             fv_total Total,
             fv_pendiente Pendiente,
             case fv_firmado
                when 0 then 'No'
                else 'Si'
             end Firmado,
             case impreso
                when 0 then 'No'
                else 'Si'
             end Impreso,
             fv_descuento1 Desc_1,
             fv_descuento2 Desc_2,
             fv_importedesc1 Desc_1,
             fv_importedesc2 Desc_2,
             lp_nombre Lista_de_Precios,
             ld_nombre Lista_de_descuentos,
             cpg_nombre Condicion_de_Pago,
             ccos_nombre Centro_de_costo,
             suc_nombre Sucursal,
             emp_nombre Empresa,
             FacturaVenta.creado,
             FacturaVenta.modificado,
             us_nombre Modifico,
             fv_descrip Observaciones
        from FacturaVenta
        join Documento
          on FacturaVenta.doc_id = Documento.doc_id
        join Empresa
          on Documento.emp_id = Empresa.emp_id
        join CondicionPago
          on FacturaVenta.cpg_id = CondicionPago.cpg_id
        join Estado
          on FacturaVenta.est_id = Estado.est_id
        join Sucursal
          on FacturaVenta.suc_id = Sucursal.suc_id
        join Cliente
          on FacturaVenta.cli_id = Cliente.cli_id
        join Usuario
          on FacturaVenta.modifico = Usuario.us_id
        left join Vendedor
          on FacturaVenta.ven_id = Vendedor.ven_id
        left join CentroCosto
          on FacturaVenta.ccos_id = CentroCosto.ccos_id
        left join ListaPrecio
          on FacturaVenta.lp_id = ListaPrecio.lp_id
        left join ListaDescuento
          on FacturaVenta.ld_id = ListaDescuento.ld_id
        where p_Fini <= fv_fecha
          and p_Ffin >= fv_fecha

        /* -///////////////////////////////////////////////////////////////////////
        INICIO SEGUNDA PARTE DE ARBOLES
        /////////////////////////////////////////////////////////////////////// */

          and ( Cliente.cli_id = v_cli_id
          or v_cli_id = 0 )
          and ( Estado.est_id = v_est_id
          or v_est_id = 0 )
          and ( Sucursal.suc_id = v_suc_id
          or v_suc_id = 0 )
          and ( Documento.doc_id = v_doc_id
          or v_doc_id = 0 )
          and ( CondicionPago.cpg_id = v_cpg_id
          or v_cpg_id = 0 )
          and ( CentroCosto.ccos_id = v_ccos_id
          or v_ccos_id = 0 )
          and ( Vendedor.ven_id = v_ven_id
          or v_ven_id = 0 )
          and ( Empresa.emp_id = v_emp_id
          or v_emp_id = 0 )
          -- Arboles
          and ( ( exists ( select rptarb_hojaid
                           from rptArbolRamaHoja
                              where rptarb_cliente = v_clienteID
                                      and tbl_id = 28
                                      and rptarb_hojaid = Cliente.cli_id ) )
          or ( v_ram_id_Cliente = 0 ) )
          and ( ( exists ( select rptarb_hojaid
                           from rptArbolRamaHoja
                              where rptarb_cliente = v_clienteID
                                      and tbl_id = 21
                                      and rptarb_hojaid = CentroCosto.ccos_id ) )
          or ( v_ram_id_CentroCosto = 0 ) )
          and ( ( exists ( select rptarb_hojaid
                           from rptArbolRamaHoja
                              where rptarb_cliente = v_clienteID
                                      and tbl_id = 4005
                                      and rptarb_hojaid = Estado.est_id ) )
          or ( v_ram_id_estado = 0 ) )
          and ( ( exists ( select rptarb_hojaid
                           from rptArbolRamaHoja
                              where rptarb_cliente = v_clienteID
                                      and tbl_id = 1007
                                      and rptarb_hojaid = Sucursal.suc_id ) )
          or ( v_ram_id_sucursal = 0 ) )
          and ( ( exists ( select rptarb_hojaid
                           from rptArbolRamaHoja
                              where rptarb_cliente = v_clienteID
                                      and tbl_id = 15
                                      and rptarb_hojaid = Vendedor.ven_id ) )
          or ( v_ram_id_vendedor = 0 ) )
          and ( ( exists ( select rptarb_hojaid
                           from rptArbolRamaHoja
                              where rptarb_cliente = v_clienteID
                                      and tbl_id = 4001
                                      and rptarb_hojaid = Documento.doc_id ) )
          or ( v_ram_id_documento = 0 ) )
          and ( ( exists ( select rptarb_hojaid
                           from rptArbolRamaHoja
                              where rptarb_cliente = v_clienteID
                                      and tbl_id = 1005
                                      and rptarb_hojaid = CondicionPago.cpg_id ) )
          or ( v_ram_id_CondicionPago = 0 ) )
          and ( ( exists ( select rptarb_hojaid
                           from rptArbolRamaHoja
                              where rptarb_cliente = v_clienteID
                                      and tbl_id = 1018
                                      and rptarb_hojaid = Empresa.emp_id ) )
          or ( v_ram_id_empresa = 0 ) )
        
        order by fv_fecha, Comprobante;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_lsdoc_hojas_ruta(p_us_id integer, p_fini date, p_ffin date, p_hr_nrodoc character varying, p_cam_id character varying, p_prs_id character varying, OUT rtn refcursor)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
declare
   v_cam_id integer;
   v_prs_id integer;
   v_ram_id_Camion integer;
   v_ram_id_Persona integer;
   v_clienteID integer;
   v_IsRaiz smallint;
begin

   rtn := 'rtn';

   /*- ///////////////////////////////////////////////////////////////////////
    INICIO PRIMERA PARTE DE ARBOLES
   /////////////////////////////////////////////////////////////////////// */

   select * from sp_ArbConvertId(p_cam_id) into v_cam_id, v_ram_id_Camion;

   select * from sp_ArbConvertId(p_prs_id) into v_prs_id, v_ram_id_Persona;

   select * from  sp_GetRptId() into v_clienteID;

   if v_ram_id_Camion <> 0 then
   begin
      -- exec sp_ArbGetGroups @ram_id_Camion, @clienteID, @@us_id
      select sp_ArbIsRaiz(v_ram_id_Camion) into v_IsRaiz;

      if v_IsRaiz = 0 then
      begin
         perform sp_ArbGetAllHojas(v_ram_id_Camion,
                           v_clienteID);

      end;
      else
         v_ram_id_Camion := 0;

      end if;

   end;
   end if;

   if v_ram_id_Persona <> 0 then
   begin
      -- exec sp_ArbGetGroups @ram_id_Persona, @clienteID, @@us_id
      select sp_ArbIsRaiz(v_ram_id_Persona) into v_IsRaiz;

      if v_IsRaiz = 0 then
      begin
         perform sp_ArbGetAllHojas(v_ram_id_Persona,
                           v_clienteID);

      end;
      else
         v_ram_id_Persona := 0;

      end if;

   end;
   end if;

   if isnumeric(p_hr_nrodoc) <> 0 then
      p_hr_nrodoc := substr('00000000' || p_hr_nrodoc, -1, 8);

   end if;

   /*- ///////////////////////////////////////////////////////////////////////
   FIN PRIMERA PARTE DE ARBOLES
   /////////////////////////////////////////////////////////////////////// */

   open rtn for

      select hr.hr_id,
             '' TypeTask,
             hr.hr_fecha Fecha,
             hr.hr_nrodoc Numero,
             prs.prs_nombre Salida_de,
             cam.cam_patente Camion,
             hr.creado Creado,
             hr.modificado Modificado,
             us.us_nombre Modifico,
             case
                when hr.hr_cumplida <> 0 then 'Si'
                else 'No'
             end Cumplida,
             hr.hr_descrip Descripcion
      from HojaRuta hr
      join Usuario us
        on hr.modifico = us.us_id
      left join Camion cam
        on hr.cam_id = cam.cam_id
      left join Persona prs
        on hr.prs_id = prs.prs_id
      where p_Fini <= hr.hr_fecha
        and p_Ffin >= hr.hr_fecha
        and ( hr.hr_nrodoc = p_hr_nrodoc or p_hr_nrodoc is null )

      /* -///////////////////////////////////////////////////////////////////////
      INICIO SEGUNDA PARTE DE ARBOLES
      /////////////////////////////////////////////////////////////////////// */

        and ( hr.cam_id = v_cam_id
        or v_cam_id = 0 )
        and ( hr.prs_id = v_prs_id
        or v_prs_id = 0 )
        -- Arboles
        and ( ( exists ( select rptarb_hojaid
                         from rptArbolRamaHoja
                         where rptarb_cliente = v_clienteID
                           and tbl_id = 1019
                           and rptarb_hojaid = hr.cam_id ) )
        or ( v_ram_id_Camion = 0 ) )
        and ( ( exists ( select rptarb_hojaid
                         from rptArbolRamaHoja
                         where rptarb_cliente = v_clienteID
                           and tbl_id = 1004
                           and rptarb_hojaid = hr.prs_id ) )
        or ( v_ram_id_Persona = 0 ) )

      order by hr.hr_fecha, hr.hr_nrodoc;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_lsdoc_movimientos_fondo(p_us_id integer, p_fini date, p_ffin date, p_cli_id character varying, p_est_id character varying, p_ccos_id character varying, p_suc_id character varying, p_us_id_responsable character varying, p_doc_id character varying, p_emp_id character varying, OUT rtn refcursor)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
declare
   v_cli_id integer;
   v_ccos_id integer;
   v_suc_id integer;
   v_est_id integer;
   v_us_id integer;
   v_doc_id integer;
   v_emp_id integer;
   v_ram_id_Cliente integer;
   v_ram_id_CentroCosto integer;
   v_ram_id_sucursal integer;
   v_ram_id_estado integer;
   v_ram_id_Usuario integer;
   v_ram_id_documento integer;
   v_ram_id_empresa integer;
   v_clienteID integer;
   v_IsRaiz smallint;
begin

   rtn := 'rtn';

   /*- ///////////////////////////////////////////////////////////////////////
    INICIO PRIMERA PARTE DE ARBOLES
   /////////////////////////////////////////////////////////////////////// */
   
   select * from sp_ArbConvertId(p_cli_id) into v_cli_id, v_ram_id_Cliente;

   select * from sp_ArbConvertId(p_ccos_id) into v_ccos_id, v_ram_id_CentroCosto;

   select * from sp_ArbConvertId(p_suc_id) into v_suc_id, v_ram_id_sucursal;

   select * from sp_ArbConvertId(p_est_id) into v_est_id, v_ram_id_estado;

   select * from sp_ArbConvertId(p_us_id_responsable) into v_us_id, v_ram_id_Usuario;

   select * from sp_ArbConvertId(p_doc_id) into v_doc_id, v_ram_id_documento;

   select * from sp_ArbConvertId(p_emp_id) into v_emp_id, v_ram_id_empresa;

   select * from  sp_GetRptId() into v_clienteID;

   if v_ram_id_Cliente <> 0 then
   begin
      --	exec sp_ArbGetGroups @ram_id_Cliente, @clienteID, @@us_id
      select sp_ArbIsRaiz(v_ram_id_Cliente) into v_IsRaiz;

      if v_IsRaiz = 0 then
      begin
         perform sp_ArbGetAllHojas(v_ram_id_Cliente,
                           v_clienteID);

      end;
      else
         v_ram_id_Cliente := 0;

      end if;

   end;
   end if;

   if v_ram_id_CentroCosto <> 0 then
   begin
      --	exec sp_ArbGetGroups @ram_id_CentroCosto, @clienteID, @@us_id
      select sp_ArbIsRaiz(v_ram_id_CentroCosto) into v_IsRaiz;

      if v_IsRaiz = 0 then
      begin
         perform sp_ArbGetAllHojas(v_ram_id_CentroCosto,
                           v_clienteID);

      end;
      else
         v_ram_id_CentroCosto := 0;

      end if;

   end;
   end if;

   if v_ram_id_estado <> 0 then
   begin
      --	exec sp_ArbGetGroups @ram_id_Estado, @clienteID, @@us_id
      select sp_ArbIsRaiz(v_ram_id_estado) into v_IsRaiz;

      if v_IsRaiz = 0 then
      begin
         perform sp_ArbGetAllHojas(v_ram_id_estado,
                           v_clienteID);

      end;
      else
         v_ram_id_estado := 0;

      end if;

   end;
   end if;

   if v_ram_id_sucursal <> 0 then
   begin
      --	exec sp_ArbGetGroups @ram_id_Sucursal, @clienteID, @@us_id
      select sp_ArbIsRaiz(v_ram_id_sucursal) into v_IsRaiz;

      if v_IsRaiz = 0 then
      begin
         perform sp_ArbGetAllHojas(v_ram_id_sucursal,
                           v_clienteID);

      end;
      else
         v_ram_id_sucursal := 0;

      end if;

   end;
   end if;

   if v_ram_id_Usuario <> 0 then
   begin
      --	exec sp_ArbGetGroups @ram_id_Usuario, @clienteID, @@us_id
      select sp_ArbIsRaiz(v_ram_id_Usuario) into v_IsRaiz;

      if v_IsRaiz = 0 then
      begin
         perform sp_ArbGetAllHojas(v_ram_id_Usuario,
                           v_clienteID);

      end;
      else
         v_ram_id_Usuario := 0;

      end if;

   end;
   end if;

   if v_ram_id_documento <> 0 then
   begin
      --	exec sp_ArbGetGroups @ram_id_Documento, @clienteID, @@us_id
      select sp_ArbIsRaiz(v_ram_id_documento) into v_IsRaiz;

      if v_IsRaiz = 0 then
      begin
         perform sp_ArbGetAllHojas(v_ram_id_documento,
                           v_clienteID);

      end;
      else
         v_ram_id_documento := 0;

      end if;

   end;
   end if;

   if v_ram_id_empresa <> 0 then
   begin
      --	exec sp_ArbGetGroups @ram_id_empresa, @clienteID, @@us_id
      select sp_ArbIsRaiz(v_ram_id_empresa) into v_IsRaiz;

      if v_IsRaiz = 0 then
      begin
         perform sp_ArbGetAllHojas(v_ram_id_empresa,
                           v_clienteID);

      end;
      else
         v_ram_id_empresa := 0;

      end if;

   end;
   end if;

   /*- ///////////////////////////////////////////////////////////////////////
    FIN PRIMERA PARTE DE ARBOLES
   /////////////////////////////////////////////////////////////////////// */

   open rtn for

      select mf_id,
           '' TypeTask,
           mf_numero as "Número",
           mf_nrodoc Comprobante,
           cli_nombre Cliente,
           doc_nombre Documento,
           est_nombre Estado,
           mf_fecha Fecha,
           mf_total Total,
           mf_pendiente Pendiente,
           case mf_firmado
              when 0 then 'No'
              else 'Si'
           end Firmado,
           ccos_nombre Centro_de_costo,
           suc_nombre Sucursal,
           emp_nombre Empresa,
           resp.us_nombre Responsable,
           MovimientoFondo.creado,
           MovimientoFondo.modificado,
           Usuario.us_nombre Modifico,
           mf_descrip Observaciones
      from MovimientoFondo
      join Documento
       on MovimientoFondo.doc_id = Documento.doc_id
      join Empresa
       on Documento.emp_id = Empresa.emp_id
      join Estado
       on MovimientoFondo.est_id = Estado.est_id
      join Sucursal
       on MovimientoFondo.suc_id = Sucursal.suc_id
      left join Cliente
       on MovimientoFondo.cli_id = Cliente.cli_id
      left join Usuario
       on MovimientoFondo.modifico = Usuario.us_id
      left join Usuario resp
       on MovimientoFondo.us_id = resp.us_id
      left join CentroCosto
       on MovimientoFondo.ccos_id = CentroCosto.ccos_id
      where p_Fini <= mf_fecha
        and p_Ffin >= mf_fecha

      /* -///////////////////////////////////////////////////////////////////////
      INICIO SEGUNDA PARTE DE ARBOLES
      /////////////////////////////////////////////////////////////////////// */
        and ( Cliente.cli_id = v_cli_id
        or v_cli_id = 0 )
        and ( Estado.est_id = v_est_id
        or v_est_id = 0 )
        and ( Sucursal.suc_id = v_suc_id
        or v_suc_id = 0 )
        and ( Documento.doc_id = v_doc_id
        or v_doc_id = 0 )
        and ( CentroCosto.ccos_id = v_ccos_id
        or v_ccos_id = 0 )
        and ( ( resp.us_id = v_us_id
        or v_us_id = 0 )
        or ( MovimientoFondo.modifico = v_us_id
        or v_us_id = 0 ) )
        and ( Empresa.emp_id = v_emp_id
        or v_emp_id = 0 )
        -- Arboles
        and ( ( exists ( select rptarb_hojaid
                         from rptArbolRamaHoja
                            where rptarb_cliente = v_clienteID
                                    and tbl_id = 28

                                    and rptarb_hojaid = Cliente.cli_id ) )
        or ( v_ram_id_Cliente = 0 ) )
        and ( ( exists ( select rptarb_hojaid
                         from rptArbolRamaHoja
                            where rptarb_cliente = v_clienteID
                                    and tbl_id = 21

                                    and rptarb_hojaid = CentroCosto.ccos_id ) )
        or ( v_ram_id_CentroCosto = 0 ) )
        and ( ( exists ( select rptarb_hojaid
                         from rptArbolRamaHoja
                            where rptarb_cliente = v_clienteID
                                    and tbl_id = 4005

                                    and rptarb_hojaid = Estado.est_id ) )
        or ( v_ram_id_estado = 0 ) )
        and ( ( exists ( select rptarb_hojaid
                         from rptArbolRamaHoja
                            where rptarb_cliente = v_clienteID
                                    and tbl_id = 1007

                                    and rptarb_hojaid = Sucursal.suc_id ) )
        or ( v_ram_id_sucursal = 0 ) )
        and ( ( exists ( select rptarb_hojaid
                         from rptArbolRamaHoja
                            where rptarb_cliente = v_clienteID
                                    and tbl_id = 3
                                    and ( rptarb_hojaid = resp.us_id
                                    or rptarb_hojaid = MovimientoFondo.modifico ) ) )
        or ( v_ram_id_Usuario = 0 ) )
        and ( ( exists ( select rptarb_hojaid
                         from rptArbolRamaHoja
                            where rptarb_cliente = v_clienteID
                                    and tbl_id = 4001

                                    and rptarb_hojaid = Documento.doc_id ) )
        or ( v_ram_id_documento = 0 ) )
        and ( ( exists ( select rptarb_hojaid
                         from rptArbolRamaHoja
                            where rptarb_cliente = v_clienteID
                                    and tbl_id = 1018

                                    and rptarb_hojaid = Empresa.emp_id ) )
        or ( v_ram_id_empresa = 0 ) )

      order by mf_fecha;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_lsdoc_ordenes_pago(p_us_id integer, p_fini date, p_ffin date, p_prov_id character varying, p_est_id character varying, p_ccos_id character varying, p_suc_id character varying, p_doc_id character varying, p_emp_id character varying, OUT rtn refcursor)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
declare
   v_prov_id integer;
   v_ccos_id integer;
   v_suc_id integer;
   v_est_id integer;
   v_cob_id integer;
   v_doc_id integer;
   v_emp_id integer;
   v_ram_id_proveedor integer;
   v_ram_id_CentroCosto integer;
   v_ram_id_sucursal integer;
   v_ram_id_estado integer;
   v_ram_id_Cobrador integer;
   v_ram_id_documento integer;
   v_ram_id_CondicionPago integer;
   v_ram_id_empresa integer;
   v_ClienteID integer;
   v_IsRaiz smallint;
begin

   rtn := 'rtn';

   /*- ///////////////////////////////////////////////////////////////////////
    INICIO PRIMERA PARTE DE ARBOLES
   /////////////////////////////////////////////////////////////////////// */

   select * from sp_ArbConvertId(p_prov_id) into v_prov_id, v_ram_id_proveedor;

   select * from sp_ArbConvertId(p_ccos_id) into v_ccos_id, v_ram_id_CentroCosto;

   select * from sp_ArbConvertId(p_suc_id) into v_suc_id, v_ram_id_sucursal;

   select * from sp_ArbConvertId(p_est_id) into v_est_id, v_ram_id_estado;

   select * from sp_ArbConvertId(p_doc_id) into v_doc_id, v_ram_id_documento;

   select * from sp_ArbConvertId(p_emp_id) into v_emp_id, v_ram_id_empresa;

   select * from  sp_GetRptId() into v_clienteID;

   if v_ram_id_proveedor <> 0 then
   begin
      --	exec sp_ArbGetGroups @ram_id_Proveedor, @ClienteID, @@us_id
      select sp_ArbIsRaiz(v_ram_id_proveedor) into v_IsRaiz;

      if v_IsRaiz = 0 then
      begin
         perform sp_ArbGetAllHojas(v_ram_id_proveedor,
                           v_ClienteID);

      end;
      else
         v_ram_id_proveedor := 0;

      end if;

   end;
   end if;

   if v_ram_id_CentroCosto <> 0 then
   begin
      --	exec sp_ArbGetGroups @ram_id_CentroCosto, @ClienteID, @@us_id
      select sp_ArbIsRaiz(v_ram_id_CentroCosto) into v_IsRaiz;

      if v_IsRaiz = 0 then
      begin
         perform sp_ArbGetAllHojas(v_ram_id_CentroCosto,
                           v_ClienteID);

      end;
      else
         v_ram_id_CentroCosto := 0;

      end if;

   end;
   end if;

   if v_ram_id_estado <> 0 then
   begin
      --	exec sp_ArbGetGroups @ram_id_Estado, @ClienteID, @@us_id
      select sp_ArbIsRaiz(v_ram_id_estado) into v_IsRaiz;

      if v_IsRaiz = 0 then
      begin
         perform sp_ArbGetAllHojas(v_ram_id_estado,
                           v_ClienteID);

      end;
      else
         v_ram_id_estado := 0;

      end if;

   end;
   end if;

   if v_ram_id_sucursal <> 0 then
   begin
      --	exec sp_ArbGetGroups @ram_id_Sucursal, @ClienteID, @@us_id
      select sp_ArbIsRaiz(v_ram_id_sucursal) into v_IsRaiz;

      if v_IsRaiz = 0 then
      begin
         perform sp_ArbGetAllHojas(v_ram_id_sucursal,
                           v_ClienteID);

      end;
      else
         v_ram_id_sucursal := 0;

      end if;

   end;
   end if;

   if v_ram_id_Cobrador <> 0 then
   begin
      --	exec sp_ArbGetGroups @ram_id_Cobrador, @ClienteID, @@us_id
      select sp_ArbIsRaiz(v_ram_id_Cobrador) into v_IsRaiz;

      if v_IsRaiz = 0 then
      begin
         perform sp_ArbGetAllHojas(v_ram_id_Cobrador,
                           v_ClienteID);

      end;
      else
         v_ram_id_Cobrador := 0;

      end if;

   end;
   end if;

   if v_ram_id_documento <> 0 then
   begin
      --	exec sp_ArbGetGroups @ram_id_Documento, @ClienteID, @@us_id
      select sp_ArbIsRaiz(v_ram_id_documento) into v_IsRaiz;

      if v_IsRaiz = 0 then
      begin
         perform sp_ArbGetAllHojas(v_ram_id_documento,
                           v_ClienteID);

      end;
      else
         v_ram_id_documento := 0;

      end if;

   end;
   end if;

   if v_ram_id_CondicionPago <> 0 then
   begin
      --	exec sp_ArbGetGroups @ram_id_CondicionPago, @ClienteID, @@us_id
      select sp_ArbIsRaiz(v_ram_id_CondicionPago) into v_IsRaiz;

      if v_IsRaiz = 0 then
      begin
         perform sp_ArbGetAllHojas(v_ram_id_CondicionPago,
                           v_ClienteID);

      end;
      else
         v_ram_id_CondicionPago := 0;

      end if;

   end;
   end if;

   if v_ram_id_empresa <> 0 then
   begin
      --	exec sp_ArbGetGroups @ram_id_empresa, @clienteID, @@us_id
      select sp_ArbIsRaiz(v_ram_id_empresa) into v_IsRaiz;

      if v_IsRaiz = 0 then
      begin
         perform sp_ArbGetAllHojas(v_ram_id_empresa,
                           v_clienteID);

      end;
      else
         v_ram_id_empresa := 0;

      end if;

   end;
   end if;

   /*- ///////////////////////////////////////////////////////////////////////
   FIN PRIMERA PARTE DE ARBOLES
   /////////////////////////////////////////////////////////////////////// */

   open rtn for

      select opg_id,
             '' TypeTask,
             opg_numero as "Número",
             opg_nrodoc Comprobante,
             prov_nombre Proveedor,
             doc_nombre Documento,
             est_nombre Estado,
             opg_fecha Fecha,
             opg_neto Neto,
             opg_total Total,
             opg_pendiente Pendiente,
             case opg_firmado
                             when 0 then 'No'
             else 'Si'
                end Firmado,
             ccos_nombre Centro_de_costo,
             suc_nombre Sucursal,
             emp_nombre Empresa,
             OrdenPago.creado,
             OrdenPago.modificado,
             us_nombre Modifico,
             opg_descrip Observaciones
      from OrdenPago
      join Documento
       on OrdenPago.doc_id = Documento.doc_id
      join Empresa
       on Documento.emp_id = Empresa.emp_id
      join Estado
       on OrdenPago.est_id = Estado.est_id
      join Sucursal
       on OrdenPago.suc_id = Sucursal.suc_id
      join Proveedor
       on OrdenPago.prov_id = Proveedor.prov_id
      join Usuario
       on OrdenPago.modifico = Usuario.us_id
      left join CentroCosto
       on OrdenPago.ccos_id = CentroCosto.ccos_id
      where p_Fini <= opg_fecha
        and p_Ffin >= opg_fecha

      /* -///////////////////////////////////////////////////////////////////////
      INICIO SEGUNDA PARTE DE ARBOLES
      /////////////////////////////////////////////////////////////////////// */

        and ( Proveedor.prov_id = v_prov_id
        or v_prov_id = 0 )
        and ( Estado.est_id = v_est_id
        or v_est_id = 0 )
        and ( Sucursal.suc_id = v_suc_id
        or v_suc_id = 0 )
        and ( Documento.doc_id = v_doc_id
        or v_doc_id = 0 )
        and ( CentroCosto.ccos_id = v_ccos_id
        or v_ccos_id = 0 )
        and ( Empresa.emp_id = v_emp_id
        or v_emp_id = 0 )
        -- Arboles
        and ( ( exists ( select rptarb_hojaid
                         from rptArbolRamaHoja
                            where rptarb_Cliente = v_ClienteID
                                    and tbl_id = 29

                                    and rptarb_hojaid = Proveedor.prov_id ) )
        or ( v_ram_id_proveedor = 0 ) )
        and ( ( exists ( select rptarb_hojaid
                         from rptArbolRamaHoja
                            where rptarb_Cliente = v_ClienteID
                                    and tbl_id = 21

                                    and rptarb_hojaid = CentroCosto.ccos_id ) )
        or ( v_ram_id_CentroCosto = 0 ) )
        and ( ( exists ( select rptarb_hojaid
                         from rptArbolRamaHoja
                            where rptarb_Cliente = v_ClienteID
                                    and tbl_id = 4005

                                    and rptarb_hojaid = Estado.est_id ) )
        or ( v_ram_id_estado = 0 ) )
        and ( ( exists ( select rptarb_hojaid
                         from rptArbolRamaHoja
                            where rptarb_Cliente = v_ClienteID
                                    and tbl_id = 1007

                                    and rptarb_hojaid = Sucursal.suc_id ) )
        or ( v_ram_id_sucursal = 0 ) )
        and ( ( exists ( select rptarb_hojaid
                         from rptArbolRamaHoja
                            where rptarb_Cliente = v_ClienteID
                                    and tbl_id = 4001

                                    and rptarb_hojaid = Documento.doc_id ) )
        or ( v_ram_id_documento = 0 ) )
        and ( ( exists ( select rptarb_hojaid
                         from rptArbolRamaHoja
                            where rptarb_cliente = v_clienteID
                                    and tbl_id = 1018

                                    and rptarb_hojaid = Empresa.emp_id ) )
        or ( v_ram_id_empresa = 0 ) )

      order by opg_fecha;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_lsdoc_pedidos_venta(p_us_id integer, p_fini date, p_ffin date, p_cli_id character varying, p_est_id character varying, p_ccos_id character varying, p_suc_id character varying, p_ven_id character varying, p_doc_id character varying, p_cpg_id character varying, p_emp_id character varying, OUT rtn refcursor)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
declare
   v_cli_id integer;
   v_ccos_id integer;
   v_suc_id integer;
   v_est_id integer;
   v_ven_id integer;
   v_doc_id integer;
   v_cpg_id integer;
   v_emp_id integer;
   v_ram_id_Cliente integer;
   v_ram_id_CentroCosto integer;
   v_ram_id_sucursal integer;
   v_ram_id_estado integer;
   v_ram_id_vendedor integer;
   v_ram_id_documento integer;
   v_ram_id_CondicionPago integer;
   v_ram_id_empresa integer;
   v_clienteID integer;
   v_IsRaiz smallint;
   
  v_pv_id      int;
  v_last_pv_id int;
  v_pregunta   varchar(4000);
  v_respuesta  varchar(4000);
  v_preguntas  varchar(7000);
     
begin

   rtn := 'rtn';

   /*- ///////////////////////////////////////////////////////////////////////
    INICIO PRIMERA PARTE DE ARBOLES
   /////////////////////////////////////////////////////////////////////// */
      
   select * from sp_ArbConvertId(p_cli_id) into v_cli_id, v_ram_id_Cliente;

   select * from sp_ArbConvertId(p_ccos_id) into v_ccos_id, v_ram_id_CentroCosto;

   select * from sp_ArbConvertId(p_suc_id) into v_suc_id, v_ram_id_sucursal;

   select * from sp_ArbConvertId(p_est_id) into v_est_id, v_ram_id_estado;

   select * from sp_ArbConvertId(p_ven_id) into v_ven_id, v_ram_id_vendedor;

   select * from sp_ArbConvertId(p_doc_id) into v_doc_id, v_ram_id_documento;

   select * from sp_ArbConvertId(p_cpg_id) into v_cpg_id, v_ram_id_CondicionPago;

   select * from sp_ArbConvertId(p_emp_id) into v_emp_id, v_ram_id_empresa;

   select * from  sp_GetRptId() into v_clienteID;

   if v_ram_id_Cliente <> 0 then
   begin
      -- exec sp_ArbGetGroups @ram_id_Cliente, @clienteID, @@us_id
      select sp_ArbIsRaiz(v_ram_id_Cliente) into v_IsRaiz;

      if v_IsRaiz = 0 then
      begin
         perform sp_ArbGetAllHojas(v_ram_id_Cliente,
                           v_clienteID);

      end;
      else
         v_ram_id_Cliente := 0;

      end if;

   end;
   end if;

   if v_ram_id_CentroCosto <> 0 then
   begin
      -- exec sp_ArbGetGroups @ram_id_CentroCosto, @clienteID, @@us_id
      select sp_ArbIsRaiz(v_ram_id_CentroCosto) into v_IsRaiz;

      if v_IsRaiz = 0 then
      begin
         perform sp_ArbGetAllHojas(v_ram_id_CentroCosto,
                           v_clienteID);

      end;
      else
         v_ram_id_CentroCosto := 0;

      end if;

   end;
   end if;

   if v_ram_id_estado <> 0 then
   begin
      -- exec sp_ArbGetGroups @ram_id_Estado, @clienteID, @@us_id
      select sp_ArbIsRaiz(v_ram_id_estado) into v_IsRaiz;

      if v_IsRaiz = 0 then
      begin
         perform sp_ArbGetAllHojas(v_ram_id_estado,
                           v_clienteID);

      end;
      else
         v_ram_id_estado := 0;

      end if;

   end;
   end if;

   if v_ram_id_sucursal <> 0 then
   begin
      -- exec sp_ArbGetGroups @ram_id_Sucursal, @clienteID, @@us_id
      select sp_ArbIsRaiz(v_ram_id_sucursal) into v_IsRaiz;

      if v_IsRaiz = 0 then
      begin
         perform sp_ArbGetAllHojas(v_ram_id_sucursal,
                           v_clienteID);

      end;
      else
         v_ram_id_sucursal := 0;

      end if;

   end;
   end if;

   if v_ram_id_vendedor <> 0 then
   begin
      -- exec sp_ArbGetGroups @ram_id_Vendedor, @clienteID, @@us_id
      select sp_ArbIsRaiz(v_ram_id_vendedor) into v_IsRaiz;

      if v_IsRaiz = 0 then
      begin
         perform sp_ArbGetAllHojas(v_ram_id_vendedor,
                           v_clienteID);

      end;
      else
         v_ram_id_vendedor := 0;

      end if;

   end;
   end if;

   if v_ram_id_documento <> 0 then
   begin
      -- exec sp_ArbGetGroups @ram_id_Documento, @clienteID, @@us_id
      select sp_ArbIsRaiz(v_ram_id_documento) into v_IsRaiz;

      if v_IsRaiz = 0 then
      begin
         perform sp_ArbGetAllHojas(v_ram_id_documento,
                           v_clienteID);

      end;
      else
         v_ram_id_documento := 0;

      end if;

   end;
   end if;

   if v_ram_id_CondicionPago <> 0 then
   begin
      -- exec sp_ArbGetGroups @ram_id_CondicionPago, @clienteID, @@us_id
      select sp_ArbIsRaiz(v_ram_id_CondicionPago) into v_IsRaiz;

      if v_IsRaiz = 0 then
      begin
         perform sp_ArbGetAllHojas(v_ram_id_CondicionPago,
                           v_clienteID);

      end;
      else
         v_ram_id_CondicionPago := 0;

      end if;

   end;
   end if;

   if v_ram_id_empresa <> 0 then
   begin
      -- exec sp_ArbGetGroups @ram_id_Empresa, @clienteID, @@us_id
      select sp_ArbIsRaiz(v_ram_id_empresa) into v_IsRaiz;

      if v_IsRaiz = 0 then
      begin
         perform sp_ArbGetAllHojas(v_ram_id_empresa,
                           v_clienteID);

      end;
      else
         v_ram_id_empresa := 0;

      end if;

   end;
   end if;

   /*- ///////////////////////////////////////////////////////////////////////
   FIN PRIMERA PARTE DE ARBOLES
   /////////////////////////////////////////////////////////////////////// */
 
 
   --/////////////////////////////////////////////////////////////////////////
   --
   -- Preguntas de comunidad
   --
   
   create temporary table tt_t_pedidos (pv_id integer not null) on commit drop;
 
   insert into tt_t_pedidos
   select pv.pv_id
   from PedidoVenta pv
   where p_Fini <= pv_fecha
     and p_Ffin >= pv_fecha   
  
        /* -///////////////////////////////////////////////////////////////////////
        INICIO SEGUNDA PARTE DE ARBOLES
        /////////////////////////////////////////////////////////////////////// */

          and ( pv.cli_id = v_cli_id
          or v_cli_id = 0 )
          and ( pv.est_id = v_est_id
          or v_est_id = 0 )
          and ( pv.suc_id = v_suc_id
          or v_suc_id = 0 )
          and ( pv.doc_id = v_doc_id
          or v_doc_id = 0 )
          and ( pv.cpg_id = v_cpg_id
          or v_cpg_id = 0 )
          and ( pv.ccos_id = v_ccos_id
          or v_ccos_id = 0 )
          and ( pv.ven_id = v_ven_id
          or v_ven_id = 0 )
          and ( pv.emp_id = v_emp_id
          or v_emp_id = 0 )
          -- Arboles
          and ( ( exists ( select rptarb_hojaid
                           from rptArbolRamaHoja
                              where rptarb_cliente = v_clienteID
                                      and tbl_id = 28
                                      and rptarb_hojaid = pv.cli_id ) )
          or ( v_ram_id_Cliente = 0 ) )
          and ( ( exists ( select rptarb_hojaid
                           from rptArbolRamaHoja
                              where rptarb_cliente = v_clienteID
                                      and tbl_id = 21
                                      and rptarb_hojaid = pv.ccos_id ) )
          or ( v_ram_id_CentroCosto = 0 ) )
          and ( ( exists ( select rptarb_hojaid
                           from rptArbolRamaHoja
                              where rptarb_cliente = v_clienteID
                                      and tbl_id = 4005
                                      and rptarb_hojaid = pv.est_id ) )
          or ( v_ram_id_estado = 0 ) )
          and ( ( exists ( select rptarb_hojaid
                           from rptArbolRamaHoja
                              where rptarb_cliente = v_clienteID
                                      and tbl_id = 1007
                                      and rptarb_hojaid = pv.suc_id ) )
          or ( v_ram_id_sucursal = 0 ) )
          and ( ( exists ( select rptarb_hojaid
                           from rptArbolRamaHoja
                              where rptarb_cliente = v_clienteID
                                      and tbl_id = 15
                                      and rptarb_hojaid = pv.ven_id ) )
          or ( v_ram_id_vendedor = 0 ) )
          and ( ( exists ( select rptarb_hojaid
                           from rptArbolRamaHoja
                              where rptarb_cliente = v_clienteID
                                      and tbl_id = 4001
                                      and rptarb_hojaid = pv.doc_id ) )
          or ( v_ram_id_documento = 0 ) )
          and ( ( exists ( select rptarb_hojaid
                           from rptArbolRamaHoja
                              where rptarb_cliente = v_clienteID
                                      and tbl_id = 1005
                                      and rptarb_hojaid = pv.cpg_id ) )
          or ( v_ram_id_CondicionPago = 0 ) )
          and ( ( exists ( select rptarb_hojaid
                           from rptArbolRamaHoja
                              where rptarb_cliente = v_clienteID
                                      and tbl_id = 1018
                                      and rptarb_hojaid = pv.emp_id ) )
          or ( v_ram_id_empresa = 0 ) );
  
  
  create temporary table tt_t_preguntas (pv_id int, preguntas varchar(7000) NOT NULL) on commit drop;
  
  v_last_pv_id := 0;

  for v_pv_id, v_pregunta, v_respuesta in

      select pv.pv_id, cmip_pregunta, cmip_respuesta
      from tt_t_pedidos pv
      inner join PedidoVenta pvc on pv.pv_id = pvc.pv_id
      inner join Cliente cli on pvc.cli_id = cli.cli_id
      inner join ComunidadInternetPregunta cmip on replace(cli_codigocomunidad,'(ML)#','') = cmip_nick
      where pvc.creado >= cmip_fecha
      order by pv.pv_id

  loop

     if v_last_pv_id <> v_pv_id then

      if v_last_pv_id <> 0 then

         insert into tt_t_preguntas (pv_id, preguntas) values (v_pv_id, CHR(10) || v_preguntas);

      end if;

      v_preguntas := '';
      v_last_pv_id := v_pv_id;

     end if;

     v_preguntas := v_preguntas || v_pregunta || CHR(10);

     if v_respuesta <> '' then

        v_preguntas := v_preguntas || 'Respuesta: ' || v_respuesta || CHR(10);

     end if;

  end loop;


  if v_last_pv_id <> 0 then

     insert into tt_t_preguntas (pv_id, preguntas) values (v_pv_id, CHR(10) || v_preguntas);

  end if;


 --/////////////////////////////////////////////////////////////////////////

 open rtn for

      select pv.pv_id,
             ''                    TypeTask,
             pv_numero             Numero,
             pv_nrodoc             Comprobante,
             cli_nombre            Cliente,
             cli_codigo            Codigo,
             cli_codigocomunidad   Codigo_Com,
             cli_email             Mail,
             doc_nombre            Documento,
             est_nombre            Estado,

             case pv_cvxi_calificado
                when 0 then 'No'
                else 'Si'
             end                   Calificado,

             pv_fecha              Fecha,
             pv_fechaentrega       Fecha_de_entrega,

             case impreso
                when 0 then 'No'
                else        'Si'
             end                   Impreso,

             pv_neto               Neto,
             pv_ivari              IVA_RI,
             pv_ivarni             IVA_RNI,
             pv_subtotal           Subtotal,
             pv_total              Total,
             pv_pendiente          Pendiente,

             case pv_firmado
                when 0 then 'No'
                else 'Si'
             end                   Firmado,

             case impreso
                when 0 then 'No'
                else 'Si'
             end                   Impreso,

             pv_descuento1         Desc_1,
             pv_descuento2         Desc_2,
             pv_importedesc1       Desc_1,
             pv_importedesc2       Desc_2,
             lp_nombre             Lista_de_Precios,
             ld_nombre             Lista_de_descuentos,
             cpg_nombre            Condicion_de_Pago,
             ccos_nombre           Centro_de_costo,
             suc_nombre            Sucursal,
             emp_nombre            Empresa,
             pv.creado,
             pv.modificado,
             us_nombre             Modifico,

             pv_descrip
             || coalesce(preguntas, '')
                                   Observaciones

        from PedidoVenta pv
        join Documento
          on pv.doc_id = Documento.doc_id
        join Empresa
          on Documento.emp_id = Empresa.emp_id
        join CondicionPago
          on pv.cpg_id = CondicionPago.cpg_id
        join Estado
          on pv.est_id = Estado.est_id
        join Sucursal
          on pv.suc_id = Sucursal.suc_id
        join Cliente
          on pv.cli_id = Cliente.cli_id
        join Usuario
          on pv.modifico = Usuario.us_id
        left join Vendedor
          on pv.ven_id = Vendedor.ven_id
        left join CentroCosto
          on pv.ccos_id = CentroCosto.ccos_id
        left join ListaPrecio
          on pv.lp_id = ListaPrecio.lp_id
        left join ListaDescuento
          on pv.ld_id = ListaDescuento.ld_id
        left join tt_t_preguntas t
          on pv.pv_id = t.pv_id
        where pv.pv_id in (select pv_id from tt_t_pedidos)
        order by pv_fecha;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_lsdoc_presupuestos_venta(p_us_id integer, p_fini date, p_ffin date, p_cli_id character varying, p_est_id character varying, p_ccos_id character varying, p_suc_id character varying, p_ven_id character varying, p_doc_id character varying, p_cpg_id character varying, p_emp_id character varying, OUT rtn refcursor)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
declare
   v_cli_id integer;
   v_ccos_id integer;
   v_suc_id integer;
   v_est_id integer;
   v_ven_id integer;
   v_doc_id integer;
   v_cpg_id integer;
   v_emp_id integer;
   v_ram_id_Cliente integer;
   v_ram_id_CentroCosto integer;
   v_ram_id_sucursal integer;
   v_ram_id_estado integer;
   v_ram_id_vendedor integer;
   v_ram_id_documento integer;
   v_ram_id_CondicionPago integer;
   v_ram_id_empresa integer;
   v_clienteID integer;
   v_IsRaiz smallint;
begin

   rtn := 'rtn';
   
   /*- ///////////////////////////////////////////////////////////////////////
    INICIO PRIMERA PARTE DE ARBOLES
   /////////////////////////////////////////////////////////////////////// */
   
   select * from sp_ArbConvertId(p_cli_id) into v_cli_id, v_ram_id_Cliente;

   select * from sp_ArbConvertId(p_ccos_id) into v_ccos_id, v_ram_id_CentroCosto;

   select * from sp_ArbConvertId(p_suc_id) into v_suc_id, v_ram_id_sucursal;

   select * from sp_ArbConvertId(p_est_id) into v_est_id, v_ram_id_estado;

   select * from sp_ArbConvertId(p_ven_id) into v_ven_id, v_ram_id_vendedor;

   select * from sp_ArbConvertId(p_doc_id) into v_doc_id, v_ram_id_documento;

   select * from sp_ArbConvertId(p_cpg_id) into v_cpg_id, v_ram_id_CondicionPago;

   select * from sp_ArbConvertId(p_emp_id) into v_emp_id, v_ram_id_empresa;

   select * from  sp_GetRptId() into v_clienteID;

   if v_ram_id_Cliente <> 0 then
   begin
      --	exec sp_ArbGetGroups @ram_id_Cliente, @clienteID, @@us_id
      select sp_ArbIsRaiz(v_ram_id_Cliente) into v_IsRaiz;

      if v_IsRaiz = 0 then
      begin
         perform sp_ArbGetAllHojas(v_ram_id_Cliente,
                           v_clienteID);

      end;
      else
         v_ram_id_Cliente := 0;

      end if;

   end;
   end if;

   if v_ram_id_CentroCosto <> 0 then
   begin
      --	exec sp_ArbGetGroups @ram_id_CentroCosto, @clienteID, @@us_id
      select sp_ArbIsRaiz(v_ram_id_CentroCosto) into v_IsRaiz;

      if v_IsRaiz = 0 then
      begin
         perform sp_ArbGetAllHojas(v_ram_id_CentroCosto,
                           v_clienteID);

      end;
      else
         v_ram_id_CentroCosto := 0;

      end if;

   end;
   end if;

   if v_ram_id_estado <> 0 then
   begin
      --	exec sp_ArbGetGroups @ram_id_Estado, @clienteID, @@us_id
      select sp_ArbIsRaiz(v_ram_id_estado) into v_IsRaiz;

      if v_IsRaiz = 0 then
      begin
         perform sp_ArbGetAllHojas(v_ram_id_estado,
                           v_clienteID);

      end;
      else
         v_ram_id_estado := 0;

      end if;

   end;
   end if;

   if v_ram_id_sucursal <> 0 then
   begin
      --	exec sp_ArbGetGroups @ram_id_Sucursal, @clienteID, @@us_id
      select sp_ArbIsRaiz(v_ram_id_sucursal) into v_IsRaiz;

      if v_IsRaiz = 0 then
      begin
         perform sp_ArbGetAllHojas(v_ram_id_sucursal,
                           v_clienteID);

      end;
      else
         v_ram_id_sucursal := 0;

      end if;

   end;
   end if;

   if v_ram_id_vendedor <> 0 then
   begin
      --	exec sp_ArbGetGroups @ram_id_Vendedor, @clienteID, @@us_id
      select sp_ArbIsRaiz(v_ram_id_vendedor) into v_IsRaiz;

      if v_IsRaiz = 0 then
      begin
         perform sp_ArbGetAllHojas(v_ram_id_vendedor,
                           v_clienteID);

      end;
      else
         v_ram_id_vendedor := 0;

      end if;

   end;
   end if;

   if v_ram_id_documento <> 0 then
   begin
      --	exec sp_ArbGetGroups @ram_id_Documento, @clienteID, @@us_id
      select sp_ArbIsRaiz(v_ram_id_documento) into v_IsRaiz;

      if v_IsRaiz = 0 then
      begin
         perform sp_ArbGetAllHojas(v_ram_id_documento,
                           v_clienteID);

      end;
      else
         v_ram_id_documento := 0;

      end if;

   end;
   end if;

   if v_ram_id_CondicionPago <> 0 then
   begin
      --	exec sp_ArbGetGroups @ram_id_CondicionPago, @clienteID, @@us_id
      select sp_ArbIsRaiz(v_ram_id_CondicionPago) into v_IsRaiz;

      if v_IsRaiz = 0 then
      begin
         perform sp_ArbGetAllHojas(v_ram_id_CondicionPago,
                           v_clienteID);

      end;
      else
         v_ram_id_CondicionPago := 0;

      end if;

   end;
   end if;

   if v_ram_id_empresa <> 0 then
   begin
      --	exec sp_ArbGetGroups @ram_id_empresa, @clienteID, @@us_id
      select sp_ArbIsRaiz(v_ram_id_empresa) into v_IsRaiz;

      if v_IsRaiz = 0 then
      begin
         perform sp_ArbGetAllHojas(v_ram_id_empresa,
                           v_clienteID);

      end;
      else
         v_ram_id_empresa := 0;

      end if;

   end;
   end if;

   open rtn for

      select prv_id,
             '' TypeTask,
             prv_numero N_mero,
             prv_nrodoc Comprobante,
             cli_nombre Cliente,
             doc_nombre Documento,
             est_nombre Estado,
             prv_fecha Fecha,
             prv_fechaentrega Fecha_de_entrega,
             prv_neto Neto,
             prv_ivari IVA_RI,
             prv_ivarni IVA_RNI,
             prv_subtotal Subtotal,
             prv_total Total,
             prv_pendiente Pendiente,
             case prv_firmado
                when 0 then 'No'
                else 'Si'
             end Firmado,
             prv_descuento1 Desc_1,
             prv_descuento2 Desc_2,
             prv_importedesc1 Desc_1,
             prv_importedesc2 Desc_2,
             lp_nombre Lista_de_Precios,
             ld_nombre Lista_de_descuentos,
             cpg_nombre Condicion_de_Pago,
             ccos_nombre Centro_de_costo,
             suc_nombre Sucursal,
             emp_nombre Empresa,
             PresupuestoVenta.creado,
             PresupuestoVenta.modificado,
             us_nombre Modifico,
             prv_descrip Observaciones
      from PresupuestoVenta
      join Documento
        on PresupuestoVenta.doc_id = Documento.doc_id
      join Empresa
        on Documento.emp_id = Empresa.emp_id
      join CondicionPago
        on PresupuestoVenta.cpg_id = CondicionPago.cpg_id
      join Estado
        on PresupuestoVenta.est_id = Estado.est_id
      join Sucursal
        on PresupuestoVenta.suc_id = Sucursal.suc_id
      join Cliente
        on PresupuestoVenta.cli_id = Cliente.cli_id
      join Usuario
        on PresupuestoVenta.modifico = Usuario.us_id
      left join Vendedor
        on PresupuestoVenta.ven_id = Vendedor.ven_id
      left join CentroCosto
        on PresupuestoVenta.ccos_id = CentroCosto.ccos_id
      left join ListaPrecio
        on PresupuestoVenta.lp_id = ListaPrecio.lp_id
      left join ListaDescuento
        on PresupuestoVenta.ld_id = ListaDescuento.ld_id
      where p_Fini <= prv_fecha
        and p_Ffin >= prv_fecha

      /* -///////////////////////////////////////////////////////////////////////
      INICIO SEGUNDA PARTE DE ARBOLES
      /////////////////////////////////////////////////////////////////////// */
        and ( Cliente.cli_id = v_cli_id
        or v_cli_id = 0 )
        and ( Estado.est_id = v_est_id
        or v_est_id = 0 )
        and ( Sucursal.suc_id = v_suc_id
        or v_suc_id = 0 )
        and ( Documento.doc_id = v_doc_id
        or v_doc_id = 0 )
        and ( CondicionPago.cpg_id = v_cpg_id
        or v_cpg_id = 0 )
        and ( CentroCosto.ccos_id = v_ccos_id
        or v_ccos_id = 0 )
        and ( Vendedor.ven_id = v_ven_id
        or v_ven_id = 0 )
        and ( Empresa.emp_id = v_emp_id
        or v_emp_id = 0 )
        -- Arboles
        and ( ( exists ( select rptarb_hojaid
                         from rptArbolRamaHoja
                            where rptarb_cliente = v_clienteID
                                    and tbl_id = 28
                                    and rptarb_hojaid = Cliente.cli_id ) )
        or ( v_ram_id_Cliente = 0 ) )
        and ( ( exists ( select rptarb_hojaid
                         from rptArbolRamaHoja
                            where rptarb_cliente = v_clienteID
                                    and tbl_id = 21
                                    and rptarb_hojaid = CentroCosto.ccos_id ) )
        or ( v_ram_id_CentroCosto = 0 ) )
        and ( ( exists ( select rptarb_hojaid
                         from rptArbolRamaHoja
                            where rptarb_cliente = v_clienteID
                                    and tbl_id = 4005
                                    and rptarb_hojaid = Estado.est_id ) )
        or ( v_ram_id_estado = 0 ) )
        and ( ( exists ( select rptarb_hojaid
                         from rptArbolRamaHoja
                            where rptarb_cliente = v_clienteID
                                    and tbl_id = 1007
                                    and rptarb_hojaid = Sucursal.suc_id ) )
        or ( v_ram_id_sucursal = 0 ) )
        and ( ( exists ( select rptarb_hojaid
                         from rptArbolRamaHoja
                            where rptarb_cliente = v_clienteID
                                    and tbl_id = 15
                                    and rptarb_hojaid = Vendedor.ven_id ) )
        or ( v_ram_id_vendedor = 0 ) )
        and ( ( exists ( select rptarb_hojaid
                         from rptArbolRamaHoja
                            where rptarb_cliente = v_clienteID
                                    and tbl_id = 4001
                                    and rptarb_hojaid = Documento.doc_id ) )
        or ( v_ram_id_documento = 0 ) )
        and ( ( exists ( select rptarb_hojaid
                         from rptArbolRamaHoja
                            where rptarb_cliente = v_clienteID
                                    and tbl_id = 1005
                                    and rptarb_hojaid = CondicionPago.cpg_id ) )
        or ( v_ram_id_CondicionPago = 0 ) )
        and ( ( exists ( select rptarb_hojaid
                         from rptArbolRamaHoja
                            where rptarb_cliente = v_clienteID
                                    and tbl_id = 1018
                                    and rptarb_hojaid = Empresa.emp_id ) )
        or ( v_ram_id_empresa = 0 ) )

      order by prv_fecha;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_moneda_get_cotizacion(p_mon_id integer, p_fecha date, OUT p_cotiz numeric)
 RETURNS numeric
 LANGUAGE plpgsql
AS $function$
declare
      v_cfg_valor varchar(5000);
begin


   if not exists ( select mon_id
                   from Moneda
                   where mon_id = p_mon_id
                     and mon_legal <> 0 ) then

      select sp_cfg_getValor('General', 'Decimales Cotización') into v_cfg_valor;

      v_cfg_valor := coalesce(v_cfg_valor, '3');

      if isnumeric(v_cfg_valor) = 0 then
         v_cfg_valor := '3';
      end if;

      select *
        into p_cotiz
      from ( select moni_precio
             from MonedaItem
             where mon_id = p_mon_id
               and moni_fecha <= p_fecha
             order by moni_fecha desc ) t
      limit 1;

   end if;

   p_cotiz := coalesce(p_cotiz, 0);

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_movimiento_caja_get_caja_for_user(p_us_id integer, p_emp_id integer, OUT rtn refcursor)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
declare
   v_cj_id integer;
begin

   rtn := 'rtn';

   if exists ( select cj.cj_id
                from CajaCajero cjc
                join Caja cj
                  on cjc.cj_id = cj.cj_id
                where cjc.us_id = p_us_id
                  and cj.emp_id = p_emp_id
                  and cj.activo <> 0 ) then

      select min(cj_id)
        into v_cj_id
      from MovimientoCaja mcj
      where mcj_tipo = 1
        and cj_id in ( select cc.cj_id
                       from CajaCajero cc
                       inner join Caja cj on cc.cj_id = cj.cj_id
                       where cc.us_id = p_us_id
                         and cj.emp_id = p_emp_id
                     )
        and not exists ( select *
                         from MovimientoCaja
                         where cj_id = mcj.cj_id
                           and mcj_id > mcj.mcj_id
                           and mcj_tipo = 2 );

      if v_cj_id is null then
         open rtn for
            select 0 success,
                   '' info,
                   'El usuario esta configurado como cajero, pero no existe ninguna caja en estado "Abierta" asociada a este cajero. Debe abrir la caja para poder operar.' warning,
                   v_cj_id cj_id,
                   '' cj_nombre,
                   '' cj_codigo;

      else
         open rtn for
            select 0 success,
                   'Estas operaciones de venta trabajarán con la caja: ' || cj_nombre || ' [' || cj_codigo || '].' info,
                   '' warning,
                   v_cj_id cj_id,
                   cj_nombre,
                   cj_codigo
            from Caja
            where cj_id = v_cj_id;

      end if;

   else

      open rtn for
         select 1 success,
                '' info,
                '' warning,
                null cj_id,
                '' cj_nombre,
                '' cj_codigo;

   end if;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_movimiento_caja_get_from_caja(p_cj_id integer, p_tipo integer, OUT p_mcj_id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
declare
   v_mcj_id integer;
   v_tipo integer;
begin

   select max(mcj_id)
     into v_mcj_id
   from MovimientoCaja
   where cj_id = p_cj_id;

   if v_mcj_id is not null then

      select mcj_tipo
        into v_tipo
      from MovimientoCaja
      where mcj_id = v_mcj_id;

      if v_tipo <> p_tipo then

         p_mcj_id := null;

      else

         p_mcj_id := v_mcj_id;

      end if;

   else

      p_mcj_id := v_mcj_id;

   end if;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_producto_delete(p_pr_id integer)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
begin

      delete from ProductoCliente where pr_id = p_pr_id;
      delete from ProductoProveedor where pr_id = p_pr_id;

      delete from ProductoKitItemA
      where prk_id in ( select prk_id
                        from ProductoKit
                        where prfk_id in ( select prfk_id
                                           from ProductoFormulaKit
                                           where pr_id = p_pr_id ) );

      delete from ProductoKit
      where prfk_id in ( select prfk_id
                         from ProductoFormulaKit
                          where pr_id = p_pr_id );

      delete from ProductoFormulaKit where pr_id = p_pr_id;
      delete from ProductoDepositoFisico where pr_id = p_pr_id;
      delete from ProductoDepositoLogico where pr_id = p_pr_id;
      delete from ProductoTag where pr_id = p_pr_id;
      delete from ListaPrecioItem where pr_id = p_pr_id;
      delete from ListaDescuentoItem where pr_id = p_pr_id;
      delete from StockCache where pr_id = p_pr_id;
      delete from Producto where pr_id = p_pr_id;

   return;

exception
   when others then

     raise exception 'Ha ocurrido un error al borrar el producto. sp_producto_delete. %. %.',
                      sqlstate, sqlerrm;

end;

$function$;

CREATE OR REPLACE FUNCTION public.sp_producto_get(p_pr_id integer, OUT rtn refcursor)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
begin

   rtn := 'rtn';

   begin
      open rtn for
         select Producto.*,

                tiric.ti_nombre as ti_name_ri_compra,
                tiriv.ti_nombre as ti_name_ri_venta,

                tirnic.ti_nombre as rnic,
                tirniv.ti_nombre as rniv,

                tic.ti_nombre as ti_name_int_compra,
                tiv.ti_nombre as ti_name_int_venta,

                tuc.un_nombre as un_name_compra,
                tuv.un_nombre as un_name_venta,
                tus.un_nombre as un_name_stock,

                tup.un_nombre as un_name_peso,

                tcc.cueg_nombre as cueg_name_compra,
                tcv.cueg_nombre as cueg_name_venta,

                marc_nombre,
                ibc_nombre,
                rub_nombre,

                Rubro.rubt_id1,
                Rubro.rubt_id2,
                Rubro.rubt_id3,
                Rubro.rubt_id4,
                Rubro.rubt_id5,
                Rubro.rubt_id6,
                Rubro.rubt_id7,
                Rubro.rubt_id8,
                Rubro.rubt_id9,
                Rubro.rubt_id10,

                rt1.rubt_nombre rubt_name1,
                rt2.rubt_nombre rubt_name2,
                rt3.rubt_nombre rubt_name3,
                rt4.rubt_nombre rubt_name4,
                rt5.rubt_nombre rubt_name5,
                rt6.rubt_nombre rubt_name6,
                rt7.rubt_nombre rubt_name7,
                rt8.rubt_nombre rubt_name8,
                rt9.rubt_nombre rubt_name9,
                rt10.rubt_nombre rubt_name10,

                rti1.rubti_nombre rubti_name1,
                rti2.rubti_nombre rubti_name2,
                rti3.rubti_nombre rubti_name3,
                rti4.rubti_nombre rubti_name4,
                rti5.rubti_nombre rubti_name5,
                rti6.rubti_nombre rubti_name6,
                rti7.rubti_nombre rubti_name7,
                rti8.rubti_nombre rubti_name8,
                rti9.rubti_nombre rubti_name9,
                rti10.rubti_nombre rubti_name10,

                embl_nombre,
                egp.egp_nombre,
                efm.efm_nombre,
                tas.ta_nombre as ta_name_kit_serie,
                tal.ta_nombre as ta_name_kit_lote,

                ley.ley_nombre,

                ccosc.ccos_nombre as ccos_name_compra,
                ccosv.ccos_nombre as ccos_name_venta,

                cur.cur_nombre,

                rptcompra.rpt_nombre as rpt_name_compra,
                rptventa.rpt_nombre as rpt_name_venta,
                rptfactura.rpt_nombre as rpt_name_factura,
                rptweb.rpt_nombre as rpt_name_web,
                rptimg.rpt_nombre as rpt_name_img,
                rptimgalt.rpt_nombre as rpt_name_img_alt,

                ticomexgan.ti_nombre as ti_name_comex_ganancias,
                ticomexigb.ti_nombre as ti_name_comex_igb,
                ticomexiva.ti_nombre as ti_name_comex_iva,
                prwebpadre.pr_nombrecompra as pr_nombre_web_padre,

                poar.poar_nombre

           from Producto
                  left join RubroTablaItem rti1
                   on Producto.rubti_id1 = rti1.rubti_id
                  left join RubroTablaItem rti2
                   on Producto.rubti_id2 = rti2.rubti_id
                  left join RubroTablaItem rti3
                   on Producto.rubti_id3 = rti3.rubti_id
                  left join RubroTablaItem rti4
                   on Producto.rubti_id4 = rti4.rubti_id
                  left join RubroTablaItem rti5
                   on Producto.rubti_id5 = rti5.rubti_id
                  left join RubroTablaItem rti6
                   on Producto.rubti_id6 = rti6.rubti_id
                  left join RubroTablaItem rti7
                   on Producto.rubti_id7 = rti7.rubti_id
                  left join RubroTablaItem rti8
                   on Producto.rubti_id8 = rti8.rubti_id
                  left join RubroTablaItem rti9
                   on Producto.rubti_id9 = rti9.rubti_id
                  left join RubroTablaItem rti10
                   on Producto.rubti_id10 = rti10.rubti_id
                  left join Unidad tuv
                   on Producto.un_id_venta = tuv.un_id
                  left join Unidad tuc
                   on Producto.un_id_compra = tuc.un_id
                  left join Unidad tus
                   on Producto.un_id_stock = tus.un_id
                  left join Unidad tup
                   on Producto.un_id_peso = tup.un_id
                  left join TasaImpositiva tiric
                   on Producto.ti_id_ivaricompra = tiric.ti_id
                  left join TasaImpositiva tiriv
                   on Producto.ti_id_ivariventa = tiriv.ti_id
                  left join TasaImpositiva tirnic
                   on Producto.ti_id_ivarnicompra = tirnic.ti_id
                  left join TasaImpositiva tirniv
                   on Producto.ti_id_ivarniventa = tirniv.ti_id
                  left join TasaImpositiva tic
                   on Producto.ti_id_internosc = tic.ti_id
                  left join TasaImpositiva tiv
                   on Producto.ti_id_internosv = tiv.ti_id
                  left join CuentaGrupo tcv
                   on Producto.cueg_id_venta = tcv.cueg_id
                  left join CuentaGrupo tcc
                   on Producto.cueg_id_compra = tcc.cueg_id
                  left join IngresosBrutosCategoria
                   on Producto.ibc_id = IngresosBrutosCategoria.ibc_id
                  left join Rubro
                   on Producto.rub_id = Rubro.rub_id
                  left join Marca
                   on Producto.marc_id = Marca.marc_id
                  left join Embalaje
                   on Producto.embl_id = Embalaje.embl_id
                  left join ExpoGrupoPrecio egp
                   on Producto.egp_id = egp.egp_id
                  left join ExpoFamilia efm
                   on Producto.efm_id = efm.efm_id
                  left join Talonario tas
                   on Producto.ta_id_kitSerie = tas.ta_id
                  left join Talonario tal
                   on Producto.ta_id_kitLote = tal.ta_id
                  left join Leyenda ley
                   on Producto.ley_id = ley.ley_id
                  left join CentroCosto ccosc
                   on Producto.ccos_id_compra = ccosc.ccos_id
                  left join CentroCosto ccosv
                   on Producto.ccos_id_venta = ccosv.ccos_id
                  left join Curso cur
                   on Producto.cur_id = cur.cur_id
                  left join Reporte rptcompra
                   on Producto.rpt_id_nombrecompra = rptcompra.rpt_id
                  left join Reporte rptventa
                   on Producto.rpt_id_nombreventa = rptventa.rpt_id
                  left join Reporte rptfactura
                   on Producto.rpt_id_nombrefactura = rptfactura.rpt_id
                  left join Reporte rptweb
                   on Producto.rpt_id_nombreweb = rptweb.rpt_id
                  left join Reporte rptimg
                   on Producto.rpt_id_nombreimg = rptimg.rpt_id
                  left join Reporte rptimgalt
                   on Producto.rpt_id_nombreimgalt = rptimgalt.rpt_id
                  left join TasaImpositiva ticomexgan
                   on Producto.ti_id_comex_ganancias = ticomexgan.ti_id
                  left join TasaImpositiva ticomexigb
                   on Producto.ti_id_comex_igb = ticomexigb.ti_id
                  left join TasaImpositiva ticomexiva
                   on Producto.ti_id_comex_iva = ticomexiva.ti_id
                  left join PosicionArancel poar
                   on Producto.poar_id = poar.poar_id
                  left join Producto prwebpadre
                   on Producto.pr_id_webpadre = prwebpadre.pr_id

               -- rubro
                  left join RubroTabla rt1
                   on Rubro.rubt_id1 = rt1.rubt_id
                  left join RubroTabla rt2
                   on Rubro.rubt_id2 = rt2.rubt_id
                  left join RubroTabla rt3
                   on Rubro.rubt_id3 = rt3.rubt_id
                  left join RubroTabla rt4
                   on Rubro.rubt_id4 = rt4.rubt_id
                  left join RubroTabla rt5
                   on Rubro.rubt_id5 = rt5.rubt_id
                  left join RubroTabla rt6
                   on Rubro.rubt_id6 = rt6.rubt_id
                  left join RubroTabla rt7
                   on Rubro.rubt_id7 = rt7.rubt_id
                  left join RubroTabla rt8
                   on Rubro.rubt_id8 = rt8.rubt_id
                  left join RubroTabla rt9
                   on Rubro.rubt_id9 = rt9.rubt_id
                  left join RubroTabla rt10
                   on Rubro.rubt_id10 = rt10.rubt_id

            where Producto.pr_id = p_pr_id;

   end;
end;

$function$;

CREATE OR REPLACE FUNCTION public.sp_producto_get_boms(p_pr_id integer, OUT rtn refcursor)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
begin

   rtn := 'rtn';

   open rtn for
     select
            pbm_id,
            pbm_codigo,
            pbm_fechaAuto,
            pbm_nombre
     from ProductoBOM pbm
     where exists(select * from productoBOMElaborado where pr_id = p_pr_id and pbm_id = pbm.pbm_id)
     order by pbm_nombre;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_producto_get_catalogos_web(p_pr_id integer, OUT rtn refcursor)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
begin

   rtn := 'rtn';

   open rtn for
     select
            catwi_id,
            catw.catw_id,
            catw_nombre
     from CatalogoWeb catw
     left join CatalogoWebItem catwi
       on catw.catw_id = catwi.catw_id and catwi.pr_id = p_pr_id
     order by catw_nombre;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_producto_get_categorias(p_pr_id integer, OUT rtn refcursor)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
begin

   rtn := 'rtn';

   open rtn for
   select
         catwci_id,
         catwci_posicion,
         catwc.catwc_id,
         catwc_nombre
   from CatalogoWebCategoria catwc
   left join CatalogoWebCategoriaItem catwci
     on catwc.catwc_id = catwci.catwc_id and catwci.pr_id = p_pr_id
   order by catwc_nombre;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_producto_get_clientes(p_pr_id integer, OUT rtn refcursor)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
begin

   rtn := 'rtn';

   open rtn for
      select
              prcli.*,
              cli_nombre
      from ProductoCliente prcli
      inner join Cliente cli
      on prcli.cli_id = cli.cli_id
      where pr_id= p_pr_id
      order by cli_nombre;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_producto_get_cmi(p_pr_id integer, OUT rtn refcursor)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
begin

   rtn := 'rtn';

   open rtn for
      select
              prcmi.*,
              cmi_nombre
      from ProductoComunidadInternet prcmi
      inner join ComunidadInternet cmi
      on prcmi.cmi_id = cmi.cmi_id
      where prcmi.pr_id = p_pr_id
      order by cmi_nombre;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_proveedor_get_cuit_info(p_cuit character varying, OUT p_prov_id integer, OUT p_prov_code character varying, OUT p_prov_razonsocial character varying)
 RETURNS record
 LANGUAGE plpgsql
AS $function$
begin

   select prov_id,
          prov_codigo,
          prov_razonsocial
     into p_prov_id,
          p_prov_code,
          p_prov_razonsocial
   from Proveedor
   where replace(prov_cuit, '-', '') = replace(p_cuit, '-', '');

   p_prov_id := coalesce(p_prov_id, 0);
   p_prov_code := coalesce(p_prov_code, '');
   p_prov_razonsocial := coalesce(p_prov_razonsocial, '');

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_producto_get_cue_id(p_cli_id integer, p_prov_id integer, p_pr_id integer, OUT p_cue_id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
DECLARE
    v_cue_id integer;
BEGIN

    IF p_cli_id IS NOT NULL THEN
    
        -- Obtengo la cuenta de ventas
        --
        SELECT ClienteCuentaGrupo.cue_id
        INTO v_cue_id
        FROM ClienteCuentaGrupo
        JOIN Producto
          ON ClienteCuentaGrupo.cueg_id = Producto.cueg_id_venta
        WHERE cli_id = p_cli_id
          AND pr_id = p_pr_id;

        -- Saco la cuenta de CuentaGrupo
        --
        IF v_cue_id IS NULL THEN

           SELECT CuentaGrupo.cue_id
           INTO v_cue_id
           FROM CuentaGrupo
           JOIN Producto
            ON CuentaGrupo.cueg_id = Producto.cueg_id_venta
           WHERE Producto.pr_id = p_pr_id;

        END IF;
    
    ELSE

        -- Obtengo la cuenta de compras
        --
        SELECT ProveedorCuentaGrupo.cue_id
        INTO v_cue_id
        FROM ProveedorCuentaGrupo
        JOIN Producto
          ON ProveedorCuentaGrupo.cueg_id = Producto.cueg_id_compra
        WHERE prov_id = p_prov_id
          AND pr_id = p_pr_id;

        -- Saco la cuenta de CuentaGrupo
        --
        IF v_cue_id IS NULL THEN

           SELECT CuentaGrupo.cue_id
           INTO v_cue_id
           FROM CuentaGrupo
           JOIN Producto
            ON CuentaGrupo.cueg_id = Producto.cueg_id_compra
           WHERE Producto.pr_id = p_pr_id;

        END IF;
    
    END IF;
    
    p_cue_id := v_cue_id;

END;
$function$;

CREATE OR REPLACE FUNCTION public.sp_producto_get_kits(p_pr_id integer, OUT rtn refcursor)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
begin

   rtn := 'rtn';

   open rtn for
     select
            prfk_id,
            prfk_codigo,
            prfk_nombre,
            prfk_default
     from ProductoFormulaKit
     where pr_id = p_pr_id
     order by prfk_nombre;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_producto_get_leyendas(p_pr_id integer, OUT rtn refcursor)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
begin

   rtn := 'rtn';

   open rtn for
      select
              prl.*
      from ProductoLeyenda prl
      where prl.pr_id = p_pr_id
      order by prl_texto;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_producto_get_proveedores(p_pr_id integer, OUT rtn refcursor)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
DECLARE
   -- Obtengo que precio es el preferido en ListaPrecioConfig
   --
   v_lp_id_top integer;
   v_orden numeric(3,0);
   v_tran_id integer;
BEGIN

    --------------------------------------------------------------------
    
    CREATE TEMP TABLE t_producto_proveedor
    (
      prov_id integer,
      lp_id integer,
      lpi_id integer,
      lpi_precio decimal(18,6),
      lpi_top integer,
      lpi_fecha date,
      tran_id integer  NOT NULL
    ) on commit drop;
    
    v_tran_id := nextval('t_producto_proveedor_seq');
    
    --------------------------------------------------------------------
   
   INSERT INTO t_producto_proveedor
     ( prov_id, lp_id, lpi_id, lpi_precio, lpi_top, lpi_fecha, tran_id )
     ( SELECT DISTINCT lpprov.prov_id,
                       lpi.lp_id,
                       lpi.lpi_id,
                       lpi.lpi_precio,
                       0,
                       lpi.lpi_fecha,
                       v_tran_id
       FROM ListaPrecioItem lpi
              LEFT JOIN ListaPrecioProveedor lpprov
               ON lpi.lp_id = lpprov.lp_id
          WHERE lpi.pr_id = p_pr_id );

   SELECT MIN(lpc_orden)
     INTO v_orden
     FROM ListaPrecioConfig
      WHERE pr_id = p_pr_id
              AND lp_id IN ( SELECT lp_id
                             FROM t_producto_proveedor  );

   SELECT lp_id
     INTO v_lp_id_top
     FROM ListaPrecioConfig
      WHERE pr_id = p_pr_id
              AND lpc_orden = v_orden;

   UPDATE t_producto_proveedor
      SET lpi_top = 1
      WHERE tran_id = v_tran_id AND lp_id = v_lp_id_top;

   rtn := 'rtn';

   OPEN rtn FOR
      ----------------------------------------------------------------------------------------------
      SELECT prprov.prprov_id,
                     prprov.prprov_codigo,
                     prprov.prprov_codigobarra,
                     prprov.prprov_fabricante,
                     prprov.prprov_nombre,
                     prprov.activo,
                     prprov.creado,
                     prprov.modificado,
                     prprov.modifico,
                     prprov.pa_id,
                     prprov.pr_id,
                     prov.prov_id,
                     prov_nombre,
                     pa_nombre,
                     lp_nombre,
                     t.lp_id,
                     t.lpi_id,
                     t.lpi_precio,
                     t.lpi_fecha,
                     t.lpi_top
        FROM ProductoProveedor prprov
               LEFT JOIN Proveedor prov
                ON prprov.prov_id = prov.prov_id
               LEFT JOIN Pais pa
                ON prprov.pa_id = pa.pa_id
               LEFT JOIN t_producto_proveedor t
                ON prprov.prov_id = t.prov_id
                  AND t.tran_id = v_tran_id
               LEFT JOIN ListaPrecio lp
                ON t.lp_id = lp.lp_id
         WHERE prprov.pr_id = p_pr_id
      UNION ALL
      SELECT -1 prprov_id,-- Si es un registro virtual lo identifico con un -1

             prprov.prprov_codigo,
             prprov.prprov_codigobarra,
             prprov.prprov_fabricante,
             prprov.prprov_nombre,
             prprov.activo,
             prprov.creado,
             prprov.modificado,
             prprov.modifico,
             prprov.pa_id,
             prprov.pr_id,
             prov.prov_id,
             prov_nombre,
             pa_nombre,
             lp_nombre,
             t.lp_id,
             t.lpi_id,
             t.lpi_precio,
             t.lpi_fecha,
             t.lpi_top

        FROM t_producto_proveedor t
               LEFT JOIN ProductoProveedor prprov
                ON 1 = 2
               INNER JOIN Proveedor prov
                ON t.prov_id = prov.prov_id
               LEFT JOIN Pais pa
                ON 1 = 2
               LEFT JOIN ListaPrecio lp
                ON t.lp_id = lp.lp_id

        WHERE t.tran_id = v_tran_id
           AND NOT EXISTS ( SELECT *
                            FROM ProductoProveedor
                               WHERE pr_id = p_pr_id
                                       AND prov_id = t.prov_id )
        ORDER BY prov_nombre;

END;
$function$;

CREATE OR REPLACE FUNCTION public.sp_producto_get_tags(p_pr_id integer, OUT rtn refcursor)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
begin

   rtn := 'rtn';

   open rtn for
     select
            t.*,
            pr_nombrecompra,
            rubti_nombre as orden

     from ProductoTag t
     left join Producto pr on pr.pr_id = t.pr_id_tag
     left join RubroTablaItem rubti on pr.rubti_id7 = rubti.rubti_id
     where t.pr_id = p_pr_Id
     order by rubti_descrip;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_producto_get_tasas(p_pr_id integer, OUT rtn refcursor)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
begin

    rtn := 'rtn';

    open rtn for
         select pr.ti_id_ivaricompra,
                pr.ti_id_ivarnicompra,
                tiric.ti_porcentaje as ti_ri_porc_compra,
                tirnic.ti_porcentaje as ti_rni_porc_compra,
                tiric.cue_id as cue_id_ri_compra,
                tirnic.cue_id as cue_id_rni_compra,

                pr.ti_id_ivariventa,
                pr.ti_id_ivarniventa,
                tiriv.ti_porcentaje as ti_ri_porc_venta,
                tirniv.ti_porcentaje as ti_rni_porc_venta,
                tiriv.cue_id as cue_id_ri_venta,
                tirniv.cue_id as cue_id_rni_venta,

                pr.ti_id_internosc,
                pr.ti_id_internosv,
                tiintc.ti_porcentaje as ti_int_porc_compra,
                tiintv.ti_porcentaje as ti_int_porc_venta,

                pr.pr_porcinternoc,
                pr.pr_porcinternov
         from Producto pr
         left join TasaImpositiva tiric  on pr.ti_id_ivaricompra = tiric.ti_id
         left join TasaImpositiva tirnic on pr.ti_id_ivarnicompra = tirnic.ti_id
         left join TasaImpositiva tiriv  on pr.ti_id_ivariventa = tiriv.ti_id
         left join TasaImpositiva tirniv on pr.ti_id_ivarniventa = tirniv.ti_id
         left join TasaImpositiva tiintc on pr.ti_id_internosc = tiintc.ti_id
         left join TasaImpositiva tiintv on pr.ti_id_internosv = tiintv.ti_id
         where pr.pr_id = p_pr_id;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_producto_get_web_images(p_pr_id integer, OUT rtn refcursor)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
begin

   rtn := 'rtn';

   open rtn for
      select
              prwi.*
      from ProductoWebImage prwi
      where prwi.pr_id = p_pr_id
      order by prwi_archivo;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_proveedor_get_centros_costo(p_prov_id integer, OUT rtn refcursor)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$

begin   

   rtn := 'rtn';

   open rtn for
      ----------------------------------------------------------------------------------------------
      select
             provccos_id,
             provccos.ccos_id,
             provccos.pr_id,
             ccos_nombre,
             pr_nombrecompra
      from ProveedorCentroCosto provccos
      inner join CentroCosto ccos on provccos.ccos_id = ccos.ccos_id
      left join Producto pr on provccos.pr_id = pr.pr_id
      where provccos.prov_id = p_prov_id
      order by ccos_nombre;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_producto_kit_lleva_serie(ip_pr_id integer, p_bcreatetable smallint DEFAULT 1, ip_prfk_id integer DEFAULT NULL::integer, OUT p_bresult smallint)
 RETURNS smallint
 LANGUAGE plpgsql
AS $function$
DECLARE
    p_prfk_id integer := ip_prfk_id;
    p_pr_id integer := ip_pr_id;
    v_nivel integer;
BEGIN

    p_bResult := 0;

    IF p_prfk_id IS NULL THEN
        SELECT prfk_id
         INTO p_prfk_id
        FROM ProductoFormulaKit
        WHERE pr_id = p_pr_id
          AND prfk_default <> 0;

    END IF;

    -- Averiguo si este producto lleva numero de serie
    IF EXISTS ( SELECT pr_id
                FROM Producto
                WHERE pr_id = p_pr_id
                  AND pr_llevanroserie <> 0 ) THEN

        p_bResult := 1;

    ELSE

    BEGIN
        -- Solo se crea la tabla en la primera llamada
        IF p_bCreateTable <> 0 THEN
            CREATE TEMPORARY TABLE tt_KitItems
              (
                 pr_id integer    NOT NULL,
                 nivel integer    NOT NULL
              ) ON COMMIT DROP;
        END IF;

        -- Agrego los items de este kit
        SELECT MAX(nivel)
         INTO v_nivel
        FROM tt_KitItems ;

        v_nivel := coalesce(v_nivel, 0) + 1;

        INSERT INTO tt_KitItems
         ( pr_id, nivel )
         ( SELECT pr_id_item,
                  v_nivel
           FROM ProductoKit
           WHERE prfk_id = p_prfk_id );

        LOOP

            IF NOT EXISTS ( SELECT *
                            FROM tt_KitItems
                            WHERE nivel = v_nivel ) THEN
              EXIT;
            END IF;

            SELECT MIN(pr_id)
             INTO p_pr_id
            FROM tt_KitItems
            WHERE nivel = v_nivel;

            select sp_producto_kit_lleva_serie(p_pr_id, 0) into p_bResult;

            IF p_bResult <> 0 THEN

            RETURN;

            END IF;

            -- Este ya lo procese asi que lo borro
            DELETE FROM tt_KitItems WHERE pr_id = p_pr_id;

        END LOOP;

    END;
    END IF;

END;
$function$;

CREATE OR REPLACE FUNCTION public.sp_producto_stock_get_data(p_pr_id integer, p_cli_id integer, p_prov_id integer, OUT rtn refcursor)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
declare
   v_cue_id_compra integer;
   v_cue_id_venta integer;
begin

   select * from sp_producto_get_cue_id(
                       p_cli_id,
                       null,
                       p_pr_id)
                       into v_cue_id_venta;

   select * from sp_producto_get_cue_id(
                       null,
                       p_prov_id,
                       p_pr_id)
                       into v_cue_id_compra;

   rtn := 'rtn';

   -- Si es un kit la cosa se pone mas complicada ya que hay que fijarse
   -- si las componentes del kit llevan stock y numero de serie
   --
   if exists ( select pr_id
               from Producto
               where pr_id = p_pr_id
                 and pr_eskit <> 0 ) then
       declare
          v_bLlevaNroSerie smallint;
          v_unidad varchar(255);
          -- Esto lo hacemos asi, por que si bien solo puede
          -- haber una formula por defecto esta regla esta impuesta
          -- por codigo y no por el motor y en consecuencia puede fallar :)
          v_prfk_id integer;
       begin

          select * from sp_producto_kit_lleva_serie(p_pr_id) into v_bLlevaNroSerie;

          select max(prfk_id)
          into v_prfk_id
          from ProductoFormulaKit
          where pr_id = p_pr_id
            and prfk_default <> 0;

          open rtn for
             SELECT
                uns.un_nombre un_name_stock,-- La unidad de los kits es de ventas
                unv.un_nombre un_name_venta,
                unc.un_nombre un_name_compra,
                v_bLlevaNroSerie pr_llevanroserie,
                prfk.pr_llevanrolote,
                prfk.pr_lotefifo,
                prfk.pr_eskit,
                prfk.rub_id,
                v_cue_id_compra cue_id_compra,
                v_cue_id_venta cue_id_venta,
                prfk.prfk_id,
                prfk.prfk_nombre,
                prfk.pr_kitResumido,
                prfk.pr_kitIdentidad,
                case
                    when exists (
                            select pka.prka_id
                            from ProductoKitItemA pka
                            join ProductoKit pk
                              on pka.prk_id = pk.prk_id
                             and pka.prfk_id = prfk.prfk_id ) then 1
                    else 0
                end tiene_alternativas,
                prfk.ccos_id_compra,
                prfk.ccos_id_venta,
                ccosc.ccos_nombre ccos_name_compra,
                ccosv.ccos_nombre ccos_name_venta

             from Producto
             left join Unidad uns
               on Producto.un_id_stock = uns.un_id
             left join Unidad unv
               on Producto.un_id_venta = unv.un_id
             left join Unidad unc
               on Producto.un_id_compra = unc.un_id
             left join ProductoFormulaKit prfk
               on Producto.pr_id = prfk.pr_id
              and prfk.prfk_id = v_prfk_id
             left join CentroCosto ccosc
               on Producto.ccos_id_compra = ccosc.ccos_id
             left join CentroCosto ccosv
               on Producto.ccos_id_venta = ccosv.ccos_id
             where Producto.pr_id = p_pr_id;

       end;
   else

      open rtn for
         select uns.un_nombre un_name_stock,
                unv.un_nombre un_name_venta,
                unc.un_nombre un_name_compra,
                pr_llevanroserie,
                pr_llevanrolote,
                pr_lotefifo,
                pr_eskit,
                rub_id,
                v_cue_id_compra cue_id_compra,
                v_cue_id_venta cue_id_venta,
                ccos_id_compra,
                ccos_id_venta,
                ccosc.ccos_nombre ccos_name_compra,
                ccosv.ccos_nombre ccos_name_venta
           from Producto
           left join Unidad uns
             on Producto.un_id_stock = uns.un_id
           left join Unidad unv
             on Producto.un_id_venta = unv.un_id
           left join Unidad unc
             on Producto.un_id_compra = unc.un_id
           left join CentroCosto ccosc
             on Producto.ccos_id_compra = ccosc.ccos_id
           left join CentroCosto ccosv
             on Producto.ccos_id_venta = ccosv.ccos_id
           where pr_id = p_pr_id;

   end if;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_productocomprahelp(p_emp_id integer, p_us_id integer, p_bforabm integer, p_filter character varying DEFAULT ''::character varying, p_check integer DEFAULT 0, p_pr_id integer DEFAULT 0, p_filter2 character varying DEFAULT ''::character varying, p_prhc_id integer DEFAULT 0, OUT rtn refcursor)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
begin

   p_filter := lower(f_unaccent(p_filter));

   rtn := 'rtn';

   if p_check <> 0 then

      open rtn for
         select pr_id,
                pr_nombrecompra Nombre,
                pr_codigo Codigo
         from Producto
         where ( lower(f_unaccent(pr_nombrecompra)) = p_filter
                or lower(f_unaccent(pr_codigo)) = p_filter )
           and ( activo <> 0 or p_bForAbm <> 0 )
           and ( pr_id = p_pr_id or p_pr_id = 0 )
           and pr_secompra <> 0;

   else

      open rtn for
         select pr_id,
                pr_nombrecompra Nombre,
                pr_descripcompra Observaciones,
                pr_codigo Codigo
         from Producto
                  left join RubroTablaItem rti1
                   on Producto.rubti_id1 = rti1.rubti_id
                  left join RubroTablaItem rti2
                   on Producto.rubti_id2 = rti2.rubti_id
                  left join RubroTablaItem rti3
                   on Producto.rubti_id3 = rti3.rubti_id
                  left join RubroTablaItem rti4
                   on Producto.rubti_id4 = rti4.rubti_id
                  left join RubroTablaItem rti5
                   on Producto.rubti_id5 = rti5.rubti_id
                  left join RubroTablaItem rti6
                   on Producto.rubti_id6 = rti6.rubti_id
                  left join RubroTablaItem rti7
                   on Producto.rubti_id7 = rti7.rubti_id
                  left join RubroTablaItem rti8
                   on Producto.rubti_id8 = rti8.rubti_id
                  left join RubroTablaItem rti9
                   on Producto.rubti_id9 = rti9.rubti_id
                  left join RubroTablaItem rti10
                   on Producto.rubti_id10 = rti10.rubti_id
         where ( lower(f_unaccent(pr_codigo)) like '%' || p_filter || '%'
                 or lower(f_unaccent(pr_nombrecompra)) like '%' || p_filter || '%'
                 or lower(f_unaccent(pr_descripcompra)) like '%' || p_filter || '%'
                 or lower(f_unaccent(rti1.rubti_nombre)) like '%' || p_filter || '%'
                 or lower(f_unaccent(rti2.rubti_nombre)) like '%' || p_filter || '%'
                 or lower(f_unaccent(rti3.rubti_nombre)) like '%' || p_filter || '%'
                 or lower(f_unaccent(rti4.rubti_nombre)) like '%' || p_filter || '%'
                 or lower(f_unaccent(rti5.rubti_nombre)) like '%' || p_filter || '%'
                 or lower(f_unaccent(rti6.rubti_nombre)) like '%' || p_filter || '%'
                 or lower(f_unaccent(rti7.rubti_nombre)) like '%' || p_filter || '%'
                 or lower(f_unaccent(rti8.rubti_nombre)) like '%' || p_filter || '%'
                 or lower(f_unaccent(rti9.rubti_nombre)) like '%' || p_filter || '%'
                 or lower(f_unaccent(rti10.rubti_nombre)) like '%' || p_filter || '%'
                 or p_filter is null )
           and ( activo <> 0 or p_bForAbm <> 0 )
           and pr_secompra <> 0
         limit 50;

   end if;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_productoventahelp(p_emp_id integer, p_us_id integer, p_bforabm integer, p_filtertype integer DEFAULT 0, p_filter character varying DEFAULT ''::character varying, p_check integer DEFAULT 0, p_pr_id integer DEFAULT 0, p_filter2 character varying DEFAULT ''::character varying, p_prhc_id integer DEFAULT 0, OUT rtn refcursor)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
declare
   v_filter varchar(255);
   v_prhc_atributo smallint;
   v_prhc_codigo varchar(255);
   v_timeCode timestamp with time zone;
begin

   rtn := 'rtn';

   p_filter := lower(f_unaccent(p_filter));

   -- check
   --
   if p_check <> 0 then

      open rtn for
         select pr_id,
                pr_nombreventa Nombre,
                pr_codigo Codigo
         from Producto
         where ( lower(f_unaccent(pr_nombreventa)) = p_filter or lower(f_unaccent(pr_codigo)) = p_filter )
           and ( activo <> 0 or p_bForAbm <> 0 )
           and ( pr_id = p_pr_id or p_pr_id = 0 )
           and pr_sevende <> 0;

   else

      select sp_help_get_filter(p_filterType, p_filter) into v_filter;
   
      if p_prhc_id <> 0 then

         select prhc_valor_codigo,
                prhc_atributo_indice
           into v_prhc_codigo,
                v_prhc_atributo
         from ProductoHelpConfig
         where prhc_id = p_prhc_id;

         v_timeCode := CURRENT_TIMESTAMP;

         perform sp_str_string_to_table(v_timeCode, v_prhc_codigo, ',');

         if v_prhc_atributo = 1 then
            insert into tt_t_help_rubro
              ( select rubti.rubti_id
                from RubroTablaItem rubti
                join Rubro rub
                  on rubti.rubt_id = rub.rubt_id1
                join TmpStringToTable
                  on rubti.rubti_codigo = TmpStringToTable.tmpstr2tbl_campo
                where tmpstr2tbl_id = v_timeCode );

         else
            if v_prhc_atributo = 2 then
               insert into tt_t_help_rubro
                 ( select rubti.rubti_id
                   from RubroTablaItem rubti
                   join Rubro rub
                     on rubti.rubt_id = rub.rubt_id2
                   join TmpStringToTable
                     on rubti.rubti_codigo = TmpStringToTable.tmpstr2tbl_campo
                   where tmpstr2tbl_id = v_timeCode );

            else
               if v_prhc_atributo = 3 then
                  insert into tt_t_help_rubro
                    ( select rubti.rubti_id
                      from RubroTablaItem rubti
                      join Rubro rub
                        on rubti.rubt_id = rub.rubt_id3
                      join TmpStringToTable
                        on rubti.rubti_codigo = TmpStringToTable.tmpstr2tbl_campo
                      where tmpstr2tbl_id = v_timeCode );

               else
                  if v_prhc_atributo = 4 then
                     insert into tt_t_help_rubro
                       ( select rubti.rubti_id
                         from RubroTablaItem rubti
                         join Rubro rub
                           on rubti.rubt_id = rub.rubt_id4
                         join TmpStringToTable
                           on rubti.rubti_codigo = TmpStringToTable.tmpstr2tbl_campo
                         where tmpstr2tbl_id = v_timeCode );

                  else
                     if v_prhc_atributo = 5 then
                        insert into tt_t_help_rubro
                          ( select rubti.rubti_id
                            from RubroTablaItem rubti
                            join Rubro rub
                              on rubti.rubt_id = rub.rubt_id5
                            join TmpStringToTable
                              on rubti.rubti_codigo = TmpStringToTable.tmpstr2tbl_campo
                            where tmpstr2tbl_id = v_timeCode );

                     else
                        if v_prhc_atributo = 6 then
                           insert into tt_t_help_rubro
                             ( select rubti.rubti_id
                               from RubroTablaItem rubti
                               join Rubro rub
                                 on rubti.rubt_id = rub.rubt_id6
                               join TmpStringToTable
                                 on rubti.rubti_codigo = TmpStringToTable.tmpstr2tbl_campo
                               where tmpstr2tbl_id = v_timeCode );

                        else
                           if v_prhc_atributo = 7 then
                              insert into tt_t_help_rubro
                                ( select rubti.rubti_id
                                  from RubroTablaItem rubti
                                  join Rubro rub
                                    on rubti.rubt_id = rub.rubt_id7
                                  join TmpStringToTable
                                    on rubti.rubti_codigo = TmpStringToTable.tmpstr2tbl_campo
                                  where tmpstr2tbl_id = v_timeCode );

                           else
                              if v_prhc_atributo = 8 then
                                 insert into tt_t_help_rubro
                                   ( select rubti.rubti_id
                                     from RubroTablaItem rubti
                                     join Rubro rub
                                       on rubti.rubt_id = rub.rubt_id8
                                     join TmpStringToTable
                                       on rubti.rubti_codigo = TmpStringToTable.tmpstr2tbl_campo
                                     where tmpstr2tbl_id = v_timeCode );

                              else
                                 if v_prhc_atributo = 9 then
                                    insert into tt_t_help_rubro
                                      ( select rubti.rubti_id
                                        from RubroTablaItem rubti
                                        join Rubro rub
                                          on rubti.rubt_id = rub.rubt_id9
                                        join TmpStringToTable
                                          on rubti.rubti_codigo = TmpStringToTable.tmpstr2tbl_campo
                                        where tmpstr2tbl_id = v_timeCode );

                                 else
                                    if v_prhc_atributo = 10 then
                                       insert into tt_t_help_rubro
                                         ( select rubti.rubti_id
                                           from RubroTablaItem rubti
                                           join Rubro rub
                                             on rubti.rubt_id = rub.rubt_id10
                                           join TmpStringToTable
                                             on rubti.rubti_codigo = TmpStringToTable.tmpstr2tbl_campo
                                           where tmpstr2tbl_id = v_timeCode );

                                    end if;

                                 end if;

                              end if;

                           end if;

                        end if;

                     end if;

                  end if;

               end if;

            end if;

         end if;

         open rtn for
         
            select pr_id,
                   pr_nombreventa Nombre,
                   pr_descripventa Observaciones,
                   pr_codigo Codigo
            from Producto
            where ( lower(f_unaccent(pr_codigo)) like v_filter
                  or lower(f_unaccent(pr_nombreventa)) like v_filter
                  or lower(f_unaccent(pr_descripventa)) like v_filter
                  or p_filter is null )
              and ( activo <> 0 or p_bForAbm <> 0 )
              and pr_sevende <> 0
              and (   ( v_prhc_atributo = 1  and rubti_id1  in ( select rubti_id from tt_t_help_rubro  ) )
                   or ( v_prhc_atributo = 2  and rubti_id2  in ( select rubti_id from tt_t_help_rubro  ) )
                   or ( v_prhc_atributo = 3  and rubti_id3  in ( select rubti_id from tt_t_help_rubro  ) )
                   or ( v_prhc_atributo = 4  and rubti_id4  in ( select rubti_id from tt_t_help_rubro  ) )
                   or ( v_prhc_atributo = 5  and rubti_id5  in ( select rubti_id from tt_t_help_rubro  ) )
                   or ( v_prhc_atributo = 6  and rubti_id6  in ( select rubti_id from tt_t_help_rubro  ) )
                   or ( v_prhc_atributo = 7  and rubti_id7  in ( select rubti_id from tt_t_help_rubro  ) )
                   or ( v_prhc_atributo = 8  and rubti_id8  in ( select rubti_id from tt_t_help_rubro  ) )
                   or ( v_prhc_atributo = 9  and rubti_id9  in ( select rubti_id from tt_t_help_rubro  ) )
                   or ( v_prhc_atributo = 10 and rubti_id10 in ( select rubti_id from tt_t_help_rubro  ) )
                  )
              limit 50;

      else

         open rtn for
            --//////////////////////////////////////////////////////////////////
            --
            -- select COMUN
            --
            --//////////////////////////////////////////////////////////////////
            select pr_id,
                   pr_nombreventa Nombre,
                   pr_descripventa Observaciones,
                   pr_codigo Codigo
            from Producto
            where (    lower(f_unaccent(pr_codigo)) like v_filter
                    or lower(f_unaccent(pr_nombreventa)) like v_filter
                    or lower(f_unaccent(pr_descripventa)) like v_filter
                    or p_filter is null )
              and ( activo <> 0 or p_bForAbm <> 0 )
              and pr_sevende <> 0
            limit 50;

      end if;

   end if;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_proveedor_delete(p_prov_id integer)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
begin

   delete from ProductoProveedor where prov_id = p_prov_id;
   delete from EmpresaProveedor where prov_id = p_prov_id;
   delete from ProveedorRetencion where prov_id = p_prov_id;
   delete from ProveedorCuentaGrupo where prov_id = p_prov_id;
   delete from ListaDescuentoProveedor where prov_id = p_prov_id;
   delete from ListaPrecioProveedor where prov_id = p_prov_id;
   delete from ProveedorCacheCredito where prov_id = p_prov_id;
   delete from ProveedorCAI where prov_id = p_prov_id;
   delete from EmpresaProveedorDeuda where prov_id = p_prov_id;
   delete from Proveedor where prov_id = p_prov_id;

   return;

exception
   when others then

     raise exception 'Ha ocurrido un error al borrar el proveedor. sp_proveedor_delete. %. %.',
                      sqlstate, sqlerrm;

end;

$function$;

CREATE OR REPLACE FUNCTION public.sp_proveedor_get(p_prov_id integer, OUT rtn refcursor)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
begin

   rtn := 'rtn';

   open rtn for
      select Proveedor.*,
             pro_nombre,
             zon_nombre,
             cpg_nombre,
             lp_nombre,
             ld_nombre,
             us.us_nombre
      from Proveedor
      left join Provincia
       on Proveedor.pro_id = Provincia.pro_id
      left join Zona
       on Proveedor.zon_id = Zona.zon_id
      left join CondicionPago
       on Proveedor.cpg_id = CondicionPago.cpg_id
      left join ListaPrecio
       on Proveedor.lp_id = ListaPrecio.lp_id
      left join ListaDescuento
       on Proveedor.ld_id = ListaDescuento.ld_id
      left join Usuario us
       on Proveedor.us_id = us.us_id
      where prov_id = p_prov_id;

end;

$function$;

CREATE OR REPLACE FUNCTION public.sp_proveedor_get_cai(p_prov_id integer, OUT rtn refcursor)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$

begin   

   rtn := 'rtn';

   open rtn for
      ----------------------------------------------------------------------------------------------
      select provc.provc_id,
             provc.provc_numero,
             provc.provc_descrip,
             provc.provc_sucursal,
             provc.provc_fechavto
      from proveedorCai provc
      where provc.prov_id = p_prov_id
      order by provc.provc_id;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_proveedor_get_empresas(p_prov_id integer, OUT rtn refcursor)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$

begin   

   rtn := 'rtn';

   open rtn for
      ----------------------------------------------------------------------------------------------
      select coalesce(empprov.empprov_id, 0) as empprov_id,
             emp.emp_id,
             emp.emp_nombre
      from Empresa emp
      left join EmpresaProveedor empprov on emp.emp_id = empprov.emp_id and empprov.prov_id = p_prov_id
      order by emp.emp_nombre;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_proveedor_get_info(p_prov_id integer, p_doc_id integer, OUT p_cpg_id integer, OUT p_cpg_name character varying, OUT p_cpg_eslibre smallint, OUT p_lp_id integer, OUT p_lp_name character varying, OUT p_ld_id integer, OUT p_ld_name character varying, OUT p_bivari smallint, OUT p_bivarni smallint)
 RETURNS record
 LANGUAGE plpgsql
AS $function$
declare
      v_cpg_id integer;
      v_cpg_name varchar;
      v_cpg_eslibre integer;
      v_lp_id integer;
      v_lp_name varchar;
      v_ld_id integer;
      v_ld_name varchar;
      v_mon_id integer;
begin


      select lp_id,
             ld_id,
             cpg_id
        into v_lp_id,
             v_ld_id,
             v_cpg_id
      from Proveedor
      where prov_id = p_prov_id;

      select mon_id into v_mon_id from Documento where doc_id = p_doc_id;

      if v_lp_id is not null then

         if not exists ( select *
                         from ListaPrecio
                         where lp_id = v_lp_id
                           and mon_id = v_mon_id
                           and lp_tipo in ( 2,3 ) ) then
            v_lp_id := null;
         end if;

      end if;

      if v_lp_id is null then

         select min(lp_id)
           into v_lp_id
         from ListaPrecio
         where mon_id = v_mon_id
           and lp_tipo in ( 2,3 )
           and lp_default <> 0;

      end if;

      if v_ld_id is not null then

         if not exists ( select *
                         from ListaDescuento
                         where ld_id = v_ld_id
                           and mon_id = v_mon_id
                           and ld_tipo = 2 ) then

            v_ld_id := null;

         end if;

      end if;

      if v_lp_id is not null then
        select lp_nombre into v_lp_name from listaprecio where lp_id = v_lp_id;
      end if;

      if v_ld_id is not null then
        select ld_nombre into v_ld_name from listadescuento where ld_id = v_ld_id;
      end if;

      if v_cpg_id is not null then
        select cpg_nombre, cpg_eslibre into v_cpg_name, v_cpg_eslibre from condicionpago where cpg_id = v_cpg_id;
      end if;

      select * from sp_proveedor_get_iva(p_prov_id) into p_bIvari, p_bIvarni;

      p_lp_id := coalesce(v_lp_id, 0);
      p_lp_name := coalesce(v_lp_name, '');
      p_ld_id := coalesce(v_ld_id, 0);
      p_ld_name := coalesce(v_ld_name, '');
      p_cpg_id := coalesce(v_cpg_id, 0);
      p_cpg_name := coalesce(v_cpg_name, '');
      p_cpg_eslibre := coalesce(v_cpg_eslibre, 0);

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_proveedor_get_iva(p_prov_id integer, OUT p_bivari smallint, OUT p_bivarni smallint)
 RETURNS record
 LANGUAGE plpgsql
AS $function$
declare
   v_tipoIva smallint;
   v_bIva smallint;
   v_bIvaRni smallint;
   v_bSinIva smallint;
begin

   v_bIva := -1;
   v_bIvaRni := -2;
   v_bSinIva := -3;

   select case prov_catfiscal
             when 1 then v_bIva      --'Inscripto'
             when 2 then v_bSinIva   --'Exento'
             when 3 then v_bSinIva   --'No inscripto'
             when 4 then v_bIva      --'Consumidor Final'
             when 5 then v_bSinIva   --'Extranjero'
             when 6 then v_bSinIva   --'Mono Tributo'
             when 7 then v_bIva      --'Extranjero Iva'
             when 8 then v_bIva      --'No responsable'
             when 9 then v_bIva      --'No Responsable exento'
             when 10 then v_bIvaRni  --'No categorizado'
             when 11 then v_bIva     --'Inscripto M'
             else 0                  --'Sin categorizar'
          end
     into v_tipoIva
   from Proveedor
   where prov_id = p_prov_id;

   v_tipoIva := coalesce(v_tipoIva, v_bSinIva);

   if v_tipoIva = v_bIva then

      v_bIva := 1;
      v_bIvaRni := 0;

   else

      if v_tipoIva = v_bIvaRni then

         v_bIva := 1;
         v_bIvaRni := 1;

      else

         if v_tipoIva = v_bSinIva then

            v_bIva := 0;
            v_bIvaRni := 0;

         end if;

      end if;

   end if;

   p_bIvaRi := v_bIva;
   p_bIvaRni := v_bIvaRni;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_proveedor_get_next_number(p_prov_id integer, p_doc_id integer DEFAULT NULL::integer, OUT p_number integer, OUT p_mask character varying, OUT p_enabled integer)
 RETURNS record
 LANGUAGE plpgsql
AS $function$
declare
    v_ta_id integer;
begin

    select sp_proveedor_get_talonario(p_prov_id, p_doc_id) into v_ta_id;

    if v_ta_id is not null then

        select ta_ultimonro, ta_mascara, ta_tipo
          into p_number, p_mask, p_enabled
        from talonario
        where ta_id = v_ta_id;

    end if;

    p_number := coalesce(p_number, 0) + 1;
    p_mask := coalesce(p_mask, '');
    p_enabled := coalesce(p_enabled, 0);

    if(p_enabled != 1 /* suggested */) then

        p_enabled := 0;

    end if;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_proveedor_get_retenciones(p_prov_id integer, OUT rtn refcursor)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$

begin   

   rtn := 'rtn';

   open rtn for
      ----------------------------------------------------------------------------------------------
      select
             provret_id,
             provret.ret_id,
             provret_desde,
             provret_hasta,
             ret_nombre
      from ProveedorRetencion provret
      inner join Retencion ret on provret.ret_id = ret.ret_id
      where provret.prov_id = p_prov_id;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_proveedor_get_retenciones(p_us_id integer, p_emp_id integer, p_prov_id integer, p_fecha date, p_pago numeric, p_facturas character varying, OUT rtn refcursor)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
declare
   v_ret_id integer;
   v_cue_id integer;
   v_retencion record;
   v_retenciones refcursor;
   v_fdesde date;
   v_fhasta date;
begin   

   v_fdesde := dateadd('DAY', -extract('day' from p_fecha)::int+1, p_fecha);
   v_fhasta := dateadd('DAY', -1, dateadd('MONTH', 1, v_fdesde));

   create temporary table tt_tmp_retencion
    (
     ret_id integer
    ) on commit drop;

   create temporary table tt_tmp_retencion_info
    (
     ret_id integer,
     cue_id integer,
     retencion decimal(18,6),
     porcentaje decimal(18,6),
     comprobante varchar(100),
     base decimal(18,6)
    ) on commit drop;

   rtn := 'rtn';
   
   -------------------------------------------------------------
   -- retenciones explicitas en proveedores
   --
   if exists ( select *
               from ProveedorRetencion provret
               where provret.prov_id = p_prov_id ) then

         insert into tt_tmp_retencion
           ( ret_id)
           ( select ret_id
             from ProveedorRetencion provret
             where prov_id = p_prov_id
               and p_fecha between provret_desde and provret_hasta );

   else

      -------------------------------------------------------------
      -- retenciones por configuracion general
      --
      insert into tt_tmp_retencion
        ( ret_id )
        ( select CAST(cfg_valor as integer)
          from Configuracion
          where emp_id = p_emp_id
            and cfg_grupo = 'Tesoreria-General'
            and cfg_aspecto = 'Retencion'
            and isnumeric(cfg_valor) <> 0 );

   end if;

   for v_ret_id, v_cue_id in
       select ret.rett_id, rett.cue_id
       from tt_tmp_retencion tt
       inner join retencion ret on tt.ret_id = ret.ret_id
       inner join RetencionTipo rett on ret.rett_id = rett.rett_id
   loop

      if v_cue_id is not null then

         select sp_doc_orden_pago_get_retencion(
                  p_us_id,
                  v_fdesde,
                  v_fhasta,
                  p_prov_id::varchar,
                  p_emp_id::varchar,
                  v_ret_id::varchar,
                  p_pago,
                  p_facturas,
                  1 /*p_IsForOPG*/) into v_retenciones;

         loop

            fetch v_retenciones into v_retencion;

            exit when not found;

            insert into tt_tmp_retencion_info(ret_id, cue_id, retencion, porcentaje, comprobante, base)
            values(
                   v_ret_id, v_cue_id, v_retencion.retencion,
                   v_retencion.porcentaje, v_retencion.comprobante,
                   v_retencion.base
                   );

         end loop;

         close v_retenciones;

      end if;

   end loop;

   open rtn for
      select
             tt.ret_id,
             ret_nombre,
             tt.cue_id,
             cue_nombre,
             cue.mon_id,
             retencion,
             porcentaje,
             comprobante,
             base
      from tt_tmp_retencion_info tt 
      inner join retencion ret on tt.ret_id = ret.ret_id
      inner join cuenta cue on tt.cue_id = cue.cue_id
   ;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_proveedor_get_talonario(p_prov_id integer, p_doc_id integer DEFAULT NULL::integer, OUT p_ta_id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
declare
   v_prov_catfiscal smallint;
   v_doct_id integer;
   v_doct_id_facturavta integer;
   v_doct_id_facturacpra integer;
   v_doct_id_notadebitovta integer;
   v_doct_id_notacreditovta integer;
   v_doct_id_notadebitocpra integer;
   v_doct_id_notacreditocpra integer;
begin

   v_doct_id_facturavta := 1;
   v_doct_id_facturacpra := 2;
   v_doct_id_notadebitovta := 9;
   v_doct_id_notacreditovta := 7;
   v_doct_id_notadebitocpra := 10;
   v_doct_id_notacreditocpra := 8;

   select doct_id
     into v_doct_id
   from Documento
   where doc_id = p_doc_id;

   if v_doct_id in (
                        v_doct_id_facturavta, v_doct_id_facturacpra, v_doct_id_notadebitovta,
                        v_doct_id_notacreditovta, v_doct_id_notadebitocpra, v_doct_id_notacreditocpra ) then

        select prov_catfiscal
          into v_prov_catfiscal
        from Proveedor
        where prov_id = p_prov_id;


        select
            case v_prov_catfiscal
                when 1  then ta_id_inscripto--'Inscripto'
                when 2  then ta_id_final--'Exento'
                when 3  then ta_id_final--'No inscripto'
                when 4  then ta_id_final--'Consumidor Final'
                when 5  then ta_id_externo--'Extranjero'
                when 6  then ta_id_final--'Mono Tributo'
                when 7  then ta_id_externo--'Extranjero Iva'
                when 8  then ta_id_final--'No responsable'
                when 9  then ta_id_final--'No Responsable exento'
                when 10 then ta_id_final--'No categorizado'
                when 11 then ta_id_inscriptom--'Inscripto M'
                else -1--'Sin categorizar'
            end ta_id
          into p_ta_id
        from Documento
        where doc_id = p_doc_id;

   else

        select ta_id
          into p_ta_id
        from Documento
        where doc_id = p_doc_id;

   end if;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_proveedor_update_credito(p_prov_id integer, p_emp_id integer)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
declare
   v_deuda_cta_cte_anterior decimal(18,6);
   v_deuda_cta_cte decimal(18,6);
   v_credito_cta_cte decimal(18,6);
   v_deuda_doc_anterior decimal(18,6);
   v_deuda_doc decimal(18,6);
   v_emp_provd_id integer;
   
   v_doct_factura_cpra integer := 2;
   v_doct_orden_pago integer := 16;
   v_doct_orden_pago_chq integer := 1016;
begin

   -- Deuda en el cache
   --
   select sum(provcc_importe)
     into v_deuda_cta_cte
   from ProveedorCacheCredito
   where doct_id = v_doct_factura_cpra
     and prov_id = p_prov_id;

   -- Credito en el cache
   --
   select sum(provcc_importe)
     into v_credito_cta_cte
   from ProveedorCacheCredito
   where doct_id = v_doct_orden_pago
     and prov_id = p_prov_id;

   -- Deuda en el proveedor
   --
   select prov_DeudaCtaCte
     into v_deuda_cta_cte_anterior
   from Proveedor
   where prov_id = p_prov_id;

   update Proveedor
      set prov_DeudaCtaCte = coalesce(v_deuda_cta_cte, 0) - coalesce(v_credito_cta_cte, 0),
          prov_deudaTotal = prov_deudaTotal - coalesce(v_deuda_cta_cte_anterior, 0)
                            + (coalesce(v_deuda_cta_cte, 0) - coalesce(v_credito_cta_cte, 0))
   where prov_id = p_prov_id;

   -- Actualizo la deuda en la tabla EmpresaProveedorDeuda
   --
   v_deuda_cta_cte := 0;
   v_deuda_cta_cte_anterior := 0;
   v_credito_cta_cte := 0;

   -- Deuda en el cache para la empresa del documento modificado
   --
   select sum(provcc_importe)
     into v_deuda_cta_cte
   from ProveedorCacheCredito
   where doct_id = v_doct_factura_cpra
     and prov_id = p_prov_id
     and emp_id = p_emp_id;

   -- Credito en el cache para la empresa del documento modificado
   --
   select sum(provcc_importe)
     into v_credito_cta_cte
   from ProveedorCacheCredito
   where doct_id = v_doct_orden_pago
     and prov_id = p_prov_id
     and emp_id = p_emp_id;

   select empprovd_id
     into v_emp_provd_id
   from EmpresaProveedorDeuda
   where prov_id = p_prov_id
     and emp_id = p_emp_id;

   if coalesce(v_emp_provd_id, 0) <> 0 then

      select empprovd_DeudaCtaCte
        into v_deuda_cta_cte_anterior
      from EmpresaProveedorDeuda
      where empprovd_id = v_emp_provd_id;

      update EmpresaProveedorDeuda
         set empprovd_DeudaCtaCte = coalesce(v_deuda_cta_cte, 0) - coalesce(v_credito_cta_cte, 0),
             empprovd_deudaTotal = empprovd_deudaTotal - coalesce(v_deuda_cta_cte_anterior, 0)
                                   + (coalesce(v_deuda_cta_cte, 0) - coalesce(v_credito_cta_cte, 0))
      where empprovd_id = v_emp_provd_id;

   else

      select sp_dbGetNewId('EmpresaProveedorDeuda', 'empprovd_id') into v_emp_provd_id;

      insert into EmpresaProveedorDeuda
        ( empprovd_id, emp_id, prov_id, empprovd_deudaCtaCte, empprovd_deudaTotal )
        values ( v_emp_provd_id, p_emp_id, p_prov_id, coalesce(v_deuda_cta_cte, 0),
                 coalesce(v_deuda_cta_cte, 0) - coalesce(v_credito_cta_cte, 0) );

   end if;

   -- Deuda en el cache
   --
   select sum(provcc_importe)
     into v_deuda_doc
   from ProveedorCacheCredito
   where doct_id = v_doct_orden_pago_chq
     and prov_id = p_prov_id;

   -- Deuda en el Proveedor
   --
   select prov_deudaDoc
     into v_deuda_doc_anterior
   from Proveedor
   where prov_id = p_prov_id;

   update Proveedor
      set prov_deudaDoc = coalesce(v_deuda_doc, 0),
          prov_deudaTotal = prov_deudaTotal - coalesce(v_deuda_doc_anterior, 0) + coalesce(v_deuda_doc, 0)
   where prov_id = p_prov_id;

   -- Actualizo la deuda en la tabla EmpresaProveedorDeuda
   --
   v_deuda_doc := 0;
   v_deuda_doc_anterior := 0;

   -- Deuda en el cache para la empresa del documento modificado
   --
   select sum(provcc_importe)
     into v_deuda_doc
   from ProveedorCacheCredito
   where doct_id = v_doct_orden_pago_chq
     and prov_id = p_prov_id
     and emp_id = p_emp_id;

   v_emp_provd_id := null;

   select empprovd_id
     into v_emp_provd_id
   from EmpresaProveedorDeuda
   where prov_id = p_prov_id
     and emp_id = p_emp_id;

   if coalesce(v_emp_provd_id, 0) <> 0 then

      select empprovd_DeudaDoc
        into v_deuda_doc_anterior
      from EmpresaProveedorDeuda
      where empprovd_id = v_emp_provd_id;

      update EmpresaProveedorDeuda
         set empprovd_DeudaDoc = coalesce(v_deuda_doc, 0),
             empprovd_deudaTotal = empprovd_deudaTotal - coalesce(v_deuda_doc_anterior, 0) + coalesce(v_deuda_doc, 0)
      where empprovd_id = v_emp_provd_id;

   else

      select sp_dbGetNewId('EmpresaProveedorDeuda', 'empprovd_id') into v_emp_provd_id;

      insert into EmpresaProveedorDeuda( empprovd_id, prov_id, emp_id, empprovd_deudaDoc, empprovd_deudaTotal )
      values ( v_emp_provd_id, p_prov_id, p_emp_id, coalesce(v_deuda_doc, 0), coalesce(v_deuda_doc, 0) );

   end if;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_proveedor_update_orden_cpra_credito(p_prov_id integer, p_emp_id integer)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
declare
   v_deudaOrdenAnterior decimal(18,6);
   v_deudaOrden decimal(18,6);
   v_empprovd_id integer;
   v_doct_Ordencompra integer := 35;
begin

   -- deuda en el cache
   --
   select sum(provcc_importe)
     into v_deudaOrden
   from ProveedorCacheCredito
   where doct_id = v_doct_Ordencompra
     and prov_id = p_prov_id;

   -- deuda en el proveedor
   --
   select prov_deudaOrden
     into v_deudaOrdenAnterior
   from Proveedor
   where prov_id = p_prov_id;

   update Proveedor
      set prov_deudaOrden = coalesce(v_deudaOrden, 0),
          prov_deudaTotal = prov_deudaTotal - coalesce(v_deudaOrdenAnterior, 0) + coalesce(v_deudaOrden, 0)
   where prov_id = p_prov_id;

   -- actualizo la deuda en la tabla EmpresaProveedorDeuda
   --
   v_deudaOrden := 0;
   v_deudaOrdenAnterior := 0;

   -- deuda en el cache para la empresa del documento modificado
   --
   select sum(provcc_importe)
     into v_deudaOrden
   from ProveedorCacheCredito
   where doct_id = v_doct_Ordencompra
     and prov_id = p_prov_id
     and emp_id = p_emp_id;

   select empprovd_id
     into v_empprovd_id
   from EmpresaProveedorDeuda
   where prov_id = p_prov_id
     and emp_id = p_emp_id;

   if coalesce(v_empprovd_id, 0) <> 0 then

      select empprovd_deudaOrden
        into v_deudaOrdenAnterior
      from EmpresaProveedorDeuda
      where empprovd_id = v_empprovd_id;

      update EmpresaProveedorDeuda
         set empprovd_deudaOrden = coalesce(v_deudaOrden, 0),
             empprovd_deudaTotal = empprovd_deudaTotal - coalesce(v_deudaOrdenAnterior, 0) + coalesce(v_deudaOrden, 0)
      where empprovd_id = v_empprovd_id;

   else

      select sp_dbGetNewId('EmpresaProveedorDeuda', 'empprovd_id') into v_empprovd_id;

      insert into EmpresaProveedorDeuda( empprovd_id, emp_id, prov_id, empprovd_deudaOrden, empprovd_deudaTotal )
        values ( v_empprovd_id, p_emp_id, p_prov_id, coalesce(v_deudaOrden, 0), coalesce(v_deudaOrden, 0) );

   end if;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_proveedor_update_remito_credito(p_prov_id integer, p_emp_id integer)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
declare
   v_deudaRemitoAnterior decimal(18,6);
   v_deudaRemito decimal(18,6);
   v_empprovd_id integer;
   v_doct_remitocompra integer := 4;
begin

   -- deuda en el cache
   --
   select sum(provcc_importe)
     into v_deudaRemito
   from ProveedorCacheCredito
   where doct_id = v_doct_remitocompra
     and prov_id = p_prov_id;

   -- deuda en el proveedor
   --
   select prov_deudaRemito
     into v_deudaRemitoAnterior
   from Proveedor
   where prov_id = p_prov_id;

   update Proveedor
      set prov_deudaRemito = coalesce(v_deudaRemito, 0),
          prov_deudaTotal = prov_deudaTotal - coalesce(v_deudaRemitoAnterior, 0) + coalesce(v_deudaRemito, 0)
   where prov_id = p_prov_id;

   -- actualizo la deuda en la tabla empresaproveedordeuda
   --
   v_deudaRemito := 0;
   v_deudaRemitoAnterior := 0;

   -- deuda en el cache para la empresa del documento modificado
   --
   select sum(provcc_importe)
     into v_deudaRemito
   from ProveedorCacheCredito
   where doct_id = v_doct_remitocompra
     and prov_id = p_prov_id
     and emp_id = p_emp_id;

   select empprovd_id
     into v_empprovd_id
   from EmpresaProveedorDeuda
   where prov_id = p_prov_id
     and emp_id = p_emp_id;

   if coalesce(v_empprovd_id, 0) <> 0 then

      select empprovd_deudaRemito
        into v_deudaRemitoAnterior
      from EmpresaProveedorDeuda
      where empprovd_id = v_empprovd_id;

      update EmpresaProveedorDeuda
         set empprovd_deudaRemito = coalesce(v_deudaRemito, 0),
             empprovd_deudaTotal = empprovd_deudaTotal - coalesce(v_deudaRemitoAnterior, 0) + coalesce(v_deudaRemito, 0)
      where empprovd_id = v_empprovd_id;

   else
      select sp_dbGetNewId('EmpresaProveedorDeuda', 'empprovd_id') into v_empprovd_id;

      insert into EmpresaProveedorDeuda( empprovd_id, emp_id, prov_id, empprovd_deudaRemito, empprovd_deudaTotal )
      values ( v_empprovd_id, p_emp_id, p_prov_id, coalesce(v_deudaRemito, 0), coalesce(v_deudaRemito, 0) );

   end if;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_proveedorhelp(p_emp_id integer, p_us_id integer, p_bforabm integer, p_filter character varying DEFAULT ''::character varying, p_check integer DEFAULT 0, p_prov_id integer DEFAULT 0, p_filter2 character varying DEFAULT ''::character varying, OUT rtn refcursor)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
DECLARE
   v_us_EmpresaEx numeric(3,0);
   v_us_EmpXDpto numeric(3,0);
BEGIN

   SELECT us_empresaex,
          us_empxdpto
     INTO v_us_EmpresaEx,
          v_us_EmpXDpto
     FROM Usuario
      WHERE us_id = p_us_id;

   p_filter := lower(f_unaccent(p_filter));

   rtn := 'rtn';

   IF v_us_EmpresaEx <> 0 THEN
   BEGIN
      IF p_check <> 0 THEN
      BEGIN
         OPEN rtn FOR
            SELECT prov_id,
                   prov_nombre Nombre,
                   prov_codigo Codigo
            FROM Proveedor
            WHERE ( lower(f_unaccent(prov_nombre)) = p_filter
                   OR lower(f_unaccent(prov_codigo)) = p_filter )
                   AND ( activo <> 0
                   OR p_bForAbm <> 0 )
                   AND ( prov_id = p_prov_id
                   OR p_prov_id = 0 )
                   AND ( p_bForAbm <> 0
                   OR ( ( EXISTS ( SELECT *
                                   FROM EmpresaProveedor
                                      WHERE prov_id = Proveedor.prov_id
                                              AND emp_id = p_emp_id ) )
                   AND ( EXISTS ( SELECT *
                                  FROM UsuarioEmpresa
                                     WHERE prov_id = Proveedor.prov_id
                                             AND us_id = p_us_id )
                   OR p_us_id = 1 ) ) );

      END;
      ELSE
      BEGIN
         OPEN rtn FOR
            SELECT prov_id,
                   prov_nombre Nombre,
                   prov_razonsocial AS "R. Social",
                   prov_cuit CUIT,
                   prov_codigo Codigo,
                   CASE prov_catfiscal
                    WHEN 1 THEN 'Inscripto'
                    WHEN 2 THEN 'Exento'
                    WHEN 3 THEN 'No inscripto'
                    WHEN 4 THEN 'Consumidor Final'
                    WHEN 5 THEN 'Extranjero'
                    WHEN 6 THEN 'Mono Tributo'
                    WHEN 7 THEN 'Extranjero Iva'
                    WHEN 8 THEN 'No responsable'
                    WHEN 9 THEN 'No Responsable exento'
                    WHEN 10 THEN 'No categorizado'
                    ELSE 'Sin categorizar'
                   END AS "Cat. Fiscal"
            FROM Proveedor
            WHERE ( lower(f_unaccent(prov_codigo)) LIKE '%' || p_filter || '%'
                       OR lower(f_unaccent(prov_nombre)) LIKE '%' || p_filter || '%'
                       OR lower(f_unaccent(prov_razonsocial)) LIKE '%' || p_filter || '%'
                       OR prov_cuit LIKE '%' || p_filter || '%'
                       OR p_filter IS NULL )
                       AND ( p_bForAbm <> 0
                       OR ( ( EXISTS ( SELECT *
                                       FROM EmpresaProveedor
                                          WHERE prov_id = Proveedor.prov_id
                                                  AND emp_id = p_emp_id ) )
                       AND ( EXISTS ( SELECT *
                                      FROM UsuarioEmpresa
                                         WHERE prov_id = Proveedor.prov_id
                                                 AND us_id = p_us_id )
                       OR p_us_id = 1 )
                       AND activo <> 0 ) )
            LIMIT <= 50;

      END;
      END IF;

   END;
   ELSE
   BEGIN
      IF v_us_EmpXDpto <> 0 THEN
      BEGIN
         IF p_check <> 0 THEN
         BEGIN
            OPEN rtn FOR
               SELECT prov_id,
                      prov_nombre Nombre,
                      prov_codigo Codigo
               FROM Proveedor
               WHERE ( lower(f_unaccent(prov_nombre)) = p_filter
                          OR lower(f_unaccent(prov_codigo)) = p_filter )
                          AND ( activo <> 0
                          OR p_bForAbm <> 0 )
                          AND ( prov_id = p_prov_id
                          OR p_prov_id = 0 )
                          AND ( p_bForAbm <> 0
                          OR ( ( EXISTS ( SELECT *
                                          FROM EmpresaProveedor
                                             WHERE prov_id = Proveedor.prov_id
                                                     AND emp_id = p_emp_id ) )
                          AND ( EXISTS ( SELECT *
                                         FROM DepartamentoProveedor dc
                                                JOIN UsuarioDepartamento ud
                                                 ON dc.dpto_id = ud.dpto_id
                                            WHERE dc.prov_id = Proveedor.prov_id
                                                    AND ud.us_id = p_us_id )
                          OR p_us_id = 1 ) ) );

         END;
         ELSE
         BEGIN
            OPEN rtn FOR
               SELECT prov_id,
                      prov_nombre Nombre,
                      prov_razonsocial AS "R. Social",
                      prov_cuit CUIT,
                      prov_codigo Codigo,
                      CASE prov_catfiscal
                        WHEN 1 THEN 'Inscripto'
                        WHEN 2 THEN 'Exento'
                        WHEN 3 THEN 'No inscripto'
                        WHEN 4 THEN 'Consumidor Final'
                        WHEN 5 THEN 'Extranjero'
                        WHEN 6 THEN 'Mono Tributo'
                        WHEN 7 THEN 'Extranjero Iva'
                        WHEN 8 THEN 'No responsable'
                        WHEN 9 THEN 'No Responsable exento'
                        WHEN 10 THEN 'No categorizado'
                        ELSE 'Sin categorizar'
                      END AS "Cat. Fiscal"
               FROM Proveedor
               WHERE ( lower(f_unaccent(prov_codigo)) LIKE '%' || p_filter || '%'
                          OR lower(f_unaccent(prov_nombre)) LIKE '%' || p_filter || '%'
                          OR lower(f_unaccent(prov_razonsocial)) LIKE '%' || p_filter || '%'
                          OR prov_cuit LIKE '%' || p_filter || '%'
                          OR p_filter IS NULL )
                          AND ( p_bForAbm <> 0
                          OR ( ( EXISTS ( SELECT *
                                          FROM EmpresaProveedor
                                             WHERE prov_id = Proveedor.prov_id
                                                     AND emp_id = p_emp_id ) )
                          AND ( EXISTS ( SELECT *
                                         FROM DepartamentoProveedor dc
                                                JOIN UsuarioDepartamento ud
                                                 ON dc.dpto_id = ud.dpto_id
                                            WHERE dc.prov_id = Proveedor.prov_id
                                                    AND ud.us_id = p_us_id )
                          OR p_us_id = 1 )
                          AND activo <> 0 ) )
               LIMIT <= 50;

         END;
         END IF;

      END;
      ELSE
      BEGIN
         IF p_check <> 0 THEN
         BEGIN
            OPEN rtn FOR
               SELECT prov_id,
                      prov_nombre Nombre,
                      prov_codigo Codigo
               FROM Proveedor
               WHERE ( lower(f_unaccent(prov_nombre)) = p_filter
                          OR lower(f_unaccent(prov_codigo)) = p_filter )
                          AND ( activo <> 0
                          OR p_bForAbm <> 0 )
                          AND ( prov_id = p_prov_id
                          OR p_prov_id = 0 )
                          AND ( p_bForAbm <> 0
                          OR ( EXISTS ( SELECT *
                                        FROM EmpresaProveedor
                                           WHERE prov_id = Proveedor.prov_id
                                                   AND emp_id = p_emp_id ) ) );

         END;
         ELSE
         BEGIN
            OPEN rtn FOR
               SELECT prov_id,
                      prov_nombre Nombre,
                      prov_razonsocial AS "R. Social",
                      prov_cuit CUIT,
                      prov_codigo Codigo,
                      CASE prov_catfiscal
                        WHEN 1 THEN 'Inscripto'
                        WHEN 2 THEN 'Exento'
                        WHEN 3 THEN 'No inscripto'
                        WHEN 4 THEN 'Consumidor Final'
                        WHEN 5 THEN 'Extranjero'
                        WHEN 6 THEN 'Mono Tributo'
                        WHEN 7 THEN 'Extranjero Iva'
                        WHEN 8 THEN 'No responsable'
                        WHEN 9 THEN 'No Responsable exento'
                        WHEN 10 THEN 'No categorizado'
                        ELSE 'Sin categorizar'
                      END AS "Cat. Fiscal"
               FROM Proveedor
               WHERE ( lower(f_unaccent(prov_codigo)) LIKE '%' || p_filter || '%'
                          OR lower(f_unaccent(prov_nombre)) LIKE '%' || p_filter || '%'
                          OR lower(f_unaccent(prov_razonsocial)) LIKE '%' || p_filter || '%'
                          OR prov_cuit LIKE '%' || p_filter || '%'
                          OR p_filter IS NULL )
                          AND ( p_bForAbm <> 0
                          OR ( EXISTS ( SELECT *
                                        FROM EmpresaProveedor
                                           WHERE prov_id = Proveedor.prov_id
                                                   AND emp_id = p_emp_id )
                          AND activo <> 0 ) )
               LIMIT 50;

         END;
         END IF;

      END;
      END IF;

   END;
   END IF;

END;
$function$;

CREATE OR REPLACE FUNCTION public.sp_reporte_get_parametro_value(p_valor character varying, p_tipo integer, p_tbl_id integer)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
declare
   v_real_id integer;
   v_ram_id integer;
   v_tabla varchar;
   v_camponombre varchar;
   v_campoid varchar;
   v_sqlstmt varchar;
begin

   if p_tipo = 2 /* select */ then

      if trim(p_valor) = '' then

         return p_valor;

      end if;

      select * from sp_ArbConvertId(p_valor) into v_real_id, v_ram_id;

      if v_ram_id <> 0 then

         select ram_nombre into p_valor from rama where ram_id = v_ram_id;
         return p_valor;

      else

         select tbl_nombrefisico, tbl_camponombre, tbl_campoid
           into v_tabla, v_camponombre, v_campoid
         from tabla where tbl_id = p_tbl_id;

         v_sqlstmt := 'select ' || v_camponombre || ' from ' || v_tabla || ' where ' || v_campoid || ' = ' || v_real_id::varchar;

         execute v_sqlstmt into p_valor;
         return p_valor;

      end if;

   else

      return p_valor;

   end if;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_reporte_get_parametros(p_rpt_id integer, OUT rtn refcursor)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
begin

   rtn := 'rtn';

   open rtn for

      select i.infp_id,
             i.infp_nombre,
             i.infp_orden,
             i.infp_tipo,
             i.infp_default,
             i.infp_visible,
             i.infp_sqlstmt,
             i.inf_id,
             i.tbl_id,
             r.rptp_id,
             coalesce(r.rptp_valor,i.infp_default) as rptp_valor,
             coalesce(r.rptp_visible,i.infp_visible) as rptp_visible,
             r.rpt_id,
             sp_reporte_get_parametro_value(
                coalesce(r.rptp_valor,i.infp_default),
                i.infp_tipo,
                i.tbl_id) as select_value_name

      from Reporte rpt
      inner join InformeParametro i on rpt.inf_id = i.inf_id
      left join ReporteParametro r  on i.infp_id = r.infp_id and r.rpt_id = rpt.rpt_id

      where rpt.rpt_id = p_rpt_id
      order by i.infp_orden;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_rpt_get_logos(p_logo character varying, OUT rtn refcursor)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
begin

   rtn := 'rtn';

   open rtn for
      select dd_file
      from DocumentoDigital
      where dd_codigo = p_logo;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_rpt_get_logos_chico(p_emp_id integer DEFAULT 0, OUT rtn refcursor)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
declare
   v_codigo varchar(50);
begin

   v_codigo := 'LOGOCHICO##_' || trim(to_char(p_emp_id));

   rtn := 'rtn';

   open rtn for
      select dd_file
      from DocumentoDigital
      where dd_codigo = v_codigo;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_rpt_get_logos_grande(p_emp_id integer DEFAULT 0, OUT rtn refcursor)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
declare
   v_codigo varchar(50);
begin

   v_codigo := 'LOGOGRANDE##_' || trim(to_char(p_emp_id));

   rtn := 'rtn';

   open rtn for
      select dd_file
      from DocumentoDigital
      where dd_codigo = v_codigo;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_rubro_get(p_rub_id integer, OUT rtn refcursor)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
begin

   rtn := 'rtn';

   begin
      open rtn for
         select Rubro.*,
                rt1.rubt_nombre rubt_name1,
                rt2.rubt_nombre rubt_name2,
                rt3.rubt_nombre rubt_name3,
                rt4.rubt_nombre rubt_name4,
                rt5.rubt_nombre rubt_name5,
                rt6.rubt_nombre rubt_name6,
                rt7.rubt_nombre rubt_name7,
                rt8.rubt_nombre rubt_name8,
                rt9.rubt_nombre rubt_name9,
                rt10.rubt_nombre rubt_name10,
                rti1.rubti_nombre rubti_name1,
                rti2.rubti_nombre rubti_name2,
                rti3.rubti_nombre rubti_name3,
                rti4.rubti_nombre rubti_name4,
                rti5.rubti_nombre rubti_name5,
                rti6.rubti_nombre rubti_name6,
                rti7.rubti_nombre rubti_name7,
                rti8.rubti_nombre rubti_name8,
                rti9.rubti_nombre rubti_name9,
                rti10.rubti_nombre rubti_name10
           from Rubro
                  left join RubroTabla rt1
                   on Rubro.rubt_id1 = rt1.rubt_id
                  left join RubroTabla rt2
                   on Rubro.rubt_id2 = rt2.rubt_id
                  left join RubroTabla rt3
                   on Rubro.rubt_id3 = rt3.rubt_id
                  left join RubroTabla rt4
                   on Rubro.rubt_id4 = rt4.rubt_id
                  left join RubroTabla rt5
                   on Rubro.rubt_id5 = rt5.rubt_id
                  left join RubroTabla rt6
                   on Rubro.rubt_id6 = rt6.rubt_id
                  left join RubroTabla rt7
                   on Rubro.rubt_id7 = rt7.rubt_id
                  left join RubroTabla rt8
                   on Rubro.rubt_id8 = rt8.rubt_id
                  left join RubroTabla rt9
                   on Rubro.rubt_id9 = rt9.rubt_id
                  left join RubroTabla rt10
                   on Rubro.rubt_id10 = rt10.rubt_id
                  left join RubroTablaItem rti1
                   on Rubro.rubti_id1 = rti1.rubti_id
                  left join RubroTablaItem rti2
                   on Rubro.rubti_id2 = rti2.rubti_id
                  left join RubroTablaItem rti3
                   on Rubro.rubti_id3 = rti3.rubti_id
                  left join RubroTablaItem rti4
                   on Rubro.rubti_id4 = rti4.rubti_id
                  left join RubroTablaItem rti5
                   on Rubro.rubti_id5 = rti5.rubti_id
                  left join RubroTablaItem rti6
                   on Rubro.rubti_id6 = rti6.rubti_id
                  left join RubroTablaItem rti7
                   on Rubro.rubti_id7 = rti7.rubti_id
                  left join RubroTablaItem rti8
                   on Rubro.rubti_id8 = rti8.rubti_id
                  left join RubroTablaItem rti9
                   on Rubro.rubti_id9 = rti9.rubti_id
                  left join RubroTablaItem rti10
                   on Rubro.rubti_id10 = rti10.rubti_id
            where rub_id = p_rub_id;

   end;
end;

$function$;

CREATE OR REPLACE FUNCTION public.sp_rut_validate(p_rut character varying, OUT p_is_valid integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
declare
   suma integer := 0;
   cuenta integer := 2;
   rest integer;
   digito integer;
   dig integer;
   dv varchar;
   numRut varchar;
   numberRut integer;
   resto integer;
   rutDigito varchar;
begin

   suma := 0;
   cuenta := 2;
   p_rut := replace(p_rut, '.', '');
   p_rut := replace(p_rut, '-', '');

   if length(trim(p_rut)) < 10 or (isNumeric(substring(p_rut, 1, 8)) <> 0) then
     
     p_is_valid := 0;
   
   else

      dv := substring(p_rut, length(p_rut) - 1);
      numberRut := to_number(substring(p_rut, 1, 8));

      loop

         dig := numberRut % 10;
         numberRut := numberRut / 10;
         suma := suma + (dig * cuenta);
         cuenta := cuenta + 1;

         if cuenta = 8 then
           cuenta := 2;
         end if;

         if numberRut > 0 then
            exit;
         end if;

      end loop;

      resto := suma % 11;
      digito := 11 - resto;

      rutDigito := '';

      if digito = 10 then

         rutDigito := 'K';

      else

        if digito = 11 then

           rutDigito := '0';

        else

           rutDigito := trim(to_char(digito));

        end if;

      end if;

      if rutDigito <> dv then

         p_is_valid := 0;

      else

         p_is_valid := 1;

      end if;
         
   end if;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_security_get_permisos_x_usuario(p_us_id integer)
 RETURNS TABLE(per_id integer, pre_id integer)
 LANGUAGE plpgsql
AS $function$
declare
   v_rol_id int;
begin

   create temporary table tt_roles (rol_id int) on commit drop;
   create temporary table tt_permisos (per_id int, rol_id int null) on commit drop;

   insert into tt_roles(rol_id) (select rol_id from usuariorol where us_id = p_us_id);

   for v_rol_id in
       select rol_id from tt_roles
   loop

      insert into tt_permisos(per_id,rol_id)
      select permiso.per_id, v_rol_id
      from permiso
      where rol_id=v_rol_id;

   end loop;

   insert into tt_permisos(per_id) (select permiso.per_id from permiso where us_id = p_us_id);

   return query
   select tp.per_id, p.pre_id
   from tt_permisos tp inner join permiso p on tp.per_id = p.per_id;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_security_get_permisos_x_usuario(p_us_id integer, p_resumido integer, OUT rtn refcursor)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
declare 
   v_rol_id int;
begin
	
   create temporary table tt_roles (rol_id int) on commit drop;
   create temporary table tt_permisos (per_id int, rol_id int null) on commit drop;
   
   insert into tt_roles(rol_id) (select rol_id from usuariorol where us_id = p_us_id);
   
   for v_rol_id in
       select rol_id from tt_roles
   loop

      insert into tt_permisos(per_id,rol_id)
      select per_id, v_rol_id
      from permiso
      where rol_id=v_rol_id;

   end loop;
   
   insert into tt_permisos(per_id) (select per_id from permiso where us_id = p_us_id);

   rtn := 'rtn';

   if p_resumido <> 0 then

      open rtn for

      select tp.per_id, pre_id
      from tt_permisos tp inner join permiso p on tp.per_id = p.per_id;

   else

      open rtn for

      select
             p.per_id,
             p.us_id,
             p.rol_id,
             pr.pre_id,
             rol_nombre,
             p.creado,
             p.modifico,
             pr.pre_nombre,
             pr.pre_grupo,
             p.per_id_padre,
             pr2.pre_nombre as padre
    
      from (tt_permisos tp
                inner join permiso p on tp.per_id = p.per_id
                inner join prestacion pr on p.pre_id = pr.pre_id
                inner join usuario u on p.modifico = u.us_id
                left  join permiso p2 on p.per_id_padre = p2.per_id
                left  join prestacion pr2 on p2.pre_id = pr2.pre_id
           )
           left join rol r on tp.rol_id = r.rol_id;

   end if;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_stock_producto_get_kit_info(p_pr_id integer, p_bcreatetable integer DEFAULT 1, p_bsolostockxitem integer DEFAULT 0, p_bsetpridkit integer DEFAULT 0, p_cantidad integer DEFAULT 1, p_bppk integer DEFAULT 0, ip_prfk_id integer DEFAULT 0, p_bexpandkit integer DEFAULT 0, p_bexpandkitalllevels integer DEFAULT 0, p_bgetfomulafromtableaux integer DEFAULT 0, p_bsetpridsubkit integer DEFAULT 0, p_baddpridkittotable integer DEFAULT 0, OUT rtn refcursor)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
declare
        p_prfk_id integer := ip_prfk_id;

        v_bLlevaNroSerie smallint;  -- Si es un kit la cosa se pone mas complicada ya que hay que fijarse
                                    -- si las componentes del kit llevan stock y numero de serie

        v_Unidad varchar(255);
        v_nivel integer;
        v_prk_cantidad decimal(18,6);
        v_pr_id_item integer;
        v_pr_kitResumido smallint;
        v_bExpandKit smallint;      -- para poder incluirlo en el reporte de necesidad de compra
        v_cantidad_kit integer;
begin

   v_bExpandKit := p_bExpandKit;

   if p_bExpandKitAllLevels <> 0 then
      v_bExpandKit := 1;
   end if;

   if p_prfk_id is null then

      if p_bGetFomulaFromTableAux <> 0 then

         select t.prfk_id
           into p_prfk_id
         from tt_FormulasKit t
         join ProductoFormulaKit prfk
           on t.prfk_id = prfk.prfk_id
         where prfk.pr_id = p_pr_id;

      end if;

      if p_prfk_id is null then

         select prfk_id
           into p_prfk_id
         from ProductoFormulaKit
         where pr_id = p_pr_id
           and prfk_default <> 0;

      end if;

   end if;

   -- Solo se crea la tabla en la primera llamada
   if p_bCreateTable <> 0 then

         create temporary table tt_FormulasKit (prfk_id integer) on commit drop;

   end if;

   select pr_kitResumido
     into v_pr_kitResumido
   from Producto
   where pr_id = p_pr_id;

   if v_bExpandKit = 0 and v_pr_kitResumido <> 0 then

      insert into tt_KitItemsSerie ( pr_id, cantidad, prk_id ) values ( p_pr_id, 1, 0 );

   else

      -- Si solo quiere los componentes de kits que controlan stock por item, y este kit no controla stock por item,
      -- (son aquellos que debe ser fabricados previamente), solo agrego este producto y listo
      --
      if exists ( select pr_id
                  from Producto
                  where pr_id = p_pr_id
                    and pr_kitStkItem = 0
                    and p_bSoloStockXItem <> 0 ) then

         insert into tt_KitItemsSerie( pr_id, cantidad, prk_id ) values ( p_pr_id, p_cantidad, 0 );

      else


         -- Agrego los items de este kit
         select max(nivel)
           into v_nivel
         from tt_KitItems ;

         v_nivel := coalesce(v_nivel, 0) + 1;

         -- Agrego todos los items de este kit que son kit
         insert into tt_KitItems
           ( pr_id, nivel )
           ( select k.pr_id_item,
                    v_nivel
             from ProductoKit k
             join Producto p
               on k.pr_id_item = p.pr_id
             where k.prfk_id = p_prfk_id
               and p.pr_eskit <> 0 );

         -- Agrego todos los items de este Kit que no sean kit
         insert into tt_KitItemsSerie
           ( pr_id, cantidad, prk_id )
           ( select k.pr_id_item,
                    k.prk_cantidad * p_cantidad,
                    k.prk_id
             from ProductoKit k
             join Producto p
               on k.pr_id_item = p.pr_id
             where k.prfk_id = p_prfk_id
               and ( p.pr_eskit = 0 or ( p.pr_kitStkItem = 0 and p_bSoloStockXItem <> 0 )));

         -- Actualizo el pr_id_kit para definir a que kit pertenecen estos insumos
         --
         if p_bSetPrIdSubKit <> 0 then

            update tt_KitItemsSerie set pr_id_kit = p_pr_id where pr_id_kit is null;

         else

            if p_bSetPrIdKit <> 0 then

               update tt_KitItemsSerie set pr_id_kit = 0;-- Para diferenciarlos de los Items de Kits

            end if;

         end if;

         loop

            if not exists ( select *
                            from tt_KitItems
                            where nivel = v_nivel ) then
               exit;

            end if;

            select min(pr_id)
              into v_pr_id_item
            from tt_KitItems
            where nivel = v_nivel;

            -- Solo los que son kit
            if exists ( select *
                        from Producto
                        where pr_id = v_pr_id_item
                          and pr_eskit <> 0
                          and ( pr_kitStkItem <> 0 or p_bSoloStockXItem = 0 ) ) then

               select prk_cantidad
                 into v_prk_cantidad
               from ProductoKit
               where prfk_id = p_prfk_id
                 and pr_id_item = v_pr_id_item;

               v_prk_cantidad := v_prk_cantidad * p_cantidad;

               select sp_stock_producto_get_kit_info(
                            v_pr_id_item,--@@pr_id
                            0,--@@bCreateTable
                            p_bSoloStockXItem,
                            0,--@@bSetPrIdKit
                            v_prk_cantidad,
                            0,--@@bPPK
                            null,--@@prfk_id
                            0,--@@bExpandKit
                            p_bExpandKitAllLevels,
                            p_bGetFomulaFromTableAux,
                            p_bSetPrIdSubKit,
                            p_bAddPrIdKitToTable) into rtn;

            end if;

            -- Identifico a que kit pertenecen estos items
            -- Observen que cuando se utiliza @@bSetPrIdKit todos los insumos
            -- quedan asociados con al primer nivel de sub kits
            --
            if p_bSetPrIdKit <> 0 then

               update tt_KitItemsSerie
                  set pr_id_kit = v_pr_id_item
               where pr_id_kit is null;

            end if;

            -- Este ya lo procese asi que lo borro
            delete from tt_KitItems where pr_id = v_pr_id_item;

            if p_bAddPrIdKitToTable <> 0 then

               select prk_cantidad * p_cantidad
                 into v_cantidad_kit
               from ProductoKit k
               where k.prfk_id = p_prfk_id
                 and pr_id_item = v_pr_id_item;

               insert into tt_KitItemsSerie( pr_id, cantidad, prk_id, pr_id_kit, nivel )
                    values ( v_pr_id_item, v_cantidad_kit, 0, p_pr_id, v_nivel );

            end if;

         end loop;

         -- Pongo en null para que no se confunda el 0 con un id de producto y
         -- fallen otros sp que llaman a este y luego utilizan el pr_id_kit para
         -- insertarlo en alguna tabla, como es el caso de sp_DocParteProdKitSaveItemKit
         --
         if p_bSetPrIdKit <> 0 then

            update tt_KitItemsSerie
               set pr_id_kit = null
            where pr_id_kit = 0;

         end if;

      end if;

      -- Solo si no estoy produciendo el kit
      --
      if p_bSetPrIdKit <> 0 and p_bPPK = 0 and p_bSetPrIdSubKit = 0 then

         if exists ( select *
                     from Producto
                     where pr_id = p_pr_id
                       and pr_eskit <> 0
                       and pr_kitStkItem = 0 ) then

            update tt_KitItemsSerie set pr_id_kit = p_pr_id;

         end if;

      end if;

   end if;

   -- Solo la primera llamada devuelve datos
   if p_bCreateTable <> 0 then

      if p_bSetPrIdKit <> 0 then

         open rtn for
            select k.pr_id,
                   p.pr_nombrecompra,
                   p.pr_llevanroserie,
                   k.pr_id_kit,
                   sum(cantidad) cantidad
            from tt_KitItemsSerie k
            join Producto p
              on k.pr_id = p.pr_id
            group by k.pr_id,p.pr_nombrecompra,p.pr_llevanroserie,k.pr_id_kit;

      else

         open rtn for
            select k.pr_id,
                   p.pr_nombrecompra,
                   p.pr_llevanroserie,
                   sum(cantidad) cantidad
            from tt_KitItemsSerie k
            join Producto p
              on k.pr_id = p.pr_id
            group by k.pr_id,p.pr_nombrecompra,p.pr_llevanroserie;

      end if;

   end if;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_sys_lenguaje_item_update_from_menu(p_leng_id integer)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
declare
   cur refcursor;
   v_row record;
   v_text varchar(5000);
   v_lengi_id integer;
begin

   set TRANSACTION READ WRITE;

   open cur for select distinct(me_text) from sysMenu where me_text not in (select lengi_codigo from lenguajeitem where leng_id = p_leng_id);
   loop
          fetch cur into v_row;
          exit when not found;

          v_text := sp_leng_get_text_aux(v_row.me_text, p_leng_id);

          if v_text <> '' then
            select sp_dbGetNewId('Lenguajeitem', 'lengi_id') into v_lengi_id;
            insert into LenguajeItem (lengi_id, leng_id, lengi_codigo, lengi_texto, modifico) values(v_lengi_id, p_leng_id, v_row.me_text, v_text, 1);
          else
            raise notice 'CODE not found: %', v_row.me_text;
          end if;

   end loop;
   close cur;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_str_string_to_table(p_codigo timestamp with time zone, p_tosearch character varying, p_separator character varying DEFAULT ' '::character varying)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
declare
   v_i smallint;
   v_s varchar(255);
   v_toSearch varchar(4000); 
begin

   v_toSearch := rtrim(ltrim(coalesce(p_toSearch, '')));

   while length(v_toSearch) > 0
   loop
      begin
         v_i := 1;

         while v_i <= length(v_toSearch)
           and length(v_toSearch) > 0
         loop
            begin
               v_s := substr(v_toSearch, v_i, 1);

               if v_s = p_separator then
                  exit;

               end if;

               v_i := v_i + 1;

            end;
         end loop;

         if v_s = p_separator then
         begin
            insert into TmpStringToTable
              ( tmpstr2tbl_campo, tmpstr2tbl_id )
              values ( ltrim(substr(v_toSearch, 1, v_i - 1)), p_codigo );

         end;
         else
         begin
            insert into TmpStringToTable
              ( tmpstr2tbl_campo, tmpstr2tbl_id )
              values ( ltrim(substr(v_toSearch, 1, v_i)), p_codigo );

         end;
         end if;

         v_i := v_i + 1;

         v_toSearch := ltrim(substr(v_toSearch, v_i, length(v_toSearch)));

      end;
   end loop;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_strgetrealname(p_prefix character varying, p_campo character varying)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
DECLARE
   v_j integer;
BEGIN

   v_j := coalesce(strpos(p_campo, '='), 0);

   IF v_j = 0 THEN
      p_campo := p_prefix || '.' || p_campo;

   ELSE
      p_campo := SUBSTR(p_campo, 1, v_j) || p_prefix || '.' || LTRIM(SUBSTR(p_campo, v_j + 1, LENGTH(p_campo)));

   END IF;

   return p_campo;

END;
$function$;

CREATE OR REPLACE FUNCTION public.sp_strreplaceequalswithas(p_campos character varying)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
DECLARE
   v_retval varchar(5000);
   v_campo varchar(5000);
   v_caracter varchar(1);
   v_i integer;
   v_j integer;
   v_z integer;
   v_q integer;
   v_r integer;
   v_t integer;
   v_p integer;
   v_n integer;
   v_work_done boolean;
BEGIN

   v_i := 1;

   v_j := 0;

   v_p := 0;

   v_z := 0;

   v_retval := '';

   v_work_done := false;

   -- si no hay campos tampoco
   IF p_campos IS NULL
     OR p_campos IS NULL THEN
      RETURN '';

   END IF;

   --------------------------------------------
   v_j := coalesce(INSTR(p_campos, ',', v_j + 1), 0);

   v_z := coalesce(INSTR(p_campos, '(', v_z + 1), 0);

   --------------------------------------------
   IF v_j = 0 THEN
   BEGIN
      IF v_i < v_z THEN
      BEGIN
         v_retval := LTRIM(p_campos);

         v_i := INSTR(v_retval, '=', 1);

         IF v_i < v_z AND v_i <> 0 THEN
         BEGIN
                v_retval := SUBSTR(v_retval, v_i +1) || ' AS ' || REPLACE(SUBSTR(v_retval, 1, v_i -1),'''', '"');
         END;
         END IF;

      END;
      ELSE
         v_i := INSTR(v_retval, '=', 1);

         IF v_i <> 0 THEN
         BEGIN
                v_retval := SUBSTR(v_retval, v_i +1) || ' AS ' || REPLACE(SUBSTR(v_retval, 1, v_i -1),'''', '"');
         
         END;
         END IF;

      END IF;

   END;
   ELSE
   BEGIN
      WHILE v_j <> 0
      LOOP
         BEGIN
            -- si hay un parentesis es por que hay un subselect, en cuyo caso no toco nada que este en
            -- el parentesis
            IF v_i < v_z
              AND v_z < v_j THEN
            BEGIN
               --leeo caracter por caracter hasta encontrar el cierre del parentesis
               v_r := LENGTH(p_campos) + 1;

               v_t := v_z;

               WHILE v_t < v_r
               LOOP
                  BEGIN
                     v_caracter := SUBSTR(p_campos, v_t, 1);

                     -- si encuentro un parentesis abierto, incremento un contador para buscar uno cerrado
                     IF v_caracter = '(' THEN
                        v_p := v_p + 1;

                     END IF;

                     IF v_caracter = ')' THEN
                     BEGIN
                        v_p := v_p - 1;
                     
                        -- si encontre el cierre del primer parentesis termine con este campo
                        IF v_p = 0 THEN
                           EXIT;
                           
                        END IF;

                     END;
                     END IF;

                     v_t := v_t + 1;

                  END;
               END LOOP;

               -- ahora busco una coma a partir del ultimo parentesis
               v_j := INSTR(p_campos, ',', v_t);

               -- si la encuentro agrego el campo tal como esta a la sentencia
               IF v_j > 0 THEN
               BEGIN
                  v_campo := LTRIM(SUBSTR(p_campos, v_i, v_j - v_i));

                  v_n := INSTR(v_campo, '=', 1);

                  IF v_n < v_z AND v_n <> 0 THEN
                  BEGIN
                        v_campo := SUBSTR(v_campo, v_n +1) || ' AS ' || REPLACE(SUBSTR(v_campo, 1, v_n -1),'''', '"') || ',';
                  END;
                  END IF;
         
                  v_retval := v_retval || v_campo;

                  -- me preparo para buscar la proxima coma
                  v_i := v_j + 1;

                  v_j := INSTR(p_campos, ',', v_j + 1);

                  v_z := INSTR(p_campos, '(', v_i + 1);

               END;
               -- si no encuentro la coma es porque se terminaron los campos, asi que
               -- agrego el campo a la sentencia y termine
               ELSE
               BEGIN
                  v_campo := LTRIM(SUBSTR(p_campos, v_i, LENGTH(p_campos)));

                  v_n := INSTR(v_campo, '=', 1);

                  IF v_n < v_z AND v_n <> 0 THEN
                  BEGIN
                        v_campo := SUBSTR(v_campo, v_n +1) || ' AS ' || REPLACE(SUBSTR(v_campo, 1, v_n -1),'''', '"');
                  END;
                  END IF;

                  v_retval := v_retval || v_campo;

                  -- con esto voy al final
                  v_work_done:= true;
                  EXIT;

               END;
               END IF;

            END;
            ELSE
            BEGIN
               v_campo := LTRIM(SUBSTR(p_campos, v_i, v_j - v_i));

               v_n := INSTR(v_campo, '=', 1);

               IF v_n <> 0 THEN
               BEGIN
                   v_campo := SUBSTR(v_campo, v_n +1) || ' AS ' || REPLACE(SUBSTR(v_campo, 1, v_n -1),'''', '"') || ',';
               END;
               END IF;

               v_retval := v_retval || v_campo;

               v_i := v_j + 1;

               v_j := INSTR(p_campos, ',', v_j + 1);

               -- busco el proximo parentesis
               v_z := INSTR(p_campos, '(', v_i + 1);

            END;
            END IF;

         END;
      END LOOP;
      IF NOT v_work_done THEN
        BEGIN
              IF v_i < v_z THEN
              BEGIN
                 --leeo caracter por caracter hasta encontrar el cierre del parentesis
                 v_r := LENGTH(p_campos) + 1;

                 v_t := v_z;

                 WHILE v_t < v_r
                 LOOP
                    BEGIN
                       v_caracter := SUBSTR(p_campos, v_t, 1);

                       -- si encuentro un parentesis abierto, incremento un contador para buscar uno cerrado
                       IF v_caracter = '(' THEN
                          v_p := v_p + 1;

                       END IF;

                       IF v_caracter = ')' THEN
                       BEGIN
                          v_p := v_p - 1;
                          
                          -- si encontre el cierre del primer parentesis termine con este campo
                          IF v_p = 0 THEN
                             EXIT;

                          END IF;

                       END;
                       END IF;

                       v_t := v_t + 1;

                    END;
                 END LOOP;

                 v_campo := LTRIM(SUBSTR(p_campos, v_i, LENGTH(p_campos)));

                 v_n := INSTR(v_campo, '=', 1);

                 IF v_n < v_z AND v_n <> 0 THEN
                 BEGIN
                        v_campo := SUBSTR(v_campo, v_n +1) || ' AS ' || REPLACE(SUBSTR(v_campo, 1, v_n -1),'''', '"');
                 END;
                 END IF;                 

                 v_retval := v_retval || v_campo;

              END;
              ELSE
              BEGIN
                 v_campo := LTRIM(SUBSTR(p_campos, v_i, LENGTH(p_campos)));

                 v_n := INSTR(v_campo, '=', 1);

                 IF v_n <> 0 THEN
                 BEGIN
                        v_campo := SUBSTR(v_campo, v_n +1) || ' AS ' || REPLACE(SUBSTR(v_campo, 1, v_n -1),'''', '"');
                 END;
                 END IF;

                 v_retval := v_retval || v_campo;

              END;
              END IF;
        END;
      END IF;
   END;
   END IF;

   return v_retval;
   
END;
$function$;

CREATE OR REPLACE FUNCTION public.sp_strsetprefix(p_prefix character varying, p_campos character varying)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
DECLARE
   v_retval varchar(5000);
   v_campo varchar(5000);
   v_caracter varchar(1);
   v_i integer;
   v_j integer;
   v_z integer;
   v_q integer;
   v_r integer;
   v_t integer;
   v_p integer;
   v_work_done boolean;
BEGIN

   v_i := 1;

   v_j := 0;

   v_p := 0;

   v_z := 0;

   v_retval := '';

   v_work_done := false;

   --------------------------------------------
   -- si no hay prefijo no toco los campos
   IF p_prefix IS NULL
     OR p_prefix IS NULL THEN
      RETURN '';

   END IF;

   -- si no hay campos tampoco
   IF p_campos IS NULL
     OR p_campos IS NULL THEN
      RETURN '';

   END IF;

   --------------------------------------------
   v_j := coalesce(INSTR(p_campos, ',', v_j + 1), 0);

   v_z := coalesce(INSTR(p_campos, '(', v_z + 1), 0);

   --------------------------------------------
   IF v_j = 0 THEN
   BEGIN
      IF v_i < v_z THEN
      BEGIN
         v_campo := LTRIM(p_campos);

         v_retval := v_retval || v_campo;

      END;
      ELSE
         v_retval := sp_strGetRealName(p_prefix, p_campos);

      END IF;

   END;
   ELSE
   BEGIN
      WHILE v_j <> 0
      LOOP
         BEGIN
            -- si hay un parentesis es por que hay un subselect, en cuyo caso no toco nada que este en
            -- el parentesis
            IF v_i < v_z
              AND v_z < v_j THEN
            BEGIN
               --leeo caracter por caracter hasta encontrar el cierre del parentesis
               v_r := LENGTH(p_campos) + 1;

               v_t := v_z;

               WHILE v_t < v_r
               LOOP
                  BEGIN
                     v_caracter := SUBSTR(p_campos, v_t, 1);

                     -- si encuentro un parentesis abierto, incremento un contador para buscar uno cerrado
                     IF v_caracter = '(' THEN
                        v_p := v_p + 1;

                     END IF;

                     IF v_caracter = ')' THEN
                     BEGIN
                        v_p := v_p - 1;
                        
                        -- si encontre el cierre del primer parentesis termine con este campo
                        IF v_p = 0 THEN
                           EXIT;                           

                        END IF;

                     END;
                     END IF;

                     v_t := v_t + 1;

                  END;
               END LOOP;

               -- ahora busco una coma a partir del ultimo parentesis
               v_j := INSTR(p_campos, ',', v_t);

               -- si la encuentro agrego el campo tal como esta a la sentencia
               IF v_j > 0 THEN
               BEGIN
                  v_campo := LTRIM(SUBSTR(p_campos, v_i, v_j - v_i + 1));

                  v_retval := v_retval || v_campo;

                  -- me preparo para buscar la proxima coma
                  v_i := v_j + 1;

                  v_j := INSTR(p_campos, ',', v_j + 1);

                  v_z := INSTR(p_campos, '(', v_i + 1);

               END;
               -- si no encuentro la coma es porque se terminaron los campos, asi que
               -- agrego el campo a la sentencia y termine
               ELSE
               BEGIN
                  v_campo := LTRIM(SUBSTR(p_campos, v_i, LENGTH(p_campos)));

                  v_retval := v_retval || v_campo;

                  -- con esto voy al final
                  v_work_done:= true;
                  EXIT;

               END;
               END IF;

            END;
            ELSE
            BEGIN
               v_campo := LTRIM(SUBSTR(p_campos, v_i, v_j - v_i + 1));

               v_campo:= sp_strGetRealName(p_prefix, v_campo);

               v_retval := v_retval || v_campo;

               v_i := v_j + 1;

               v_j := INSTR(p_campos, ',', v_j + 1);

               -- busco el proximo parentesis
               v_z := INSTR(p_campos, '(', v_i + 1);

            END;
            END IF;

         END;
      END LOOP;
      IF NOT v_work_done THEN
        BEGIN
              IF v_i < v_z THEN
              BEGIN
                 --leeo caracter por caracter hasta encontrar el cierre del parentesis
                 v_r := LENGTH(p_campos) + 1;

                 v_t := v_z;

                 WHILE v_t < v_r
                 LOOP
                    BEGIN
                       v_caracter := SUBSTR(p_campos, v_t, 1);

                       -- si encuentro un parentesis abierto, incremento un contador para buscar uno cerrado
                       IF v_caracter = '(' THEN
                          v_p := v_p + 1;

                       END IF;

                       IF v_caracter = ')' THEN
                       BEGIN
                          v_p := v_p - 1;
                          
                          -- si encontre el cierre del primer parentesis termine con este campo
                          IF v_p = 0 THEN
                             EXIT;

                          END IF;

                       END;
                       END IF;

                       v_t := v_t + 1;

                    END;
                 END LOOP;

                 v_campo := LTRIM(SUBSTR(p_campos, v_i, LENGTH(p_campos)));

                 v_retval := v_retval || v_campo;

              END;
              ELSE
              BEGIN
                 v_campo := LTRIM(SUBSTR(p_campos, v_i, LENGTH(p_campos)));

                 v_campo:= sp_strGetRealName(p_prefix, v_campo);

                 v_retval := v_retval || v_campo;

              END;
              END IF;
        END;
      END IF;
   END;
   END IF;

   --------------------------------------------
   RETURN sp_strReplaceEqualsWithAs(v_retval);

END;
$function$;

CREATE OR REPLACE FUNCTION public.sp_sys_language_get(p_us_id integer, OUT rtn refcursor)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
DECLARE
   v_leng_id integer;
BEGIN

   SELECT cfg_valor::integer
     INTO v_leng_id
     FROM Configuracion
      WHERE cfg_grupo = 'Usuario-Config'
        AND cfg_aspecto = 'Lenguaje Gral_' || p_us_id::varchar;

   IF coalesce(v_leng_id, 0) = 0 THEN
   BEGIN
      SELECT cfg_valor::integer
        INTO v_leng_id
        FROM Configuracion
         WHERE cfg_grupo = 'general'
           AND cfg_aspecto = 'lenguaje';

   END;
   END IF;

   IF coalesce(v_leng_id, 0) = 0 THEN
      v_leng_id := 1;-- CrowSoft default language (Castellano)
   END IF;

   rtn := 'rtn';

   OPEN rtn FOR SELECT sysl_code, sysl_text FROM sysLanguage WHERE leng_id = v_leng_id;

END;
$function$;

CREATE OR REPLACE FUNCTION public.sp_sys_language_update()
 RETURNS void
 LANGUAGE plpgsql
AS $function$
DECLARE
   cur refcursor;
   v_row record;
BEGIN

   SET TRANSACTION READ WRITE;

   delete from sysLanguage;

   OPEN cur FOR SELECT leng_id FROM lenguaje;
   LOOP
          FETCH cur INTO v_row;
          EXIT WHEN NOT FOUND;

          perform sp_sys_language_update(v_row.leng_id);
          
   END LOOP;
   CLOSE cur;

END;
$function$;

CREATE OR REPLACE FUNCTION public.sp_sys_language_update(p_leng_id integer)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
DECLARE
   cur refcursor;
   v_row record;
   v_text varchar(5000);
BEGIN

   SET TRANSACTION READ WRITE;

   OPEN cur FOR SELECT distinct(lengi_codigo) FROM lenguajeItem;
   LOOP
          FETCH cur INTO v_row;
          EXIT WHEN NOT FOUND;

          v_text := sp_leng_get_text_aux(v_row.lengi_codigo, p_leng_id);

          if v_text <> '' then

            INSERT INTO sysLanguage (leng_id, sysl_code, sysl_text) values(p_leng_id, v_row.lengi_codigo, v_text);
          else
            RAISE NOTICE 'CODE NOT FOUND: %', v_row.lengi_codigo;
          end if;

   END LOOP;
   CLOSE cur;

END;
$function$;

CREATE OR REPLACE FUNCTION public.sp_sys_lenguaje_item_update_from_menu()
 RETURNS void
 LANGUAGE plpgsql
AS $function$
declare
   cur refcursor;
   v_row record;
begin

   set TRANSACTION READ WRITE;

   open cur for select leng_id from lenguaje;
   loop
          fetch cur into v_row;
          exit when not found;

          perform sp_sys_lenguaje_item_update_from_menu(v_row.leng_id);
          
   end loop;
   close cur;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_sys_menu_get(p_us_id integer, p_emp_id integer, OUT rtn refcursor)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
declare
v_leng_id integer;
begin
        select cfg_valor::int into v_leng_id
        from configuracion
        where cfg_grupo = 'Usuario-Config'
        and cfg_aspecto = 'Lenguaje Gral_' || p_us_id::varchar
        and emp_id = p_emp_id;

        v_leng_id := coalesce(v_leng_id, 1);

        if v_leng_id = 0 then
           v_leng_id := 1;
        end if;                            

        rtn := 'rtn';
        
        open rtn for
        select

                        s.sysm_id,
                        s.sysm_orden,
                        s.sysm_objetoinicializacion,
                        s.sysm_objetoedicion,
                        m.me_path,
                        m.me_path2, 
                        replace(s.sysm_objetoedicion,'.','/') as handler,
                        s.pre_id,
                        m.me_action,
                        m.me_action2,
                        m.me_id,
                        m.me_text,
                        m.me_key,
                        m.me_father,
                        m.me_position,
                        m.me_is_last,
                        m.me_is_separator,
                        m.me_have_separator,
                        m.me_is_main_menu,
                        m.me_is_popup_menu,
                        m.me_object_handler,
                        m.me_package,
                        m.me_file_path,
                        coalesce(l.lengi_texto,'????') as text,
                        coalesce(lfather1.lengi_texto,'') as father1,
                        coalesce(lfather2.lengi_texto,'') as father2,
                        coalesce(lfather3.lengi_texto,'') as father3,
                        coalesce(lfather4.lengi_texto,'') as father4,
                        coalesce(lfather5.lengi_texto,'') as father5,

                        father1.me_id as father1_id,
                        father2.me_id as father2_id,
                        father3.me_id as father3_id,
                        father4.me_id as father4_id,
                        father5.me_id as father5_id

                        /*
                        ,'mkdir ' || substring(s.sysm_objetoedicion from 1 for position('.' in s.sysm_objetoedicion)-1) as make_dir
                        ,'touch ' || replace(s.sysm_objetoedicion,'.','/') || '.js' as js_file
                        */
                        
 	from sysModulo s 
                inner join sysModuloUser u on s.sysm_id = u.sysm_id and u.us_id = p_us_id
                inner join sysMenu m on s.pre_id = m.pre_id
                left join lenguajeItem l on l.lengi_codigo = m.me_text and l.leng_id = v_leng_id

                left join sysMenu father1 on m.me_id_father = father1.me_id
                left join sysMenu father2 on father1.me_id_father = father2.me_id
                left join sysMenu father3 on father2.me_id_father = father3.me_id
                left join sysMenu father4 on father3.me_id_father = father4.me_id
                left join sysMenu father5 on father4.me_id_father = father5.me_id
                
                left join lenguajeItem lfather1 on father1.me_text = lfather1.lengi_codigo and lfather1.leng_id = v_leng_id
                left join lenguajeItem lfather2 on father2.me_text = lfather2.lengi_codigo and lfather2.leng_id = v_leng_id
                left join lenguajeItem lfather3 on father3.me_text = lfather3.lengi_codigo and lfather3.leng_id = v_leng_id
                left join lenguajeItem lfather4 on father4.me_text = lfather4.lengi_codigo and lfather4.leng_id = v_leng_id
                left join lenguajeItem lfather5 on father5.me_text = lfather5.lengi_codigo and lfather5.leng_id = v_leng_id

	order by 
	coalesce(replace(lfather5.lengi_texto, '&',''),'zzz'), 
	coalesce(replace(lfather4.lengi_texto, '&',''),'zzz'), 
	coalesce(replace(lfather3.lengi_texto, '&',''),'zzz'), 
	coalesce(replace(lfather2.lengi_texto, '&',''),'zzz'), 
	coalesce(replace(lfather1.lengi_texto, '&',''),'zzz'), 
	coalesce(replace(l.lengi_texto, '&',''),'zzz') desc;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_sys_module_get(p_us_id integer, OUT rtn refcursor)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
DECLARE
BEGIN
        rtn := 'rtn';
        
        open rtn for
        select distinct 

			s.sysm_id,
			s.sysm_orden,
			s.sysm_objetoinicializacion,
			s.sysm_objetoedicion,
			s.pre_id

 	from sysModulo s inner join sysModuloUser u on s.sysm_id = u.sysm_id and u.us_id = p_us_id

	order by s.sysm_orden;

END;
$function$;

CREATE OR REPLACE FUNCTION public.sp_talonario_get_next_number(p_ta_id integer, OUT p_ta_nrodoc character varying)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
declare
   v_ta_ultimonro integer;
   v_ta_mascara varchar(100);
   v_lenmascara smallint;
begin

    select ta_ultimonro,
           ta_mascara
      into v_ta_ultimonro,
           v_ta_mascara
    from Talonario
    where ta_id = p_ta_id;

    p_ta_nrodoc := trim(to_char(v_ta_ultimonro + 1));

    v_lenMascara := length(v_ta_mascara) - length(p_ta_nrodoc);

    if v_lenMascara > 0 then
        p_ta_nrodoc := substr(v_ta_mascara, 1, v_lenMascara) || p_ta_nrodoc;
    end if;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_talonario_get_propuesto(p_doc_id integer, p_cli_id integer DEFAULT 0, p_prov_id integer DEFAULT 0, OUT p_ta_mascara character varying, OUT p_ta_propuesto smallint, OUT p_ta_id integer, OUT p_ta_tipo smallint)
 RETURNS record
 LANGUAGE plpgsql
AS $function$
declare
   v_ta_id integer;
   v_doct_id integer;
   v_cli_catfiscal integer;
   v_prov_catfiscal integer;
begin

   if coalesce(p_doc_id, 0) = 0 then
       begin
          p_ta_Mascara := '';

          p_ta_Propuesto := 0;

          p_ta_tipo := 0;

          p_ta_id := null;

       end;
   else
       begin
          select ta_id,
                 doct_id
            into v_ta_id,
                 v_doct_id
          from Documento
          where doc_id = p_doc_id;

          if v_doct_id in (
                  1   --   Factura de Venta
                  ,2  --   Factura de Compra
                  ,7  --   Nota de Credito Venta
                  ,8  --   Nota de Credito Compra
                  ,9  --   Nota de Debito Venta
                  ,10 --   Nota de Debito Compra
          ) then

          begin
             if v_doct_id in ( 1--   Factura de Venta
             ,7--   Nota de Credito Venta
             ,9 ) then--   Nota de Debito Venta

             begin
                select cli_catfiscal
                  into v_cli_catfiscal
                  from Cliente
                   where cli_id = p_cli_id;

                select case v_cli_catfiscal
                    when 1 then ta_id_inscripto--'Inscripto'

                    when 2 then ta_id_final--'Exento'

                    when 3 then ta_id_inscripto--'No inscripto'

                    when 4 then ta_id_final--'Consumidor Final'

                    when 5 then ta_id_externo--'Extranjero'

                    when 6 then ta_id_final--'Mono Tributo'

                    when 7 then ta_id_externo--'Extranjero Iva'

                    when 8 then ta_id_final--'No responsable'

                    when 9 then ta_id_final--'No Responsable exento'

                    when 10 then ta_id_final--'No categorizado'

                    when 11 then ta_id_inscripto--'Inscripto M'

                    else -1--'Sin categorizar'

                  end
                  into v_ta_id
                from Documento
                where doc_id = p_doc_id;

             end;
             else
             begin
                select prov_catfiscal
                  into v_prov_catfiscal
                from Proveedor
                where prov_id = p_prov_id;

                --2,--   Factura de Compra
                --8,--   Nota de Credito Compra
                --10--   Nota de Debito Compra
                select case v_prov_catfiscal
                     when 1 then ta_id_inscripto--'Inscripto'

                     when 2 then ta_id_final--'Exento'

                     when 3 then ta_id_final--'No inscripto'

                     when 4 then ta_id_final--'Consumidor Final'

                     when 5 then ta_id_externo--'Extranjero'

                     when 6 then ta_id_final--'Mono Tributo'

                     when 7 then ta_id_externo--'Extranjero Iva'

                     when 8 then ta_id_final--'No responsable'

                     when 9 then ta_id_final--'No Responsable exento'

                     when 10 then ta_id_final--'No categorizado'

                     when 11 then ta_id_inscriptom--'Inscripto M'

                     else -1--'Sin categorizar'

                  end
                  into v_ta_id
                from Documento
                where doc_id = p_doc_id;

             end;
             end if;

          end;
          end if;

          if coalesce(v_ta_id, 0) = 0 then
              begin
                 p_ta_Mascara := '';

                 p_ta_Propuesto := 0;

                 p_ta_tipo := 0;

                 p_ta_id := null;

              end;
          else
              begin
                 select ta_mascara,
                        ta_tipo,
                        ta_tipo
                   into p_ta_Mascara,
                        p_ta_Propuesto,
                        p_ta_tipo
                 from Talonario
                 where ta_id = v_ta_id;

                 if coalesce(p_ta_Propuesto, 0) <> 1 then
                    p_ta_Propuesto := 0;

                 else
                    p_ta_Propuesto := 1;

                 end if;

                 p_ta_Mascara := coalesce(p_ta_Mascara, '');

                 p_ta_id := v_ta_id;

              end;
          end if;

       end;
   end if;

end;
$function$;

CREATE OR REPLACE FUNCTION public.sp_talonario_set(p_ta_id integer, p_ta_numero character varying)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
declare
  v_numero integer;
  v_c varchar(1);
  v_n smallint;
  v_ultimoNumero integer;
begin
   
      v_n := length(p_ta_numero);

      v_c := substr(p_ta_numero, v_n, 1);

      while instr('1234567890', v_c) <> 0
      loop
        v_n := v_n - 1;

        if v_n <= 0 then
           exit;
        end if;

        v_c := substr(p_ta_numero, v_n, 1);
      end loop;

      v_n := v_n + 1;

      v_numero := to_number(substr(p_ta_numero, v_n, length(p_ta_numero)));

      select ta_ultimoNro
        into v_ultimoNumero
      from Talonario
      where ta_id = p_ta_id;

      if v_ultimoNumero < v_numero then

         update Talonario
            set ta_ultimoNro = v_numero
         where ta_id = p_ta_id;

      end if;

end;
$function$;

CREATE OR REPLACE FUNCTION public.table_exists(table_name character varying)
 RETURNS boolean
 LANGUAGE plpgsql
AS $function$
declare

begin

   -- check the table exist in database and is visible
   --
   perform n.nspname , c.relname
   from pg_catalog.pg_class c
   left join pg_catalog.pg_namespace n
     on n.oid = c.relnamespace
   where n.nspname like 'pg_temp_%' and pg_catalog.pg_table_is_visible(c.oid)
     and upper(relname) = upper(table_name);

   if found then
      return true;
   else
      return false;
   end if;

end;
$function$;

CREATE OR REPLACE FUNCTION public.test(i integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
declare
v_code int;
v_error varchar;
begin

v_code := 1/0;

return v_code;

exception 
when others then 

          v_error := sqlstate;
          raise notice 'error %', substring(v_error, 1, 2);
          raise notice 'caught usr exception % %', sqlstate, sqlerrm;

end;
$function$;

CREATE OR REPLACE FUNCTION public.test_o(fail integer)
 RETURNS SETOF void
 LANGUAGE plpgsql
AS $function$
declare
   v_sys_error varchar := '';
   v_sys_error_msg varchar := '';  
begin

            begin

                    set transaction read write;

                    delete from hoja where hoja_id = -101;

                    insert into hoja(hoja_id, id, ram_id, arb_id, modifico) values(-101, 1, 34949,200,1);

                    select * from test_oo(1);

                    delete from hoja where hoja_id = -101;

                    --delete from facturacompra where fc_id = 101;

            exception
              when others then
                          v_sys_error := sqlstate;
                          v_sys_error_msg := sqlerrm;          
            end;

            if v_sys_error <> '' then
              raise exception 'error in test_o: %. %.', v_sys_error, v_sys_error_msg;
            end if;

end;
$function$;

CREATE OR REPLACE FUNCTION public.test_oo(fail integer)
 RETURNS SETOF void
 LANGUAGE plpgsql
AS $function$
declare
   v_sys_error varchar := '';
   v_sys_error_msg varchar := '';  
begin
          begin
                    set transaction read write;

                    delete from hoja where hoja_id = -102;

                    insert into hoja(hoja_id, id, ram_id, arb_id, modifico) values(-102, 1, 34949,200,1);

                    delete from hoja where hoja_id = -102;

                    --delete from facturacompra where fc_id = 101;

                    raise notice 'hola';

                    raise exception 'test_o2 test error';

                    raise notice 'chau';

          exception
          
              when others then
                          v_sys_error := sqlstate;
                          v_sys_error_msg := sqlerrm;          
                          raise exception 'error in test_o2: %. %.', v_sys_error, v_sys_error_msg;
            end;

            if v_sys_error <> '' then
              exit;
            end if;

          return;                    

end;
$function$;

CREATE OR REPLACE FUNCTION public.test_to_char()
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
declare
  v_i decimal(18,6) := 10252015489.89;
begin

  --return v_i::varchar;
  return trim(to_char(v_i, '999G999G999G990D00'));

end;
$function$;

CREATE OR REPLACE FUNCTION public.testa(id integer, OUT newid integer, OUT rtn refcursor)
 RETURNS SETOF record
 LANGUAGE plpgsql
AS $function$
begin

          select * from testb(id) into newId;
          rtn := 'rtna';
          open rtn for select * from rol;

end;
$function$;

CREATE OR REPLACE FUNCTION public.testb(id integer, OUT newid integer, OUT rtn refcursor)
 RETURNS SETOF record
 LANGUAGE plpgsql
AS $function$
begin

          newId := 2;
          rtn := 'rtnb';
          open rtn for select * from usuario;

end;
$function$;

CREATE OR REPLACE FUNCTION public.testc(id integer)
 RETURNS SETOF row_result
 LANGUAGE plpgsql
AS $function$
declare
  rtn row_result;
  rtn2 row_result;
  rtn3 row_result;
  v_smi smallint := 0;
begin

loop

          rtn.type := 'resultset';
          open rtn.r for select 'C' union select 'C22';
          RETURN NEXT rtn;

          begin

                    rtn2.type := 'resultset';
                    rtn2.message := 'rtn2';
                    open rtn2.r for select 'C2';
                    RETURN NEXT rtn2;

                    exit;
                    
            
          end;

          rtn3.type := 'resultset';
          open rtn3.r for select 'C222';
          RETURN NEXT rtn3;
          
      exit;    
end loop;          

return;

end;
$function$;

CREATE OR REPLACE FUNCTION public.testd(id integer)
 RETURNS SETOF row_result
 LANGUAGE plpgsql
AS $function$
declare
  rtn row_result;
  rsid row_result;
  newId integer;
  my_row_var row_result;
  v_sys_error varchar := '';
  v_error_msg varchar := '';
  v_us_nombre varchar;
begin

          FOR my_row_var IN
              SELECT * FROM testc(1)
          LOOP
                    RETURN NEXT my_row_var;
          END LOOP;

          select us_nombre into v_us_nombre from usuario where us_id = -65;

          raise notice 'v_us_nombre %', v_us_nombre;

          newId:= 1;

          begin

                    newId := 1/0;

          exception
             when others then
                    v_sys_error := sqlstate;
                    v_error_msg := SQLERRM;
                    raise notice 'sqlcode %', sqlstate;
          end;

          
          raise notice 'v_sys_error % %', v_sys_error, v_error_msg;

          return query select * from result_success();
          return query select * from result_error('test error');
          return;
          
          rtn.type := 'resultset';
          open rtn.r for select 'D';
          RETURN NEXT rtn;

          rsid.type := 'fc_id';
          rsid.id := newId;
          RETURN NEXT rsid;

          

end;
$function$;

CREATE OR REPLACE FUNCTION public.teste(fail integer)
 RETURNS SETOF void
 LANGUAGE plpgsql
AS $function$
begin


          set transaction read write;

          delete from hoja where hoja_id = -101;

          insert into hoja(hoja_id, id, ram_id, arb_id, modifico) values(-101, 1, 34949,200,1);
          

          if fail <> 0 then
                    raise exception 'error';
          end if;
          

end;
$function$;


